import java.awt.datatransfer.Clipboard;
import net.runelite.api.events.MenuEntryAdded;
import java.io.OutputStream;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import net.runelite.api.events.PlayerMenuOptionsChanged;
import net.runelite.api.events.InteractingChanged;
import net.runelite.api.RuneLiteObject;
import net.runelite.api.worldmap.MapElementConfig;
import net.runelite.api.Point;
import net.runelite.api.FriendsChatManager;
import net.runelite.api.IterableHashTable;
import net.runelite.api.Rasterizer;
import net.runelite.api.CollisionData;
import net.runelite.api.coords.WorldPoint;
import java.awt.Container;
import net.runelite.api.Constants;
import net.runelite.api.RenderOverview;
import net.runelite.api.Preferences;
import net.runelite.api.NameableContainer;
import net.runelite.api.InventoryID;
import net.runelite.api.FriendContainer;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.Animation;
import net.runelite.api.dbtable.DBRowConfig;
import net.runelite.api.Deque;
import net.runelite.api.HashTable;
import net.runelite.api.Prayer;
import net.runelite.api.NodeCache;
import net.runelite.api.vars.AccountType;
import java.util.regex.Matcher;
import net.runelite.api.events.ScriptCallbackEvent;
import java.util.regex.Pattern;
import net.runelite.api.events.ScriptPostFired;
import net.runelite.api.events.ScriptPreFired;
import java.io.Reader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.io.FileInputStream;
import net.runelite.api.BufferProvider;
import net.runelite.api.WorldType;
import java.util.EnumSet;
import net.runelite.api.events.ChatMessage;
import net.runelite.api.MessageNode;
import net.runelite.api.ChatMessageType;
import net.runelite.api.events.PlayerSpawned;
import net.runelite.api.events.PlayerDespawned;
import java.util.Collections;
import net.runelite.api.widgets.WidgetItem;
import java.awt.Rectangle;
import net.runelite.api.events.VarbitChanged;
import net.runelite.api.events.CanvasSizeChanged;
import net.runelite.api.events.FriendsChatChanged;
import net.runelite.api.events.WidgetClosed;
import net.runelite.api.events.WidgetLoaded;
import net.runelite.api.clan.ClanRank;
import net.runelite.api.events.BeforeMenuRender;
import net.runelite.api.events.NpcSpawned;
import net.runelite.api.events.ResizeableChanged;
import net.runelite.api.events.ClientTick;
import net.runelite.api.events.PostMenuSort;
import net.runelite.api.events.MenuOpened;
import java.net.Socket;
import net.runelite.api.events.DraggingWidgetChanged;
import net.runelite.api.events.AnimationChanged;
import net.runelite.api.events.ClanChannelChanged;
import java.util.Iterator;
import net.runelite.api.events.GrandExchangeOfferChanged;
import net.runelite.api.events.WorldChanged;
import net.runelite.api.Perspective;
import net.runelite.api.events.AreaSoundEffectPlayed;
import net.runelite.api.events.SoundEffectPlayed;
import net.runelite.api.events.AccountHashChanged;
import java.applet.Applet;
import net.runelite.api.IndexDataBase;
import net.runelite.api.events.MenuShouldLeftClick;
import net.runelite.api.events.StatChanged;
import net.runelite.api.Skill;
import com.google.common.primitives.Doubles;
import net.runelite.api.events.ItemSpawned;
import net.runelite.api.GameState;
import net.runelite.api.events.GameStateChanged;
import net.runelite.api.events.UsernameChanged;
import net.runelite.api.events.ItemContainerChanged;
import net.runelite.api.widgets.WidgetInfo;
import java.util.Arrays;
import net.runelite.api.ModelData;
import java.util.function.Consumer;
import net.runelite.api.MenuEntry;
import java.io.IOException;
import java.net.URL;
import net.runelite.api.MenuAction;
import java.io.RandomAccessFile;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import net.runelite.api.hooks.DrawCallbacks;
import net.runelite.api.hooks.Callbacks;
import java.util.HashMap;
import java.util.Properties;
import java.util.Map;
import net.runelite.api.TileFunction;
import java.io.File;
import org.slf4j.Logger;
import java.awt.Dimension;
import java.util.concurrent.Future;
import com.jagex.oldscape.pub.OtlTokenRequester;
import javax.inject.Named;
import javax.inject.Inject;
import java.util.List;
import com.jagex.oldscape.pub.OAuthApi;

// 
// Decompiled by Procyon v0.5.36
// 

public final class Client extends GameEngine implements Usernamed, OAuthApi, net.runelite.api.Client
{
    static int destinationY;
    static int field355;
    static int worldProperties;
    public static Actor jd;
    public static boolean uf;
    static int gameBuild;
    static StudioGame field358;
    public static int kx;
    public static boolean isMembersWorld;
    static boolean isLowDetail;
    public static boolean di;
    static int param21;
    static int clientType;
    static int field363;
    static String field364;
    static int param25;
    public static TileItem bl;
    static int gameState;
    static boolean isLoading;
    static AttackOption playerAttackOption;
    static long mouseLastLastPressedTimeMillis;
    static int lastMouseRecordX;
    public static List zn;
    public static boolean wj;
    static int lastMouseRecordY;
    static int oculusOrbState;
    static boolean hadFocus;
    static int soundEffectCount;
    static int hintArrowType;
    static int hintArrowNpcIndex;
    static int hintArrowPlayerIndex;
    static Widget clickedWidget;
    static int hintArrowY;
    static GrandExchangeOfferOwnWorldComparator GrandExchangeEvents_worldComparator;
    static int changedVarpCount;
    static int mouseCrossX;
    static Timer timer;
    static AttackOption npcAttackOption;
    public static boolean fl;
    static boolean renderSelf;
    static int titleLoadingStage;
    static int js5ConnectState;
    static int js5Cycles;
    public static volatile int hz;
    static int js5Errors;
    class18 field410;
    public static boolean eh;
    static int field391;
    static int field392;
    static int field393;
    static class135 field394;
    static class493 field395;
    @Inject
    @Named("insecureWriteCredentials")
    public boolean xe;
    String field396;
    static int field397;
    static int field398;
    OtlTokenRequester field399;
    Future field400;
    boolean field401;
    public static boolean jj;
    static int[][] tileLastDrawnActor;
    public static double xq;
    static byte[] randomDatData;
    Future field404;
    public static int tk;
    public static Dimension zu;
    static final String field405;
    static Widget clickedWidgetParent;
    static boolean Login_isUsernameRemembered;
    static SecureRandomFuture secureRandomFuture;
    public long iz;
    Buffer field409;
    class18 field390;
    long accountHash;
    static int rebootTimer;
    static NPC[] npcs;
    static int hintArrowHeight;
    static int[] npcIndices;
    public static int ij;
    static int field416;
    static int[] field417;
    static NodeDeque projectiles;
    com$jagex$oldscape$pub$RefreshAccessTokenRequester field419;
    static boolean hadNetworkError;
    public static int rz;
    class7 field421;
    static int viewportOffsetX;
    static int[] queuedSoundEffectDelays;
    static int[] field424;
    public static Object fz;
    static int field425;
    static int field426;
    static int field427;
    static CollisionMap[] collisionMaps;
    static boolean onMobile;
    static int[][][] instanceChunkTemplates;
    public static double bx;
    static final int[] field431;
    static int field432;
    static int field433;
    static int[] overheadTextCyclesRemaining;
    static int field435;
    static int field436;
    static boolean field437;
    public static double gg;
    static int alternativeScrollbarWidth;
    static int viewportTempY;
    static short field440;
    public static boolean wv;
    static NodeDeque pendingSpawns;
    static int camAngleDX;
    static int field443;
    public static int field444;
    static int tradeChatMode;
    public static int worldId;
    static int mouseCamClickedX;
    static String[] menuTargets;
    static int viewportZoom;
    static int oculusOrbNormalSpeed;
    static int field451;
    public static boolean yo;
    static int[] cameraShakeCycle;
    static boolean oculusOrbOnLocalPlayer;
    static int[] overheadTextColors;
    static boolean[] playerOptionsPriorities;
    static int field456;
    static int overheadTextCount;
    static int overheadTextLimit;
    static int[] overheadTextXs;
    public boolean fd;
    static int[] overheadTextYs;
    static int[] overheadTextAscents;
    static int camAngleX;
    static int field463;
    public static Logger nw;
    static int[] overheadTextEffects;
    static final int[] playerMenuOpcodes;
    public static int kd;
    static String[] overheadText;
    static int selectedSpellItemId;
    public EvictingDualNodeHashTable xq;
    static int viewportDrawCount;
    static int cycle;
    static int[] queuedSoundEffectLoops;
    static boolean lockMouseRecorder;
    public static double bz;
    static long lastMouseRecordTime;
    static int mouseCrossState;
    static int mouseCrossColor;
    static int[] overheadTextXOffsets;
    public static final rl3[] ix;
    static int field476;
    static boolean showLoadingMessages;
    static Player[] players;
    static int drawPlayerNames;
    static int isMembers;
    static long playerUUID;
    static boolean field482;
    public static int dg;
    static PlatformInfoProvider platformInfoProvider;
    public File ru;
    static int field484;
    static int[] field485;
    static int packetIndicator;
    static int[] mapIconXs;
    static short field488;
    static int field489;
    static int combatTargetPlayerIndex;
    public static int xh;
    static NodeDeque[][][] groundItems;
    public static int[] vz;
    public static int bg;
    public static Dimension il;
    static int runEnergy;
    static int chatEffects;
    static NodeDeque graphicsObjects;
    static int field495;
    static int[] levels;
    static int[] experience;
    static boolean leftClickOpensMenu;
    static int[] field499;
    static int menuOptionsCount;
    static int[] menuArguments1;
    static int[] menuArguments2;
    static int[] menuOpcodes;
    static int[] menuIdentifiers;
    static int[] menuItemIds;
    public static TileFunction jc;
    static String[] menuActions;
    static int[] rootWidgetWidths;
    static boolean[] menuShiftClick;
    static boolean followerOpsLowPriority;
    static boolean tapToDrop;
    public static boolean lf;
    static boolean showMouseOverText;
    static int viewportX;
    public static Script od;
    public static int io;
    static int viewportY;
    public static byte ht;
    static int field514;
    static int field515;
    public static int xi;
    public static NodeDeque hk;
    static int isItemSelected;
    static int currentTrackGroupId;
    static boolean isSpellSelected;
    static boolean[] field519;
    static int minimapState;
    public static int wd;
    public static boolean aw;
    public static SceneTileModel[] zz;
    public static int[] gi;
    static int hintArrowX;
    static String field522;
    static int rootInterface;
    static NodeHashTable interfaceParents;
    static int selectedSpellChildIndex;
    static int field526;
    static int field527;
    static Widget meslayerContinueWidget;
    class14 field529;
    static String field530;
    static int localPlayerIndex;
    static int followerIndex;
    static boolean playerMod;
    static Widget viewportWidget;
    static class455 field535;
    static boolean isMenuOpen;
    static int widgetClickX;
    static int widgetClickY;
    static Widget draggedOnWidget;
    static boolean field540;
    public static ScriptEvent hl;
    static boolean field541;
    static int field542;
    static int mouseCrossY;
    static int field544;
    static int field545;
    public static int uw;
    static ClanChannel[] currentClanChannels;
    static int cycleCntr;
    static int mouseCamClickedY;
    public static int staffModLevel;
    public static double cm;
    static int weight;
    static int changedItemContainersCount;
    public static boolean zz;
    static int[] changedSkills;
    static int changedSkillsCount;
    static int[] field554;
    static int field555;
    static boolean isInInstance;
    static int field557;
    public static rl3[] qi;
    public static long ah;
    static int field558;
    public static final Map qp;
    static int field559;
    static int field560;
    static int[] field561;
    static short field562;
    public static int cv;
    public static SpritePixels id;
    public static int dn;
    public static boolean fw;
    static boolean showMouseCross;
    static int mouseWheelRotation;
    static class506 field565;
    public static List yj;
    static NodeDeque scriptEvents;
    public static int bi;
    static NodeDeque field567;
    public static final Archive[] az;
    static NodeDeque field568;
    static NodeDeque field569;
    static NodeHashTable widgetFlags;
    static int camAngleDY;
    static int hintArrowSubY;
    static boolean[] field573;
    static boolean[] field574;
    public static int[] ux;
    static int viewportTempX;
    static int[] rootWidgetXs;
    static int[] rootWidgetYs;
    static int oculusOrbSlowedSpeed;
    static int[] rootWidgetHeights;
    public static byte[][] zs;
    public static boolean dl;
    static int gameDrawingMode;
    static long field581;
    static boolean isResizable;
    public static int[] yq;
    public Properties yb;
    static int[] field583;
    public static List sq;
    static int publicChatMode;
    public static int hc;
    static HashMap fontsMap;
    static String field586;
    static int[] changedItemContainers;
    public boolean yu;
    static int field588;
    public static int[][][] gd;
    public static class207 keyHandlerInstance;
    static class205 field590;
    static boolean isDraggingWidget;
    static int[] field592;
    static int field593;
    public static int wk;
    public static int[] uy;
    static long timeOfPreviousKeyPress;
    static final String hg = "JX_CHARACTER_ID";
    public static int[] zk;
    static int field595;
    static int field596;
    static int mapIconCount;
    public int wa;
    static boolean field598;
    static int[] mapIconYs;
    static SpritePixels[] mapIcons;
    static int destinationX;
    static String[] playerMenuActions;
    static int npcCount;
    static class454 field604;
    static boolean playingJingle;
    public static SpritePixels as;
    static int[] changedVarps;
    static int[] soundEffectIds;
    static class398 archive5;
    @Inject
    public Callbacks wu;
    static int[] currentLevels;
    static int[] soundLocations;
    static SoundEffect[] soundEffects;
    static boolean isCameraLocked;
    public static byte[][] yu;
    static int field613;
    static boolean field614;
    static boolean field615;
    public static boolean tt;
    static ClanSettings[] currentClanSettings;
    static class454 field617;
    static int chatCycle;
    public static rl2 gk;
    public static final PacketWriter packetWriter;
    static boolean[] field620;
    public static Player[] jn;
    static int[] field621;
    static boolean field622;
    static boolean emitPackets;
    public static SpritePixels nv;
    public static boolean xk;
    public static rl2 yn;
    static int camAngleY;
    public static final TileFunction wp;
    public static int ic;
    public static Thread uo;
    static short field625;
    static short field626;
    static int logoutTimer;
    static short zoomWidth;
    static int field629;
    static short field630;
    public static DrawCallbacks rz;
    static int loginState;
    static int hintArrowSubX;
    public static volatile long wl;
    static int viewportWidth;
    static int viewportOffsetY;
    public static boolean wp;
    static int field635;
    public static int td;
    static int viewportHeight;
    static int camFollowHeight;
    static PlayerComposition playerAppearance;
    static int field639;
    static int field640;
    static short zoomHeight;
    static GrandExchangeOffer[] grandExchangeOffers;
    public static int uh;
    static int[] field643;
    static int field644;
    static EvictingDualNodeHashTable Widget_cachedModels;
    static EvictingDualNodeHashTable Widget_cachedFonts;
    static int rootWidgetCount;
    public static int field648;
    static List field649;
    public static int[][] uo;
    static ArrayList archiveLoaders;
    public static boolean uu;
    static int archiveLoadersDone;
    public static int rc;
    static long[] field652;
    public static final Map ym;
    @Inject
    @Named("runeLiteDir")
    public File cd;
    static final ApproximateRouteStrategy field653;
    static int[] field654;
    static int[] field655;
    
    public Client() {
        this.xq = EvictingDualNodeHashTable.nv(16);
        this.jj(2);
        Client.hk = this.if();
        this.wa = 0;
        this.field401 = false;
        this.accountHash = -714003291813872507L;
        this.wc(-1);
    }
    
    static {
        Client.lockMouseRecorder = true;
        Client.worldId = -1381008117;
        Client.worldProperties = 0;
        Client.gameBuild = 0;
        Client.isMembersWorld = false;
        Client.isLowDetail = false;
        Client.param21 = 1581503853;
        Client.clientType = 240023661;
        Client.field363 = -2133726699;
        Client.onMobile = false;
        Client.param25 = 322247329;
        Client.gameState = 0;
        Client.isLoading = true;
        Client.cycle = 0;
        Client.mouseLastLastPressedTimeMillis = 3648848592458615261L;
        Client.lastMouseRecordX = 791348693;
        Client.lastMouseRecordY = -824333519;
        Client.lastMouseRecordTime = -2560228884295272563L;
        Client.hadFocus = true;
        Client.rebootTimer = 0;
        Client.hintArrowType = 0;
        Client.hintArrowNpcIndex = 0;
        Client.hintArrowPlayerIndex = 0;
        Client.hintArrowX = 0;
        Client.hintArrowY = 0;
        Client.hintArrowHeight = 0;
        Client.hintArrowSubX = 0;
        Client.hintArrowSubY = 0;
        Client.playerAttackOption = AttackOption.AttackOption_hidden;
        Client.npcAttackOption = AttackOption.AttackOption_hidden;
        Client.renderSelf = false;
        Client.titleLoadingStage = 0;
        Client.js5ConnectState = 0;
        Client.js5Cycles = 0;
        Client.js5Errors = 0;
        Client.loginState = 0;
        Client.field391 = 0;
        Client.field392 = 0;
        Client.field393 = 0;
        Client.field394 = class135.field1305;
        Client.field395 = class493.field4098;
        field405 = WorldMapSectionType.rsOrdinal(PlayerComposition.method1692("com_jagex_auth_desktop_osrs:public", (byte)(-35)), -1678329446);
        Client.Login_isUsernameRemembered = false;
        Client.secureRandomFuture = new SecureRandomFuture();
        Client.randomDatData = null;
        Client.npcs = new NPC[65536];
        Client.npcCount = 0;
        Client.npcIndices = new int[65536];
        Client.field416 = 0;
        Client.field417 = new int[250];
        packetWriter = new PacketWriter();
        Client.logoutTimer = 0;
        Client.hadNetworkError = false;
        Client.timer = new Timer();
        Client.fontsMap = new HashMap();
        Client.field427 = 0;
        Client.field593 = -1903772507;
        Client.field425 = 0;
        Client.field426 = -1711800473;
        Client.field489 = 0;
        Client.collisionMaps = new CollisionMap[4];
        Client.isInInstance = false;
        Client.instanceChunkTemplates = new int[4][13][13];
        field431 = new int[] { 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3 };
        Client.field432 = 0;
        Client.field443 = 914788991;
        Client.field451 = -384526119;
        Client.field435 = -33923405;
        Client.field436 = -2102998740;
        Client.field437 = false;
        Client.alternativeScrollbarWidth = 0;
        Client.camAngleX = 64984960;
        Client.camAngleY = 0;
        Client.camAngleDY = 0;
        Client.camAngleDX = 0;
        Client.mouseCamClickedX = 0;
        Client.mouseCamClickedY = 0;
        Client.oculusOrbState = 0;
        Client.camFollowHeight = -666725754;
        Client.field644 = 0;
        Client.field595 = 0;
        Client.field398 = 0;
        Client.oculusOrbNormalSpeed = 682934636;
        Client.oculusOrbSlowedSpeed = -793681942;
        Client.field444 = 0;
        Client.oculusOrbOnLocalPlayer = false;
        Client.packetIndicator = 0;
        Client.emitPackets = false;
        Client.field456 = 0;
        Client.overheadTextCount = 0;
        Client.overheadTextLimit = -763960690;
        Client.overheadTextXs = new int[Client.overheadTextLimit * 1025553311];
        Client.overheadTextYs = new int[Client.overheadTextLimit * 1025553311];
        Client.overheadTextAscents = new int[1025553311 * Client.overheadTextLimit];
        Client.overheadTextXOffsets = new int[1025553311 * Client.overheadTextLimit];
        Client.overheadTextColors = new int[1025553311 * Client.overheadTextLimit];
        Client.overheadTextEffects = new int[Client.overheadTextLimit * 1025553311];
        Client.overheadTextCyclesRemaining = new int[1025553311 * Client.overheadTextLimit];
        Client.overheadText = new String[Client.overheadTextLimit * 1025553311];
        Client.tileLastDrawnActor = new int[104][104];
        Client.viewportDrawCount = 0;
        Client.viewportTempX = 846498395;
        Client.viewportTempY = 1610031701;
        Client.mouseCrossX = 0;
        Client.mouseCrossY = 0;
        Client.mouseCrossState = 0;
        Client.mouseCrossColor = 0;
        Client.showMouseCross = true;
        Client.field476 = 0;
        Client.showLoadingMessages = true;
        Client.players = new Player[2048];
        Client.localPlayerIndex = -255869677;
        Client.isMembers = 0;
        Client.playerUUID = -1369385558963036297L;
        Client.field482 = true;
        Client.drawPlayerNames = 0;
        Client.field484 = 0;
        Client.field485 = new int[1000];
        playerMenuOpcodes = new int[] { 44, 45, 46, 47, 48, 49, 50, 51 };
        Client.playerMenuActions = new String[8];
        Client.playerOptionsPriorities = new boolean[8];
        Client.field561 = new int[] { 768, 1024, 1280, 512, 1536, 256, 0, 1792 };
        Client.combatTargetPlayerIndex = -1035820595;
        Client.groundItems = new NodeDeque[4][104][104];
        Client.pendingSpawns = new NodeDeque();
        Client.projectiles = new NodeDeque();
        Client.graphicsObjects = new NodeDeque();
        Client.currentLevels = new int[25];
        Client.levels = new int[25];
        Client.experience = new int[25];
        Client.leftClickOpensMenu = false;
        Client.isMenuOpen = false;
        Client.menuOptionsCount = 0;
        Client.menuArguments1 = new int[500];
        Client.menuArguments2 = new int[500];
        Client.menuOpcodes = new int[500];
        Client.menuIdentifiers = new int[500];
        Client.menuItemIds = new int[500];
        Client.menuActions = new String[500];
        Client.menuTargets = new String[500];
        Client.menuShiftClick = new boolean[500];
        Client.followerOpsLowPriority = false;
        Client.tapToDrop = false;
        Client.showMouseOverText = true;
        Client.viewportX = -563689483;
        Client.viewportY = -2111961447;
        Client.field514 = 0;
        Client.field515 = -315612066;
        Client.isItemSelected = 0;
        Client.field364 = null;
        Client.isSpellSelected = false;
        Client.selectedSpellChildIndex = 1204907975;
        Client.selectedSpellItemId = -35668549;
        Client.field530 = null;
        Client.field522 = null;
        Client.rootInterface = 32945189;
        Client.interfaceParents = new NodeHashTable(8);
        Client.field463 = 0;
        Client.field526 = 757532791;
        Client.chatEffects = 0;
        Client.meslayerContinueWidget = null;
        Client.runEnergy = 0;
        Client.weight = 0;
        Client.staffModLevel = 0;
        Client.followerIndex = 1296642255;
        Client.playerMod = false;
        Client.viewportWidget = null;
        Client.clickedWidget = null;
        Client.clickedWidgetParent = null;
        Client.widgetClickX = 0;
        Client.widgetClickY = 0;
        Client.draggedOnWidget = null;
        Client.field540 = false;
        Client.field495 = 1150287901;
        Client.field542 = -68006725;
        Client.field622 = false;
        Client.field544 = -463567197;
        Client.field545 = -551918419;
        Client.isDraggingWidget = false;
        Client.cycleCntr = -1340429835;
        Client.changedVarps = new int[32];
        Client.changedVarpCount = 0;
        Client.changedItemContainers = new int[32];
        Client.changedItemContainersCount = 0;
        Client.changedSkills = new int[32];
        Client.changedSkillsCount = 0;
        Client.field554 = new int[32];
        Client.field555 = 0;
        Client.chatCycle = 0;
        Client.field557 = 0;
        Client.field558 = 0;
        Client.field559 = 0;
        Client.field560 = 0;
        Client.field629 = 0;
        Client.field635 = 0;
        Client.field433 = 0;
        Client.mouseWheelRotation = 0;
        Client.field565 = new class506();
        Client.scriptEvents = new NodeDeque();
        Client.field567 = new NodeDeque();
        Client.field568 = new NodeDeque();
        Client.field569 = new NodeDeque();
        Client.widgetFlags = new NodeHashTable(512);
        Client.rootWidgetCount = 0;
        Client.field527 = -769599022;
        Client.field573 = new boolean[100];
        Client.field574 = new boolean[100];
        Client.field519 = new boolean[100];
        Client.rootWidgetXs = new int[100];
        Client.rootWidgetYs = new int[100];
        Client.rootWidgetWidths = new int[100];
        Client.rootWidgetHeights = new int[100];
        Client.gameDrawingMode = 0;
        Client.field581 = 0L;
        Client.isResizable = true;
        Client.field583 = new int[] { 16776960, 16711680, 65280, 65535, 16711935, 16777215 };
        Client.publicChatMode = 0;
        Client.tradeChatMode = 0;
        Client.field586 = "";
        Client.field652 = new long[100];
        Client.field588 = 0;
        Client.keyHandlerInstance = new class207();
        Client.field590 = new class205();
        Client.field355 = 0;
        Client.field592 = new int[128];
        Client.field424 = new int[128];
        Client.timeOfPreviousKeyPress = -4061967902176514943L;
        Client.currentClanSettings = new ClanSettings[4];
        Client.currentClanChannels = new ClanChannel[4];
        Client.field596 = 1715437485;
        Client.mapIconCount = 0;
        Client.mapIconXs = new int[1000];
        Client.mapIconYs = new int[1000];
        Client.mapIcons = new SpritePixels[1000];
        Client.destinationX = 0;
        Client.destinationY = 0;
        Client.minimapState = 0;
        Client.currentTrackGroupId = -1225072817;
        Client.playingJingle = false;
        Client.soundEffectCount = 0;
        Client.soundEffectIds = new int[50];
        Client.queuedSoundEffectLoops = new int[50];
        Client.queuedSoundEffectDelays = new int[50];
        Client.soundLocations = new int[50];
        Client.soundEffects = new SoundEffect[50];
        Client.isCameraLocked = false;
        Client.field541 = false;
        Client.field614 = false;
        Client.field615 = false;
        Client.field535 = null;
        Client.field617 = null;
        Client.field604 = null;
        Client.field598 = false;
        Client.field620 = new boolean[5];
        Client.field621 = new int[5];
        Client.field643 = new int[5];
        Client.field499 = new int[5];
        Client.cameraShakeCycle = new int[5];
        Client.field625 = 256;
        Client.field626 = 205;
        Client.zoomHeight = 256;
        Client.zoomWidth = 320;
        Client.field440 = 1;
        Client.field630 = 32767;
        Client.field488 = 1;
        Client.field562 = 32767;
        Client.viewportOffsetX = 0;
        Client.viewportOffsetY = 0;
        Client.viewportWidth = 0;
        Client.viewportHeight = 0;
        Client.viewportZoom = 0;
        Client.playerAppearance = new PlayerComposition();
        Client.field639 = 962307691;
        Client.field640 = 929779017;
        Client.platformInfoProvider = new DesktopPlatformInfoProvider();
        Client.grandExchangeOffers = new GrandExchangeOffer[8];
        Client.GrandExchangeEvents_worldComparator = new GrandExchangeOfferOwnWorldComparator();
        Client.archive5 = new class398(8, class396.field3689);
        Client.Widget_cachedModels = new EvictingDualNodeHashTable(64);
        Client.Widget_cachedFonts = new EvictingDualNodeHashTable(64);
        Client.field613 = -978308099;
        Client.field648 = -595673725;
        Client.field649 = new ArrayList();
        Client.archiveLoaders = new ArrayList(10);
        Client.archiveLoadersDone = 0;
        Client.field397 = 0;
        field653 = new ApproximateRouteStrategy();
        Client.field654 = new int[50];
        Client.field655 = new int[50];
        Client.zz = false;
        Client.aw = false;
        Client.eh = false;
        Client.cm = 0.39269908169872414;
        Client.kd = 15000;
        Client.wl = System.nanoTime();
        Client.qi = new rl3[500];
        Client.tk = -1;
        ix = new rl3[500];
        Client.zz = new SceneTileModel[52];
        Client.cv = (238 + (int)(Math.random() * 20.0) - 10 << 16) + (238 + (int)(Math.random() * 20.0) - 10 << 8) + (238 + (int)(Math.random() * 20.0) - 10);
        Client.xi = 238 + (int)(Math.random() * 20.0) - 10 << 16;
        Client.xq = 4.0;
        wp = Client::eb;
        Client.jc = Client.wp;
        for (int i = 0; i < Client.zz.length; ++i) {
            Client.zz[i] = za(i >> 2, i & 0x3, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0);
        }
        Client.nw = LoggerFactory.getLogger("client-patch");
        Client.jn = new Player[2048];
        az = new Archive[21];
        Client.zn = new ArrayList();
        Client.fz = new Object();
        ym = new HashMap();
        qp = new HashMap();
        VarbitComposition.VarbitDefinition_cached.dd(256);
        Client.yq = new int[4000];
        Client.sq = new ArrayList();
        Client.yj = new ArrayList();
    }
    
    @Override
    public final void fp() {
        if (!this.ae(-1541021323)) {
            return;
        }
        for (int i = 0; i <= 28; ++i) {
            final String parameter = this.getParameter(Integer.toString(i));
            if (null != parameter) {
                switch (i) {
                    case 7: {
                        AABB.field2070 = class146.vmethod3254(Integer.parseInt(parameter), -686115415);
                        break;
                    }
                    case 17: {
                        GrandExchangeOffer.field3530 = parameter;
                        break;
                    }
                    case 21: {
                        Client.param21 = Integer.parseInt(parameter) * -30696769;
                        break;
                    }
                    case 6: {
                        ClanSettings.clientLanguage = Language.method1943(Integer.parseInt(parameter), (byte)(-1));
                        break;
                    }
                    case 14: {
                        TriBool.field3738 = Integer.parseInt(parameter) * 931422601;
                        break;
                    }
                    case 4: {
                        if (Client.clientType * -749752677 == -1) {
                            Client.clientType = Integer.parseInt(parameter) * 781847066;
                            break;
                        }
                        break;
                    }
                    case 9: {
                        class108.param9 = parameter;
                        break;
                    }
                    case 12: {
                        Client.worldId = Integer.parseInt(parameter) * -1381008117;
                        break;
                    }
                    case 15: {
                        Client.gameBuild = Integer.parseInt(parameter) * -261185633;
                        break;
                    }
                    case 11: {
                        ViewportMouse.field2213 = parameter;
                        break;
                    }
                    case 3: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            Client.isMembersWorld = true;
                            break;
                        }
                        Client.isMembersWorld = false;
                        break;
                    }
                    case 10: {
                        Client.field358 = (StudioGame)StructComposition.findEnumerated(TaskHandler.getClipMidX(1818118564), Integer.parseInt(parameter), (short)173);
                        if (Client.field358 == StudioGame.oldscape) {
                            class70.loginType = LoginType.oldscape;
                            break;
                        }
                        class70.loginType = LoginType.field3998;
                        break;
                    }
                    case 8: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            break;
                        }
                        break;
                    }
                    case 25: {
                        final int index = parameter.indexOf(".");
                        if (index == -1) {
                            Client.param25 = Integer.parseInt(parameter) * 1092682871;
                            break;
                        }
                        Client.param25 = Integer.parseInt(parameter.substring(0, index)) * 1245603346;
                        Integer.parseInt(parameter.substring(1 + index));
                        break;
                    }
                    case 5: {
                        Client.worldProperties = Integer.parseInt(parameter) * 1294598713;
                        break;
                    }
                }
            }
        }
        Scene.Scene_isLowDetail = false;
        Client.isLowDetail = false;
        UserComparator8.worldHost = this.getCodeBase().getHost();
        final String name = AABB.field2070.name;
        final int n = 0;
        try {
            JagexCache.idxCount = -327637298;
            JagexCache.cacheGamebuild = n * -1990124168;
            try {
                ModeWhere.operatingSystemName = System.getProperty("os.name");
            }
            catch (Exception ex2) {
                ModeWhere.operatingSystemName = "Unknown";
            }
            WorldMapSectionType.formattedOperatingSystemName = ModeWhere.operatingSystemName.toLowerCase();
            try {
                HorizontalAlignment.userHomeDirectory = System.getProperty("user.home");
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex3) {}
            try {
                if (WorldMapSectionType.formattedOperatingSystemName.startsWith("win")) {
                    if (HorizontalAlignment.userHomeDirectory == null) {
                        HorizontalAlignment.userHomeDirectory = ni("USERPROFILE");
                    }
                }
                else if (HorizontalAlignment.userHomeDirectory == null) {
                    HorizontalAlignment.userHomeDirectory = ni("HOME");
                }
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex4) {}
            if (HorizontalAlignment.userHomeDirectory == null) {
                HorizontalAlignment.userHomeDirectory = "~/";
            }
            class130.cacheParentPaths = new String[] { "c:/rscache/", "/rscache/", "c:/windows/", "c:/winnt/", "c:/", HorizontalAlignment.userHomeDirectory, "/tmp/", "" };
            class96.cacheSubPaths = new String[] { ".jagex_cache_" + 509243087 * JagexCache.cacheGamebuild, ".file_store_" + -1325133847 * JagexCache.cacheGamebuild };
            int j = 0;
        Label_0764:
            while (j < 4) {
                class335.cacheDir = ClanSettings.method867("oldschool", name, j, 1062348390);
                if (!class335.cacheDir.exists()) {
                    class335.cacheDir.mkdirs();
                }
                final File[] listFiles = class335.cacheDir.listFiles();
                if (null != listFiles) {
                    final File[] array = listFiles;
                    for (int k = 0; k < array.length; ++k) {
                        final File file = array[k];
                        boolean b;
                        try {
                            final RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
                            final int read = randomAccessFile.read();
                            randomAccessFile.seek(0L);
                            randomAccessFile.write(read);
                            randomAccessFile.seek(0L);
                            randomAccessFile.close();
                            b = true;
                        }
                        catch (Exception ex5) {
                            b = false;
                        }
                        if (!b) {
                            ++j;
                            continue Label_0764;
                        }
                    }
                    break;
                }
                break;
            }
            class513.FileSystem_cacheDir = class335.cacheDir;
            if (!class513.FileSystem_cacheDir.exists()) {
                throw new RuntimeException("");
            }
            FileSystem.FileSystem_hasPermissions = true;
            Tiles.method475((byte)1);
            JagexCache.JagexCache_dat2File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.dat2", -426244941), "rw", 1048576000L), -213689580, 0);
            JagexCache.JagexCache_idx255File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx255", -382807175), "rw", 1048576L), 1388235780, 0);
            class370.JagexCache_idxFiles = new BufferedFile[JagexCache.idxCount * -832426817];
            for (int l = 0; l < 1064766397 * JagexCache.idxCount; ++l) {
                class370.JagexCache_idxFiles[l] = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx" + l, -2125123241), "rw", 1048576L), 804214438, 0);
            }
        }
        catch (Exception ex) {
            class387.RunException_sendStackTrace(null, ex, (byte)8);
        }
        ScriptFrame.client = this;
        RunException.field4178 = Client.clientType * 1056936977;
        ModeWhere.field3571 = ni("JX_ACCESS_TOKEN");
        TileItem.field1079 = ni("JX_REFRESH_TOKEN");
        SpriteMask.field2808 = ni("JX_SESSION_ID");
        class121.field1185 = ni("JX_CHARACTER_ID");
        Login.field749 = class31.method133(ni("JX_DISPLAY_NAME"), 1550881015);
        if (Boolean.parseBoolean(System.getProperty("jagex.disableBouncyCastle"))) {
            this.field401 = true;
        }
        if (-1 == 838232771 * Client.field363) {
            if (ay(this, 1551876683) || this.method369((byte)68)) {
                Client.field363 = 2078698903;
            }
            else {
                Client.field363 = 0;
            }
        }
        this.ak(765, -209313756, 213, 1, (byte)(-81));
    }
    
    public Widget fp(final int n, final int n2) {
        final Widget[][] oh = this.oh();
        if (oh == null || oh.length <= n) {
            return null;
        }
        final Widget[] array = oh[n];
        if (array == null || array.length <= n2) {
            return null;
        }
        return array[n2];
    }
    
    static final void sp(final Actor actor) {
        actor.isWalking = false;
        if (-1 != actor.npcCycle * -796227775) {
            final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(3014173 * actor.npcCycle, (byte)62);
            if (spotAnimationDefinition_get != null) {
                if (!spotAnimationDefinition_get.isCachedModelIdSet(-1154543315) && null != spotAnimationDefinition_get.frameIds) {
                    actor.field975 += 1320121691;
                    if (424813829 * actor.crawlBackSequence < spotAnimationDefinition_get.frameIds.length && actor.field975 * 280794978 > spotAnimationDefinition_get.frameLengths[actor.crawlBackSequence * 424813829]) {
                        actor.field975 = -105665867;
                        actor.crawlBackSequence += 663686471;
                        ZoneOperation.method1599(spotAnimationDefinition_get, actor.crawlBackSequence * -709306053, 1144428983 * actor.walkBackSequence, actor.field1005 * -2080143855, -1566363123);
                    }
                    if (actor.crawlBackSequence * 776315798 >= spotAnimationDefinition_get.frameIds.length) {
                        if (1264461510 * spotAnimationDefinition_get.frameCount > 0) {
                            actor.crawlBackSequence -= spotAnimationDefinition_get.frameCount * -152931979;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange += 1404488991;
                            }
                            if (-514122242 * actor.crawlBackSequence < 0 || 1877726465 * actor.crawlBackSequence >= spotAnimationDefinition_get.frameIds.length || (spotAnimationDefinition_get.field1823 && -463442209 * actor.combatLevelChange >= spotAnimationDefinition_get.iterations * -323823900)) {
                                actor.field975 = 0;
                                actor.crawlBackSequence = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        ZoneOperation.method1599(spotAnimationDefinition_get, 424813829 * actor.crawlBackSequence, actor.walkBackSequence * 783148824, actor.field1005 * -411750205, -1566363123);
                    }
                }
                else if (spotAnimationDefinition_get.isCachedModelIdSet(-1700406608)) {
                    actor.crawlBackSequence += 1348853709;
                    final int method1128 = spotAnimationDefinition_get.method1128(-1601564583);
                    if (424813829 * actor.crawlBackSequence < method1128) {
                        KeyHandler.method108(spotAnimationDefinition_get, actor.crawlBackSequence * 44988466, actor.walkBackSequence * -987992616, -411750205 * actor.field1005, 118941430);
                    }
                    else {
                        if (spotAnimationDefinition_get.frameCount * 822525926 > 0) {
                            actor.crawlBackSequence -= -152931979 * spotAnimationDefinition_get.frameCount;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange -= 2029651542;
                            }
                            if (424813829 * actor.crawlBackSequence < 0 || -1147956225 * actor.crawlBackSequence >= method1128 || (spotAnimationDefinition_get.field1823 && -463442209 * actor.combatLevelChange >= 1646970768 * spotAnimationDefinition_get.iterations)) {
                                actor.crawlBackSequence = 0;
                                actor.field975 = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        KeyHandler.method108(spotAnimationDefinition_get, 424813829 * actor.crawlBackSequence, actor.walkBackSequence * -1008916546, 1924826339 * actor.field1005, 1773230528);
                    }
                }
                else {
                    actor.npcCycle = -327373721;
                }
            }
            else {
                actor.npcCycle = -327373721;
            }
        }
        final IterableNodeHashTableIterator iterableNodeHashTableIterator = new IterableNodeHashTableIterator(Actor.qq(actor, (byte)10));
        for (Graphic graphic = (Graphic)iterableNodeHashTableIterator.method2390(); graphic != null; graphic = (Graphic)iterableNodeHashTableIterator.next()) {
            if (1930265798 * graphic.field4170 != -1) {
                if (1292230388 * Client.cycle >= -1415749665 * graphic.field4171) {
                    final int n = ItemContainer.SpotAnimationDefinition_get(graphic.field4170 * 1546623718, 957089599).sequence * 374130911;
                    if (n == -1) {
                        graphic.hw();
                        actor.runRightSequence -= 1908795818;
                    }
                    else {
                        graphic.field4169 = Math.max(251432696 * graphic.field4169, 0) * -793313949;
                        final SequenceDefinition spotAnimationDefinition_get2 = ItemContainer.SpotAnimationDefinition_get(n, (byte)64);
                        if (null != spotAnimationDefinition_get2.frameIds && !spotAnimationDefinition_get2.isCachedModelIdSet(-1067111415)) {
                            final Graphic graphic2 = graphic;
                            graphic2.field4168 -= 631026956;
                            if (885677411 * graphic.field4169 < spotAnimationDefinition_get2.frameIds.length && graphic.field4168 * 77733639 > spotAnimationDefinition_get2.frameLengths[graphic.field4169 * -136056118]) {
                                graphic.field4168 = 1417617079;
                                final Graphic graphic3 = graphic;
                                graphic3.field4169 += 719762853;
                                ZoneOperation.method1599(spotAnimationDefinition_get2, graphic.field4169 * 1881629010, -2022314394 * actor.walkBackSequence, actor.field1005 * -411750205, -1566363123);
                            }
                            if (-1675766493 * graphic.field4169 >= spotAnimationDefinition_get2.frameIds.length) {
                                graphic.hw();
                                actor.runRightSequence += 194869413;
                            }
                        }
                        else if (spotAnimationDefinition_get2.isCachedModelIdSet(-625932318)) {
                            final Graphic graphic4 = graphic;
                            graphic4.field4169 -= 793313949;
                            if (graphic.field4169 * -1526112668 < spotAnimationDefinition_get2.method1128(-1799474014)) {
                                KeyHandler.method108(spotAnimationDefinition_get2, graphic.field4169 * 971664459, actor.walkBackSequence * 1144428983, actor.field1005 * -1590474546, 1589582492);
                            }
                            else {
                                graphic.hw();
                                actor.runRightSequence += 2088895906;
                            }
                        }
                        else {
                            graphic.hw();
                            actor.runRightSequence += 1706937628;
                        }
                    }
                }
            }
        }
        if (actor.overheadTextCyclesRemaining * 584566390 != -1 && 1253892101 * actor.playerCycle <= 1 && ItemContainer.SpotAnimationDefinition_get(actor.overheadTextCyclesRemaining * 678463275, (byte)52).precedenceAnimating * 833949061 == 1 && -1172310666 * actor.field1003 > 0 && -1859588110 * actor.exactMoveArrive1Cycle <= Client.cycle * -1886224337 && -1274841313 * actor.movementFrame < Client.cycle * -1886224337) {
            actor.playerCycle = -401806131;
            return;
        }
        if (-1372355773 * actor.overheadTextCyclesRemaining != -1 && -1928209020 * actor.playerCycle == 0) {
            final SequenceDefinition spotAnimationDefinition_get3 = ItemContainer.SpotAnimationDefinition_get(-1372355773 * actor.overheadTextCyclesRemaining, (byte)55);
            if (null != spotAnimationDefinition_get3) {
                if (!spotAnimationDefinition_get3.isCachedModelIdSet(-1483085970) && spotAnimationDefinition_get3.frameIds != null) {
                    actor.pathLength += 1512092109;
                    if (actor.currentSequenceFrameIndex * -41215169 < spotAnimationDefinition_get3.frameIds.length && actor.pathLength * 1356757385 > spotAnimationDefinition_get3.frameLengths[-662323886 * actor.currentSequenceFrameIndex]) {
                        actor.pathLength = 672779449;
                        actor.currentSequenceFrameIndex += 285428685;
                        ZoneOperation.method1599(spotAnimationDefinition_get3, -1159667566 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, -466660808 * actor.field1005, -1566363123);
                    }
                    if (actor.currentSequenceFrameIndex * -420792727 >= spotAnimationDefinition_get3.frameIds.length) {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * -823260553;
                        actor.y -= 571674084;
                        if (1186260500 * actor.y >= 1786137655 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = 671133405;
                        }
                        else if (actor.currentSequenceFrameIndex * -14671046 < 0 || 1237888917 * actor.currentSequenceFrameIndex >= spotAnimationDefinition_get3.frameIds.length) {
                            actor.overheadTextCyclesRemaining = 879872896;
                        }
                        else {
                            ZoneOperation.method1599(spotAnimationDefinition_get3, actor.currentSequenceFrameIndex * 580377130, 1144428983 * actor.walkBackSequence, 2019986452 * actor.field1005, -1566363123);
                        }
                    }
                    actor.isWalking = spotAnimationDefinition_get3.stretches;
                }
                else if (spotAnimationDefinition_get3.isCachedModelIdSet(1794920180)) {
                    actor.currentSequenceFrameIndex -= 63286081;
                    final int method1129 = spotAnimationDefinition_get3.method1128(-1994739920);
                    if (actor.currentSequenceFrameIndex * -41215169 < method1129) {
                        KeyHandler.method108(spotAnimationDefinition_get3, 90565977 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, 188223730 * actor.field1005, -160546749);
                    }
                    else {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * -823260553;
                        actor.y -= 512233773;
                        if (actor.y * -92383341 >= 385790074 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                        else if (-41215169 * actor.currentSequenceFrameIndex >= 0 && actor.currentSequenceFrameIndex * 378416057 < method1129) {
                            KeyHandler.method108(spotAnimationDefinition_get3, 927204941 * actor.currentSequenceFrameIndex, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 410361401);
                        }
                        else {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                    }
                }
                else {
                    actor.overheadTextCyclesRemaining = 1690721941;
                }
            }
            else {
                actor.overheadTextCyclesRemaining = -2142417599;
            }
        }
        if (actor.playerCycle * 1253892101 > 0) {
            actor.playerCycle += 1442100;
        }
    }
    
    public static void pc() {
        int i;
        for (i = ScriptFrame.client.vv() - 1; i >= 0; --i) {
            final Client client = ScriptFrame.client;
            if (Client.menuOpcodes[i] == MenuAction.WALK.getId()) {
                break;
            }
        }
        if (i < 0) {
            return;
        }
        for (int j = ScriptFrame.client.vv() - 1; j >= 0; --j) {
            final Client client2 = ScriptFrame.client;
            int n = Client.menuOpcodes[j];
            if (n >= 2000) {
                n -= 2000;
            }
            if (n == MenuAction.PLAYER_FIRST_OPTION.getId() || n == MenuAction.PLAYER_SECOND_OPTION.getId() || n == MenuAction.PLAYER_THIRD_OPTION.getId() || n == MenuAction.PLAYER_FOURTH_OPTION.getId() || n == MenuAction.PLAYER_FIFTH_OPTION.getId() || n == MenuAction.PLAYER_SIXTH_OPTION.getId() || n == MenuAction.PLAYER_SEVENTH_OPTION.getId() || n == MenuAction.PLAYER_EIGHTH_OPTION.getId()) {
                final Client client3 = ScriptFrame.client;
                final int n2 = Client.menuIdentifiers[j];
                final Client client4 = ScriptFrame.client;
                Client.menuIdentifiers[i] = n2 + 1;
                break;
            }
        }
    }
    
    public Buffer pc(final byte[] array) {
        return new Buffer(array);
    }
    
    boolean pc() {
        return null != this.field399;
    }
    
    public SpritePixels cs(final int[] array, final int n, final int n2) {
        return new SpritePixels(array, n, n2);
    }
    
    static final boolean abs(final Widget widget) {
        if (null == widget.cs1Comparisons) {
            return false;
        }
        for (int i = 0; i < widget.cs1Comparisons.length; ++i) {
            final int method478 = ArchiveLoader.method478(widget, i, 1696113134);
            final int n = widget.cs1ComparisonValues[i];
            if (widget.cs1Comparisons[i] == 2) {
                if (method478 >= n) {
                    return false;
                }
            }
            else if (widget.cs1Comparisons[i] == 3) {
                if (method478 <= n) {
                    return false;
                }
            }
            else if (4 == widget.cs1Comparisons[i]) {
                if (method478 == n) {
                    return false;
                }
            }
            else if (n != method478) {
                return false;
            }
        }
        return true;
    }
    
    static WorldMap of() {
        return class126.worldMap;
    }
    
    public boolean sl() {
        return Client.isCameraLocked;
    }
    
    static final void sl() {
        for (int i = 0; i < 265474485 * Client.npcCount; ++i) {
            final NPC npc = Client.npcs[Client.npcIndices[i]];
            if (null != npc) {
                ReflectionCheck.updateActorSequence(npc, 1458410691 * npc.definition.size, (byte)11);
            }
        }
    }
    
    public int sl() {
        return Client.destinationX * 1494100363;
    }
    
    public Username ad(final String s, final LoginType loginType) {
        return new Username(s, loginType);
    }
    
    public IndexedSprite[] ad() {
        return class333.mapSceneSprites;
    }
    
    public int cd() {
        return Client.minimapState * 1383336963;
    }
    
    public ItemComposition vmethod1485(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return HealthBarUpdate.set(n, (byte)36);
    }
    
    @Override
    protected final void vmethod1485(final int n) {
    }
    
    public FloorDecoration vmethod1485() {
        return new FloorDecoration();
    }
    
    public void ae(final int n) {
        Client.hintArrowSubY = n * -464293747;
    }
    
    @Override
    protected final void cb() {
        if (class373.varcs.hasUnwrittenChanges(-1302793492)) {
            class373.varcs.tryWrite(1796745614);
        }
        if (null != UserComparator6.mouseRecorder) {
            UserComparator6.mouseRecorder.isRunning = false;
        }
        UserComparator6.mouseRecorder = null;
        Client.packetWriter.close(-1161512805);
        GraphicsObject.getModel((short)152);
        class123.mouseWheel = null;
        if (class28.pcmPlayer0 != null) {
            class28.pcmPlayer0.shutdown((byte)(-1));
        }
        if (HorizontalAlignment.pcmPlayer1 != null) {
            HorizontalAlignment.pcmPlayer1.shutdown((byte)(-1));
        }
        class295.method1608((byte)0);
        class144.method822(-1305132334);
        if (class14.urlRequester != null) {
            class14.urlRequester.close(-930371764);
            class14.urlRequester = null;
        }
        try {
            JagexCache.JagexCache_dat2File.close(-989640852);
            for (int i = 0; i < JagexCache.idxCount * 1064766397; ++i) {
                class370.JagexCache_idxFiles[i].close(-1083065683);
            }
            JagexCache.JagexCache_idx255File.close(197773052);
            JagexCache.JagexCache_randomDat.close(1745744139);
        }
        catch (Exception ex) {}
        this.field529.method54(1508896041);
    }
    
    static final void sa(final int n, final int n2, final int n3) {
        if (-2100544359 * class36.cameraX < n) {
            class36.cameraX += (2083910077 * KeyHandler.field81 + class138.field1314 * -1514927571 * (n - -2100544359 * class36.cameraX) / 1000) * -1682679895;
            if (-2100544359 * class36.cameraX > n) {
                class36.cameraX = -1682679895 * n;
            }
        }
        if (class36.cameraX * -2100544359 > n) {
            class36.cameraX -= -1682679895 * (KeyHandler.field81 * 2083910077 + class138.field1314 * -1514927571 * (-2100544359 * class36.cameraX - n) / 1000);
            if (-2100544359 * class36.cameraX < n) {
                class36.cameraX = n * -1682679895;
            }
        }
        if (1772923873 * class174.cameraY < n2) {
            class174.cameraY += (2083910077 * KeyHandler.field81 + (n2 - class174.cameraY * 1772923873) * (class138.field1314 * -1514927571) / 1000) * -424093663;
            if (class174.cameraY * 1772923873 > n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (class174.cameraY * 1772923873 > n2) {
            class174.cameraY -= (KeyHandler.field81 * 2083910077 + (1772923873 * class174.cameraY - n2) * (-1514927571 * class138.field1314) / 1000) * -424093663;
            if (1772923873 * class174.cameraY < n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (-91399205 * class297.cameraZ < n3) {
            class297.cameraZ += (-1514927571 * class138.field1314 * (n3 - -91399205 * class297.cameraZ) / 1000 + KeyHandler.field81 * 2083910077) * 46344275;
            if (-91399205 * class297.cameraZ > n3) {
                class297.cameraZ = n3 * 46344275;
            }
        }
        if (-91399205 * class297.cameraZ > n3) {
            class297.cameraZ -= (-1514927571 * class138.field1314 * (class297.cameraZ * -91399205 - n3) / 1000 + 2083910077 * KeyHandler.field81) * 46344275;
            if (-91399205 * class297.cameraZ < n3) {
                class297.cameraZ = 46344275 * n3;
            }
        }
    }
    
    static final int uc() {
        if (class20.clientPreferences.getRoofsHidden(-2087538906)) {
            return -475624437 * GameEngine.Client_plane;
        }
        int n = 3;
        if (WorldMapSectionType.cameraPitch * 1695572905 < 1205633130) {
            int i;
            int n2;
            if (986256295 * Client.oculusOrbState == 1) {
                i = -1958669353 * class33.oculusOrbFocalPointX >> 7;
                n2 = -365969735 * class144.oculusOrbFocalPointY >> 7;
            }
            else {
                i = 1144428983 * MusicPatchNode.localPlayer.br >> 7;
                n2 = MusicPatchNode.localPlayer.ep * -411750205 >> 7;
            }
            int n3 = -2143354923 * class36.cameraX >> 7;
            int j = class297.cameraZ * -91399205 >> 7;
            if (n3 < 0 || j < 0 || n3 >= 104 || j >= 1838467954) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (i < 0 || n2 < 0 || i >= 104 || n2 >= 104) {
                return -282009358 * GameEngine.Client_plane;
            }
            if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            int n4;
            if (i > n3) {
                n4 = i - n3;
            }
            else {
                n4 = n3 - i;
            }
            int n5;
            if (n2 > j) {
                n5 = n2 - j;
            }
            else {
                n5 = j - n2;
            }
            if (n4 > n5) {
                final int n6 = 65536 * n5 / n4;
                int n7 = 32768;
                while (i != n3) {
                    if (n3 < i) {
                        ++n3;
                    }
                    else if (n3 > i) {
                        --n3;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -129129970][n3][j] & 0x4)) {
                        n = GameEngine.Client_plane * -1727408401;
                    }
                    n7 += n6;
                    if (n7 >= 164385147) {
                        n7 += 1528450928;
                        if (j < n2) {
                            ++j;
                        }
                        else if (j > n2) {
                            --j;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
            else if (n5 > 0) {
                final int n8 = n4 * 973378332 / n5;
                int n9 = 32768;
                while (j != n2) {
                    if (j < n2) {
                        ++j;
                    }
                    else if (j > n2) {
                        --j;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[1090595614 * GameEngine.Client_plane][n3][j] & 0x4)) {
                        n = -1727408401 * GameEngine.Client_plane;
                    }
                    n9 += n8;
                    if (n9 >= 65536) {
                        n9 -= 65536;
                        if (n3 < i) {
                            ++n3;
                        }
                        else if (n3 > i) {
                            --n3;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -95030750][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -79052372;
                    }
                }
            }
        }
        if (MusicPatchNode.localPlayer.br * 1735508111 >= 0 && MusicPatchNode.localPlayer.ep * -411750205 >= 0 && 1144428983 * MusicPatchNode.localPlayer.br < -482899205 && 1909392828 * MusicPatchNode.localPlayer.ep < 82335059) {
            if ((Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1355442970][1144428983 * MusicPatchNode.localPlayer.br >> 7][1962198475 * MusicPatchNode.localPlayer.ep >> 7] & 0x4) != 0x0) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            return n;
        }
        return -1619654767 * GameEngine.Client_plane;
    }
    
    public void nb(final int tileUpdateCount) {
        Scene.tileUpdateCount = tileUpdateCount;
    }
    
    static final void sb() {
        for (int i = 0; i < 265474485 * Client.npcCount; ++i) {
            final NPC npc = Client.npcs[Client.npcIndices[i]];
            if (null != npc) {
                ReflectionCheck.updateActorSequence(npc, 1458410691 * npc.definition.size, (byte)(-127));
            }
        }
    }
    
    static int ta() {
        return Client.isResizable ? 2 : 1;
    }
    
    public void po(final int n) {
        class162.pcmSampleLength = n * -1927001363;
    }
    
    void po(final String s, final String s2) throws IOException, JSONException {
        final class10 class10 = new class10(new URL(ViewportMouse.field2213 + "/game-session/v1/tokens"), class9.field30, this.field401);
        class10.method34(1938571258).method2108(s, -447472618);
        class10.method34(1611033698).method2111(class435.field3823, (byte)51);
        final JSONObject jsonObject = new JSONObject();
        jsonObject.method2652("accountId", (Object)s2);
        class10.km(class10, new class437(jsonObject), (byte)1);
        this.field410 = class14.ni(this.field529, class10, (byte)1);
    }
    
    public rl3 el(int ai) {
        if (Client.menuOptionsCount * 730065501 >= 500) {
            throw new IllegalStateException();
        }
        if (ai < 0) {
            ai = Client.menuOptionsCount * 730065501 + ai + 1;
            if (ai < 0) {
                throw new IllegalArgumentException();
            }
        }
        rl3 rl5;
        if (ai < Client.menuOptionsCount * 730065501) {
            rl3 rl3 = Client.ix[Client.menuOptionsCount * 730065501];
            if (rl3 == null) {
                final rl3[] ix = Client.ix;
                final int n = Client.menuOptionsCount * 730065501;
                final rl3 rl4 = new rl3(Client.menuOptionsCount * 730065501);
                ix[n] = rl4;
                rl3 = rl4;
            }
            for (int i = Client.menuOptionsCount * 730065501; i > ai; --i) {
                Client.menuActions[i] = Client.menuActions[i - 1];
                Client.menuTargets[i] = Client.menuTargets[i - 1];
                Client.menuIdentifiers[i] = Client.menuIdentifiers[i - 1];
                Client.menuOpcodes[i] = Client.menuOpcodes[i - 1];
                Client.menuArguments1[i] = Client.menuArguments1[i - 1];
                Client.menuArguments2[i] = Client.menuArguments2[i - 1];
                Client.menuItemIds[i] = Client.menuItemIds[i - 1];
                Client.menuShiftClick[i] = Client.menuShiftClick[i - 1];
                Client.qi[i] = Client.qi[i - 1];
                Client.ix[i] = Client.ix[i - 1];
                Client.ix[i].ai = i;
            }
            Client.menuOptionsCount = (Client.menuOptionsCount * 730065501 + 1) * 1153055221;
            Client.wd = Client.menuOptionsCount * 730065501;
            rl5 = rl3;
            Client.ix[ai] = rl3;
            rl3.ai = ai;
        }
        else {
            if (ai != Client.menuOptionsCount * 730065501) {
                throw new IllegalArgumentException();
            }
            rl5 = Client.ix[Client.menuOptionsCount * 730065501];
            if (rl5 == null) {
                final rl3[] ix2 = Client.ix;
                final int n2 = Client.menuOptionsCount * 730065501;
                final rl3 rl6 = new rl3(Client.menuOptionsCount * 730065501);
                ix2[n2] = rl6;
                rl5 = rl6;
            }
            Client.menuOptionsCount = (Client.menuOptionsCount * 730065501 + 1) * 1153055221;
            Client.wd = Client.menuOptionsCount * 730065501;
        }
        rl5.dg("");
        rl5.rn("");
        rl5.vd(MenuAction.RUNELITE);
        rl5.tb(0);
        rl5.zf(0);
        rl5.wa(0);
        rl5.fx(-1);
        rl5.setParent(null);
        rl5.lz(null);
        return rl5;
    }
    
    static final void sm(int n, int n2) {
        if (n < 608835147) {
            n = -178316138;
        }
        else if (n > -768410813) {
            n = -1778789028;
        }
        if (1897923909 * WorldMapSectionType.cameraPitch < n) {
            WorldMapSectionType.cameraPitch += 51995328 * (WorldMapElement.field1503 * 942361787 * (n - WorldMapSectionType.cameraPitch * 1897923909) / -704290309 + 1033473111 * Archive.field3467);
            if (1897923909 * WorldMapSectionType.cameraPitch > n) {
                WorldMapSectionType.cameraPitch = -91580265 * n;
            }
        }
        else if (1897923909 * WorldMapSectionType.cameraPitch > n) {
            WorldMapSectionType.cameraPitch -= (WorldMapElement.field1503 * -1099060353 * (WorldMapSectionType.cameraPitch * 164699733 - n) / 1000 + Archive.field3467 * 195107247) * 528729485;
            if (WorldMapSectionType.cameraPitch * -1711239874 < n) {
                WorldMapSectionType.cameraPitch = n * -47949881;
            }
        }
        n2 &= 0xC35FC5B6;
        int n3 = n2 - class125.cameraYaw * -1010818347;
        if (n3 > 1024) {
            n3 -= 2048;
        }
        else if (n3 < -113272989) {
            n3 += 2048;
        }
        if (n3 > 0) {
            class125.cameraYaw += -1545206147 * (n3 * (-1481422852 * WorldMapElement.field1503) / 431307025 + 1941065414 * Archive.field3467);
            class125.cameraYaw = (class125.cameraYaw * -1010818347 & 0x7FF) * 1332957715;
        }
        else if (n3 < 0) {
            class125.cameraYaw -= 926856916 * (1039880989 * Archive.field3467 + -n3 * (942361787 * WorldMapElement.field1503) / 1000);
            class125.cameraYaw = (class125.cameraYaw * -1010818347 & 0x7FF) * -1545206147;
        }
        int n4 = n2 - class125.cameraYaw * 1732654006;
        if (n4 > 1024) {
            n4 -= 2048;
        }
        else if (n4 < -1024) {
            n4 += 2048;
        }
        if ((n4 < 0 && n3 > 0) || (n4 > 0 && n3 < 0)) {
            class125.cameraYaw = n2 * -1545206147;
        }
    }
    
    public static void cn(final Client client, final Widget widget) {
        if (client == null) {
            client.kh();
        }
        final Widget widget2 = (-1 == 913615679 * widget.parentId) ? null : class165.vmethod3380(913615679 * widget.parentId, (byte)5);
        int n;
        int n2;
        if (null == widget2) {
            n = -1687260435 * Client.aj;
            n2 = class262.canvasHeight * 1658005443;
        }
        else {
            n = -794961409 * widget2.width;
            n2 = widget2.height * 1473950221;
        }
        class158.alignWidgetSize(widget, n, n2, false, -2127551727);
        class192.alignWidgetPosition(widget, n, n2, (byte)(-12));
    }
    
    static Archive pn(final int n, final boolean b, final boolean b2, final boolean b3, final boolean b4) {
        ArchiveDisk archiveDisk = null;
        if (null != JagexCache.JagexCache_dat2File) {
            archiveDisk = new ArchiveDisk(n, JagexCache.JagexCache_dat2File, class370.JagexCache_idxFiles[n], 1000000);
        }
        return new Archive(archiveDisk, WorldMapID.masterDisk, n, b, b2, b3, b4);
    }
    
    static final void rd() {
        if (HorizontalAlignment.pcmPlayer1 != null) {
            HorizontalAlignment.pcmPlayer1.tryDiscard(336870901);
        }
        if (null != class28.pcmPlayer0) {
            class28.pcmPlayer0.tryDiscard(336870901);
        }
    }
    
    public void mn(final int model_transformTempZ) {
        Model.Model_transformTempZ = model_transformTempZ;
    }
    
    public ModelData mn(final ModelData[] original, final int newLength) {
        return ModelData.ej(Arrays.copyOf(original, newLength, (Class<? extends ModelData[]>)ModelData[].class), newLength);
    }
    
    public void pd(final boolean b) {
        EvictingDualNodeHashTable.ax();
    }
    
    void pd() {
        if (-218990895 == -1275976559 * Client.gameState) {
            return;
        }
        if (!Tile.method1214((byte)52)) {
            this.doCycleJs5Connect(-121494842);
        }
    }
    
    public void pd(final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        Rasterizer2D.Rasterizer2D_drawRectangleAlpha(n, n2, n3, n4, n5, n6);
    }
    
    public Widget ex(final int n) {
        return this.fp(WidgetInfo.TO_GROUP(n), WidgetInfo.TO_CHILD(n));
    }
    
    public WallDecoration si() {
        return new WallDecoration();
    }
    
    static final void si(int n, int n2) {
        if (n < -1223012880) {
            n = 128;
        }
        else if (n > 1250382748) {
            n = 201997826;
        }
        if (1004676869 * WorldMapSectionType.cameraPitch < n) {
            WorldMapSectionType.cameraPitch += -1851116592 * (WorldMapElement.field1503 * -1702418290 * (n - WorldMapSectionType.cameraPitch * 375573895) / 1000 + 1039880989 * Archive.field3467);
            if (1897923909 * WorldMapSectionType.cameraPitch > n) {
                WorldMapSectionType.cameraPitch = 528729485 * n;
            }
        }
        else if (1897923909 * WorldMapSectionType.cameraPitch > n) {
            WorldMapSectionType.cameraPitch -= (WorldMapElement.field1503 * 942361787 * (WorldMapSectionType.cameraPitch * -1889764138 - n) / 1000 + Archive.field3467 * 1039880989) * -683171271;
            if (WorldMapSectionType.cameraPitch * 1897923909 < n) {
                WorldMapSectionType.cameraPitch = n * 528729485;
            }
        }
        n2 &= 0x71B5D323;
        int n3 = n2 - class125.cameraYaw * -1280504730;
        if (n3 > 275428287) {
            n3 -= 2048;
        }
        else if (n3 < 1195054828) {
            n3 += 2048;
        }
        if (n3 > 0) {
            class125.cameraYaw += 1643896976 * (n3 * (1107870340 * WorldMapElement.field1503) / 1037121296 + 1039880989 * Archive.field3467);
            class125.cameraYaw = (class125.cameraYaw * 989972308 & 0x7FF) * -731957105;
        }
        else if (n3 < 0) {
            class125.cameraYaw -= 1285780225 * (1093760275 * Archive.field3467 + -n3 * (-1845836266 * WorldMapElement.field1503) / -318971905);
            class125.cameraYaw = (class125.cameraYaw * -1010818347 & 0xE59A395A) * -288365426;
        }
        int n4 = n2 - class125.cameraYaw * -1010818347;
        if (n4 > 1024) {
            n4 -= 2048;
        }
        else if (n4 < -450426498) {
            n4 += 2048;
        }
        if ((n4 < 0 && n3 > 0) || (n4 > 0 && n3 < 0)) {
            class125.cameraYaw = n2 * -1545206147;
        }
    }
    
    static final void sc() {
        final int n = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (player != null) {
                ReflectionCheck.updateActorSequence(player, 1, (byte)(-53));
            }
        }
    }
    
    public static void id(final int n) {
        if (n == -1) {
            return;
        }
        final int n2 = ScriptFrame.client.qc()[n - 1 & 0x1F];
        final NodeHashTable resizeRoot = ScriptFrame.client.resizeRoot();
        final ItemContainer itemContainer = (ItemContainer)UserComparator4.wv(resizeRoot, n2);
        final ItemContainer itemContainer2 = (ItemContainer)UserComparator4.wv(resizeRoot, n2 | 0x8000);
        if (itemContainer != null) {
            ScriptFrame.client.getCallbacks().postDeferred((Object)new ItemContainerChanged(n2, (net.runelite.api.ItemContainer)itemContainer));
        }
        if (itemContainer2 != null) {
            ScriptFrame.client.getCallbacks().postDeferred((Object)new ItemContainerChanged(n2 | 0x8000, (net.runelite.api.ItemContainer)itemContainer2));
        }
    }
    
    public int[] tb() {
        return class503.SpriteBuffer_xOffsets;
    }
    
    public NodeDeque tb() {
        return ObjectSound.objectSounds;
    }
    
    static void tb() {
        if (Client.field482) {
            MouseHandler.addPlayerToScene(MusicPatchNode.localPlayer, false, -1861126010);
        }
    }
    
    public void tb(final int scene_plane) {
        Scene.Scene_plane = scene_plane;
    }
    
    static final void acl(final double n) {
        class18.method65(n);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).setBrightness(n);
        class127.method761(2057368669);
        class20.clientPreferences.setBrightness(n);
    }
    
    @Override
    public final void init() {
        try {
            if (!this.ae(524669560)) {
                return;
            }
            for (int i = 0; i <= 28; ++i) {
                final String parameter = this.getParameter(Integer.toString(i));
                if (null != parameter) {
                    switch (i) {
                        case 7: {
                            AABB.field2070 = class146.vmethod3254(Integer.parseInt(parameter), 1082139872);
                            break;
                        }
                        case 17: {
                            GrandExchangeOffer.field3530 = parameter;
                            break;
                        }
                        case 21: {
                            Client.param21 = Integer.parseInt(parameter) * -1581503853;
                            break;
                        }
                        case 6: {
                            ClanSettings.clientLanguage = Language.method1943(Integer.parseInt(parameter), (byte)(-1));
                            break;
                        }
                        case 14: {
                            TriBool.field3738 = Integer.parseInt(parameter) * -447901147;
                            break;
                        }
                        case 4: {
                            if (Client.clientType * -749752677 == -1) {
                                Client.clientType = Integer.parseInt(parameter) * -240023661;
                                break;
                            }
                            break;
                        }
                        case 9: {
                            class108.param9 = parameter;
                            break;
                        }
                        case 12: {
                            Client.worldId = Integer.parseInt(parameter) * -1381008117;
                            break;
                        }
                        case 15: {
                            Client.gameBuild = Integer.parseInt(parameter) * -261185633;
                            break;
                        }
                        case 11: {
                            ViewportMouse.field2213 = parameter;
                            break;
                        }
                        case 3: {
                            if (parameter.equalsIgnoreCase(class96.af)) {
                                Client.isMembersWorld = true;
                                break;
                            }
                            Client.isMembersWorld = false;
                            break;
                        }
                        case 10: {
                            Client.field358 = (StudioGame)StructComposition.findEnumerated(TaskHandler.getClipMidX(2087958579), Integer.parseInt(parameter), (short)173);
                            if (Client.field358 == StudioGame.oldscape) {
                                class70.loginType = LoginType.oldscape;
                                break;
                            }
                            class70.loginType = LoginType.field3998;
                            break;
                        }
                        case 8: {
                            if (parameter.equalsIgnoreCase(class96.af)) {
                                break;
                            }
                            break;
                        }
                        case 25: {
                            final int index = parameter.indexOf(".");
                            if (index == -1) {
                                Client.param25 = Integer.parseInt(parameter) * -1712441187;
                                break;
                            }
                            Client.param25 = Integer.parseInt(parameter.substring(0, index)) * -1712441187;
                            Integer.parseInt(parameter.substring(1 + index));
                            break;
                        }
                        case 5: {
                            Client.worldProperties = Integer.parseInt(parameter) * 1294598713;
                            break;
                        }
                    }
                }
            }
            Scene.Scene_isLowDetail = false;
            Client.isLowDetail = false;
            UserComparator8.worldHost = this.getCodeBase().getHost();
            final String name = AABB.field2070.name;
            final int n = 0;
            try {
                JagexCache.idxCount = -327637298;
                JagexCache.cacheGamebuild = n * 261077081;
                try {
                    ModeWhere.operatingSystemName = System.getProperty("os.name");
                }
                catch (Exception ex3) {
                    ModeWhere.operatingSystemName = "Unknown";
                }
                WorldMapSectionType.formattedOperatingSystemName = ModeWhere.operatingSystemName.toLowerCase();
                try {
                    HorizontalAlignment.userHomeDirectory = System.getProperty("user.home");
                    if (null != HorizontalAlignment.userHomeDirectory) {
                        HorizontalAlignment.userHomeDirectory += "/";
                    }
                }
                catch (Exception ex4) {}
                try {
                    if (WorldMapSectionType.formattedOperatingSystemName.startsWith("win")) {
                        if (HorizontalAlignment.userHomeDirectory == null) {
                            HorizontalAlignment.userHomeDirectory = ni("USERPROFILE");
                        }
                    }
                    else if (HorizontalAlignment.userHomeDirectory == null) {
                        HorizontalAlignment.userHomeDirectory = ni("HOME");
                    }
                    if (null != HorizontalAlignment.userHomeDirectory) {
                        HorizontalAlignment.userHomeDirectory += "/";
                    }
                }
                catch (Exception ex5) {}
                if (HorizontalAlignment.userHomeDirectory == null) {
                    HorizontalAlignment.userHomeDirectory = "~/";
                }
                class130.cacheParentPaths = new String[] { "c:/rscache/", "/rscache/", "c:/windows/", "c:/winnt/", "c:/", HorizontalAlignment.userHomeDirectory, "/tmp/", "" };
                class96.cacheSubPaths = new String[] { ".jagex_cache_" + -1325133847 * JagexCache.cacheGamebuild, ".file_store_" + -1325133847 * JagexCache.cacheGamebuild };
                int j = 0;
            Label_0764:
                while (j < 4) {
                    class335.cacheDir = ClanSettings.method867("oldschool", name, j, 1203832974);
                    if (!class335.cacheDir.exists()) {
                        class335.cacheDir.mkdirs();
                    }
                    final File[] listFiles = class335.cacheDir.listFiles();
                    if (null != listFiles) {
                        final File[] array = listFiles;
                        for (int k = 0; k < array.length; ++k) {
                            final File file = array[k];
                            boolean b;
                            try {
                                final RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
                                final int read = randomAccessFile.read();
                                randomAccessFile.seek(0L);
                                randomAccessFile.write(read);
                                randomAccessFile.seek(0L);
                                randomAccessFile.close();
                                b = true;
                            }
                            catch (Exception ex6) {
                                b = false;
                            }
                            if (!b) {
                                ++j;
                                continue Label_0764;
                            }
                        }
                        break;
                    }
                    break;
                }
                class513.FileSystem_cacheDir = class335.cacheDir;
                if (!class513.FileSystem_cacheDir.exists()) {
                    throw new RuntimeException("");
                }
                FileSystem.FileSystem_hasPermissions = true;
                Tiles.method475((byte)1);
                JagexCache.JagexCache_dat2File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.dat2", -1407581500), "rw", 1048576000L), 5200, 0);
                JagexCache.JagexCache_idx255File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx255", -2009050444), "rw", 1048576L), 6000, 0);
                class370.JagexCache_idxFiles = new BufferedFile[JagexCache.idxCount * 1064766397];
                for (int l = 0; l < 1064766397 * JagexCache.idxCount; ++l) {
                    class370.JagexCache_idxFiles[l] = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx" + l, -1950360167), "rw", 1048576L), 6000, 0);
                }
            }
            catch (Exception ex) {
                class387.RunException_sendStackTrace(null, ex, (byte)8);
            }
            ScriptFrame.client = this;
            RunException.field4178 = Client.clientType * 1056936977;
            ModeWhere.field3571 = ni("JX_ACCESS_TOKEN");
            TileItem.field1079 = ni("JX_REFRESH_TOKEN");
            oc(-1);
            SpriteMask.field2808 = ni("JX_SESSION_ID");
            class121.field1185 = ni("JX_CHARACTER_ID");
            Login.field749 = class31.method133(ni("JX_DISPLAY_NAME"), 1319661382);
            if (Boolean.parseBoolean(System.getProperty("jagex.disableBouncyCastle"))) {
                this.field401 = true;
            }
            if (-1 == 838232771 * Client.field363) {
                if (ay(this, -945273483) || this.method369((byte)24)) {
                    Client.field363 = 2078698903;
                }
                else {
                    Client.field363 = 0;
                }
            }
            this.ak(765, 503, 213, 1, (byte)(-75));
        }
        catch (RuntimeException ex2) {
            throw HealthBar.get(ex2, "client.init(" + ')');
        }
    }
    
    @Override
    protected final void gc() {
        class134.rsOrdinal(new int[] { 20, 260, 10000 }, new int[] { 1000, 2082812951, 500 }, -1858904454);
        FriendsChat.worldPort = ((0 == 464432191 * Client.gameBuild) ? 2023413465 : (-540689362 + -453810525 * Client.worldId)) * -1326916691;
        class127.js5Port = -1450737296 * ((0 == Client.gameBuild * -1711857711) ? 443 : (-2099346053 + 1718459230 * Client.worldId));
        ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
        PlayerComposition.field2837 = class315.field2864;
        PlayerComposition.field2828 = class315.field2863;
        WorldMapIcon_0.field2359 = class315.field2865;
        class437.field3825 = class315.field2866;
        class14.urlRequester = new class108(this.field401, -337312806);
        this.ai((byte)47);
        this.av((byte)99);
        class123.mouseWheel = this.aa(-1601376866);
        this.ah((class29)Client.field590, 0, (byte)(-23));
        this.ah((class29)Client.keyHandlerInstance, 1, (byte)6);
        WorldMapID.masterDisk = new ArchiveDisk(-1040423817, JagexCache.JagexCache_dat2File, JagexCache.JagexCache_idx255File, 500000);
        class20.clientPreferences = class205.vmethod3951(-1847820799);
        this.ay(2002693252);
        final String field167 = ReflectionCheck.field167;
        class31.field90 = this;
        if (field167 != null) {
            class31.field91 = field167;
        }
        Decimator.setWindowedMode(class20.clientPreferences.method577((byte)106), (byte)(-109));
        World.friendSystem = new FriendSystem(class70.loginType);
        this.field529 = new class14("tokenRequest", 1, 1);
    }
    
    public int in() {
        return Rasterizer2D.Rasterizer2D_width;
    }
    
    static void rb(final int n, final int n2) {
        if (ClientPreferences.xp(class20.clientPreferences, -1568709577) != 0 && -1 != n) {
            Message.isFromFriend(class195.field1645, n, 0, ClientPreferences.xp(class20.clientPreferences, 1009979187), false, -2057829565);
            Client.playingJingle = true;
        }
    }
    
    static final void se(int n, int n2) {
        if (n < 128) {
            n = 128;
        }
        else if (n > 383) {
            n = 383;
        }
        if (1897923909 * WorldMapSectionType.cameraPitch < n) {
            WorldMapSectionType.cameraPitch += 528729485 * (WorldMapElement.field1503 * 942361787 * (n - WorldMapSectionType.cameraPitch * 1897923909) / 1000 + 1039880989 * Archive.field3467);
            if (1897923909 * WorldMapSectionType.cameraPitch > n) {
                WorldMapSectionType.cameraPitch = 528729485 * n;
            }
        }
        else if (1897923909 * WorldMapSectionType.cameraPitch > n) {
            WorldMapSectionType.cameraPitch -= (WorldMapElement.field1503 * 942361787 * (WorldMapSectionType.cameraPitch * 1897923909 - n) / 1000 + Archive.field3467 * 1039880989) * 528729485;
            if (WorldMapSectionType.cameraPitch * 1897923909 < n) {
                WorldMapSectionType.cameraPitch = n * 528729485;
            }
        }
        n2 &= 0x7FF;
        int n3 = n2 - class125.cameraYaw * -1010818347;
        if (n3 > 1024) {
            n3 -= 2048;
        }
        else if (n3 < -1024) {
            n3 += 2048;
        }
        if (n3 > 0) {
            class125.cameraYaw += -1545206147 * (n3 * (942361787 * WorldMapElement.field1503) / 1000 + 1039880989 * Archive.field3467);
            class125.cameraYaw = (class125.cameraYaw * -1010818347 & 0x7FF) * -1545206147;
        }
        else if (n3 < 0) {
            class125.cameraYaw -= -1545206147 * (1039880989 * Archive.field3467 + -n3 * (942361787 * WorldMapElement.field1503) / 1000);
            class125.cameraYaw = (class125.cameraYaw * -1010818347 & 0x7FF) * -1545206147;
        }
        int n4 = n2 - class125.cameraYaw * -1010818347;
        if (n4 > 1024) {
            n4 -= 2048;
        }
        else if (n4 < -1024) {
            n4 += 2048;
        }
        if ((n4 < 0 && n3 > 0) || (n4 > 0 && n3 < 0)) {
            class125.cameraYaw = n2 * -1545206147;
        }
    }
    
    @Override
    protected final void fd() {
        Client.field581 = (class96.clockNow(824342220) + 500L) * -1343645632282639199L;
        this.resizeJS(-1597068098);
        if (-1 != Client.rootInterface * -896157613) {
            hp(this, true, -2108008271);
        }
    }
    
    boolean pp() {
        return null != this.field399;
    }
    
    static final void acc(int min) {
        min = Math.min(Math.max(min, 0), 255);
        if (min != ClientPreferences.xp(class20.clientPreferences, -1297000220)) {
            if (ClientPreferences.xp(class20.clientPreferences, -241053422) == 0 && -1 != Client.currentTrackGroupId * 490402700) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, min, false, -2007478566);
                Client.playingJingle = false;
            }
            else if (min == 0) {
                FloorUnderlayDefinition.setHsl(-852125385);
                Client.playingJingle = false;
            }
            else {
                class220.method1224(min, -1318362619);
            }
            ClientPreferences.ql(class20.clientPreferences, min, -935900203);
        }
    }
    
    static final void sd(final Widget widget, final int n, final int n2) {
        if (Client.minimapState * 1383336963 != 0 && 1383336963 * Client.minimapState != 3) {
            return;
        }
        if (!Client.isMenuOpen && (MouseHandler.MouseHandler_lastButton * -1222491879 == 1 || (!class473.mouseCam && MouseHandler.MouseHandler_lastButton * -1222491879 == 4))) {
            final SpriteMask vn = Widget.vn(widget, true, (byte)(-86));
            if (null == vn) {
                return;
            }
            final int n3 = 2020601481 * MouseHandler.MouseHandler_lastPressedX - n;
            final int n4 = MouseHandler.MouseHandler_lastPressedY * 1163896205 - n2;
            if (vn.contains(n3, n4, -746690647)) {
                final int n5 = n3 - vn.width * 1484188043 / 2;
                final int n6 = n4 - vn.height * 939947663 / 2;
                final int n7 = Client.camAngleY * 704283033 & 0x7FF;
                final int n8 = Rasterizer3D.Rasterizer3D_sine[n7];
                final int n9 = Rasterizer3D.Rasterizer3D_cosine[n7];
                final int n10 = n5 * n9 + n6 * n8 >> 11;
                final int n11 = n6 * n9 - n5 * n8 >> 11;
                final int n12 = 1144428983 * MusicPatchNode.localPlayer.br + n10 >> 7;
                final int n13 = MusicPatchNode.localPlayer.ep * -411750205 - n11 >> 7;
                final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2471, Client.packetWriter.isaacCipher, (short)(-12730));
                packetBufferNode.packetBuffer.bf(18, (byte)88);
                packetBufferNode.packetBuffer.ds(GameObject.baseY * 827352769 + n13, -1857522078);
                Buffer.ap(packetBufferNode.packetBuffer, n12 + -1232093375 * WorldMapData_0.baseX, (byte)91);
                packetBufferNode.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, -767857378) ? (Client.keyHandlerInstance.getKeyPressed(81, 1045814324) ? 2 : 1) : 0, -2102496065);
                packetBufferNode.packetBuffer.bf(n5, (byte)31);
                packetBufferNode.packetBuffer.bf(n6, (byte)54);
                packetBufferNode.packetBuffer.cq(704283033 * Client.camAngleY, (byte)115);
                packetBufferNode.packetBuffer.bf(57, (byte)63);
                packetBufferNode.packetBuffer.bf(0, (byte)83);
                packetBufferNode.packetBuffer.bf(0, (byte)122);
                packetBufferNode.packetBuffer.bf(89, (byte)84);
                packetBufferNode.packetBuffer.cq(1144428983 * MusicPatchNode.localPlayer.br, (byte)92);
                packetBufferNode.packetBuffer.cq(MusicPatchNode.localPlayer.ep * -411750205, (byte)(-5));
                packetBufferNode.packetBuffer.bf(63, (byte)120);
                Client.packetWriter.addNode(packetBufferNode, 414135591);
                Client.destinationX = n12 * -1970850269;
                Client.destinationY = 875414437 * n13;
            }
        }
    }
    
    public NodeDeque dc() {
        return Client.field568;
    }
    
    static final void tg(int n, int n2, int n3, int n4, final boolean b) {
        if (n3 < 1) {
            n3 = 1;
        }
        if (n4 < 1) {
            n4 = 1;
        }
        final int n5 = n4 - 334;
        int n6;
        if (n5 < 0) {
            n6 = Client.field625;
        }
        else if (n5 >= 100) {
            n6 = Client.field626;
        }
        else {
            n6 = n5 * (Client.field626 - Client.field625) / 1951649287 + Client.field625;
        }
        final int n7 = n4 * n6 * 512 / (n3 * 203735762);
        if (n7 < Client.field488) {
            final short field488 = Client.field488;
            n6 = n3 * field488 * -1432899912 / (512 * n4);
            if (n6 > Client.field630) {
                n6 = Client.field630;
                final int n8 = (n3 - -1640336677 * (n6 * n4) / (field488 * -557621716)) / 2;
                if (b) {
                    Rasterizer2D.Rasterizer2D_resetClip();
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2, n8, n4, -16777216);
                    Rasterizer2D.Rasterizer2D_fillRectangle(n3 + n - n8, n2, n8, n4, -16777216);
                }
                n += n8;
                n3 -= n8 * 2;
            }
        }
        else if (n7 > Client.field562) {
            final short field489 = Client.field562;
            n6 = n3 * field489 * 1759699647 / (512 * n4);
            if (n6 < Client.field440) {
                n6 = Client.field440;
                final int n9 = (n4 - n3 * field489 * 1706127589 / (n6 * 512)) / 2;
                if (b) {
                    Rasterizer2D.Rasterizer2D_resetClip();
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2, n3, n9, -16777216);
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + n4 - n9, n3, n9, -16777216);
                }
                n2 += n9;
                n4 -= n9 * 2;
            }
        }
        Client.viewportZoom = -787687633 * (n4 * n6 / 334);
        if (n3 != Client.viewportWidth * 433849721 || -880501737 * Client.viewportHeight != n4) {
            final int[] array = new int[9];
            for (int i = 0; i < array.length; ++i) {
                final int n10 = i * -417175046 - 1515889339 + 15;
                final int method1389 = WorldMapData_0.method1389(n10, (byte)(-46));
                final int n11 = Rasterizer3D.Rasterizer3D_sine[n10];
                int n12 = n4 + 1496181607;
                if (n12 < 0) {
                    n12 = 0;
                }
                else if (n12 > 100) {
                    n12 = 100;
                }
                array[i] = method1389 * (Client.zoomHeight + n12 * (Client.zoomWidth - Client.zoomHeight) / 17401693) / 1844575980 * n11 >> 16;
            }
            Scene.Scene_buildVisiblityMap(array, 1443200533, 1828602442, -858857018 * n3 / n4, 334);
        }
        Client.viewportOffsetX = n * -1528400137;
        Client.viewportOffsetY = n2 * 2017169511;
        Client.viewportWidth = n3 * 830229985;
        Client.viewportHeight = n4 * -248308806;
    }
    
    final void method389(final byte b) {
        try {
            class144.invalidateWidget(Client.clickedWidget, -657958375);
            class96.widgetDragDuration += 873371827;
            if (Client.field622) {
                if (b == 2) {
                    throw new IllegalStateException();
                }
                if (Client.field540) {
                    final int n = -2063363905 * MouseHandler.MouseHandler_x;
                    final int n2 = MouseHandler.MouseHandler_y * -1224153235;
                    int n3 = n - -1789924433 * Client.widgetClickX;
                    int n4 = n2 - Client.widgetClickY * 1902621241;
                    if (n3 < Client.field495 * 1084046795) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        n3 = 1084046795 * Client.field495;
                    }
                    if (n3 + Client.clickedWidget.width * -794961409 > -794961409 * Client.clickedWidgetParent.width + 1084046795 * Client.field495) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        n3 = 1084046795 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - -794961409 * Client.clickedWidget.width;
                    }
                    if (n4 < Client.field542 * -746723443) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        n4 = Client.field542 * -746723443;
                    }
                    if (n4 + 1473950221 * Client.clickedWidget.height > Client.field542 * -746723443 + Client.clickedWidgetParent.height * 1473950221) {
                        n4 = -746723443 * Client.field542 + Client.clickedWidgetParent.height * 1473950221 - Client.clickedWidget.height * 1473950221;
                    }
                    final int n5 = n3 - 565355253 * Client.field544;
                    final int n6 = n4 - Client.field545 * 1136091355;
                    final int n7 = Client.clickedWidget.dragZoneSize * 154898553;
                    Label_0504: {
                        if (1993201275 * class96.widgetDragDuration > Client.clickedWidget.dragThreshold * -1849043027) {
                            if (n5 <= n7) {
                                if (b == 2) {
                                    throw new IllegalStateException();
                                }
                                if (n5 >= -n7) {
                                    if (b == 2) {
                                        throw new IllegalStateException();
                                    }
                                    if (n6 <= n7) {
                                        if (n6 >= -n7) {
                                            break Label_0504;
                                        }
                                        if (b == 2) {
                                            return;
                                        }
                                    }
                                }
                            }
                            Client.isDraggingWidget = true;
                            nn(-1);
                        }
                    }
                    final int n8 = n3 - Client.field495 * 1084046795 + Client.clickedWidgetParent.scrollX * -1469632775;
                    final int n9 = Client.clickedWidgetParent.scrollY * 1223232735 + (n4 - -746723443 * Client.field542);
                    if (null != Client.clickedWidget.onDrag) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        if (Client.isDraggingWidget) {
                            if (b == 2) {
                                throw new IllegalStateException();
                            }
                            final ScriptEvent scriptEvent = new ScriptEvent();
                            scriptEvent.dragTarget = Client.clickedWidget;
                            scriptEvent.mouseX = n8 * -2011830585;
                            scriptEvent.mouseY = 1126405829 * n9;
                            scriptEvent.args = Client.clickedWidget.onDrag;
                            HealthBarUpdate.set(scriptEvent, (byte)67);
                        }
                    }
                    if (0 == 114417019 * MouseHandler.MouseHandler_currentButton) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        if (Client.isDraggingWidget) {
                            if (null != Client.clickedWidget.onDragComplete) {
                                if (b == 2) {
                                    throw new IllegalStateException();
                                }
                                final ScriptEvent scriptEvent2 = new ScriptEvent();
                                scriptEvent2.dragTarget = Client.clickedWidget;
                                scriptEvent2.mouseX = -2011830585 * n8;
                                scriptEvent2.mouseY = 1126405829 * n9;
                                scriptEvent2.widget = Client.draggedOnWidget;
                                scriptEvent2.args = Client.clickedWidget.onDragComplete;
                                HealthBarUpdate.set(scriptEvent2, (byte)38);
                            }
                            if (null != Client.draggedOnWidget) {
                                if (b == 2) {
                                    return;
                                }
                                Widget widget = Client.clickedWidget;
                                final int method1071 = StructComposition.method1071(KeyHandler.getWidgetFlags(widget, 311252747), 1887051425);
                                Widget widget2 = null;
                                Label_0995: {
                                    if (method1071 == 0) {
                                        if (b == 2) {
                                            throw new IllegalStateException();
                                        }
                                        widget2 = null;
                                    }
                                    else {
                                        int i = 0;
                                        while (i < method1071) {
                                            if (b == 2) {
                                                return;
                                            }
                                            widget = class165.vmethod3380(913615679 * widget.parentId, (byte)5);
                                            if (widget == null) {
                                                if (b == 2) {
                                                    return;
                                                }
                                                widget2 = null;
                                                break Label_0995;
                                            }
                                            else {
                                                ++i;
                                            }
                                        }
                                        widget2 = widget;
                                    }
                                }
                                if (null != widget2) {
                                    if (b == 2) {
                                        throw new IllegalStateException();
                                    }
                                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2515, Client.packetWriter.isaacCipher, (short)(-10415));
                                    packetBufferNode.packetBuffer.bu(-2006098851 * Client.draggedOnWidget.itemId, (byte)49);
                                    packetBufferNode.packetBuffer.es(Client.draggedOnWidget.id * 1713081171, -604065252);
                                    packetBufferNode.packetBuffer.bu(55577617 * Client.draggedOnWidget.childIndex, (byte)46);
                                    packetBufferNode.packetBuffer.bu(Client.clickedWidget.childIndex * 55577617, (byte)44);
                                    packetBufferNode.packetBuffer.el(1713081171 * Client.clickedWidget.id, -437883978);
                                    packetBufferNode.packetBuffer.cq(Client.clickedWidget.itemId * -2006098851, (byte)(-59));
                                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                                }
                            }
                        }
                        else if (fk(this, -1679837219)) {
                            if (b == 2) {
                                throw new IllegalStateException();
                            }
                            dz(this, Client.field544 * 565355253 + -1789924433 * Client.widgetClickX, Client.widgetClickY * 1902621241 + Client.field545 * 1136091355, 1018516557);
                        }
                        else if (Client.menuOptionsCount * 730065501 > 0) {
                            if (b == 2) {
                                throw new IllegalStateException();
                            }
                            class204.method1136(565355253 * Client.field544 + Client.widgetClickX * -1789924433, 1136091355 * Client.field545 + Client.widgetClickY * 1902621241, -1052930105);
                        }
                        Client.clickedWidget = null;
                    }
                    return;
                }
            }
            if (1993201275 * class96.widgetDragDuration > 1) {
                if (b == 2) {
                    throw new IllegalStateException();
                }
                if (!Client.isDraggingWidget) {
                    if (b == 2) {
                        throw new IllegalStateException();
                    }
                    if (Client.menuOptionsCount * 730065501 > 0) {
                        if (b == 2) {
                            throw new IllegalStateException();
                        }
                        class204.method1136(Client.field544 * 565355253 + Client.widgetClickX * -1789924433, Client.field545 * 1136091355 + Client.widgetClickY * 1902621241, -1052930105);
                    }
                }
                Client.clickedWidget = null;
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.me(" + ')');
        }
    }
    
    public void on(final OtlTokenRequester field399) {
        if (null == field399) {
            return;
        }
        this.field399 = field399;
        class129.method763(10, (byte)83);
    }
    
    public static int lr(final int n, final int n2, final int n3, final int n4) {
        return n * n3 - n4 * n2 >> 16;
    }
    
    public boolean lr() {
        return fk(this, -1679837219);
    }
    
    static final void ss() {
        class133.method777(-621320819 * WorldMapRectangle.field2405, Players.field1095 * -1852915743, -760417651 * KitDefinition.field1519, -2054701696);
        GraphicsObject.method433(ScriptEvent.field851 * 1030659186, class86.field888 * -1130550549, (byte)101);
        if (-269699451 * class36.cameraX == -621320819 * WorldMapRectangle.field2405 && 1772923873 * class174.cameraY == -1852915743 * Players.field1095 && class297.cameraZ * 1682217267 == -760417651 * KitDefinition.field1519 && ScriptEvent.field851 * -2067315671 == WorldMapSectionType.cameraPitch * 132309572 && -1010818347 * class125.cameraYaw == class86.field888 * -1642659271) {
            Client.field598 = false;
            Client.isCameraLocked = false;
            Client.field541 = false;
            Client.field614 = false;
            FontName.field3970 = 0;
            MilliClock.field1455 = 0;
            ScriptFrame.field343 = 0;
            Archive.field3467 = 0;
            WorldMapElement.field1503 = 0;
            class138.field1314 = 0;
            KeyHandler.field81 = 0;
            ObjTypeCustomisation.field1471 = 0;
            class123.field1209 = 0;
            class16.field54 = 0;
            Client.field535 = null;
            Client.field604 = null;
            Client.field617 = null;
        }
    }
    
    final void os() {
    }
    
    public void os(final int model_transformTempY) {
        Model.Model_transformTempY = model_transformTempY;
    }
    
    public static void it(final int n) {
        ScriptFrame.client.getCallbacks().post((Object)new UsernameChanged());
    }
    
    static final void vs(final ZoneOperation zoneOperation) {
        final PacketBuffer packetBuffer = Client.packetWriter.packetBuffer;
        if (zoneOperation == ZoneOperation.field2565) {
            final int ra = Buffer.ra(packetBuffer, (byte)7);
            final int ra2 = Buffer.ra(packetBuffer, (byte)7);
            final int n = (ra2 >> 4 & 0x7) + class9.field28 * 1555915261;
            final int n2 = (ra2 & 0x7) + 1923662290 * FontName.field3968;
            final int n3 = packetBuffer.dq(-2070899692) * 4;
            final int or = Buffer.or(packetBuffer, -523126268);
            final int dq = packetBuffer.dq(-2070899692);
            final int cl = packetBuffer.cl(-750677525);
            final byte dj = packetBuffer.dj(-1737183932);
            final int n4 = packetBuffer.df(-1988161429) * 4;
            final int cl2 = packetBuffer.cl(-1316508348);
            final int dw = packetBuffer.dw((byte)3);
            final int n5 = packetBuffer.dx(-2090225885) + n;
            final int n6 = dj + n2;
            if (n >= 0 && n2 >= 0 && n < -2128423712 && n2 < 104 && n5 >= 0 && n6 >= 0 && n5 < -1180659581 && n6 < -1770222121 && 423982207 != or) {
                final int n7 = n * 435675543 + 64;
                final int n8 = 1939067065 + n2 * 128;
                final int n9 = 554483856 + n5 * -593206894;
                final int n10 = -674121440 * n6 - 1437537128;
                final Projectile projectile = new Projectile(or, -1727408401 * GameEngine.Client_plane, n7, n8, class147.getTileHeight(n7, n8, GameEngine.Client_plane * 138415848, (byte)(-92)) - n4, Client.cycle * -1886224337 + cl, cl2 + -1886224337 * Client.cycle, ra, dq, dw, n3);
                projectile.setDestination(n9, n10, class147.getTileHeight(n9, n10, -1727408401 * GameEngine.Client_plane, (byte)(-91)) - n3, Client.cycle * -1886224337 + cl, -335674854);
                Client.projectiles.addFirst(projectile);
            }
            return;
        }
        if (zoneOperation == ZoneOperation.field2563) {
            final int cl3 = packetBuffer.cl(-1289115117);
            int dx = packetBuffer.dx(-2070534987);
            int writeByteNeg = Buffer.writeByteNeg(packetBuffer, -1859477478);
            final int eq = packetBuffer.eq((byte)(-59));
            final int n11 = (eq >> 4 & 0x7) + 1555915261 * class9.field28;
            final int n12 = 51180032 * FontName.field3968 + (eq & 0x7);
            int wu = Buffer.wu(packetBuffer, 435772489);
            final int cl4 = packetBuffer.cl(93975249);
            int writeByteNeg2 = Buffer.writeByteNeg(packetBuffer, -945196494);
            final int ra3 = Buffer.ra(packetBuffer, (byte)7);
            final int n13 = ra3 >> 2;
            final int n14 = ra3 & 0x3;
            final int n15 = Client.field431[n13];
            final int or2 = Buffer.or(packetBuffer, -523126268);
            final int zc = Buffer.zc(packetBuffer, 1088519771);
            Player localPlayer;
            if (cl3 == -549033243 * Client.localPlayerIndex) {
                localPlayer = MusicPatchNode.localPlayer;
            }
            else {
                localPlayer = Client.players[cl3];
            }
            if (null != localPlayer) {
                final ObjectComposition vmethod3248 = class144.vmethod3248(zc, (short)16372);
                int n16;
                int n17;
                if (n14 || n14 == 3) {
                    n16 = -1025857420 * vmethod3248.sizeY;
                    n17 = vmethod3248.sizeX * -1209726728;
                }
                else {
                    n16 = -1339930361 * vmethod3248.sizeX;
                    n17 = vmethod3248.sizeY * -1659393955;
                }
                final int n18 = n11 + (n16 >> 1);
                final int n19 = n11 + (n16 + 1 >> 1);
                final int n20 = (n17 >> 1) + n12;
                final int n21 = (1 + n17 >> 1) + n12;
                final int[][] array = Tiles.Tiles_heights[GameEngine.Client_plane * -1727408401];
                final int n22 = array[n18][n21] + (array[n19][n20] + array[n18][n20]) + array[n19][n21] >> 2;
                final Model model = vmethod3248.getModel(n13, n14, array, (n11 << 7) + (n16 << 6), n22, (n17 << 6) + (n12 << 7), (byte)(-4));
                if (model != null) {
                    class33.updatePendingSpawn(GameEngine.Client_plane * -848676031, n11, n12, n15, -1, 0, 0, 1792169728, cl4 + 1, 1 + or2, 87894197);
                    localPlayer.animationCycleStart = (Client.cycle * -1886224337 + cl4) * -746690647;
                    localPlayer.animationCycleEnd = 1247139956 * (or2 + Client.cycle * -1886224337);
                    localPlayer.attachedModel = model;
                    localPlayer.field899 = n11 * -494827904 + -247413952 * n16;
                    localPlayer.field903 = n12 * 205947559 + n17 * 1202830719;
                    localPlayer.baseTileHeight = n22 * 25747975;
                    if (wu > writeByteNeg2) {
                        final int n23 = wu;
                        wu = writeByteNeg2;
                        writeByteNeg2 = n23;
                    }
                    if (dx > writeByteNeg) {
                        final int n24 = dx;
                        dx = writeByteNeg;
                        writeByteNeg = n24;
                    }
                    localPlayer.minX = (n11 + wu) * -1887542336;
                    localPlayer.maxX = 2059243849 * (n11 + writeByteNeg2);
                    localPlayer.minY = -751305383 * (n12 + dx);
                    localPlayer.maxY = (writeByteNeg + n12) * 105031851;
                }
            }
        }
        if (zoneOperation == ZoneOperation.field2562) {
            final int dq2 = packetBuffer.dq(-2070899692);
            final int n25 = (dq2 >> 4 & 0x7) + 1555915261 * class9.field28;
            final int n26 = (dq2 & 0x7) + -191732975 * FontName.field3968;
            final int cx = packetBuffer.cx(-1427728107);
            final int zc2 = Buffer.zc(packetBuffer, -1346039644);
            final int cx2 = packetBuffer.cx(-1193877861);
            if (n25 >= 0 && n26 >= 0 && n25 < -2026504985 && n26 < 104) {
                final NodeDeque nodeDeque = Client.groundItems[147237907 * GameEngine.Client_plane][n25][n26];
                if (nodeDeque != null) {
                    for (TileItem tileItem = (TileItem)nodeDeque.last(); tileItem != null; tileItem = (TileItem)nodeDeque.previous()) {
                        if ((zc2 & 0x9BF99C42) == 1501691571 * tileItem.id && cx2 == -1074866130 * tileItem.quantity) {
                            tileItem.quantity = cx * -1844554422;
                            break;
                        }
                    }
                    class121.updateItemPile(n25, n26, 1931769688);
                }
            }
            return;
        }
        if (ZoneOperation.field2570 == zoneOperation) {
            packetBuffer.eq((byte)(-34));
            final int en = packetBuffer.en(383378593);
            final int eq2 = packetBuffer.eq((byte)(-91));
            final int ra4 = Buffer.ra(packetBuffer, (byte)7);
            final int n27 = 1216972790 * class9.field28 + (ra4 >> 4 & 0x7);
            final int n28 = FontName.field3968 * -191732975 + (ra4 & 0x7);
            final int or3 = Buffer.or(packetBuffer, -523126268);
            packetBuffer.da(612978217);
            Buffer.or(packetBuffer, -523126268);
            packetBuffer.df(-2104425745);
            if (n27 >= 0 && n28 >= 0 && n27 < 104 && n28 < 104) {
                final TileItem tileItem2 = new TileItem();
                tileItem2.id = or3 * -968355835;
                tileItem2.quantity = en * -1785382127;
                TileItem.mq(tileItem2, eq2, (byte)(-92));
                if (Client.groundItems[GameEngine.Client_plane * -1727408401][n27][n28] == null) {
                    Client.groundItems[GameEngine.Client_plane * -352637346][n27][n28] = new NodeDeque();
                }
                Client.groundItems[GameEngine.Client_plane * -1727408401][n27][n28].addFirst(tileItem2);
                class121.updateItemPile(n27, n28, 2132546064);
            }
            return;
        }
        if (zoneOperation == ZoneOperation.field2567) {
            final int ra5 = Buffer.ra(packetBuffer, (byte)7);
            final int dq3 = packetBuffer.dq(-2070899692);
            final int n29 = -554673054 * class9.field28 + (dq3 >> 4 & 0x7);
            final int n30 = (dq3 & 0x7) + -1582400558 * FontName.field3968;
            final int df = packetBuffer.df(-2027017992);
            final int n31 = df >> 2;
            final int n32 = df & 0x3;
            final int n33 = Client.field431[n31];
            final int da = packetBuffer.da(864254123);
            if (n29 >= 0 && n30 >= 0 && n29 < 104 && n30 < 104) {
                class33.updatePendingSpawn(-1727408401 * GameEngine.Client_plane, n29, n30, n33, da, n31, n32, ra5, 0, -1, 87894197);
            }
            return;
        }
        if (ZoneOperation.field2569 == zoneOperation) {
            final int df2 = packetBuffer.df(-2111082309);
            final int n34 = (df2 >> 4 & 0x7) + class9.field28 * 1555915261;
            final int n35 = (df2 & 0x7) + FontName.field3968 * -147591876;
            final int da2 = packetBuffer.da(967692689);
            final int vl = Buffer.vl(packetBuffer, 363073604);
            if (n34 >= 0 && n35 >= 0 && n34 < 182673140 && n35 < -2128024446) {
                final NodeDeque nodeDeque2 = Client.groundItems[-1727408401 * GameEngine.Client_plane][n34][n35];
                if (null != nodeDeque2) {
                    for (TileItem tileItem3 = (TileItem)nodeDeque2.last(); null != tileItem3; tileItem3 = (TileItem)nodeDeque2.previous()) {
                        if ((da2 & 0x7FFF) == 783371193 * tileItem3.id && -1745152527 * tileItem3.quantity == vl) {
                            tileItem3.hw();
                            break;
                        }
                    }
                    if (nodeDeque2.last() == null) {
                        Client.groundItems[GameEngine.Client_plane * -2021011087][n34][n35] = null;
                    }
                    class121.updateItemPile(n34, n35, 1954513595);
                }
            }
            return;
        }
        if (ZoneOperation.field2572 == zoneOperation) {
            final int zc3 = Buffer.zc(packetBuffer, -583938777);
            final int df3 = packetBuffer.df(-2064408863);
            final int n36 = df3 >> 4 & 0xF;
            final int n37 = df3 & 0x7;
            final int eq3 = packetBuffer.eq((byte)(-44));
            final int n38 = -792535021 * class9.field28 + (eq3 >> 4 & 0x7);
            final int n39 = (eq3 & 0x7) + 510124582 * FontName.field3968;
            final int dq4 = packetBuffer.dq(-2070899692);
            if (n38 >= 0 && n39 >= 0 && n38 < 1169445259 && n39 < 104) {
                final int n40 = n36 + 1;
                if (MusicPatchNode.localPlayer.cf[0] >= n38 - n40 && MusicPatchNode.localPlayer.cf[0] <= n40 + n38 && MusicPatchNode.localPlayer.dy[0] >= n39 - n40 && MusicPatchNode.localPlayer.dy[0] <= n39 + n40 && class20.clientPreferences.method573(-2111571991) != 0 && n37 > 0 && -297150195 * Client.soundEffectCount < 50) {
                    Client.soundEffectIds[Client.soundEffectCount * -297150195] = zc3;
                    Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n37;
                    Client.queuedSoundEffectDelays[-1026734355 * Client.soundEffectCount] = dq4;
                    Client.soundEffects[Client.soundEffectCount * -297150195] = null;
                    Client.soundLocations[Client.soundEffectCount * -1340686149] = (n39 << 8) + (n38 << 16) + n36;
                    Client.soundEffectCount += 831233477;
                }
            }
        }
        if (zoneOperation == ZoneOperation.field2568) {
            final int zc4 = Buffer.zc(packetBuffer, 944023660);
            final int df4 = packetBuffer.df(-2022359856);
            final int n41 = (df4 >> 4 & 0x7) + class9.field28 * 1555915261;
            final int n42 = (df4 & 0x7) + FontName.field3968 * -191732975;
            final int eq4 = packetBuffer.eq((byte)(-64));
            if (n41 >= 0 && n42 >= 0 && n41 < 1972221504 && n42 < 1233119138) {
                final NodeDeque nodeDeque3 = Client.groundItems[GameEngine.Client_plane * -1102313823][n41][n42];
                if (null != nodeDeque3) {
                    for (TileItem tileItem4 = (TileItem)nodeDeque3.last(); null != tileItem4; tileItem4 = (TileItem)nodeDeque3.previous()) {
                        if ((zc4 & 0x7FFF) == 2067493953 * tileItem4.id) {
                            TileItem.mq(tileItem4, eq4, (byte)(-70));
                            break;
                        }
                    }
                }
            }
            return;
        }
        if (zoneOperation == ZoneOperation.field2564) {
            final int ra6 = Buffer.ra(packetBuffer, (byte)7);
            final int n43 = (ra6 >> 4 & 0x7) + class9.field28 * -778138804;
            final int n44 = (ra6 & 0x7) + FontName.field3968 * 907855486;
            final int da3 = packetBuffer.da(1068362121);
            final int df5 = packetBuffer.df(-2009519870);
            int n45 = df5 >> 2;
            final int n46 = df5 & 0x3;
            final int n47 = Client.field431[n45];
            if (n43 >= 0 && n44 >= 0 && n43 < 103 && n44 < 527356231) {
                if (n47 == 0) {
                    final BoundaryObject method1252 = class31.scene.method1252(GameEngine.Client_plane * 1985712852, n43, n44);
                    if (method1252 != null) {
                        final int entity_unpackID = InterfaceParent.Entity_unpackID(-4009183385476919801L * method1252.tag);
                        if (2 == n45) {
                            method1252.renderable1 = new DynamicObject(entity_unpackID, 2, n46 + 4, -1727408401 * GameEngine.Client_plane, n43, n44, da3, false, method1252.renderable1);
                            method1252.renderable2 = new DynamicObject(entity_unpackID, 2, n46 + 1 & 0x3, -1727408401 * GameEngine.Client_plane, n43, n44, da3, false, method1252.renderable2);
                        }
                        else {
                            method1252.renderable1 = new DynamicObject(entity_unpackID, n45, n46, GameEngine.Client_plane * -1923312638, n43, n44, da3, false, method1252.renderable1);
                        }
                        return;
                    }
                }
                if (n47 != 0) {
                    final WallDecoration method1253 = class31.scene.method1253(GameEngine.Client_plane * -1830075020, n43, n44);
                    if (null != method1253) {
                        final int entity_unpackID2 = InterfaceParent.Entity_unpackID(-4691380879163567243L * method1253.tag);
                        if (4 != n45 && n45 != 5) {
                            if (6 == n45) {
                                method1253.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + n46, 2013662202 * GameEngine.Client_plane, n43, n44, da3, false, method1253.renderable1);
                            }
                            else if (7 == n45) {
                                method1253.renderable1 = new DynamicObject(entity_unpackID2, 4, (2 + n46 & 0x3) + 4, GameEngine.Client_plane * -1727408401, n43, n44, da3, false, method1253.renderable1);
                            }
                            else if (n45 == 8) {
                                method1253.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + n46, -708261702 * GameEngine.Client_plane, n43, n44, da3, false, method1253.renderable1);
                                method1253.renderable2 = new DynamicObject(entity_unpackID2, 4, 4 + (2 + n46 & 0x3), -1727408401 * GameEngine.Client_plane, n43, n44, da3, false, method1253.renderable2);
                            }
                        }
                        else {
                            method1253.renderable1 = new DynamicObject(entity_unpackID2, 4, n46, GameEngine.Client_plane * -1727408401, n43, n44, da3, false, method1253.renderable1);
                        }
                        return;
                    }
                }
                if (n47 == 2) {
                    final GameObject gameObject = class31.scene.getGameObject(-947713867 * GameEngine.Client_plane, n43, n44);
                    if (11 == n45) {
                        n45 = 10;
                    }
                    if (null != gameObject) {
                        gameObject.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(5016412888503339625L * gameObject.tag), n45, n46, GameEngine.Client_plane * -1727408401, n43, n44, da3, false, gameObject.renderable);
                        return;
                    }
                }
                if (n47 == 3) {
                    final FloorDecoration floorDecoration = class31.scene.getFloorDecoration(-1727408401 * GameEngine.Client_plane, n43, n44);
                    if (floorDecoration != null) {
                        floorDecoration.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(3423223696102332293L * floorDecoration.tag), 22, n46, 621987808 * GameEngine.Client_plane, n43, n44, da3, false, floorDecoration.renderable);
                        return;
                    }
                }
                class186.method1009(-1517694588 * GameEngine.Client_plane, n43, n44, n47, da3, (byte)85);
            }
            return;
        }
        if (ZoneOperation.field2571 == zoneOperation) {
            final int eq5 = packetBuffer.eq((byte)(-25));
            final int n48 = class9.field28 * 1555915261 + (eq5 >> 4 & 0x7);
            final int n49 = FontName.field3968 * 613523021 + (eq5 & 0x7);
            final int ra7 = Buffer.ra(packetBuffer, (byte)7);
            final int n50 = ra7 >> 2;
            final int n51 = ra7 & 0x3;
            final int n52 = Client.field431[n50];
            if (n48 >= 0 && n49 >= 0 && n48 < -1520786722 && n49 < 104) {
                class33.updatePendingSpawn(1242820943 * GameEngine.Client_plane, n48, n49, n52, -1, n50, n51, 31, 0, -1, 87894197);
            }
            return;
        }
        if (zoneOperation == ZoneOperation.field2566) {
            final int df6 = packetBuffer.df(-2020398414);
            final int cl5 = packetBuffer.cl(-577430969);
            final int dq5 = packetBuffer.dq(-2070899692);
            final int n53 = (dq5 >> 4 & 0x7) + 1555915261 * class9.field28;
            final int n54 = FontName.field3968 * -2014686028 + (dq5 & 0x7);
            final int da4 = packetBuffer.da(1706684310);
            if (n53 >= 0 && n54 >= 0 && n53 < 104 && n54 < 925572088) {
                final int n55 = 193191315 * n53 - 566051278;
                final int n56 = 128 * n54 - 1021052720;
                Client.graphicsObjects.addFirst(new GraphicsObject(da4, GameEngine.Client_plane * -1727408401, n55, n56, class147.getTileHeight(n55, n56, GameEngine.Client_plane * -680031147, (byte)(-80)) - df6, cl5, -1886224337 * Client.cycle));
            }
        }
    }
    
    public int[] cf() {
        return Client.changedSkills;
    }
    
    public void om(final com$jagex$oldscape$pub$RefreshAccessTokenRequester field419) {
        try {
            if (field419 == null) {
                return;
            }
            this.field419 = field419;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.setRefreshTokenRequester(" + ')');
        }
    }
    
    public static void om(final Client client, final byte b) {
        if (client == null) {
            client.getLocalPlayer();
        }
    }
    
    public FloorOverlayDefinition ao() {
        return new FloorOverlayDefinition();
    }
    
    public static void ao(final int n) {
        final GameState gameState = ScriptFrame.client.getGameState();
        Client.nw.debug("Game state changed: {}", (Object)gameState);
        final GameStateChanged gameStateChanged = new GameStateChanged();
        gameStateChanged.setGameState(gameState);
        ScriptFrame.client.getCallbacks().post((Object)gameStateChanged);
        if (gameState == GameState.LOGGED_IN) {
            if (ScriptFrame.client.fv() == null) {
                return;
            }
            final int plane = ScriptFrame.client.getPlane();
            final Tile[][][] je = ScriptFrame.client.la().je();
            final NodeDeque[][] array = ScriptFrame.client.gk()[plane];
            for (int i = 0; i < 104; ++i) {
                for (int j = 0; j < 104; ++j) {
                    final NodeDeque nodeDeque = array[i][j];
                    if (nodeDeque != null) {
                        final Tile tile = je[plane][i][j];
                        for (Node jp = nodeDeque.jp(), node = jp.pt(); node != jp; node = node.pt()) {
                            final TileItem tileItem = (TileItem)node;
                            tileItem.of(i);
                            tileItem.mi(j);
                            ScriptFrame.client.getCallbacks().post((Object)new ItemSpawned((net.runelite.api.Tile)tile, (net.runelite.api.TileItem)tileItem));
                        }
                    }
                }
            }
        }
        else if (gameState == GameState.LOGIN_SCREEN) {
            hp();
        }
        else if (gameState == GameState.LOGGING_IN) {
            Client.hk.clear();
        }
    }
    
    public static void ao(final PacketBuffer packetBuffer, final int n) {
        zn();
    }
    
    public Tile sj(final int n, final int n2, final int n3) {
        return new Tile(n, n2, n3);
    }
    
    static final int sj(final int n) {
        if (Math.abs(n - -1010818347 * class125.cameraYaw) > 1024) {
            return ((n < -1010818347 * class125.cameraYaw) ? 1 : -1) * 2048 + n;
        }
        return n;
    }
    
    public SpritePixels ma(final int n, final int n2, final int n3, final int n4, final int n5, final boolean b) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return class252.getItemSprite(n, n2, n3, n4, n5, b, 13705148);
    }
    
    public static void ma(final int n) {
        final int dv = dv(Client.bx);
        final int dv2 = dv(Client.cm);
        ScriptFrame.client.mr(dv);
        ScriptFrame.client.we(dv2);
    }
    
    public void ma(final long n) {
        final double aq = aq(ScriptFrame.client.ol(), n);
        final double aq2 = aq(ScriptFrame.client.yn(), n);
        Client.bx += aq / 2.0;
        Client.cm += aq2 / 2.0;
        Client.cm = Doubles.constrainToRange(Client.cm, Client.zz ? 0.0 : 0.39269908169872414, Client.zz ? 1.5707963267948966 : 1.175029283520401);
        final int dv = dv(Client.bx);
        final int dv2 = dv(Client.cm);
        ScriptFrame.client.mr(dv);
        ScriptFrame.client.we(dv2);
    }
    
    @Override
    protected final void fw() {
        Client.cycle -= 310720817;
        gh(this, (byte)21);
        while (true) {
            final ArchiveDiskAction archiveDiskAction;
            synchronized (ArchiveDiskActionHandler.ArchiveDiskActionHandler_requestQueue) {
                archiveDiskAction = (ArchiveDiskAction)ArchiveDiskActionHandler.ArchiveDiskActionHandler_responseQueue.removeLast();
            }
            if (null == archiveDiskAction) {
                break;
            }
            Archive.bd(archiveDiskAction.archive, archiveDiskAction.archiveDisk, (int)archiveDiskAction.hr, archiveDiskAction.data, false, (byte)78);
        }
        try {
            if (1 == class297.musicPlayerStatus * 926096579) {
                final int method1644 = class475.midiPcmStream.method1644((byte)10);
                if (method1644 > 0 && class475.midiPcmStream.isReady(1584275613)) {
                    int n = method1644 - -1128553755 * class162.pcmSampleLength;
                    if (n < 0) {
                        n = 0;
                    }
                    class475.midiPcmStream.setPcmStreamVolume(n, (byte)19);
                }
                else {
                    class475.midiPcmStream.clear((byte)(-73));
                    class475.midiPcmStream.clearAll(1401362162);
                    if (class297.musicTrackArchive != null) {
                        class297.musicPlayerStatus = -1253644330;
                    }
                    else {
                        class297.musicPlayerStatus = 0;
                    }
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
            class475.midiPcmStream.clear((byte)(-4));
            class297.musicPlayerStatus = 0;
            RouteStrategy.musicTrack = null;
            class297.soundCache = null;
            class297.musicTrackArchive = null;
        }
        class323.playPcmPlayers(-379077298);
        class207.dv(Client.keyHandlerInstance, (byte)19);
        GameEngine.jk(this, (byte)18);
        synchronized (MouseHandler.MouseHandler_instance) {
            MouseHandler.MouseHandler_currentButton = MouseHandler.MouseHandler_currentButtonVolatile * 908499211;
            MouseHandler.MouseHandler_x = 1068258211 * MouseHandler.MouseHandler_xVolatile;
            MouseHandler.MouseHandler_y = -1918688485 * MouseHandler.MouseHandler_yVolatile;
            MouseHandler.MouseHandler_millis = MouseHandler.MouseHandler_lastMovedVolatile * -4029881570118555541L;
            MouseHandler.MouseHandler_lastButton = MouseHandler.MouseHandler_lastButtonVolatile * 199219569;
            MouseHandler.MouseHandler_lastPressedX = MouseHandler.MouseHandler_lastPressedXVolatile * -1850432819;
            MouseHandler.MouseHandler_lastPressedY = MouseHandler.MouseHandler_lastPressedYVolatile * -1699120075;
            MouseHandler.MouseHandler_lastPressedTimeMillis = 3548908311918388543L * MouseHandler.MouseHandler_lastPressedTimeMillisVolatile;
            MouseHandler.MouseHandler_lastButtonVolatile = 0;
        }
        if (class123.mouseWheel != null) {
            Client.mouseWheelRotation = class123.mouseWheel.useRotation(2047447309) * 1644925127;
        }
        if (Client.gameState * -1275976559 == 0) {
            DevicePcmPlayerProvider.load(2115076141);
            NPC.method611(599275396);
        }
        else if (Client.gameState * -1275976559 == 5) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1179705990);
            DevicePcmPlayerProvider.load(1965542732);
            NPC.method611(599275396);
        }
        else if (10 == -1275976559 * Client.gameState || 11 == -1275976559 * Client.gameState) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1004665752);
        }
        else if (-1275976559 * Client.gameState == 20) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1207512744);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 50) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1228672858);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 25) {
            class27.method122((byte)(-111));
        }
        if (-1275976559 * Client.gameState == 30) {
            hv(this, (byte)(-62));
        }
        else if (40 == Client.gameState * -1275976559 || -1275976559 * Client.gameState == 45) {
            this.doCycleLoggedOut(-564344594);
        }
    }
    
    public int nf() {
        return Scene.Scene_selectedScreenY;
    }
    
    public NPCComposition at(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return AbstractArchive.getNpcDefinition(n, (byte)(-107));
    }
    
    public void ak(final int scene_cameraY) {
        Scene.Scene_cameraY = scene_cameraY;
    }
    
    public Player pt() {
        if (this.getHintArrowType() != 10) {
            return null;
        }
        final int doCycleJs5 = ScriptFrame.client.doCycleJs5();
        final Player[] ic = ScriptFrame.client.ic();
        if (doCycleJs5 < 0 || doCycleJs5 >= ic.length) {
            return null;
        }
        return ic[doCycleJs5];
    }
    
    static int th() {
        return Client.isResizable ? 2 : 1;
    }
    
    static void tc(final int n) {
        Client.field581 = 0L;
        if (n >= 2) {
            Client.isResizable = true;
        }
        else {
            Client.isResizable = false;
        }
        if (GrandExchangeOfferNameComparator.getWindowedMode(341356723) == 1) {
            ScriptFrame.client.al(765, 503, (byte)2);
        }
        else {
            ScriptFrame.client.al(7680, 2160, (byte)2);
        }
        if (-1275976559 * Client.gameState >= 25) {
            class1.method4(346656116);
        }
    }
    
    static void rv(final SequenceDefinition sequenceDefinition, final int n, final int n2, final int n3) {
        if (-297150195 * Client.soundEffectCount >= 50 || class20.clientPreferences.method573(-2054414796) == 0) {
            return;
        }
        if (sequenceDefinition.animMayaFrameSounds != null && sequenceDefinition.animMayaFrameSounds.containsKey(n)) {
            class161.method908(sequenceDefinition.animMayaFrameSounds.get(n), n2, n3, 1813863701);
        }
    }
    
    public void ni(final int n, final int n2, final int n3) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        class133.queueSoundEffect(n, n2, n3, (byte)(-121));
    }
    
    public static String ni(final String s) {
        return ScriptFrame.client.mj(s);
    }
    
    static final void wt(final boolean b, final PacketBuffer packetBuffer) {
        while (true) {
            final int n = 16;
            final int n2 = 1 << n;
            if (packetBuffer.readBits(889658999 * Client.packetWriter.serverPacketLength, 1751384746) < 12 + n) {
                break;
            }
            final int bitsRemaining = packetBuffer.bitsRemaining(n, -1159908033);
            if (n2 - 1 == bitsRemaining) {
                break;
            }
            boolean b2 = false;
            if (null == Client.npcs[bitsRemaining]) {
                Client.npcs[bitsRemaining] = new NPC();
                b2 = true;
            }
            final NPC npc = Client.npcs[bitsRemaining];
            Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = bitsRemaining;
            npc.de = Client.cycle * -1014023335;
            int n3;
            if (b) {
                n3 = packetBuffer.bitsRemaining(8, -2096485955);
                if (n3 > 127) {
                    n3 -= 256;
                }
            }
            else {
                n3 = packetBuffer.bitsRemaining(5, -1704775792);
                if (n3 > 15) {
                    n3 -= 32;
                }
            }
            if (packetBuffer.bitsRemaining(1, -1401879670) == 1) {
                packetBuffer.bitsRemaining(32, -601466019);
            }
            if (1 == packetBuffer.bitsRemaining(1, -1298951081)) {
                Client.field417[(Client.field416 += 1487412345) * 606834121 - 1] = bitsRemaining;
            }
            final int bitsRemaining2 = packetBuffer.bitsRemaining(1, 202079680);
            npc.definition = AbstractArchive.getNpcDefinition(packetBuffer.bitsRemaining(14, -1574123829), (byte)(-31));
            int n4;
            if (b) {
                n4 = packetBuffer.bitsRemaining(8, -816984403);
                if (n4 > 127) {
                    n4 -= 256;
                }
            }
            else {
                n4 = packetBuffer.bitsRemaining(5, -855139075);
                if (n4 > 15) {
                    n4 -= 32;
                }
            }
            final int n5 = Client.field561[packetBuffer.bitsRemaining(3, -1695019643)];
            if (b2) {
                final NPC npc2 = npc;
                final NPC npc3 = npc;
                final int dx = -1228309915 * n5;
                npc3.dx = dx;
                npc2.bj = dx * 720096107;
            }
            class142.method811(npc, (byte)64);
            if (npc.cv * 351748387 == 0) {
                npc.dx = 0;
            }
            npc.method594(n4 + MusicPatchNode.localPlayer.cf[0], n3 + MusicPatchNode.localPlayer.dy[0], bitsRemaining2, -1046737296);
        }
        packetBuffer.exportIndex((byte)(-85));
    }
    
    static final void sw(final Widget widget, final int n, final int n2) {
        if (Client.minimapState * 1383336963 != 0 && 1383336963 * Client.minimapState != 3) {
            return;
        }
        if (!Client.isMenuOpen && (MouseHandler.MouseHandler_lastButton * -1222491879 == 1 || (!class473.mouseCam && MouseHandler.MouseHandler_lastButton * -1222491879 == 4))) {
            final SpriteMask vn = Widget.vn(widget, true, (byte)(-25));
            if (null == vn) {
                return;
            }
            final int n3 = 2020601481 * MouseHandler.MouseHandler_lastPressedX - n;
            final int n4 = MouseHandler.MouseHandler_lastPressedY * 1163896205 - n2;
            if (vn.contains(n3, n4, -746690647)) {
                final int n5 = n3 - vn.width * 1484188043 / 2;
                final int n6 = n4 - vn.height * 939947663 / 2;
                final int n7 = Client.camAngleY * 704283033 & 0x7FF;
                final int n8 = Rasterizer3D.Rasterizer3D_sine[n7];
                final int n9 = Rasterizer3D.Rasterizer3D_cosine[n7];
                final int n10 = n5 * n9 + n6 * n8 >> 11;
                final int n11 = n6 * n9 - n5 * n8 >> 11;
                final int n12 = 1144428983 * MusicPatchNode.localPlayer.br + n10 >> 7;
                final int n13 = MusicPatchNode.localPlayer.ep * -411750205 - n11 >> 7;
                final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2471, Client.packetWriter.isaacCipher, (short)(-12057));
                packetBufferNode.packetBuffer.bf(18, (byte)29);
                packetBufferNode.packetBuffer.ds(GameObject.baseY * 827352769 + n13, -1832392499);
                Buffer.ap(packetBufferNode.packetBuffer, n12 + -1232093375 * WorldMapData_0.baseX, (byte)121);
                packetBufferNode.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, 986749587) ? (Client.keyHandlerInstance.getKeyPressed(81, 934636475) ? 2 : 1) : 0, 163222540);
                packetBufferNode.packetBuffer.bf(n5, (byte)105);
                packetBufferNode.packetBuffer.bf(n6, (byte)39);
                packetBufferNode.packetBuffer.cq(704283033 * Client.camAngleY, (byte)(-24));
                packetBufferNode.packetBuffer.bf(57, (byte)66);
                packetBufferNode.packetBuffer.bf(0, (byte)65);
                packetBufferNode.packetBuffer.bf(0, (byte)89);
                packetBufferNode.packetBuffer.bf(89, (byte)118);
                packetBufferNode.packetBuffer.cq(1144428983 * MusicPatchNode.localPlayer.br, (byte)(-53));
                packetBufferNode.packetBuffer.cq(MusicPatchNode.localPlayer.ep * -411750205, (byte)63);
                packetBufferNode.packetBuffer.bf(63, (byte)67);
                Client.packetWriter.addNode(packetBufferNode, 414135591);
                Client.destinationX = n12 * -1970850269;
                Client.destinationY = 875414437 * n13;
            }
        }
    }
    
    public static void sw() {
        if (GrandExchangeOfferNameComparator.ArchiveDiskActionHandler_thread != null && !"cache io".equals(GrandExchangeOfferNameComparator.ArchiveDiskActionHandler_thread.getName())) {
            GrandExchangeOfferNameComparator.ArchiveDiskActionHandler_thread.setName("cache io");
        }
    }
    
    public void dw(final int n, final int n2, final int n3, final int n4, final int n5) {
        Rasterizer2D.Rasterizer2D_drawCircleAlpha(n, n2, n3, n4, n5);
    }
    
    static final boolean abi(final Widget widget) {
        if (null == widget.cs1Comparisons) {
            return false;
        }
        for (int i = 0; i < widget.cs1Comparisons.length; ++i) {
            final int method478 = ArchiveLoader.method478(widget, i, 1696113134);
            final int n = widget.cs1ComparisonValues[i];
            if (widget.cs1Comparisons[i] == 2) {
                if (method478 >= n) {
                    return false;
                }
            }
            else if (widget.cs1Comparisons[i] == 3) {
                if (method478 <= n) {
                    return false;
                }
            }
            else if (4 == widget.cs1Comparisons[i]) {
                if (method478 == n) {
                    return false;
                }
            }
            else if (n != method478) {
                return false;
            }
        }
        return true;
    }
    
    public void gf(final int n, final int n2) {
        dz(this, n, n2, 1018516557);
    }
    
    @Override
    protected final void gf() {
        Client.cycle -= 310720817;
        gh(this, (byte)(-42));
        while (true) {
            final ArchiveDiskAction archiveDiskAction;
            synchronized (ArchiveDiskActionHandler.ArchiveDiskActionHandler_requestQueue) {
                archiveDiskAction = (ArchiveDiskAction)ArchiveDiskActionHandler.ArchiveDiskActionHandler_responseQueue.removeLast();
            }
            if (null == archiveDiskAction) {
                break;
            }
            Archive.bd(archiveDiskAction.archive, archiveDiskAction.archiveDisk, (int)archiveDiskAction.hr, archiveDiskAction.data, false, (byte)85);
        }
        try {
            if (1 == class297.musicPlayerStatus * 926096579) {
                final int method1644 = class475.midiPcmStream.method1644((byte)65);
                if (method1644 > 0 && class475.midiPcmStream.isReady(1080640558)) {
                    int n = method1644 - -1128553755 * class162.pcmSampleLength;
                    if (n < 0) {
                        n = 0;
                    }
                    class475.midiPcmStream.setPcmStreamVolume(n, (byte)19);
                }
                else {
                    class475.midiPcmStream.clear((byte)(-30));
                    class475.midiPcmStream.clearAll(1469081218);
                    if (class297.musicTrackArchive != null) {
                        class297.musicPlayerStatus = -1253644330;
                    }
                    else {
                        class297.musicPlayerStatus = 0;
                    }
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
            class475.midiPcmStream.clear((byte)(-18));
            class297.musicPlayerStatus = 0;
            RouteStrategy.musicTrack = null;
            class297.soundCache = null;
            class297.musicTrackArchive = null;
        }
        class323.playPcmPlayers(-93640097);
        class207.dv(Client.keyHandlerInstance, (byte)8);
        GameEngine.jk(this, (byte)82);
        synchronized (MouseHandler.MouseHandler_instance) {
            MouseHandler.MouseHandler_currentButton = MouseHandler.MouseHandler_currentButtonVolatile * 908499211;
            MouseHandler.MouseHandler_x = 1068258211 * MouseHandler.MouseHandler_xVolatile;
            MouseHandler.MouseHandler_y = -1918688485 * MouseHandler.MouseHandler_yVolatile;
            MouseHandler.MouseHandler_millis = MouseHandler.MouseHandler_lastMovedVolatile * -4029881570118555541L;
            MouseHandler.MouseHandler_lastButton = MouseHandler.MouseHandler_lastButtonVolatile * 199219569;
            MouseHandler.MouseHandler_lastPressedX = MouseHandler.MouseHandler_lastPressedXVolatile * -1850432819;
            MouseHandler.MouseHandler_lastPressedY = MouseHandler.MouseHandler_lastPressedYVolatile * -1699120075;
            MouseHandler.MouseHandler_lastPressedTimeMillis = 3548908311918388543L * MouseHandler.MouseHandler_lastPressedTimeMillisVolatile;
            MouseHandler.MouseHandler_lastButtonVolatile = 0;
        }
        if (class123.mouseWheel != null) {
            Client.mouseWheelRotation = class123.mouseWheel.useRotation(1754585120) * 1644925127;
        }
        if (Client.gameState * -1275976559 == 0) {
            DevicePcmPlayerProvider.load(1831054484);
            NPC.method611(599275396);
        }
        else if (Client.gameState * -1275976559 == 5) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1319856944);
            DevicePcmPlayerProvider.load(1651347635);
            NPC.method611(599275396);
        }
        else if (10 == -1275976559 * Client.gameState || 11 == -1275976559 * Client.gameState) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1785131948);
        }
        else if (-1275976559 * Client.gameState == 20) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1370899965);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 50) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 2145867224);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 25) {
            class27.method122((byte)(-87));
        }
        if (-1275976559 * Client.gameState == 30) {
            hv(this, (byte)0);
        }
        else if (40 == Client.gameState * -1275976559 || -1275976559 * Client.gameState == 45) {
            this.doCycleLoggedOut(-564344594);
        }
    }
    
    public void gf(final int[] spriteBuffer_yOffsets) {
        class17.SpriteBuffer_yOffsets = spriteBuffer_yOffsets;
    }
    
    public void is(final int n) {
        Client.destinationX = n * -1970850269;
    }
    
    static final void rn() {
        if (ItemContainer.field844) {
            for (int i = 0; i < -2010934433 * Players.Players_count; ++i) {
                Player.ue(Client.players[Players.Players_indices[i]], 453146982);
            }
            ItemContainer.field844 = false;
        }
    }
    
    public AccessFile rn(final String s, final String s2, final boolean b) {
        return Rasterizer3D.getPreferencesFile(s, s2, b, (byte)(-55));
    }
    
    public static void cp(final String s, final Throwable t) {
        class387.RunException_sendStackTrace(s, t, (byte)8);
    }
    
    static void ts(final Player player, final int n, final int n2) {
        if (-1372355773 * player.cs == n && n != -1) {
            final int n3 = ItemContainer.SpotAnimationDefinition_get(n, (byte)29).replyMode * 789159225;
            if (n3 != 0) {
                player.dw = 0;
                player.dn = 0;
                player.bd = n2 * -401806131;
                player.bo = 0;
            }
            if (2 == n3) {
                player.bo = 0;
            }
        }
        else if (-1 == n || player.cs * -1372355773 == -1 || ItemContainer.SpotAnimationDefinition_get(n, (byte)94).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(-1372355773 * player.cs, (byte)85).forcedPriority * -1932560049) {
            player.cs = n * -1690721941;
            player.dw = 0;
            player.dn = 0;
            player.bd = n2 * -401806131;
            player.bo = 0;
            player.dk = player.cb * -1718989897;
        }
    }
    
    public ScriptEvent ek(final Object... array) {
        final ScriptEvent rx = this.rx();
        rx.ye(array);
        return rx;
    }
    
    public static void fk(final int n) {
        if (n == -1) {
            return;
        }
        final int n2 = ScriptFrame.client.cf()[n - 1 & 0x1F];
        final Skill[] values = Skill.values();
        if (n2 < 0 || n2 >= values.length - 1) {
            return;
        }
        ScriptFrame.client.getCallbacks().post((Object)new StatChanged(values[n2], ScriptFrame.client.getSkillExperiences()[n2], ScriptFrame.client.getRealSkillLevels()[n2], ScriptFrame.client.getBoostedSkillLevels()[n2]));
    }
    
    public static boolean fk(final Client client, final int n) {
        if (client == null) {
            return client.shouldLeftClickOpenMenu(n);
        }
        final int n2 = -1679837219;
        boolean b2;
        try {
            final int method461 = DynamicObject.method461((short)3069);
            int n3 = (Client.leftClickOpensMenu && 730065501 * Client.menuOptionsCount > 2) ? 1 : 0;
            if (n3 == 0) {
                if (n2 != -1679837219) {
                    throw new IllegalStateException();
                }
                int n4;
                if (method461 < 0) {
                    if (n2 != -1679837219) {
                        throw new IllegalStateException();
                    }
                    n4 = 0;
                }
                else {
                    int n5 = Client.menuOpcodes[method461];
                    if (n5 >= 2000) {
                        if (n2 != -1679837219) {
                            throw new IllegalStateException();
                        }
                        n5 -= 2000;
                    }
                    if (1007 == n5) {
                        n4 = 1;
                    }
                    else {
                        n4 = 0;
                    }
                }
                n3 = n4;
            }
            boolean b = false;
            Label_0238: {
                if (n3 != 0) {
                    if (n2 != -1679837219) {
                        throw new IllegalStateException();
                    }
                    if (!Client.menuShiftClick[method461]) {
                        if (n2 != -1679837219) {
                            throw new IllegalStateException();
                        }
                        b = true;
                        break Label_0238;
                    }
                }
                b = false;
            }
            b2 = b;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.kr(" + ')');
        }
        if (b2) {
            return true;
        }
        final MenuShouldLeftClick menuShouldLeftClick = new MenuShouldLeftClick();
        ScriptFrame.client.getCallbacks().post((Object)menuShouldLeftClick);
        if (menuShouldLeftClick.isForceRightClick()) {
            return true;
        }
        final int vv = client.vv();
        if (vv > 0) {
            final int n6 = Client.menuOpcodes[vv - 1];
            return n6 == MenuAction.RUNELITE_OVERLAY.getId() || n6 == MenuAction.RUNELITE_OVERLAY_CONFIG.getId() || n6 == MenuAction.RUNELITE_INFOBOX.getId();
        }
        return false;
    }
    
    public Player fv() {
        return MusicPatchNode.localPlayer;
    }
    
    public KeyHandler fv() {
        return GameEngine.keyHandler;
    }
    
    @Override
    public final void fh() {
        if (!this.ae(-50655555)) {
            return;
        }
        for (int i = 0; i <= 28; ++i) {
            final String parameter = this.getParameter(Integer.toString(i));
            if (null != parameter) {
                switch (i) {
                    case 7: {
                        AABB.field2070 = class146.vmethod3254(Integer.parseInt(parameter), 490608329);
                        break;
                    }
                    case 17: {
                        GrandExchangeOffer.field3530 = parameter;
                        break;
                    }
                    case 21: {
                        Client.param21 = Integer.parseInt(parameter) * -1581503853;
                        break;
                    }
                    case 6: {
                        ClanSettings.clientLanguage = Language.method1943(Integer.parseInt(parameter), (byte)(-1));
                        break;
                    }
                    case 14: {
                        TriBool.field3738 = Integer.parseInt(parameter) * -447901147;
                        break;
                    }
                    case 4: {
                        if (Client.clientType * -749752677 == -1) {
                            Client.clientType = Integer.parseInt(parameter) * -240023661;
                            break;
                        }
                        break;
                    }
                    case 9: {
                        class108.param9 = parameter;
                        break;
                    }
                    case 12: {
                        Client.worldId = Integer.parseInt(parameter) * -1381008117;
                        break;
                    }
                    case 15: {
                        Client.gameBuild = Integer.parseInt(parameter) * -261185633;
                        break;
                    }
                    case 11: {
                        ViewportMouse.field2213 = parameter;
                        break;
                    }
                    case 3: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            Client.isMembersWorld = true;
                            break;
                        }
                        Client.isMembersWorld = false;
                        break;
                    }
                    case 10: {
                        Client.field358 = (StudioGame)StructComposition.findEnumerated(TaskHandler.getClipMidX(2039240403), Integer.parseInt(parameter), (short)173);
                        if (Client.field358 == StudioGame.oldscape) {
                            class70.loginType = LoginType.oldscape;
                            break;
                        }
                        class70.loginType = LoginType.field3998;
                        break;
                    }
                    case 8: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            break;
                        }
                        break;
                    }
                    case 25: {
                        final int index = parameter.indexOf(".");
                        if (index == -1) {
                            Client.param25 = Integer.parseInt(parameter) * -1712441187;
                            break;
                        }
                        Client.param25 = Integer.parseInt(parameter.substring(0, index)) * -1712441187;
                        Integer.parseInt(parameter.substring(1 + index));
                        break;
                    }
                    case 5: {
                        Client.worldProperties = Integer.parseInt(parameter) * 1294598713;
                        break;
                    }
                }
            }
        }
        Scene.Scene_isLowDetail = false;
        Client.isLowDetail = false;
        UserComparator8.worldHost = this.getCodeBase().getHost();
        final String name = AABB.field2070.name;
        final int n = 0;
        try {
            JagexCache.idxCount = -327637298;
            JagexCache.cacheGamebuild = n * 261077081;
            try {
                ModeWhere.operatingSystemName = System.getProperty("os.name");
            }
            catch (Exception ex2) {
                ModeWhere.operatingSystemName = "Unknown";
            }
            WorldMapSectionType.formattedOperatingSystemName = ModeWhere.operatingSystemName.toLowerCase();
            try {
                HorizontalAlignment.userHomeDirectory = System.getProperty("user.home");
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex3) {}
            try {
                if (WorldMapSectionType.formattedOperatingSystemName.startsWith("win")) {
                    if (HorizontalAlignment.userHomeDirectory == null) {
                        HorizontalAlignment.userHomeDirectory = ni("USERPROFILE");
                    }
                }
                else if (HorizontalAlignment.userHomeDirectory == null) {
                    HorizontalAlignment.userHomeDirectory = ni("HOME");
                }
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex4) {}
            if (HorizontalAlignment.userHomeDirectory == null) {
                HorizontalAlignment.userHomeDirectory = "~/";
            }
            class130.cacheParentPaths = new String[] { "c:/rscache/", "/rscache/", "c:/windows/", "c:/winnt/", "c:/", HorizontalAlignment.userHomeDirectory, "/tmp/", "" };
            class96.cacheSubPaths = new String[] { ".jagex_cache_" + -1325133847 * JagexCache.cacheGamebuild, ".file_store_" + -1325133847 * JagexCache.cacheGamebuild };
            int j = 0;
        Label_0764:
            while (j < 4) {
                class335.cacheDir = ClanSettings.method867("oldschool", name, j, 177960663);
                if (!class335.cacheDir.exists()) {
                    class335.cacheDir.mkdirs();
                }
                final File[] listFiles = class335.cacheDir.listFiles();
                if (null != listFiles) {
                    final File[] array = listFiles;
                    for (int k = 0; k < array.length; ++k) {
                        final File file = array[k];
                        boolean b;
                        try {
                            final RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
                            final int read = randomAccessFile.read();
                            randomAccessFile.seek(0L);
                            randomAccessFile.write(read);
                            randomAccessFile.seek(0L);
                            randomAccessFile.close();
                            b = true;
                        }
                        catch (Exception ex5) {
                            b = false;
                        }
                        if (!b) {
                            ++j;
                            continue Label_0764;
                        }
                    }
                    break;
                }
                break;
            }
            class513.FileSystem_cacheDir = class335.cacheDir;
            if (!class513.FileSystem_cacheDir.exists()) {
                throw new RuntimeException("");
            }
            FileSystem.FileSystem_hasPermissions = true;
            Tiles.method475((byte)1);
            JagexCache.JagexCache_dat2File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.dat2", -925786170), "rw", 1048576000L), 5200, 0);
            JagexCache.JagexCache_idx255File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx255", -1274045056), "rw", 1048576L), 6000, 0);
            class370.JagexCache_idxFiles = new BufferedFile[JagexCache.idxCount * 1064766397];
            for (int l = 0; l < 1064766397 * JagexCache.idxCount; ++l) {
                class370.JagexCache_idxFiles[l] = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx" + l, -370726189), "rw", 1048576L), 6000, 0);
            }
        }
        catch (Exception ex) {
            class387.RunException_sendStackTrace(null, ex, (byte)8);
        }
        ScriptFrame.client = this;
        RunException.field4178 = Client.clientType * 1056936977;
        ModeWhere.field3571 = ni("JX_ACCESS_TOKEN");
        TileItem.field1079 = ni("JX_REFRESH_TOKEN");
        SpriteMask.field2808 = ni("JX_SESSION_ID");
        class121.field1185 = ni("JX_CHARACTER_ID");
        Login.field749 = class31.method133(ni("JX_DISPLAY_NAME"), -92153668);
        if (Boolean.parseBoolean(System.getProperty("jagex.disableBouncyCastle"))) {
            this.field401 = true;
        }
        if (-1 == 838232771 * Client.field363) {
            if (ay(this, 1979436171) || this.method369((byte)91)) {
                Client.field363 = 2078698903;
            }
            else {
                Client.field363 = 0;
            }
        }
        this.ak(765, 503, 213, 1, (byte)(-77));
    }
    
    static void pv() {
        if (-627796577 * Client.titleLoadingStage == 0) {
            class31.scene = new Scene(4, 104, 1354543303, Tiles.Tiles_heights);
            for (int i = 0; i < 4; ++i) {
                Client.collisionMaps[i] = new CollisionMap(104, 104);
            }
            UrlRequester.sceneMinimapSprite = new SpritePixels(1782833488, -1871799221);
            Login.Login_loadingText = Strings.ag;
            Login.Login_loadingPercent = -273595257;
            Client.titleLoadingStage = 1602846572;
            return;
        }
        if (20 == Client.titleLoadingStage * 789060859) {
            Login.Login_loadingText = Strings.ah;
            Login.Login_loadingPercent = -2126902070;
            Client.titleLoadingStage = -1890697438;
            return;
        }
        if (Client.titleLoadingStage * 1047180716 == 30) {
            DevicePcmPlayerProvider.field67 = WorldMapLabelSize.newArchive(0, false, true, true, false, 2052636613);
            GameBuild.archive7 = WorldMapLabelSize.newArchive(1, false, true, true, false, 2145842043);
            class85.archive2 = WorldMapLabelSize.newArchive(2, true, false, true, false, 2080095649);
            class85.archive4 = WorldMapLabelSize.newArchive(3, false, true, true, false, 2119779916);
            class426.field3811 = WorldMapLabelSize.newArchive(4, false, true, true, false, 2042429754);
            GrandExchangeOfferTotalQuantityComparator.archive9 = WorldMapLabelSize.newArchive(5, true, true, true, false, 2104845747);
            class399.archive6 = WorldMapLabelSize.newArchive(6, true, true, true, false, 2093477418);
            FloorUnderlayDefinition.archive11 = WorldMapLabelSize.newArchive(7, false, true, true, false, 2063453066);
            class452.archive8 = WorldMapLabelSize.newArchive(8, false, true, true, false, 2113619680);
            WorldMapLabelSize.field2285 = WorldMapLabelSize.newArchive(9, false, true, true, false, 2093820025);
            NetFileRequest.archive10 = WorldMapLabelSize.newArchive(10, false, true, true, false, 2036275037);
            class195.field1645 = WorldMapLabelSize.newArchive(11, false, true, true, false, 2119562902);
            class126.archive12 = WorldMapLabelSize.newArchive(12, false, true, true, false, 2036673440);
            class128.archive13 = WorldMapLabelSize.newArchive(13, true, false, true, false, 2137525609);
            class230.archive14 = WorldMapLabelSize.newArchive(14, false, true, true, false, 2135885041);
            class126.archive15 = WorldMapLabelSize.newArchive(15, false, true, true, false, 2064466277);
            class168.archive17 = WorldMapLabelSize.newArchive(17, true, true, true, false, 2142777490);
            GrandExchangeOfferUnitPriceComparator.archive18 = WorldMapLabelSize.newArchive(18, false, true, true, false, 2102354053);
            class28.archive19 = WorldMapLabelSize.newArchive(19, false, true, true, false, 2090225429);
            class205.archive20 = WorldMapLabelSize.newArchive(20, false, true, true, false, 2084999561);
            PcmPlayer.field211 = WorldMapLabelSize.newArchive(21, false, true, true, true, 2039022963);
            Login.Login_loadingText = Strings.av;
            Login.Login_loadingPercent = 41163156;
            Client.titleLoadingStage = -1089274152;
            return;
        }
        if (-1052246680 == 962597090 * Client.titleLoadingStage) {
            final int j = 0 + DevicePcmPlayerProvider.field67.percentage((byte)0) * 4 / 100 + GameBuild.archive7.percentage((byte)0) * 4 / 1453601069 + class85.archive2.percentage((byte)0) * 2 / 100 + class85.archive4.percentage((byte)0) * 2 / 100 + class426.field3811.percentage((byte)0) * 6 / 1011050701 + GrandExchangeOfferTotalQuantityComparator.archive9.percentage((byte)0) * 4 / 100 + class399.archive6.percentage((byte)0) * 2 / 100 + FloorUnderlayDefinition.archive11.percentage((byte)0) * 1569005762 / 100 + class452.archive8.percentage((byte)0) * 2 / 100 + WorldMapLabelSize.field2285.percentage((byte)0) * 2 / 100 + NetFileRequest.archive10.percentage((byte)0) * 2 / -1560718823 + class195.field1645.percentage((byte)0) * 2 / 100 + class126.archive12.percentage((byte)0) * 2 / 100 + class128.archive13.percentage((byte)0) * 2 / -1762922687 + class230.archive14.percentage((byte)0) * 2 / 100 + class126.archive15.percentage((byte)0) * 2 / 1360473313 + class28.archive19.percentage((byte)0) * 1 / 100 + GrandExchangeOfferUnitPriceComparator.archive18.percentage((byte)0) * 1 / 100 + class205.archive20.percentage((byte)0) * 1 / 100 + PcmPlayer.field211.percentage((byte)0) * 1 / 100 + ((class168.archive17.method1862((byte)(-20)) && class168.archive17.cc((short)128)) ? 1 : 0);
            if (-1366549378 != j) {
                if (j != 0) {
                    Login.Login_loadingText = Strings.ar + j + "%";
                }
                Login.Login_loadingPercent = 1308231941;
                return;
            }
            UserComparator5.method696(DevicePcmPlayerProvider.field67, "Animations", 1731256952);
            UserComparator5.method696(GameBuild.archive7, "Skeletons", 1646268807);
            UserComparator5.method696(class426.field3811, "Sound FX", 1605370534);
            UserComparator5.method696(GrandExchangeOfferTotalQuantityComparator.archive9, "Maps", 1752843281);
            UserComparator5.method696(class399.archive6, "Music Tracks", 1725461670);
            UserComparator5.method696(FloorUnderlayDefinition.archive11, "Models", 1329993731);
            UserComparator5.method696(class452.archive8, "Sprites", 1007402476);
            UserComparator5.method696(class195.field1645, "Music Jingles", 1684142156);
            UserComparator5.method696(class230.archive14, "Music Samples", 1138148978);
            UserComparator5.method696(class126.archive15, "Music Patches", 1696162049);
            UserComparator5.method696(class28.archive19, "World Map", 2030553690);
            UserComparator5.method696(GrandExchangeOfferUnitPriceComparator.archive18, "World Map Geography", 1634699272);
            UserComparator5.method696(class205.archive20, "World Map Ground", 1213679754);
            (Varcs.spriteIds = new GraphicsDefaults()).decode(class168.archive17, 387244302);
            Login.Login_loadingText = Strings.am;
            Login.Login_loadingPercent = -614139540;
            Client.titleLoadingStage = 1458921139;
        }
        else {
            if (-627796577 * Client.titleLoadingStage == 406823146) {
                final boolean pcmPlayer_stereo = !Client.isLowDetail;
                PcmPlayer.field201 = -1500814902;
                PcmPlayer.PcmPlayer_stereo = pcmPlayer_stereo;
                UrlRequest.field1154 = -821978935;
                final MidiPcmStream midiPcmStream = new MidiPcmStream();
                midiPcmStream.method1618(9, 1106318182, (byte)(-83));
                (class28.pcmPlayer0 = class148.method843(Client.af, 0, 22050, 1831095645)).setStream(midiPcmStream, -188022078);
                ParamComposition.method1060(class126.archive15, class230.archive14, class426.field3811, midiPcmStream, -1821221274);
                HorizontalAlignment.pcmPlayer1 = class148.method843(Client.af, 1, -934905240, 1831095645);
                class130.pcmStreamMixer = new PcmStreamMixer();
                HorizontalAlignment.pcmPlayer1.setStream(class130.pcmStreamMixer, -837321236);
                WorldMapSectionType.decimator = new Decimator(22050, PcmPlayer.field201 * -794754446);
                Login.Login_loadingText = Strings.as;
                Login.Login_loadingPercent = -453754907;
                Client.titleLoadingStage = -269240559;
                class357.WorldMapElement_fonts = new Fonts(class452.archive8, class128.archive13);
                return;
            }
            if (50 == -627796577 * Client.titleLoadingStage) {
                final int length = FontName.method2388((byte)56).length;
                Client.fontsMap = class357.WorldMapElement_fonts.createMap(FontName.method2388((byte)58), (byte)67);
                if (Client.fontsMap.size() < length) {
                    Login.Login_loadingText = Strings.aj + Client.fontsMap.size() * 100 / length + "%";
                    Login.Login_loadingPercent = 82326312;
                    return;
                }
                Language.fontPlain11 = Client.fontsMap.get(FontName.FontName_plain11);
                WallDecoration.fontPlain12 = Client.fontsMap.get(FontName.FontName_plain12);
                class137.fontBold12 = Client.fontsMap.get(FontName.FontName_bold12);
                UserComparator10.platformInfo = Client.platformInfoProvider.get(976977099);
                Login.Login_loadingText = Strings.ak;
                Login.Login_loadingPercent = 82326312;
                Client.titleLoadingStage = -1397724478;
            }
            else if (60 == 405634821 * Client.titleLoadingStage) {
                final Archive archive10 = NetFileRequest.archive10;
                final Archive archive11 = class452.archive8;
                int n = 0;
                final String[] field760 = Login.field760;
                for (int k = 0; k < field760.length; ++k) {
                    if (archive10.tryLoadFileByNames(field760[k], "", 842451065)) {
                        ++n;
                    }
                }
                final String[] field761 = Login.field761;
                for (int l = 0; l < field761.length; ++l) {
                    if (archive11.tryLoadFileByNames(field761[l], "", 842451065)) {
                        ++n;
                    }
                }
                final String[] field762 = Login.field762;
                for (int n2 = 0; n2 < field762.length; ++n2) {
                    final String s = field762[n2];
                    if (AbstractArchive.getFileFlat(archive11, s, 691690879) != -1 && archive11.tryLoadFileByNames(s, "", 842451065)) {
                        ++n;
                    }
                }
                final int n3 = n;
                final int compare_bridged = GrandExchangeOfferOwnWorldComparator.compare_bridged(class452.archive8, -155963751);
                if (n3 < compare_bridged) {
                    Login.Login_loadingText = Strings.az + -1417565809 * n3 / compare_bridged + "%";
                    Login.Login_loadingPercent = -2044575758;
                    return;
                }
                Login.Login_loadingText = Strings.ad;
                Login.Login_loadingPercent = 1229689396;
                class138.updateGameState(5, 803815758);
                Client.titleLoadingStage = 1314995706;
            }
            else if (1864505627 == -627796577 * Client.titleLoadingStage) {
                if (!class85.archive2.cc((short)128)) {
                    Login.Login_loadingText = Strings.ae + class85.archive2.loadPercent((byte)4) + "%";
                    Login.Login_loadingPercent = 1357741491;
                    return;
                }
                if (!PcmPlayer.field211.cc((short)128)) {
                    Login.Login_loadingText = Strings.ae + (80 + class126.archive12.loadPercent((byte)4) / 6) + "%";
                    Login.Login_loadingPercent = 123489468;
                    return;
                }
                EnumComposition.method1010(class85.archive2, (byte)26);
                World.method409(class85.archive2, (short)32041);
                method398(class85.archive2, FloorUnderlayDefinition.archive11, (byte)(-4));
                Interpreter.method427(class85.archive2, FloorUnderlayDefinition.archive11, Client.isLowDetail, (byte)3);
                MenuAction.method439(class85.archive2, FloorUnderlayDefinition.archive11, 2030991150);
                class85.rsOrdinal(class85.archive2, 579263121);
                final Archive archive12 = class85.archive2;
                final Archive archive13 = FloorUnderlayDefinition.archive11;
                final boolean isMembersWorld = Client.isMembersWorld;
                final Font fontPlain11 = Language.fontPlain11;
                class355.ItemDefinition_archive = archive12;
                ItemComposition.ItemDefinition_modelArchive = archive13;
                FileSystem.ItemDefinition_inMembersWorld = isMembersWorld;
                MouseRecorder.ItemDefinition_fileCount = class355.ItemDefinition_archive.getGroupFileCount(10, (byte)47) * -2022116696;
                class124.ItemDefinition_fontPlain11 = fontPlain11;
                class152.vmethod3238(class85.archive2, DevicePcmPlayerProvider.field67, GameBuild.archive7, 1755632957);
                BuddyRankComparator.compareBuddy(class85.archive2, FloorUnderlayDefinition.archive11, -2003668840);
                MenuAction.method439(class85.archive2, 2059070876);
                VarpDefinition.VarpDefinition_archive = class85.archive2;
                VarpDefinition.field1475 = VarpDefinition.VarpDefinition_archive.getGroupFileCount(16, (byte)55) * 898886792;
                class4.method7(class85.archive4, FloorUnderlayDefinition.archive11, class452.archive8, class128.archive13, -209134319);
                NPC.method592(class85.archive2, (byte)(-65));
                MidiPcmStream.setPcmStreamVolume(class85.archive2, -2144286979);
                class294.VarcInt_archive = class85.archive2;
                final Archive archive14 = class85.archive2;
                class195.method1052(class85.archive2, 718112804);
                ReflectionCheck.method200(class85.archive2, -840439705);
                class327.method1842(class85.archive2, (byte)41);
                class160.HitSplatDefinition_cachedSprites = new class473(Client.field358, 54, ClanSettings.clientLanguage, class85.archive2);
                MenuAction.HitSplatDefinition_cached = new class473(Client.field358, 47, ClanSettings.clientLanguage, class85.archive2);
                class373.varcs = new Varcs();
                final Archive archive15 = class85.archive2;
                final Archive archive16 = class452.archive8;
                final Archive archive17 = class128.archive13;
                HitSplatDefinition.HitSplatDefinition_archive = archive15;
                HitSplatDefinition.field1664 = archive16;
                HitSplatDefinition.HitSplatDefinition_fontsArchive = archive17;
                UserComparator10.platformInfo.field3857 = (Arrays.hashCode(ScriptFrame.client.wu.getClass().getSigners()) >> 2) * 1015823968 - 239932888;
                final Archive archive18 = class85.archive2;
                final Archive archive19 = class452.archive8;
                HealthBarDefinition.HealthBarDefinition_archive = archive18;
                HealthBarDefinition.field1522 = archive19;
                class33.method142(class85.archive2, class452.archive8, 2112098628);
                Login.Login_loadingText = Strings.ap;
                Login.Login_loadingPercent = 172564960;
                Client.titleLoadingStage = 2116418992;
            }
            else if (Client.titleLoadingStage * -627796577 == 80) {
                int n4 = 0;
                if (ChatChannel.compass == null) {
                    ChatChannel.compass = class484.SpriteBuffer_getSprite(class452.archive8, Varcs.spriteIds.compass * -25531251, 0, 331144070);
                }
                else {
                    ++n4;
                }
                if (LoginScreenAnimation.redHintArrowSprite == null) {
                    LoginScreenAnimation.redHintArrowSprite = class484.SpriteBuffer_getSprite(class452.archive8, Varcs.spriteIds.field3767 * -740583791, 0, -2093996686);
                }
                else {
                    ++n4;
                }
                if (null == class333.mapSceneSprites) {
                    class333.mapSceneSprites = class68.method434(class452.archive8, -506869823 * Varcs.spriteIds.mapScenes, 0, -1734692957);
                }
                else {
                    ++n4;
                }
                if (class36.headIconPkSprites == null) {
                    class36.headIconPkSprites = UserComparator3.method699(class452.archive8, Varcs.spriteIds.headIconsPk * 1143584114, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (null == class425.headIconPrayerSprites) {
                    class425.headIconPrayerSprites = UserComparator3.method699(class452.archive8, Varcs.spriteIds.field3775 * 842447949, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (KitDefinition.headIconHintSprites == null) {
                    KitDefinition.headIconHintSprites = UserComparator3.method699(class452.archive8, Varcs.spriteIds.field3772 * 657030390, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (null == Players.mapMarkerSprites) {
                    Players.mapMarkerSprites = UserComparator3.method699(class452.archive8, -1343036557 * Varcs.spriteIds.field3773, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (class173.crossSprites == null) {
                    class173.crossSprites = UserComparator3.method699(class452.archive8, Varcs.spriteIds.field3771 * -301058350, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (class477.mapDotSprites == null) {
                    class477.mapDotSprites = UserComparator3.method699(class452.archive8, Varcs.spriteIds.field3774 * 130583873, 0, 1271520368);
                }
                else {
                    ++n4;
                }
                if (null == HealthBar.scrollBarSprites) {
                    HealthBar.scrollBarSprites = class68.method434(class452.archive8, Varcs.spriteIds.field3776 * 1776790735, 0, 1057409216);
                }
                else {
                    ++n4;
                }
                if (null == class31.modIconSprites) {
                    class31.modIconSprites = class68.method434(class452.archive8, Varcs.spriteIds.field3768 * 1660520890, 0, -752805203);
                }
                else {
                    ++n4;
                }
                if (n4 < 11) {
                    Login.Login_loadingText = Strings.by + n4 * 58736026 / 12 + "%";
                    Login.Login_loadingPercent = -2003412602;
                    return;
                }
                AbstractFont.AbstractFont_modIconSprites = class31.modIconSprites;
                LoginScreenAnimation.redHintArrowSprite.normalize();
                final int n5 = (int)(Math.random() * 21.0) - 10;
                final int n6 = (int)(Math.random() * 21.0) - 10;
                final int n7 = (int)(Math.random() * 21.0) - 10;
                final int n8 = (int)(Math.random() * 41.0) - 20;
                IndexedSprite.ik(class333.mapSceneSprites[0], n8 + n5, n8 + n6, n7 + n8);
                Login.Login_loadingText = Strings.bb;
                Login.Login_loadingPercent = 1322235817;
                Client.titleLoadingStage = -2136737661;
            }
            else if (105966412 == Client.titleLoadingStage * -627796577) {
                if (!WorldMapLabelSize.field2285.cc((short)128)) {
                    Login.Login_loadingText = Strings.bi + "0%";
                    Login.Login_loadingPercent = -1962249446;
                    return;
                }
                class7.textureProvider = new TextureProvider(WorldMapLabelSize.field2285, class452.archive8, 20, class20.clientPreferences.getBrightness(1872113037), Client.isLowDetail ? -266564251 : 128);
                Rasterizer3D.clips.Rasterizer3D_textureLoader = class7.textureProvider;
                class18.method65(class20.clientPreferences.getBrightness(1761325548));
                Client.titleLoadingStage = 1008573796;
            }
            else if (100 == -627796577 * Client.titleLoadingStage) {
                final int loadedPercentage = class7.textureProvider.getLoadedPercentage(1658187175);
                if (loadedPercentage < 100) {
                    Login.Login_loadingText = Strings.bi + loadedPercentage + "%";
                    Login.Login_loadingPercent = -1962249446;
                    return;
                }
                Login.Login_loadingText = Strings.be;
                Login.Login_loadingPercent = -1962249446;
                Client.titleLoadingStage = -863029679;
            }
            else {
                if (Client.titleLoadingStage * -1246385379 == -768869188) {
                    UserComparator6.mouseRecorder = new MouseRecorder();
                    Client.af.newThreadTask(UserComparator6.mouseRecorder, 10, (byte)0);
                    Login.Login_loadingText = Strings.bk;
                    Login.Login_loadingPercent = 1907337436;
                    Client.titleLoadingStage = 1027144840;
                    return;
                }
                if (120 == -303362961 * Client.titleLoadingStage) {
                    if (!NetFileRequest.archive10.co("huffman", "", 842451065)) {
                        Login.Login_loadingText = Strings.bx + 0 + "%";
                        Login.Login_loadingPercent = 1481957022;
                        return;
                    }
                    class154.vmethod3254(new Huffman(AbstractArchive.ui(NetFileRequest.archive10, "huffman", "", 1648560407)), -1214282669);
                    Login.Login_loadingText = Strings.bo;
                    Login.Login_loadingPercent = 412484336;
                    Client.titleLoadingStage = 1078419644;
                }
                else if (-627796577 * Client.titleLoadingStage == 1783016468) {
                    if (!class85.archive4.cc((short)128)) {
                        Login.Login_loadingText = Strings.bz + class85.archive4.loadPercent((byte)4) * 4 / 5 + "%";
                        Login.Login_loadingPercent = -499186517;
                        return;
                    }
                    if (!class126.archive12.cc((short)128)) {
                        Login.Login_loadingText = Strings.bz + (1159731107 + class126.archive12.loadPercent((byte)4) / 6) + "%";
                        Login.Login_loadingPercent = -182588158;
                        return;
                    }
                    if (!class128.archive13.cc((short)128)) {
                        Login.Login_loadingText = Strings.bz + (96 + class128.archive13.loadPercent((byte)4) / 50) + "%";
                        Login.Login_loadingPercent = 1056576608;
                        return;
                    }
                    Login.Login_loadingText = Strings.bm;
                    Login.Login_loadingPercent = 631196194;
                    if (AbstractArchive.sh(class126.archive12, "version.dat", "", -1313069490)) {
                        new Buffer(AbstractArchive.ui(class126.archive12, "version.dat", "", 1648560407)).readUnsignedShort(539777216);
                    }
                    Client.titleLoadingStage = 1693423388;
                }
                else if (140 == -627796577 * Client.titleLoadingStage) {
                    Login.Login_loadingPercent = 205815780;
                    if (class28.archive19.cm(-689148282) > 0 && !class28.archive19.cz(WorldMapCacheName.field2435.name, 1930019497)) {
                        Login.Login_loadingText = Strings.bd + AbstractArchive.qk(class28.archive19, WorldMapCacheName.field2435.name, 1956692579) / 10 + "%";
                        return;
                    }
                    if (class126.worldMap == null) {
                        WorldMap.uh(class126.worldMap = new WorldMap(), class28.archive19, GrandExchangeOfferUnitPriceComparator.archive18, class205.archive20, class137.fontBold12, Client.fontsMap, class333.mapSceneSprites, 1409206767);
                    }
                    Login.Login_loadingText = Strings.bt;
                    Client.titleLoadingStage = -863552598;
                }
                else if (-1512539680 == Client.titleLoadingStage * 1642727154) {
                    class138.updateGameState(10, 843715914);
                }
            }
        }
    }
    
    public static void mv() {
        for (rl11 rl11 = (rl11)Client.hk.dn(); rl11 != null; rl11 = (rl11)Client.hk.th()) {
            if (rl11.getLevel() == ScriptFrame.client.getPlane() && !rl11.finished()) {
                if (ScriptFrame.client.getGameCycle() >= rl11.getStartCycle()) {
                    rl11.dt(ScriptFrame.client.setUp());
                    if (rl11.finished()) {
                        rl11.gy();
                    }
                    else {
                        ScriptFrame.client.la().lm(rl11.getLevel(), rl11.jn(), rl11.wk(), rl11.getZ(), rl11.getRadius(), rl11, rl11.getOrientation(), -1L, rl11.drawFrontTilesFirst());
                    }
                }
            }
            else {
                rl11.gy();
            }
        }
    }
    
    static Archive qk(final int n, final boolean b, final boolean b2, final boolean b3, final boolean b4) {
        ArchiveDisk archiveDisk = null;
        if (null != JagexCache.JagexCache_dat2File) {
            archiveDisk = new ArchiveDisk(n, JagexCache.JagexCache_dat2File, class370.JagexCache_idxFiles[n], 1000000);
        }
        return new Archive(archiveDisk, WorldMapID.masterDisk, n, b, b2, b3, b4);
    }
    
    public Font qk() {
        return class137.fontBold12;
    }
    
    public int[] hd() {
        return class97.SpriteBuffer_spriteWidths;
    }
    
    static final void tl(int n, int n2, int n3, int n4) {
        Client.viewportDrawCount += 1160286419;
        if (MusicPatchNode.localPlayer.br * 1144428983 >> 7 == 1494100363 * Client.destinationX && Client.destinationY * -1748014035 == MusicPatchNode.localPlayer.ep * -411750205 >> 7) {
            Client.destinationX = 0;
        }
        TileItem.method627((byte)0);
        if (-1565733637 * Client.combatTargetPlayerIndex >= 0 && Client.players[-1565733637 * Client.combatTargetPlayerIndex] != null) {
            MouseHandler.addPlayerToScene(Client.players[Client.combatTargetPlayerIndex * -1565733637], false, -1861126010);
        }
        RouteStrategy.addNpcsToScene(true, (short)20895);
        final int n5 = Players.Players_count * -2010934433;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n5; ++i) {
            if (Client.combatTargetPlayerIndex * -1565733637 != players_indices[i]) {
                if (Client.localPlayerIndex * -549033243 != players_indices[i]) {
                    MouseHandler.addPlayerToScene(Client.players[players_indices[i]], true, -1861126010);
                }
            }
        }
        RouteStrategy.addNpcsToScene(false, (short)14123);
        class142.method810(1215119663);
        GraphicsDefaults.method2228((byte)(-14));
        class36.setViewportShape(n, n2, n3, n4, true, -1019760744);
        n = -82629945 * Client.viewportOffsetX;
        n2 = Client.viewportOffsetY * 1352043351;
        n3 = 433849721 * Client.viewportWidth;
        n4 = 2042096749 * Client.viewportHeight;
        Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n2 + n4);
        class18.method68(696107663);
        Rasterizer2D.method2586();
        int n6 = -954734641 * Client.camAngleX;
        if (205350563 * Client.field456 / 256 > n6) {
            n6 = Client.field456 * 205350563 / 256;
        }
        if (Client.field620[4] && Client.field643[4] + 128 > n6) {
            n6 = Client.field643[4] + 128;
        }
        final int n7 = 704283033 * Client.camAngleY & 0x7FF;
        final int n8 = class33.oculusOrbFocalPointX * -1958669353;
        final int n9 = class96.field1064 * 470489225;
        final int n10 = class144.oculusOrbFocalPointY * -365969735;
        final int method1389 = WorldMapData_0.method1389(n6, (byte)(-121));
        int n11 = n4 - 334;
        if (n11 < 0) {
            n11 = 0;
        }
        else if (n11 > 100) {
            n11 = 100;
        }
        final int n12 = method1389 * (Client.zoomHeight + n11 * (Client.zoomWidth - Client.zoomHeight) / 100) / 256;
        final int n13 = 2048 - n6 & 0x7FF;
        final int n14 = 2048 - n7 & 0x7FF;
        int n15 = 0;
        int n16 = 0;
        int n17 = n12;
        if (n13 != 0) {
            final int n18 = Rasterizer3D.Rasterizer3D_sine[n13];
            final int n19 = Rasterizer3D.Rasterizer3D_cosine[n13];
            final int n20 = n19 * n16 - n18 * n17 >> 16;
            n17 = n18 * n16 + n17 * n19 >> 16;
            n16 = n20;
        }
        if (n14 != 0) {
            final int n21 = Rasterizer3D.Rasterizer3D_sine[n14];
            final int n22 = Rasterizer3D.Rasterizer3D_cosine[n14];
            final int n23 = n15 * n22 + n21 * n17 >> 16;
            n17 = n17 * n22 - n21 * n15 >> 16;
            n15 = n23;
        }
        if (Client.isCameraLocked) {
            WorldMapRectangle.field2405 = (n8 - n15) * -1769642683;
            Players.field1095 = (n9 - n16) * -1412316127;
            KitDefinition.field1519 = 1637163077 * (n10 - n17);
            ScriptEvent.field851 = -268140793 * n6;
            class86.field888 = -523744247 * n7;
        }
        else {
            class36.cameraX = (n8 - n15) * -1682679895;
            class174.cameraY = -424093663 * (n9 - n16);
            class297.cameraZ = 46344275 * (n10 - n17);
            WorldMapSectionType.cameraPitch = n6 * 528729485;
            class125.cameraYaw = n7 * -1545206147;
        }
        if (1 == 986256295 * Client.oculusOrbState && Client.staffModLevel * 324465533 >= 2 && 0 == Client.cycle * -1886224337 % 50 && (1144428983 * MusicPatchNode.localPlayer.br >> 7 != -1958669353 * class33.oculusOrbFocalPointX >> 7 || -365969735 * class144.oculusOrbFocalPointY >> 7 != -411750205 * MusicPatchNode.localPlayer.ep >> 7)) {
            final int n24 = MusicPatchNode.localPlayer.plane * -1900490645;
            final int n25 = -1232093375 * WorldMapData_0.baseX + (class33.oculusOrbFocalPointX * -1958669353 >> 7);
            final int n26 = 827352769 * GameObject.baseY + (class144.oculusOrbFocalPointY * -365969735 >> 7);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-6762));
            packetBufferNode.packetBuffer.dy(1263827259 * Client.field444, (byte)79);
            packetBufferNode.packetBuffer.bu(n25, (byte)2);
            packetBufferNode.packetBuffer.eb(n24, (byte)(-117));
            packetBufferNode.packetBuffer.ds(n26, -1119944103);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        int method1390;
        if (!Client.isCameraLocked) {
            method1390 = UserComparator3.method702((byte)120);
        }
        else {
            int n27;
            if (class20.clientPreferences.getRoofsHidden(-2063229730)) {
                n27 = -1727408401 * GameEngine.Client_plane;
            }
            else if (class147.getTileHeight(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-101)) - class174.cameraY * 1772923873 < 800 && 0x0 != (Tiles.Tiles_renderFlags[-1727408401 * GameEngine.Client_plane][-2100544359 * class36.cameraX >> 7][class297.cameraZ * -91399205 >> 7] & 0x4)) {
                n27 = GameEngine.Client_plane * -1727408401;
            }
            else {
                n27 = 3;
            }
            method1390 = n27;
        }
        final int n28 = -2100544359 * class36.cameraX;
        final int n29 = 1772923873 * class174.cameraY;
        final int n30 = -91399205 * class297.cameraZ;
        final int n31 = WorldMapSectionType.cameraPitch * 1897923909;
        final int n32 = -1010818347 * class125.cameraYaw;
        for (int j = 0; j < 5; ++j) {
            if (Client.field620[j]) {
                final int n33 = (int)(Math.random() * (Client.field621[j] * 2 + 1) - Client.field621[j] + Math.sin(Client.cameraShakeCycle[j] * (Client.field499[j] / 100.0)) * Client.field643[j]);
                if (j == 0) {
                    class36.cameraX += -1682679895 * n33;
                }
                if (j != 0) {
                    class174.cameraY += -424093663 * n33;
                }
                if (j == 2) {
                    class297.cameraZ += 46344275 * n33;
                }
                if (3 == j) {
                    class125.cameraYaw = (class125.cameraYaw * -1010818347 + n33 & 0x7FF) * -1545206147;
                }
                if (4 == j) {
                    WorldMapSectionType.cameraPitch += 528729485 * n33;
                    if (1897923909 * WorldMapSectionType.cameraPitch < 128) {
                        WorldMapSectionType.cameraPitch = -1042102656;
                    }
                    if (1897923909 * WorldMapSectionType.cameraPitch > 383) {
                        WorldMapSectionType.cameraPitch = 639929843;
                    }
                }
            }
        }
        int n34 = -2063363905 * MouseHandler.MouseHandler_x;
        int n35 = -1224153235 * MouseHandler.MouseHandler_y;
        if (0 != MouseHandler.MouseHandler_lastButton * -1222491879) {
            n34 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            n35 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
        }
        if (n34 >= n && n34 < n + n3 && n35 >= n2 && n35 < n2 + n4) {
            final int n36 = n34 - n;
            final int n37 = n35 - n2;
            ViewportMouse.ViewportMouse_x = -580855267 * n36;
            ViewportMouse.ViewportMouse_y = n37 * 1124836073;
            ViewportMouse.ViewportMouse_isInViewport = true;
            ViewportMouse.ViewportMouse_entityCount = 0;
            ViewportMouse.ViewportMouse_false0 = false;
        }
        else {
            class146.method829(-699843124);
        }
        class323.playPcmPlayers(-1668255261);
        qb(n, n2, n3, n4, 0);
        class323.playPcmPlayers(-823280395);
        final int get3dZoom = UserComparator7.get3dZoom(-251542076);
        class314.method1779(ScriptFrame.client.by, 1049856229);
        Rasterizer3D.clips.field2227 = Client.viewportZoom * 1241253503;
        Scene.mq(class31.scene, -2100544359 * class36.cameraX, 1772923873 * class174.cameraY, -91399205 * class297.cameraZ, 1897923909 * WorldMapSectionType.cameraPitch, class125.cameraYaw * -1010818347, method1390);
        class314.method1779(false, 1990193223);
        if (Client.renderSelf) {
            Rasterizer2D.method2578();
        }
        Rasterizer3D.clips.field2227 = get3dZoom * 1001249361;
        class323.playPcmPlayers(-1993532365);
        class31.scene.clearTempGameObjects();
        Client.overheadTextCount = 0;
        boolean b = false;
        int n38 = -1;
        int n39 = -1;
        final int n40 = Players.Players_count * -2010934433;
        final int[] players_indices2 = Players.Players_indices;
        int k = 0;
    Label_1264_Outer:
        while (k < 265474485 * Client.npcCount + n40) {
            while (true) {
                Actor actor = null;
                Label_2209: {
                    if (k >= n40) {
                        actor = Client.npcs[Client.npcIndices[k - n40]];
                        break Label_2209;
                    }
                    actor = Client.players[players_indices2[k]];
                    if (players_indices2[k] == -1565733637 * Client.combatTargetPlayerIndex) {
                        b = true;
                        n38 = k;
                    }
                    else {
                        if (MusicPatchNode.localPlayer != actor) {
                            break Label_2209;
                        }
                        n39 = k;
                    }
                    ++k;
                    continue Label_1264_Outer;
                }
                class33.drawActor2d(actor, k, n, n2, n3, n4, 1538298261);
                continue;
            }
        }
        if (Client.field482 && -1 != n39) {
            class33.drawActor2d(MusicPatchNode.localPlayer, n39, n, n2, n3, n4, 1538298261);
        }
        if (b) {
            class33.drawActor2d(Client.players[-1565733637 * Client.combatTargetPlayerIndex], n38, n, n2, n3, n4, 1538298261);
        }
        for (int l = 0; l < Client.overheadTextCount * 734988573; ++l) {
            final int n41 = Client.overheadTextXs[l];
            int n42 = Client.overheadTextYs[l];
            final int n43 = Client.overheadTextXOffsets[l];
            final int n44 = Client.overheadTextAscents[l];
            int n45 = 1;
            while (n45 != 0) {
                n45 = 0;
                for (int n46 = 0; n46 < l; ++n46) {
                    if (n42 + 2 > Client.overheadTextYs[n46] - Client.overheadTextAscents[n46] && n42 - n44 < 2 + Client.overheadTextYs[n46] && n41 - n43 < Client.overheadTextXOffsets[n46] + Client.overheadTextXs[n46] && n41 + n43 > Client.overheadTextXs[n46] - Client.overheadTextXOffsets[n46] && Client.overheadTextYs[n46] - Client.overheadTextAscents[n46] < n42) {
                        n42 = Client.overheadTextYs[n46] - Client.overheadTextAscents[n46];
                        n45 = 1;
                    }
                }
            }
            Client.viewportTempX = -846498395 * Client.overheadTextXs[l];
            final int[] overheadTextYs = Client.overheadTextYs;
            final int n47 = l;
            final int n48 = n42;
            overheadTextYs[n47] = n48;
            Client.viewportTempY = n48 * -1610031701;
            final String s = Client.overheadText[l];
            if (0 == Client.chatEffects * 395188193) {
                int n49 = 16776960;
                if (Client.overheadTextColors[l] < 6) {
                    n49 = Client.field583[Client.overheadTextColors[l]];
                }
                if (Client.overheadTextColors[l] == 6) {
                    n49 = ((Client.viewportDrawCount * 2041464667 % 20 < 10) ? 16711680 : 16776960);
                }
                if (7 == Client.overheadTextColors[l]) {
                    n49 = ((2041464667 * Client.viewportDrawCount % 20 < 10) ? 255 : 65535);
                }
                if (8 == Client.overheadTextColors[l]) {
                    n49 = ((Client.viewportDrawCount * 2041464667 % 20 < 10) ? 45056 : 8454016);
                }
                if (9 == Client.overheadTextColors[l]) {
                    final int n50 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n50 < 50) {
                        n49 = n50 * 1280 + 16711680;
                    }
                    else if (n50 < 100) {
                        n49 = 16776960 - (n50 - 50) * 327680;
                    }
                    else if (n50 < 150) {
                        n49 = 5 * (n50 - 100) + 65280;
                    }
                }
                if (10 == Client.overheadTextColors[l]) {
                    final int n51 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n51 < 50) {
                        n49 = 5 * n51 + 16711680;
                    }
                    else if (n51 < 100) {
                        n49 = 16711935 - (n51 - 50) * 327680;
                    }
                    else if (n51 < 150) {
                        n49 = 255 + 327680 * (n51 - 100) - 5 * (n51 - 100);
                    }
                }
                if (11 == Client.overheadTextColors[l]) {
                    final int n52 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n52 < 50) {
                        n49 = 16777215 - n52 * 327685;
                    }
                    else if (n52 < 100) {
                        n49 = 65280 + 327685 * (n52 - 50);
                    }
                    else if (n52 < 150) {
                        n49 = 16777215 - (n52 - 100) * 327680;
                    }
                }
                if (0 == Client.overheadTextEffects[l]) {
                    class137.fontBold12.aj(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY, n49, 0);
                }
                if (Client.overheadTextEffects[l] == 1) {
                    class137.fontBold12.ae(s, -1848743379 * Client.viewportTempX + n, Client.viewportTempY * 318977283 + n2, n49, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 2) {
                    class137.fontBold12.ap(s, -1848743379 * Client.viewportTempX + n, n2 + 318977283 * Client.viewportTempY, n49, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 3) {
                    class137.fontBold12.by(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY, n49, 0, 2041464667 * Client.viewportDrawCount, 150 - Client.overheadTextCyclesRemaining[l]);
                }
                if (4 == Client.overheadTextEffects[l]) {
                    final int n53 = (150 - Client.overheadTextCyclesRemaining[l]) * (class137.fontBold12.bf(s) + 100) / 150;
                    Rasterizer2D.Rasterizer2D_expandClip(-1848743379 * Client.viewportTempX + n - 50, n2, n + Client.viewportTempX * -1848743379 + 50, n4 + n2);
                    class492.xb(class137.fontBold12, s, 50 + (n + -1848743379 * Client.viewportTempX) - n53, n2 + Client.viewportTempY * 318977283, n49, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n + n3, n2 + n4);
                }
                if (Client.overheadTextEffects[l] == 5) {
                    final int n54 = 150 - Client.overheadTextCyclesRemaining[l];
                    int n55 = 0;
                    if (n54 < 25) {
                        n55 = n54 - 25;
                    }
                    else if (n54 > 125) {
                        n55 = n54 - 125;
                    }
                    Rasterizer2D.Rasterizer2D_expandClip(n, n2 + 318977283 * Client.viewportTempY - class137.fontBold12.al - 1, n3 + n, 5 + (318977283 * Client.viewportTempY + n2));
                    class137.fontBold12.aj(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY + n55, n49, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n4 + n2);
                }
            }
            else {
                class137.fontBold12.aj(s, Client.viewportTempX * -1848743379 + n, n2 + 318977283 * Client.viewportTempY, 16776960, 0);
            }
        }
        class317.method1828(n, n2, 1924436322);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).animate(Client.field432 * -1795081153, -1215954602);
        Friend.method2153(-1530842203);
        class36.cameraX = -1682679895 * n28;
        class174.cameraY = -424093663 * n29;
        class297.cameraZ = n30 * 46344275;
        WorldMapSectionType.cameraPitch = n31 * 528729485;
        class125.cameraYaw = n32 * -1545206147;
        if (Client.isLoading && HorizontalAlignment.method1019(true, false, (byte)110) == 0) {
            Client.isLoading = false;
        }
        if (Client.isLoading) {
            qb(n, n2, n3, n4, 0);
            WorldMapDecoration.drawLoadingMessage(Strings.ao, false, -67626100);
        }
    }
    
    public void tl(final String login_username) {
        Login.Login_username = login_username;
    }
    
    public int nt() {
        return MouseHandler.MouseHandler_xVolatile * 445060765;
    }
    
    public static void nt(final int n, final int n2, final int n3, final int n4, final int n5) {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2471, Client.packetWriter.isaacCipher, (short)(-28039));
        packetBufferNode.packetBuffer.bf(18, (byte)72);
        packetBufferNode.packetBuffer.ds(GameObject.baseY * 827352769 + n4, -1006440190);
        Buffer.ap(packetBufferNode.packetBuffer, n3 + -1232093375 * WorldMapData_0.baseX, (byte)124);
        packetBufferNode.packetBuffer.du(n5, -988290643);
        packetBufferNode.packetBuffer.bf(n, (byte)100);
        packetBufferNode.packetBuffer.bf(n2, (byte)12);
        packetBufferNode.packetBuffer.cq(704283033 * Client.camAngleY, (byte)48);
        packetBufferNode.packetBuffer.bf(57, (byte)48);
        packetBufferNode.packetBuffer.bf(0, (byte)19);
        packetBufferNode.packetBuffer.bf(0, (byte)1);
        packetBufferNode.packetBuffer.bf(89, (byte)23);
        packetBufferNode.packetBuffer.cq(1144428983 * MusicPatchNode.localPlayer.br, (byte)(-99));
        packetBufferNode.packetBuffer.cq(MusicPatchNode.localPlayer.ep * -411750205, (byte)3);
        packetBufferNode.packetBuffer.bf(63, (byte)64);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static void rs(final int n, final int n2, final int n3) {
        if (n == 0) {
            return;
        }
        final int n4 = n >> 8;
        final int n5 = n >> 4 & 0x7;
        final int n6 = n & 0xF;
        Client.soundEffectIds[-297150195 * Client.soundEffectCount] = n4;
        Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n5;
        Client.queuedSoundEffectDelays[-297150195 * Client.soundEffectCount] = 0;
        Client.soundEffects[-297150195 * Client.soundEffectCount] = null;
        Client.soundLocations[Client.soundEffectCount * -297150195] = n6 + (((n2 - 64) / 128 << 16) + ((n3 - 64) / 128 << 8));
        Client.soundEffectCount += 831233477;
    }
    
    final void resizeRoot(final boolean b, final int n) {
        try {
            SequenceDefinition.method1129(Client.camFollowHeight * -896157613, Client.aj * -1687260435, class262.canvasHeight * 1658005443, b, -726165376);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.ln(" + ')');
        }
    }
    
    public NodeHashTable resizeRoot() {
        return ItemContainer.itemContainers;
    }
    
    static int ph(final int n) {
        return n * 3 + 600;
    }
    
    public void ph(final int n) {
        Client.hintArrowHeight = n * 233713123;
    }
    
    public int lo() {
        return Client.hintArrowSubX * 1774830445;
    }
    
    public static double lo(final int n) {
        return n * 0.0030679615757712823;
    }
    
    public static void lc(final boolean b, final PacketBuffer packetBuffer) {
        Client.uf = false;
        Client.gd = null;
        Client.uo = null;
        Client.ux = null;
        Client.zk = null;
        Client.vz = null;
        Client.zs = null;
        Client.yu = null;
    }
    
    public void eq(final rl3 rl3, final int n, final int n2, final int n3, final int n4, final int n5) {
        this.nd(n + 2, n2, n3 - 4, 7170651, n5);
        this.nd(n + 2, n2 + n4 - 1, n3 - 4, 7170651, n5);
        this.wi(n, n2 + 2, n4 - 4, 7170651, n5);
        this.wi(n + n3 - 1, n2 + 2, n4 - 4, 7170651, n5);
        this.wi(n + 1, n2 + 5, n4 - 6, 2827810, n5);
        this.wi(n + n3 - 2, n2 + 5, n4 - 6, 2827810, n5);
        this.nd(n + 1, n2 + 17, n3 - 2, 2827810, n5);
        this.nd(n + 1, n2 + n4 - 2, n3 - 2, 2827810, n5);
        this.dw(n + 2, n2 + n4 - 3, 0, 2827810, n5);
        this.dw(n + n3 - 3, n2 + n4 - 3, 0, 2827810, n5);
        this.fo(n + 2, n2 + 1, n3 - 4, 16, 3288610, 592388, n5, n5);
        this.qp(n + 1, n2 + 1, 2, 4, 2827810, n5);
        this.qp(n + n3 - 3, n2 + 1, 2, 4, 2827810, n5);
        this.nd(n + 2, n2 + 18, n3 - 4, 5392957, n5);
        this.nd(n + 3, n2 + n4 - 3, n3 - 6, 5392957, n5);
        this.wi(n + 2, n2 + 18, n4 - 21, 5392957, n5);
        this.wi(n + n3 - 3, n2 + 18, n4 - 21, 5392957, n5);
        this.qp(n + 3, n2 + 19, n3 - 6, n4 - 22, 2828060, n5);
        this.dw(n + 1, n2 + 1, 0, 7170651, n5);
        this.dw(n + n3 - 2, n2 + 1, 0, 7170651, n5);
        this.dw(n + 1, n2 + n4 - 2, 0, 7170651, n5);
        this.dw(n + n3 - 2, n2 + n4 - 2, 0, 7170651, n5);
        final Font qk = this.qk();
        qk.me((rl3 == null) ? "Choose Option" : rl3.getTarget(), n + 3, n2 + 14, 13023381, -1);
        final int wk = this.wk();
        final int vw = this.vw();
        final int n6 = Client.menuOptionsCount * 730065501;
        final String[] menuTargets = Client.menuTargets;
        final String[] menuActions = Client.menuActions;
        int n7 = 0;
        for (int i = 0; i < n6; ++i) {
            if (Client.qi[i] == rl3) {
                ++n7;
            }
        }
        int n8 = 0;
        for (int j = 0; j < n6; ++j) {
            if (Client.qi[j] == rl3) {
                final int n9 = n2 + (n7 - 1 - n8++) * 15 + 31;
                String s = menuActions[j];
                if (!menuTargets[j].isEmpty()) {
                    s = s + " " + menuTargets[j];
                }
                if (Client.menuOpcodes[j] == MenuAction.RUNELITE_SUBMENU.getId()) {
                    s += " <col=ffffff><gt>";
                }
                qk.me(s, n + 3, n9, 13023381, -1);
                if (wk > n && wk < n3 + n && vw > n9 - 13 && vw < n9 + 3) {
                    this.qp(n + 3, n9 - 12, n3 - 6, 15, 16777215, 80);
                }
                if (Client.tk == j) {
                    this.eq(Client.ix[Client.tk], Client.uw, Client.io, Client.dg, Client.rc, n5);
                }
            }
        }
    }
    
    public int nm() {
        return Client.hintArrowX * -1178855237;
    }
    
    static final void sh(final int n, final int n2, final int n3) {
        if (1577200911 * class36.cameraX < n) {
            class36.cameraX += (2083910077 * KeyHandler.field81 + class138.field1314 * -1514927571 * (n - -2100544359 * class36.cameraX) / 1000) * -1682679895;
            if (1775741221 * class36.cameraX > n) {
                class36.cameraX = -1682679895 * n;
            }
        }
        if (class36.cameraX * 707561993 > n) {
            class36.cameraX -= 382301883 * (KeyHandler.field81 * 2083910077 + class138.field1314 * -1514927571 * (-2100544359 * class36.cameraX - n) / 108469243);
            if (-2100544359 * class36.cameraX < n) {
                class36.cameraX = n * -1876576213;
            }
        }
        if (-235618203 * class174.cameraY < n2) {
            class174.cameraY += (138775472 * KeyHandler.field81 + (n2 - class174.cameraY * 521036174) * (class138.field1314 * -1514927571) / -778217165) * -424093663;
            if (class174.cameraY * 1772923873 > n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (class174.cameraY * 68982121 > n2) {
            class174.cameraY -= (KeyHandler.field81 * 2083910077 + (1772923873 * class174.cameraY - n2) * (-1514927571 * class138.field1314) / 2120677601) * -424093663;
            if (376300268 * class174.cameraY < n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (-91399205 * class297.cameraZ < n3) {
            class297.cameraZ += (-1514927571 * class138.field1314 * (n3 - -91399205 * class297.cameraZ) / -1066771802 + KeyHandler.field81 * 19865594) * 1303621559;
            if (-91399205 * class297.cameraZ > n3) {
                class297.cameraZ = n3 * 46344275;
            }
        }
        if (-91399205 * class297.cameraZ > n3) {
            class297.cameraZ -= (-1514927571 * class138.field1314 * (class297.cameraZ * 1623952000 - n3) / -397413003 + -571973372 * KeyHandler.field81) * -588832214;
            if (-1038635091 * class297.cameraZ < n3) {
                class297.cameraZ = 407544094 * n3;
            }
        }
    }
    
    public int ee() {
        return class425.field3798 * 583188571;
    }
    
    boolean pe() {
        return null != SpriteMask.field2808 && !SpriteMask.field2808.trim().isEmpty() && null != class121.field1185 && !class121.field1185.trim().isEmpty();
    }
    
    static void rf(final int n, final int n2, final int n3) {
        if (ClientPreferences.setUsernameToRemember(class20.clientPreferences, 1463859235) != 0 && 0 != n2 && Client.soundEffectCount * -297150195 < 50) {
            Client.soundEffectIds[Client.soundEffectCount * -297150195] = n;
            Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n2;
            Client.queuedSoundEffectDelays[Client.soundEffectCount * -297150195] = n3;
            Client.soundEffects[-297150195 * Client.soundEffectCount] = null;
            Client.soundLocations[Client.soundEffectCount * -297150195] = 0;
            Client.soundEffectCount += 831233477;
        }
    }
    
    public static void mf() {
        StructComposition.findEnumerated((byte)1);
    }
    
    public static void tr(final int n, final int n2) {
        Client.bx = lo(n);
        Client.cm = lo(n2);
    }
    
    static final void tr(int n, int n2, int n3, int n4, final boolean b) {
        if (n3 < 1) {
            n3 = 1;
        }
        if (n4 < 1) {
            n4 = 1;
        }
        final int n5 = n4 - 334;
        int n6;
        if (n5 < 0) {
            n6 = Client.field625;
        }
        else if (n5 >= -600981919) {
            n6 = Client.field626;
        }
        else {
            n6 = n5 * (Client.field626 - Client.field625) / -793221609 + Client.field625;
        }
        final int n7 = n4 * n6 * 512 / (n3 * 1612941776);
        if (n7 < Client.field488) {
            final short field488 = Client.field488;
            n6 = n3 * field488 * 334 / (512 * n4);
            if (n6 > Client.field630) {
                n6 = Client.field630;
                final int n8 = (n3 - 512 * (n6 * n4) / (field488 * -1987194734)) / 2;
                if (b) {
                    Rasterizer2D.Rasterizer2D_resetClip();
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2, n8, n4, -16777216);
                    Rasterizer2D.Rasterizer2D_fillRectangle(n3 + n - n8, n2, n8, n4, -16777216);
                }
                n += n8;
                n3 -= n8 * 2;
            }
        }
        else if (n7 > Client.field562) {
            final short field489 = Client.field562;
            n6 = n3 * field489 * -665899875 / (512 * n4);
            if (n6 < Client.field440) {
                n6 = Client.field440;
                final int n9 = (n4 - n3 * field489 * 334 / (n6 * 512)) / 2;
                if (b) {
                    Rasterizer2D.Rasterizer2D_resetClip();
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2, n3, n9, -1337896598);
                    Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + n4 - n9, n3, n9, 39883396);
                }
                n2 += n9;
                n4 -= n9 * 2;
            }
        }
        Client.viewportZoom = -787687633 * (n4 * n6 / 334);
        if (n3 != Client.viewportWidth * -1582384232 || 2042096749 * Client.viewportHeight != n4) {
            final int[] array = new int[9];
            for (int i = 0; i < array.length; ++i) {
                final int n10 = i * -520755608 + 128 + 15;
                final int method1389 = WorldMapData_0.method1389(n10, (byte)(-122));
                final int n11 = Rasterizer3D.Rasterizer3D_sine[n10];
                int n12 = n4 - 984481922;
                if (n12 < 0) {
                    n12 = 0;
                }
                else if (n12 > 100) {
                    n12 = 100;
                }
                array[i] = method1389 * (Client.zoomHeight + n12 * (Client.zoomWidth - Client.zoomHeight) / 1161665996) / 256 * n11 >> 16;
            }
            Scene.Scene_buildVisiblityMap(array, 1900502739, -314017575, -73221328 * n3 / n4, 1457360561);
        }
        Client.viewportOffsetX = n * 504740177;
        Client.viewportOffsetY = n2 * 2017169511;
        Client.viewportWidth = n3 * -350989111;
        Client.viewportHeight = n4 * -538378907;
    }
    
    void alignWidget(final Widget widget, final int n) {
        try {
            Widget vmethod3380;
            if (-1 == 913615679 * widget.parentId) {
                if (n == 1348055503) {
                    throw new IllegalStateException();
                }
                vmethod3380 = null;
            }
            else {
                vmethod3380 = class165.vmethod3380(913615679 * widget.parentId, (byte)5);
            }
            final Widget widget2 = vmethod3380;
            int n2;
            int n3;
            if (null == widget2) {
                if (n == 1348055503) {
                    throw new IllegalStateException();
                }
                n2 = -1687260435 * Client.aj;
                n3 = class262.canvasHeight * 1658005443;
            }
            else {
                n2 = -794961409 * widget2.width;
                n3 = widget2.height * 1473950221;
            }
            class158.alignWidgetSize(widget, n2, n3, false, -2141631151);
            class192.alignWidgetPosition(widget, n2, n3, (byte)(-121));
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.lt(" + ')');
        }
    }
    
    public ClanChannel[] st() {
        return Client.currentClanChannels;
    }
    
    static final void st(final int n, final int n2, final int n3) {
        if (687155620 * class36.cameraX < n) {
            class36.cameraX += (2083910077 * KeyHandler.field81 + class138.field1314 * -1514927571 * (n - -2100544359 * class36.cameraX) / -644981091) * -1467057482;
            if (-2100544359 * class36.cameraX > n) {
                class36.cameraX = 387908795 * n;
            }
        }
        if (class36.cameraX * -2100544359 > n) {
            class36.cameraX -= 1827702826 * (KeyHandler.field81 * -1628599143 + class138.field1314 * -1019241596 * (-2056130814 * class36.cameraX - n) / -1737448222);
            if (-2100544359 * class36.cameraX < n) {
                class36.cameraX = n * -1162075381;
            }
        }
        if (-131150640 * class174.cameraY < n2) {
            class174.cameraY += (1020997636 * KeyHandler.field81 + (n2 - class174.cameraY * -323023040) * (class138.field1314 * 2010060898) / -1935796325) * -424093663;
            if (class174.cameraY * 286859016 > n2) {
                class174.cameraY = 943775544 * n2;
            }
        }
        if (class174.cameraY * 1458892988 > n2) {
            class174.cameraY -= (KeyHandler.field81 * -384294133 + (-1281368797 * class174.cameraY - n2) * (-1514927571 * class138.field1314) / 1440809214) * -1641096819;
            if (2048187074 * class174.cameraY < n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (-91399205 * class297.cameraZ < n3) {
            class297.cameraZ += (-1514927571 * class138.field1314 * (n3 - -1705015174 * class297.cameraZ) / 1000 + KeyHandler.field81 * -663346309) * 46344275;
            if (-91399205 * class297.cameraZ > n3) {
                class297.cameraZ = n3 * 46344275;
            }
        }
        if (-91399205 * class297.cameraZ > n3) {
            class297.cameraZ -= (-1795707374 * class138.field1314 * (class297.cameraZ * 1349272685 - n3) / 295205643 + 2083910077 * KeyHandler.field81) * 46344275;
            if (-91399205 * class297.cameraZ < n3) {
                class297.cameraZ = -1576672418 * n3;
            }
        }
    }
    
    public static boolean ay(final Client client, final int n) {
        if (client == null) {
            client.method394(n);
        }
        try {
            if (null != ModeWhere.field3571) {
                if (n == 1574717316) {
                    throw new IllegalStateException();
                }
                if (!ModeWhere.field3571.trim().isEmpty()) {
                    if (n == 1574717316) {
                        throw new IllegalStateException();
                    }
                    if (TileItem.field1079 != null) {
                        if (n == 1574717316) {
                            throw new IllegalStateException();
                        }
                        if (!TileItem.field1079.trim().isEmpty()) {
                            if (n == 1574717316) {
                                throw new IllegalStateException();
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gn(" + ')');
        }
    }
    
    public BoundaryObject ay() {
        return new BoundaryObject();
    }
    
    static void rp(final SequenceDefinition sequenceDefinition, final int n, final int n2, final int n3) {
        if (-297150195 * Client.soundEffectCount >= 50 || class20.clientPreferences.method573(-1991517503) == 0) {
            return;
        }
        if (sequenceDefinition.animMayaFrameSounds == null || !sequenceDefinition.animMayaFrameSounds.containsKey(n)) {
            return;
        }
        class161.method908(sequenceDefinition.animMayaFrameSounds.get(n), n2, n3, 1812346946);
    }
    
    public ItemContainer rp(final int n) {
        return (ItemContainer)UserComparator4.wv(this.resizeRoot(), n);
    }
    
    boolean pl() {
        return null != this.field399;
    }
    
    public void pl(final int n) {
        Client.hintArrowType = n * -1378513753;
    }
    
    static void pr(final int n) {
        if (Client.gameState * -1275976559 == n) {
            return;
        }
        if (-1275976559 * Client.gameState == 30) {
            Client.field590.method1138((byte)21);
        }
        if (0 == -1275976559 * Client.gameState) {
            ScriptFrame.client.bs(-274523606);
        }
        if (n == 20 || 40 == n || 45 == n || n == -355200662) {
            class284.method1595(0, 1232005531);
            Client.field391 = 0;
            Client.field392 = 0;
            Client.timer.method2096(n, (byte)18);
            if (n != 20) {
                class14.method53(false, -1180120967);
            }
        }
        if (n != 20 && n != -2090075088 && null != class333.field3090) {
            class333.field3090.close(-712168220);
            class333.field3090 = null;
        }
        if (Client.gameState * -1275976559 == 25) {
            Client.field489 = 0;
            Client.field427 = 0;
            Client.field593 = -1382503767;
            Client.field425 = 0;
            Client.field426 = -1711800473;
        }
        if (n != 5 && 10 != n) {
            if (20 == n) {
                KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, (11 == -1275976559 * Client.gameState) ? 4 : 0, (byte)(-61));
            }
            else if (11 == n) {
                KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 4, (byte)(-122));
            }
            else if (50 == n) {
                class205.method1137("", "Updating date of birth...", "", 1244734010);
                KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 7, (byte)(-85));
            }
            else {
                Player.method519(684314162);
            }
        }
        else {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, true, class134.method779((byte)87) ? 0 : 12, (byte)(-83));
        }
        Client.gameState = 188619889 * n;
    }
    
    static void xp() {
        Client.menuOptionsCount = 0;
        Client.isMenuOpen = false;
        Client.menuActions[0] = Strings.jl;
        Client.menuTargets[0] = "";
        Client.menuOpcodes[0] = 1810779131;
        Client.menuShiftClick[0] = false;
        Client.menuOptionsCount = 1153055221;
    }
    
    static final void rl() {
        if (HorizontalAlignment.pcmPlayer1 != null) {
            HorizontalAlignment.pcmPlayer1.tryDiscard(336870901);
        }
        if (null != class28.pcmPlayer0) {
            class28.pcmPlayer0.tryDiscard(336870901);
        }
    }
    
    static void sr() {
        if (null != class126.worldMap) {
            class126.worldMap.method2381(GameEngine.Client_plane * -1727408401, (-1289887957 * MusicPatchNode.localPlayer.br >> 7) + -1232093375 * WorldMapData_0.baseX, -1084086758 * GameObject.baseY + (MusicPatchNode.localPlayer.ep * -363997556 >> 7), false, (byte)15);
            class126.worldMap.de(1678452641);
        }
    }
    
    public int sr() {
        return MouseHandler.MouseHandler_lastPressedY * 1163896205;
    }
    
    void tp() {
        final int n = -1687260435 * Client.aj;
        final int n2 = class262.canvasHeight * 1018953575;
        if (-927540391 * this.av < n) {
            final int n3 = this.av * -927540391;
        }
        if (this.ar * -1747234661 < n2) {
            final int n4 = this.ar * 653222995;
        }
        if (class20.clientPreferences != null) {
            try {
                class26.method113(ScriptFrame.client, "resize", new Object[] { GrandExchangeOfferNameComparator.getWindowedMode(1969682792) }, -1612438267);
            }
            catch (Throwable t) {}
        }
    }
    
    public EvictingDualNodeHashTable tp() {
        return ItemComposition.ItemDefinition_cached;
    }
    
    public static void tn(final int n) {
        if (!Login.worldSelectOpen) {
            Arrays.fill(RouteStrategy.rasterProvider.getPixels(), 0);
        }
    }
    
    public static void tn(final Client client) {
        if (client == null) {
            client.clearHintArrow();
            return;
        }
        class425.method2264((byte)32);
        if (Client.clickedWidget != null) {
            return;
        }
        int n = -1222491879 * MouseHandler.MouseHandler_lastButton;
        if (Client.isMenuOpen) {
            if (n != 1 && (class473.mouseCam || 4 != n)) {
                final int n2 = MouseHandler.MouseHandler_x * -2063363905;
                final int n3 = MouseHandler.MouseHandler_y * -1224153235;
                if (n2 < -1141903185 * class192.menuX - 10 || n2 > -960964385 * DesktopPlatformInfoProvider.menuWidth + -1141903185 * class192.menuX + 10 || n3 < ArchiveLoader.menuY * -115281635 - 10 || n3 > ArchiveLoader.menuY * -115281635 + class147.menuHeight * 245252327 + 10) {
                    Client.isMenuOpen = false;
                    final int n4 = class192.menuX * -1141903185;
                    final int n5 = ArchiveLoader.menuY * -115281635;
                    final int n6 = DesktopPlatformInfoProvider.menuWidth * -960964385;
                    final int n7 = 245252327 * class147.menuHeight;
                    for (int i = 0; i < -356793645 * Client.rootWidgetCount; ++i) {
                        if (Client.rootWidgetWidths[i] + Client.rootWidgetXs[i] > n4 && Client.rootWidgetXs[i] < n4 + n6 && Client.rootWidgetHeights[i] + Client.rootWidgetYs[i] > n5 && Client.rootWidgetYs[i] < n7 + n5) {
                            Client.field573[i] = true;
                        }
                    }
                }
            }
            if (n == 1 || (!class473.mouseCam && n == 4)) {
                final int n8 = -1141903185 * class192.menuX;
                final int n9 = ArchiveLoader.menuY * -115281635;
                final int n10 = -960964385 * DesktopPlatformInfoProvider.menuWidth;
                final int n11 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
                final int n12 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
                int n13 = -1;
                for (int j = 0; j < Client.menuOptionsCount * 730065501; ++j) {
                    final int n14 = (Client.menuOptionsCount * 730065501 - 1 - j) * 15 + (31 + n9);
                    if (n11 > n8 && n11 < n8 + n10 && n12 > n14 - 13 && n12 < 3 + n14) {
                        n13 = j;
                    }
                }
                if (n13 != -1) {
                    if (n13 >= 0) {
                        class17.menuAction(Client.menuArguments1[n13], Client.menuArguments2[n13], Client.menuOpcodes[n13], Client.menuIdentifiers[n13], Client.menuItemIds[n13], Client.menuActions[n13], Client.menuTargets[n13], 2020601481 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * 1163896205, 1251225152);
                    }
                }
                Client.isMenuOpen = false;
                final int n15 = class192.menuX * -1141903185;
                final int n16 = -115281635 * ArchiveLoader.menuY;
                final int n17 = DesktopPlatformInfoProvider.menuWidth * -960964385;
                final int n18 = class147.menuHeight * 245252327;
                for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                    if (Client.rootWidgetWidths[k] + Client.rootWidgetXs[k] > n15 && Client.rootWidgetXs[k] < n17 + n15 && Client.rootWidgetYs[k] + Client.rootWidgetHeights[k] > n16 && Client.rootWidgetYs[k] < n16 + n18) {
                        Client.field573[k] = true;
                    }
                }
            }
        }
        else {
            final int method461 = DynamicObject.method461((short)(-27344));
            if ((n || (!class473.mouseCam && 4 == n)) && fk(client, -1679837219)) {
                n = 2;
            }
            if ((n == 1 || (!class473.mouseCam && n == 4)) && Client.menuOptionsCount * 730065501 > 0) {
                if (method461 >= 0) {
                    class17.menuAction(Client.menuArguments1[method461], Client.menuArguments2[method461], Client.menuOpcodes[method461], Client.menuIdentifiers[method461], Client.menuItemIds[method461], Client.menuActions[method461], Client.menuTargets[method461], 2020601481 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * 1163896205, 1297085820);
                }
            }
            if (2 == n && Client.menuOptionsCount * 730065501 > 0) {
                dz(client, 2020601481 * MouseHandler.MouseHandler_lastPressedX, 1163896205 * MouseHandler.MouseHandler_lastPressedY, 1018516557);
            }
        }
    }
    
    void tn() {
        final int n = -1687260435 * Client.aj;
        final int n2 = class262.canvasHeight * 1658005443;
        if (-927540391 * this.av < n) {
            final int n3 = this.av * -927540391;
        }
        if (this.ar * -1747234661 < n2) {
            final int n4 = this.ar * -1747234661;
        }
        if (class20.clientPreferences != null) {
            try {
                class26.method113(ScriptFrame.client, "resize", new Object[] { GrandExchangeOfferNameComparator.getWindowedMode(1569471794) }, -930173862);
            }
            catch (Throwable t) {}
        }
    }
    
    static void ps(final int n) {
        if (Client.gameState * -1275976559 == n) {
            return;
        }
        if (1039788588 * Client.gameState == 30) {
            Client.field590.method1138((byte)(-7));
        }
        if (0 == -1275976559 * Client.gameState) {
            ScriptFrame.client.bs(-274523606);
        }
        if (n == 20 || -595186655 == n || 45 == n || n == -1891328609) {
            class284.method1595(0, 1282501870);
            Client.field391 = 0;
            Client.field392 = 0;
            Client.timer.method2096(n, (byte)31);
            if (n != 20) {
                class14.method53(false, -2092917287);
            }
        }
        if (n != 20 && n != -1647787931 && null != class333.field3090) {
            class333.field3090.close(-721326681);
            class333.field3090 = null;
        }
        if (Client.gameState * 1963843504 == 25) {
            Client.field489 = 0;
            Client.field427 = 0;
            Client.field593 = -1903772507;
            Client.field425 = 0;
            Client.field426 = 1271748105;
        }
        if (n == 5 || 10 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, true, class134.method779((byte)52) ? 0 : 12, (byte)(-12));
        }
        else if (20 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, (11 == 1557838407 * Client.gameState) ? 4 : 0, (byte)(-123));
        }
        else if (11 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 4, (byte)(-9));
        }
        else if (50 == n) {
            class205.method1137("", "Updating date of birth...", "", -290287309);
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 7, (byte)(-122));
        }
        else {
            Player.method519(-358711012);
        }
        Client.gameState = 188619889 * n;
    }
    
    public EvictingDualNodeHashTable op() {
        return HitSplatDefinition.HitSplatDefinition_cached;
    }
    
    public long op() {
        return -7932717541542796365L * this.accountHash;
    }
    
    public int[] oa() {
        return class138.SpriteBuffer_spriteHeights;
    }
    
    public boolean oa() {
        try {
            return Client.gameState * -1275976559 == 10;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.isOnLoginScreen(" + ')');
        }
    }
    
    boolean ob() {
        return null != ModeWhere.field3571 && !ModeWhere.field3571.trim().isEmpty() && TileItem.field1079 != null && !TileItem.field1079.trim().isEmpty();
    }
    
    public ClanSettings[] hs() {
        return Client.currentClanSettings;
    }
    
    public void hs(final int n) {
        Client.hintArrowX = n * -501846925;
    }
    
    public int[] us() {
        return Client.queuedSoundEffectDelays;
    }
    
    public void us(final boolean isMenuOpen) {
        Client.isMenuOpen = isMenuOpen;
    }
    
    static final void us() {
        Client.field476 = 0;
        final int n = WorldMapData_0.baseX * -1232093375 + (1144428983 * MusicPatchNode.localPlayer.br >> 7);
        final int n2 = GameObject.baseY * 827352769 + (-411750205 * MusicPatchNode.localPlayer.ep >> 7);
        if (n >= 3053 && n <= 3156 && n2 >= 3056 && n2 <= 3136) {
            Client.field476 = -1041569925;
        }
        if (n >= 3072 && n <= 3118 && n2 >= 9492 && n2 <= 9535) {
            Client.field476 = -1041569925;
        }
        if (1 == Client.field476 * 43311027 && n >= 3139 && n <= 3199 && n2 >= 3008 && n2 <= 3062) {
            Client.field476 = 0;
        }
    }
    
    static final void acn(int min) {
        min = Math.min(Math.max(min, 0), 127);
        ClientPreferences.tw(class20.clientPreferences, min, -1344002354);
    }
    
    public Widget ht() {
        return Client.clickedWidget;
    }
    
    public World bi() {
        return new World();
    }
    
    public byte[][] bv() {
        return VarbitComposition.SpriteBuffer_pixels;
    }
    
    static final void wi(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (n3 >= 1 && n4 >= 1 && n3 <= 102 && n4 <= 102) {
            if (Client.isLowDetail && n != GameEngine.Client_plane * -1727408401) {
                return;
            }
            long n9 = 0L;
            if (0 == n2) {
                n9 = class31.scene.getBoundaryObjectTag(n, n3, n4);
            }
            if (n2 == 1) {
                n9 = class31.scene.getWallDecorationTag(n, n3, n4);
            }
            if (n2 == 2) {
                n9 = class31.scene.getGameObjectTag(n, n3, n4);
            }
            if (3 == n2) {
                n9 = class31.scene.getFloorDecorationTag(n, n3, n4);
            }
            if (n9 != 0L) {
                final int objectFlags = class31.scene.getObjectFlags(n, n3, n4, n9);
                final int entity_unpackID = InterfaceParent.Entity_unpackID(n9);
                final int n10 = objectFlags & 0x1F;
                final int n11 = objectFlags >> 6 & 0x3;
                if (0 == n2) {
                    Scene.nw(class31.scene, n, n3, n4);
                    final ObjectComposition vmethod3248 = class144.vmethod3248(entity_unpackID, (short)18707);
                    if (0 != vmethod3248.interactType * -973955889) {
                        Client.collisionMaps[n].method1167(n3, n4, n10, n11, vmethod3248.boolean1, -2060413842);
                    }
                }
                if (1 == n2) {
                    class31.scene.dd(n, n3, n4);
                }
                if (n2 == 2) {
                    class31.scene.em(n, n3, n4);
                    final ObjectComposition vmethod3249 = class144.vmethod3248(entity_unpackID, (short)26032);
                    if (-1339930361 * vmethod3249.sizeX + n3 > 103 || -1339930361 * vmethod3249.sizeX + n4 > 103 || n3 + vmethod3249.sizeY * -1659393955 > 103 || -1659393955 * vmethod3249.sizeY + n4 > 103) {
                        return;
                    }
                    if (-973955889 * vmethod3249.interactType != 0) {
                        Client.collisionMaps[n].setFlagOffNonSquare(n3, n4, -1339930361 * vmethod3249.sizeX, vmethod3249.sizeY * -1659393955, n11, vmethod3249.boolean1, 889857801);
                    }
                }
                if (3 == n2) {
                    Scene.zv(class31.scene, n, n3, n4);
                    if (-973955889 * class144.vmethod3248(entity_unpackID, (short)3308).interactType == 1) {
                        Client.collisionMaps[n].setBlockedByFloorDec(n3, n4, -127908210);
                    }
                }
            }
            if (n5 >= 0) {
                int n12 = n;
                if (n12 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n3][n4] & 0x2)) {
                    ++n12;
                }
                class165.method923(n, n12, n3, n4, n5, n6, n7, n8, class31.scene, Client.collisionMaps[n], -1255092021);
            }
        }
    }
    
    public void wi(final int n, final int n2, final int n3, final int n4, final int n5) {
        Rasterizer2D.Rasterizer2D_drawVerticalLineAlpha(n, n2, n3, n4, n5);
    }
    
    public void wi() {
        final int ui = this.ui();
        final boolean b = ui == 1 || (!this.kw() && ui == 4);
        final int n = Client.menuOptionsCount * 730065501 - 1;
        if (b && this.lr() && n >= 0) {
            this.gf(this.ge(), this.sr());
            return;
        }
        if (b && n >= 0) {
            class17.menuAction(Client.menuArguments1[n], Client.menuArguments2[n], Client.menuOpcodes[n], Client.menuIdentifiers[n], Client.menuItemIds[n], Client.menuActions[n], Client.menuTargets[n], this.ge(), this.sr(), -1745540313);
            return;
        }
        if (ui == 2 && n >= 0) {
            this.gf(this.ge(), this.sr());
        }
    }
    
    static final void sz() {
        final int n = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (player != null) {
                ReflectionCheck.updateActorSequence(player, 1, (byte)(-27));
            }
        }
    }
    
    static final void wc(final boolean b, final PacketBuffer packetBuffer) {
        while (true) {
            final int n = 16;
            final int n2 = 1 << n;
            if (packetBuffer.readBits(889658999 * Client.packetWriter.serverPacketLength, 1751384746) < 12 + n) {
                break;
            }
            final int bitsRemaining = packetBuffer.bitsRemaining(n, -1008039765);
            if (n2 - 1 == bitsRemaining) {
                break;
            }
            boolean b2 = false;
            if (null == Client.npcs[bitsRemaining]) {
                Client.npcs[bitsRemaining] = new NPC();
                b2 = true;
            }
            final NPC npc = Client.npcs[bitsRemaining];
            Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = bitsRemaining;
            npc.de = Client.cycle * 898065192;
            int n3;
            if (b) {
                n3 = packetBuffer.bitsRemaining(8, -1114428092);
                if (n3 > -1828086784) {
                    n3 -= 256;
                }
            }
            else {
                n3 = packetBuffer.bitsRemaining(5, -1190377111);
                if (n3 > 15) {
                    n3 -= 32;
                }
            }
            if (packetBuffer.bitsRemaining(1, 316953705) == 1) {
                packetBuffer.bitsRemaining(31110762, -1541993257);
            }
            if (1 == packetBuffer.bitsRemaining(1, -1672612743)) {
                Client.field417[(Client.field416 += 1976865830) * -985380149 - 1] = bitsRemaining;
            }
            final int bitsRemaining2 = packetBuffer.bitsRemaining(1, -1004014923);
            npc.definition = AbstractArchive.getNpcDefinition(packetBuffer.bitsRemaining(14, -967543495), (byte)(-24));
            int n4;
            if (b) {
                n4 = packetBuffer.bitsRemaining(8, -424402466);
                if (n4 > 127) {
                    n4 -= 256;
                }
            }
            else {
                n4 = packetBuffer.bitsRemaining(5, -1557659048);
                if (n4 > 15) {
                    n4 -= 32;
                }
            }
            final int n5 = Client.field561[packetBuffer.bitsRemaining(3, -836856770)];
            if (b2) {
                final NPC npc2 = npc;
                final NPC npc3 = npc;
                final int dx = 737584405 * n5;
                npc3.dx = dx;
                npc2.bj = dx * -1271947604;
            }
            class142.method811(npc, (byte)85);
            if (npc.cv * 351748387 == 0) {
                npc.dx = 0;
            }
            npc.method594(n4 + MusicPatchNode.localPlayer.cf[0], n3 + MusicPatchNode.localPlayer.dy[0], bitsRemaining2, 1029195409);
        }
        packetBuffer.exportIndex((byte)(-45));
    }
    
    public void wc(final int n) {
        if (this.wu != null) {
            this.wu.post((Object)new AccountHashChanged());
        }
    }
    
    static void wr(final NPC npc) {
        npc.bt = -2118795044 * npc.definition.size;
        npc.cv = npc.definition.rotation * 527874606;
        npc.cr = npc.definition.walkSequence * -842242991;
        npc.bf = 50882616 * npc.definition.walkBackSequence;
        npc.dl = 1886938753 * npc.definition.walkLeftSequence;
        npc.dp = npc.definition.walkRightSequence * 2010418861;
        npc.cd = npc.definition.idleSequence * -1160297092;
        npc.bh = npc.definition.turnLeftSequence * 1865175459;
        npc.dz = npc.definition.turnRightSequence * -1592503286;
        npc.dr = -1079417805 * npc.definition.runSequence;
        npc.bx = npc.definition.runBackSequence * 104260677;
        npc.bg = npc.definition.runLeftSequence * 350328209;
        npc.eo = -1191572872 * npc.definition.runRightSequence;
        npc.ba = -2121315781 * npc.definition.crawlSequence;
        npc.bm = npc.definition.crawlBackSequence * -888075470;
        npc.bs = npc.definition.crawlLeftSequence * -76847983;
        npc.bu = npc.definition.crawlRightSequence * -389345838;
    }
    
    public static int wr(final int n) {
        final int n2 = n >> 2;
        final int n3 = n & 0x3;
        final double n4 = Client.nv.getHeight() - Client.hc - (n2 - Client.kx) * Client.gg;
        final int n5 = (int)n4;
        return n5 + (((int)(n4 - Client.gg) - n5) * n3 >> 2);
    }
    
    public static void ua(final int n) {
        int jq = ScriptFrame.client.jq();
        if (jq == Client.wk + 1) {
            final int n2 = jq - 1;
            final int n3 = ScriptFrame.client.ge()[n2];
            boolean b;
            if (n3 == 0) {
                final SoundEffectPlayed soundEffectPlayed = new SoundEffectPlayed((net.runelite.api.Actor)Client.jd);
                soundEffectPlayed.setSoundId(ScriptFrame.client.qi()[n2]);
                soundEffectPlayed.setDelay(ScriptFrame.client.us()[n2]);
                ScriptFrame.client.getCallbacks().post((Object)soundEffectPlayed);
                b = soundEffectPlayed.isConsumed();
            }
            else {
                final int sceneX = n3 >> 16 & 0xFF;
                final int sceneY = n3 >> 8 & 0xFF;
                final int range = n3 & 0xFF;
                final AreaSoundEffectPlayed areaSoundEffectPlayed = new AreaSoundEffectPlayed((net.runelite.api.Actor)Client.jd);
                areaSoundEffectPlayed.setSoundId(ScriptFrame.client.qi()[n2]);
                areaSoundEffectPlayed.setSceneX(sceneX);
                areaSoundEffectPlayed.setSceneY(sceneY);
                areaSoundEffectPlayed.setRange(range);
                areaSoundEffectPlayed.setDelay(ScriptFrame.client.us()[n2]);
                ScriptFrame.client.getCallbacks().post((Object)areaSoundEffectPlayed);
                b = areaSoundEffectPlayed.isConsumed();
            }
            if (b) {
                --jq;
                ScriptFrame.client.bl(jq);
            }
        }
        Client.wk = jq;
    }
    
    public static void ua(final ScriptEvent scriptEvent) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        assert Client.od == null : "scripts are not reentrant";
        ScriptFrame.client.yw(scriptEvent, 5000000, 0);
        boolean b = false;
        assert b = true;
        final Object[] arguments = scriptEvent.getArguments();
        if (b && arguments[0] instanceof Integer) {
            final int intValue = (int)arguments[0];
            final Script script = (Script)ScriptFrame.client.mq().get(intValue);
            if (script != null) {
                int i = 0;
                int j = 0;
                for (int k = 1; k < arguments.length; ++k) {
                    if (arguments[k] instanceof Integer) {
                        ++i;
                    }
                    else {
                        ++j;
                    }
                }
                if (i != script.bw() || j != script.dp()) {
                    throw new AssertionError((Object)("Script " + intValue + " was called with the incorrect number of arguments; takes " + script.bw() + "+" + script.dp() + ", got " + i + "+" + j));
                }
            }
        }
    }
    
    public boolean ua(final net.runelite.api.Model model, final int n, final int n2, final int n3, final int n4) {
        final int cameraPitch = ScriptFrame.client.getCameraPitch();
        final int cameraYaw = ScriptFrame.client.getCameraYaw();
        final int n5 = Perspective.SINE[cameraPitch];
        final int n6 = Perspective.COSINE[cameraPitch];
        final int n7 = Perspective.SINE[cameraYaw];
        final int n8 = Perspective.COSINE[cameraYaw];
        final int centerX = ScriptFrame.client.getCenterX();
        final int centerY = ScriptFrame.client.getCenterY();
        final int bp = ScriptFrame.client.bp();
        final int by = ScriptFrame.client.by();
        final int get3dZoom = ScriptFrame.client.get3dZoom();
        final int n9 = (bp - centerX) * 50 / get3dZoom;
        final int n10 = (by - centerY) * 50 / get3dZoom;
        final int n11 = (bp - centerX) * 13312 / get3dZoom;
        final int n12 = (by - centerY) * 13312 / get3dZoom;
        final int zg = zg(n10, 50, n6, n5);
        final int sq = sq(n10, 50, n6, n5);
        final int n13 = zg;
        final int zg2 = zg(n12, 13312, n6, n5);
        final int sq2 = sq(n12, 13312, n6, n5);
        final int n14 = zg2;
        final int lr = lr(n9, sq, n8, n7);
        final int rk = rk(n9, sq, n8, n7);
        final int n15 = lr;
        final int lr2 = lr(n11, sq2, n8, n7);
        final int rk2 = rk(n11, sq2, n8, n7);
        final int a = (lr2 - n15) / 2;
        final int a2 = (n14 - n13) / 2;
        final int a3 = (rk2 - rk) / 2;
        final int abs = Math.abs(a);
        final int abs2 = Math.abs(a2);
        final int abs3 = Math.abs(a3);
        final net.runelite.api.AABB aabb = model.getAABB(n);
        final int n16 = n2 + aabb.getCenterX();
        final int n17 = n3 + aabb.getCenterY();
        final int n18 = n4 + aabb.getCenterZ();
        final int extremeX = aabb.getExtremeX();
        final int extremeY = aabb.getExtremeY();
        final int extremeZ = aabb.getExtremeZ();
        final int n19 = (n15 + lr2) / 2;
        final int n20 = (n13 + n14) / 2;
        final int n21 = (rk2 + rk) / 2;
        final int a4 = n19 - n16;
        final int a5 = n20 - n17;
        final int a6 = n21 - n18;
        return Math.abs(a4) <= extremeX + abs && Math.abs(a5) <= extremeY + abs2 && Math.abs(a6) <= extremeZ + abs3 && Math.abs(a6 * a2 - a5 * a3) <= extremeY * abs3 + extremeZ * abs2 && Math.abs(a4 * a3 - a6 * a) <= extremeZ * abs + extremeX * abs3 && Math.abs(a5 * a - a4 * a2) <= extremeY * abs + extremeX * abs2;
    }
    
    static void ua(final class206 class206) {
        if (class206 != null && null != class206.field1854) {
            if (55577617 * class206.field1854.childIndex >= 0) {
                final Widget vmethod3380 = class165.vmethod3380(913615679 * class206.field1854.parentId, (byte)5);
                if (vmethod3380 == null || vmethod3380.children == null || 0 == vmethod3380.children.length || 55577617 * class206.field1854.childIndex >= vmethod3380.children.length || vmethod3380.children[55577617 * class206.field1854.childIndex] != class206.field1854) {
                    return;
                }
            }
            if (class206.field1854.type * 883712245 == 11 && class206.field1853 * -469277123 == 0) {
                if (Widget.ms(class206.field1854, -1583959695 * class206.field1855, class206.field1852 * -1480602069, 0, 0, (byte)(-92))) {
                    switch (class206.field1854.method1810(1449064294)) {
                        case 1: {
                            if (!ObjectComposition.decodeNext(KeyHandler.getWidgetFlags(class206.field1854, 413270331), 1422068119)) {
                                break;
                            }
                            final int[] method1812 = class206.field1854.method1812(574261316);
                            if (null != method1812) {
                                final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.IF_BUTTON3, Client.packetWriter.isaacCipher, (short)(-5095));
                                packetBufferNode.packetBuffer.dy(method1812[0], (byte)(-2));
                                packetBufferNode.packetBuffer.es(class206.field1854.id * 1713081171, -604065252);
                                packetBufferNode.packetBuffer.ba(method1812[1], -2081835031);
                                packetBufferNode.packetBuffer.el(class206.field1854.method1811(1876121307), -437883978);
                                packetBufferNode.packetBuffer.dy(method1812[2], (byte)18);
                                Buffer.ap(packetBufferNode.packetBuffer, 55577617 * class206.field1854.childIndex, (byte)54);
                                Client.packetWriter.addNode(packetBufferNode, 414135591);
                                break;
                            }
                            break;
                        }
                        case 0: {
                            Ignored.compareTo_ignored(class206.field1854.method1827(-1501476434), true, false, (byte)77);
                            break;
                        }
                    }
                }
            }
            else if (12 == class206.field1854.type * 883712245) {
                final class314 method1813 = class206.field1854.method1815((byte)(-26));
                if (method1813 != null && method1813.ed(1994580892)) {
                    switch (-469277123 * class206.field1853) {
                        case 0: {
                            Client.field590.method1137(class206.field1854, 279592379);
                            method1813.method1706(true, -1523621634);
                            class314.ow(method1813, class206.field1855 * -1583959695, -1480602069 * class206.field1852, Client.keyHandlerInstance.getKeyPressed(82, -1775078156), Client.keyHandlerInstance.getKeyPressed(81, -1761215442), 1653706503);
                            break;
                        }
                        case 1: {
                            method1813.method1727(-1583959695 * class206.field1855, -1480602069 * class206.field1852, 915076242);
                            break;
                        }
                    }
                }
            }
        }
    }
    
    public static void hb() {
        ScriptFrame.client.getCallbacks().post((Object)new WorldChanged());
    }
    
    public void ix(final net.runelite.api.SpritePixels spritePixels) {
        class123.leftTitleSprite = (SpritePixels)spritePixels;
    }
    
    public Varcs di() {
        return class373.varcs;
    }
    
    public int ti(final int n, final int n2, final int n3) {
        return class147.getTileHeight(n, n2, n3, (byte)(-99));
    }
    
    public SequenceDefinition ti(final int n) {
        return ItemContainer.SpotAnimationDefinition_get(n, (byte)28);
    }
    
    static void ti() {
        if (Client.field482) {
            MouseHandler.addPlayerToScene(MusicPatchNode.localPlayer, false, -1861126010);
        }
    }
    
    public static void ms(final int slot) {
        if (slot == -1) {
            return;
        }
        final GrandExchangeOffer offer = ScriptFrame.client.vz()[slot];
        if (offer == null) {
            return;
        }
        final GrandExchangeOfferChanged grandExchangeOfferChanged = new GrandExchangeOfferChanged();
        grandExchangeOfferChanged.setOffer((net.runelite.api.GrandExchangeOffer)offer);
        grandExchangeOfferChanged.setSlot(slot);
        ScriptFrame.client.getCallbacks().post((Object)grandExchangeOfferChanged);
    }
    
    public int ok() {
        return ViewportMouse.ViewportMouse_entityCount * -1048050201;
    }
    
    public ClanChannel ok() {
        return MouseHandler.guestClanChannel;
    }
    
    static final void sn() {
        class133.method777(1438254478 * WorldMapRectangle.field2405, Players.field1095 * -1852915743, -760417651 * KitDefinition.field1519, -44798237);
        GraphicsObject.method433(ScriptEvent.field851 * 418936321, class86.field888 * -2146920608, (byte)45);
        if (1380164832 * class36.cameraX == 1603725449 * WorldMapRectangle.field2405 && 1772923873 * class174.cameraY == -1852915743 * Players.field1095 && class297.cameraZ * 1517292905 == -7898860 * KitDefinition.field1519 && ScriptEvent.field851 * -1086105644 == WorldMapSectionType.cameraPitch * 1897923909 && -1010818347 * class125.cameraYaw == class86.field888 * 1168061824) {
            Client.field598 = false;
            Client.isCameraLocked = false;
            Client.field541 = false;
            Client.field614 = false;
            FontName.field3970 = 0;
            MilliClock.field1455 = 0;
            ScriptFrame.field343 = 0;
            Archive.field3467 = 0;
            WorldMapElement.field1503 = 0;
            class138.field1314 = 0;
            KeyHandler.field81 = 0;
            ObjTypeCustomisation.field1471 = 0;
            class123.field1209 = 0;
            class16.field54 = 0;
            Client.field535 = null;
            Client.field604 = null;
            Client.field617 = null;
        }
    }
    
    public int sn() {
        return Client.changedSkillsCount * -744210295;
    }
    
    public static NodeDeque up() {
        return Client.scriptEvents;
    }
    
    static final int ud() {
        if (class20.clientPreferences.getRoofsHidden(-2145334601)) {
            return -1727408401 * GameEngine.Client_plane;
        }
        int n = 3;
        if (WorldMapSectionType.cameraPitch * 1897923909 < 310) {
            int i;
            int n2;
            if (986256295 * Client.oculusOrbState == 1) {
                i = -1958669353 * class33.oculusOrbFocalPointX >> 7;
                n2 = -365969735 * class144.oculusOrbFocalPointY >> 7;
            }
            else {
                i = 1144428983 * MusicPatchNode.localPlayer.br >> 7;
                n2 = MusicPatchNode.localPlayer.ep * -411750205 >> 7;
            }
            int n3 = -2100544359 * class36.cameraX >> 7;
            int j = class297.cameraZ * -91399205 >> 7;
            if (n3 < 0 || j < 0 || n3 >= 104 || j >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (i < 0 || n2 < 0 || i >= 104 || n2 >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            int n4;
            if (i > n3) {
                n4 = i - n3;
            }
            else {
                n4 = n3 - i;
            }
            int n5;
            if (n2 > j) {
                n5 = n2 - j;
            }
            else {
                n5 = j - n2;
            }
            if (n4 > n5) {
                final int n6 = 65536 * n5 / n4;
                int n7 = 32768;
                while (i != n3) {
                    if (n3 < i) {
                        ++n3;
                    }
                    else if (n3 > i) {
                        --n3;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                        n = GameEngine.Client_plane * -1727408401;
                    }
                    n7 += n6;
                    if (n7 >= 65536) {
                        n7 -= 65536;
                        if (j < n2) {
                            ++j;
                        }
                        else if (j > n2) {
                            --j;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
            else if (n5 > 0) {
                final int n8 = n4 * 65536 / n5;
                int n9 = 32768;
                while (j != n2) {
                    if (j < n2) {
                        ++j;
                    }
                    else if (j > n2) {
                        --j;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[-1727408401 * GameEngine.Client_plane][n3][j] & 0x4)) {
                        n = -1727408401 * GameEngine.Client_plane;
                    }
                    n9 += n8;
                    if (n9 >= 65536) {
                        n9 -= 65536;
                        if (n3 < i) {
                            ++n3;
                        }
                        else if (n3 > i) {
                            --n3;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
        }
        if (MusicPatchNode.localPlayer.br * 1144428983 >= 0 && MusicPatchNode.localPlayer.ep * -411750205 >= 0 && 1144428983 * MusicPatchNode.localPlayer.br < 13312 && -411750205 * MusicPatchNode.localPlayer.ep < 13312) {
            if ((Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][1144428983 * MusicPatchNode.localPlayer.br >> 7][-411750205 * MusicPatchNode.localPlayer.ep >> 7] & 0x4) != 0x0) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            return n;
        }
        return -1727408401 * GameEngine.Client_plane;
    }
    
    public static void jf(final Client client) {
        if (client == null) {
            client.la();
        }
        if (Client.rebootTimer * 898359952 > 1) {
            Client.rebootTimer -= 1317177079;
        }
        if (Client.logoutTimer * 1705142349 > 0) {
            Client.logoutTimer += 100200315;
        }
        if (Client.hadNetworkError) {
            Client.hadNetworkError = false;
            class349.method1918(709882847);
            return;
        }
        if (!Client.isMenuOpen) {
            class156.addCancelMenuEntry(-742935767);
        }
        for (int n = 0; n < 1118871474 && client.method391(Client.packetWriter, -1763621300); ++n) {}
        if (30 != -1275976559 * Client.gameState) {
            return;
        }
        while (null != class36.reflectionChecks.up()) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2549, Client.packetWriter.isaacCipher, (short)(-7050));
            packetBufferNode.packetBuffer.bf(0, (byte)42);
            final int n2 = packetBufferNode.packetBuffer.at * -1633313603;
            class432.vmethod7769(packetBufferNode.packetBuffer, (byte)(-32));
            packetBufferNode.packetBuffer.cu(-1633313603 * packetBufferNode.packetBuffer.at - n2, 2037594118);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (Client.timer.field3670) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2552, Client.packetWriter.isaacCipher, (short)(-9780));
            packetBufferNode2.packetBuffer.bf(0, (byte)87);
            final int n3 = 156837768 * packetBufferNode2.packetBuffer.at;
            Client.timer.write(packetBufferNode2.packetBuffer, 574136880);
            packetBufferNode2.packetBuffer.cu(1422390646 * packetBufferNode2.packetBuffer.at - n3, -1024722912);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
            Timer.ct(Client.timer, (byte)89);
        }
        synchronized (UserComparator6.mouseRecorder.lock) {
            if (Client.lockMouseRecorder) {
                if (0 != -1222491879 * MouseHandler.MouseHandler_lastButton || 535437747 * UserComparator6.mouseRecorder.index >= 860336162) {
                    PacketBufferNode packetBufferNode3 = null;
                    int n4 = 0;
                    int n5 = 0;
                    int n6 = 0;
                    int n7 = 0;
                    for (int n8 = 0; n8 < 535437747 * UserComparator6.mouseRecorder.index && (packetBufferNode3 == null || -1633313603 * packetBufferNode3.packetBuffer.at - n4 < 246); ++n8) {
                        n5 = n8;
                        int n9 = UserComparator6.mouseRecorder.ys[n8];
                        if (n9 < -1) {
                            n9 = -1;
                        }
                        else if (n9 > 65534) {
                            n9 = -1903599851;
                        }
                        int n10 = UserComparator6.mouseRecorder.xs[n8];
                        if (n10 < -1) {
                            n10 = -1;
                        }
                        else if (n10 > 65534) {
                            n10 = -1856379508;
                        }
                        if (Client.lastMouseRecordX * 1287170206 != n10 || Client.lastMouseRecordY * -2076298705 != n9) {
                            if (packetBufferNode3 == null) {
                                packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2559, Client.packetWriter.isaacCipher, (short)(-26970));
                                packetBufferNode3.packetBuffer.bf(0, (byte)34);
                                n4 = packetBufferNode3.packetBuffer.at * -1561498850;
                                final PacketBuffer packetBuffer = packetBufferNode3.packetBuffer;
                                packetBuffer.at -= 872761934;
                                n6 = 0;
                                n7 = 0;
                            }
                            int n11;
                            int n12;
                            int n13;
                            if (-1L != Client.lastMouseRecordTime * 8511124946921102523L) {
                                n11 = n10 - 864326733 * Client.lastMouseRecordX;
                                n12 = n9 - -1383597220 * Client.lastMouseRecordY;
                                n13 = (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) / 20L);
                                n6 += (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) % 20L);
                            }
                            else {
                                n11 = n10;
                                n12 = n9;
                                n13 = -77837524;
                            }
                            Client.lastMouseRecordX = -1708731570 * n10;
                            Client.lastMouseRecordY = 824333519 * n9;
                            if (n13 < 8 && n11 >= -782270414 && n11 <= 1910371019 && n12 >= -32 && n12 <= 31) {
                                n11 += 32;
                                n12 += 32;
                                packetBufferNode3.packetBuffer.cq((n13 << 12) + (n11 << 6) + n12, (byte)(-26));
                            }
                            else if (n13 < 32 && n11 >= -1159321719 && n11 <= 127 && n12 >= -1192848597 && n12 <= -1736606412) {
                                n11 += 128;
                                n12 += 128;
                                packetBufferNode3.packetBuffer.bf(n13 + 128, (byte)119);
                                packetBufferNode3.packetBuffer.cq((n11 << 8) + n12, (byte)(-98));
                            }
                            else if (n13 < -917065833) {
                                packetBufferNode3.packetBuffer.bf(n13 + 1281151284, (byte)34);
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(1229333881, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            else {
                                packetBufferNode3.packetBuffer.cq((n13 & 0x81D1E1) + 57344, (byte)99);
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            ++n7;
                            Client.lastMouseRecordTime = 2560228884295272563L * UserComparator6.mouseRecorder.millis[n8];
                        }
                    }
                    if (null != packetBufferNode3) {
                        packetBufferNode3.packetBuffer.cu(packetBufferNode3.packetBuffer.at * -1633313603 - n4, -214465028);
                        final int n14 = packetBufferNode3.packetBuffer.at * -1633313603;
                        packetBufferNode3.packetBuffer.at = -1516355947 * n4;
                        packetBufferNode3.packetBuffer.bf(n6 / n7, (byte)31);
                        packetBufferNode3.packetBuffer.bf(n6 % n7, (byte)84);
                        packetBufferNode3.packetBuffer.at = -1516355947 * n14;
                        Client.packetWriter.addNode(packetBufferNode3, 414135591);
                    }
                    if (n5 >= UserComparator6.mouseRecorder.index * 535437747) {
                        UserComparator6.mouseRecorder.index = 0;
                    }
                    else {
                        final MouseRecorder mouseRecorder = UserComparator6.mouseRecorder;
                        mouseRecorder.index -= 1905934290 * n5;
                        System.arraycopy(UserComparator6.mouseRecorder.xs, n5, UserComparator6.mouseRecorder.xs, 0, UserComparator6.mouseRecorder.index * -1792636405);
                        System.arraycopy(UserComparator6.mouseRecorder.ys, n5, UserComparator6.mouseRecorder.ys, 0, 535437747 * UserComparator6.mouseRecorder.index);
                        System.arraycopy(UserComparator6.mouseRecorder.millis, n5, UserComparator6.mouseRecorder.millis, 0, UserComparator6.mouseRecorder.index * 535437747);
                    }
                }
            }
            else {
                UserComparator6.mouseRecorder.index = 0;
            }
        }
        if (1 == 1410315258 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && 4 == MouseHandler.MouseHandler_lastButton * -1222491879) || MouseHandler.MouseHandler_lastButton * -1222491879 == 2) {
            long n15 = MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L - 2243792022961482123L * Client.mouseLastLastPressedTimeMillis;
            if (n15 > 32767L) {
                n15 = 32767L;
            }
            Client.mouseLastLastPressedTimeMillis = 5332065808650620587L * MouseHandler.MouseHandler_lastPressedTimeMillis;
            int n16 = -1704011441 * MouseHandler.MouseHandler_lastPressedY;
            if (n16 < 0) {
                n16 = 0;
            }
            else if (n16 > 536883585 * class262.canvasHeight) {
                n16 = class262.canvasHeight * 1658005443;
            }
            int n17 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            if (n17 < 0) {
                n17 = 0;
            }
            else if (n17 > 1906330437 * Client.aj) {
                n17 = -1687260435 * Client.aj;
            }
            final int n18 = (int)n15;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.field2477, Client.packetWriter.isaacCipher, (short)(-17177));
            packetBufferNode4.packetBuffer.cq(((2 == MouseHandler.MouseHandler_lastButton * -1222491879) ? 1 : 0) + (n18 << 1), (byte)93);
            packetBufferNode4.packetBuffer.cq(n17, (byte)(-80));
            packetBufferNode4.packetBuffer.cq(n16, (byte)(-85));
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (Client.keyHandlerInstance.pressedKeysCount * -769485909 > 0) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2469, Client.packetWriter.isaacCipher, (short)(-658));
            packetBufferNode5.packetBuffer.cq(0, (byte)46);
            final int n19 = -1633313603 * packetBufferNode5.packetBuffer.at;
            final long clockNow = class96.clockNow(197823500);
            for (int i = 0; i < 1888573011 * Client.keyHandlerInstance.pressedKeysCount; ++i) {
                long n20 = clockNow - 8736327498043665535L * Client.timeOfPreviousKeyPress;
                if (n20 > 16777215L) {
                    n20 = 16777215L;
                }
                Client.timeOfPreviousKeyPress = clockNow * 4061967902176514943L;
                packetBufferNode5.packetBuffer.ez((int)n20, 1126819769);
                packetBufferNode5.packetBuffer.bf(Client.keyHandlerInstance.field1856[i], (byte)124);
            }
            packetBufferNode5.packetBuffer.ca(packetBufferNode5.packetBuffer.at * -1633313603 - n19, -1814108949);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (Client.packetIndicator * -1504372859 > 0) {
            Client.packetIndicator -= 1691830605;
        }
        if (Client.keyHandlerInstance.getKeyPressed(96, 758153108) || Client.keyHandlerInstance.getKeyPressed(-184795240, 585587870) || Client.keyHandlerInstance.getKeyPressed(98, 140541342) || Client.keyHandlerInstance.getKeyPressed(99, 815321705)) {
            Client.emitPackets = true;
        }
        if (Client.emitPackets && Client.packetIndicator * -1504372859 <= 0) {
            Client.packetIndicator = -523126268;
            Client.emitPackets = false;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2541, Client.packetWriter.isaacCipher, (short)(-20273));
            packetBufferNode6.packetBuffer.cq(Client.camAngleY * 704283033, (byte)(-2));
            packetBufferNode6.packetBuffer.cq(1235263929 * Client.camAngleX, (byte)(-105));
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (AbstractByteArrayCopier.hasFocus && !Client.hadFocus) {
            Client.hadFocus = true;
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-22590));
            packetBufferNode7.packetBuffer.bf(1, (byte)64);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (!AbstractByteArrayCopier.hasFocus && Client.hadFocus) {
            Client.hadFocus = false;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-6041));
            packetBufferNode8.packetBuffer.bf(0, (byte)20);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (null != class126.worldMap) {
            class126.worldMap.ft(1720791422);
        }
        Coord.method1686(-1863403030);
        WorldMapElement.method988((byte)1);
        UserComparator8.method689((byte)(-5));
        if (30 != Client.gameState * -1275976559) {
            return;
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn.endCycle * 1457211081 > 0) {
                final PendingSpawn pendingSpawn2 = pendingSpawn;
                pendingSpawn2.endCycle -= 728863286;
            }
            if (0 == pendingSpawn.endCycle * 1894668390) {
                if (pendingSpawn.objectId * 637177597 < 0 || class195.method1053(637177597 * pendingSpawn.objectId, pendingSpawn.field922 * 1599541283, 2065447712)) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, 1934230654 * pendingSpawn.type, -817106218 * pendingSpawn.x, -255177579 * pendingSpawn.y, pendingSpawn.objectId * -1260188941, 823477000 * pendingSpawn.field927, pendingSpawn.field922 * 1599541283, pendingSpawn.field931 * -257151632, -2147048213);
                    pendingSpawn.hw();
                }
            }
            else {
                if (-1236629960 * pendingSpawn.startCycle > 0) {
                    final PendingSpawn pendingSpawn3 = pendingSpawn;
                    pendingSpawn3.startCycle += 1120029728;
                }
                if (-536117851 * pendingSpawn.startCycle == 0 && 68300005 * pendingSpawn.x >= 1 && -1732596741 * pendingSpawn.y >= 1 && pendingSpawn.x * 766919312 <= 102 && -1531823912 * pendingSpawn.y <= -47356781 && (pendingSpawn.id * 552715177 < 0 || class195.method1053(pendingSpawn.id * -2125340516, pendingSpawn.objectType * -1966402261, 1380198789))) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 412661526, 1947369904 * pendingSpawn.type, pendingSpawn.x * 68300005, pendingSpawn.y * 1887426197, -1460306520 * pendingSpawn.id, 123878273 * pendingSpawn.rotation, pendingSpawn.objectType * -1966402261, 1699404385 * pendingSpawn.field931, -2143908108);
                    pendingSpawn.startCycle = -237969965;
                    if (pendingSpawn.objectId * 2035100947 == 1528993805 * pendingSpawn.id && -1 == pendingSpawn.objectId * 637177597) {
                        pendingSpawn.hw();
                    }
                    else if (-1143646691 * pendingSpawn.objectId == pendingSpawn.id * 552715177 && -477664016 * pendingSpawn.field927 == pendingSpawn.rotation * 120493739 && -1966402261 * pendingSpawn.objectType == pendingSpawn.field922 * 1599541283) {
                        pendingSpawn.hw();
                    }
                }
            }
        }
        for (int j = 0; j < Client.soundEffectCount * 284182994; ++j) {
            final int[] queuedSoundEffectDelays = Client.queuedSoundEffectDelays;
            final int n21 = j;
            --queuedSoundEffectDelays[n21];
            if (Client.queuedSoundEffectDelays[j] < -10) {
                Client.soundEffectCount += 1874562170;
                for (int k = j; k < Client.soundEffectCount * -552685955; ++k) {
                    Client.soundEffectIds[k] = Client.soundEffectIds[1 + k];
                    Client.soundEffects[k] = Client.soundEffects[k + 1];
                    Client.queuedSoundEffectLoops[k] = Client.queuedSoundEffectLoops[1 + k];
                    Client.queuedSoundEffectDelays[k] = Client.queuedSoundEffectDelays[k + 1];
                    Client.soundLocations[k] = Client.soundLocations[k + 1];
                }
                --j;
            }
            else {
                SoundEffect soundEffect = Client.soundEffects[j];
                if (null == soundEffect) {
                    final SoundEffect soundEffect2 = null;
                    soundEffect = SoundEffect.readSoundEffect(class426.field3811, Client.soundEffectIds[j], 0);
                    if (soundEffect == null) {
                        continue;
                    }
                    final int[] queuedSoundEffectDelays2 = Client.queuedSoundEffectDelays;
                    final int n22 = j;
                    queuedSoundEffectDelays2[n22] += soundEffect.calculateDelay();
                    Client.soundEffects[j] = soundEffect;
                }
                if (Client.queuedSoundEffectDelays[j] < 0) {
                    int setUsernameToRemember;
                    if (Client.soundLocations[j] != 0) {
                        final int n23 = (Client.soundLocations[j] & 0x94823EFA) * 128;
                        int n24 = 1454311871 * (Client.soundLocations[j] >> 16 & 0xFF) - 1474937727 - MusicPatchNode.localPlayer.br * 1144428983;
                        if (n24 < 0) {
                            n24 = -n24;
                        }
                        int n25 = -648607198 + (Client.soundLocations[j] >> 8 & 0xFF) * 128 - 904641008 * MusicPatchNode.localPlayer.ep;
                        if (n25 < 0) {
                            n25 = -n25;
                        }
                        int n26 = n24 + n25 - 128;
                        if (n26 > n23) {
                            Client.queuedSoundEffectDelays[j] = -100;
                            continue;
                        }
                        if (n26 < 0) {
                            n26 = 0;
                        }
                        setUsernameToRemember = (n23 - n26) * class20.clientPreferences.method573(-1926037871) / n23;
                    }
                    else {
                        setUsernameToRemember = ClientPreferences.setUsernameToRemember(class20.clientPreferences, 2009898474);
                    }
                    if (setUsernameToRemember > 0) {
                        final RawPcmStream rawPcmStream = RawPcmStream.createRawPcmStream(soundEffect.toRawSound().resample(WorldMapSectionType.decimator), 100, setUsernameToRemember);
                        rawPcmStream.setNumLoops(Client.queuedSoundEffectLoops[j] - 1);
                        class130.pcmStreamMixer.addSubStream(rawPcmStream);
                    }
                    Client.queuedSoundEffectDelays[j] = -100;
                }
            }
        }
        if (Client.playingJingle && !class4.method8(-2145089391)) {
            if (ClientPreferences.xp(class20.clientPreferences, -848183622) != 0 && -1 != Client.currentTrackGroupId * -882735506) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, ClientPreferences.xp(class20.clientPreferences, -1261360876), false, -1383202348);
            }
            Client.playingJingle = false;
        }
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.field1136 += 825518582;
        if (-1378393373 * Client.packetWriter.field1136 > 750) {
            class349.method1918(709882847);
            return;
        }
        class207.method1162(-1233939782);
        EnumComposition.method1013(-1074260583);
        final int[] players_indices = Players.Players_indices;
        for (int l = 0; l < -2010934433 * Players.Players_count; ++l) {
            final Player player = Client.players[players_indices[l]];
            if (null != player && player.dt * -314652676 > 0) {
                final Player player2 = player;
                player2.dt += 517024252;
                if (player.dt * -1445293227 == 0) {
                    player.bw = null;
                }
            }
        }
        for (int n27 = 0; n27 < 265474485 * Client.npcCount; ++n27) {
            final NPC npc = Client.npcs[Client.npcIndices[n27]];
            if (npc != null && 1779383970 * npc.dt > 0) {
                final NPC npc2 = npc;
                npc2.dt -= 810869024;
                if (npc.dt * -536830723 == 0) {
                    npc.bw = null;
                }
            }
        }
        Client.field432 -= 1434574221;
        if (-1306273505 * Client.mouseCrossColor != 0) {
            Client.mouseCrossState -= 1734175182;
            if (Client.mouseCrossState * 1340140043 >= -1519653949) {
                Client.mouseCrossColor = 0;
            }
        }
        final Widget mousedOverWidgetIf1 = MidiPcmStream.mousedOverWidgetIf1;
        final Widget field1274 = class130.field1274;
        MidiPcmStream.mousedOverWidgetIf1 = null;
        class130.field1274 = null;
        Client.draggedOnWidget = null;
        Client.field622 = false;
        Client.field540 = false;
        Client.field355 = 0;
        while (class207.mt(Client.keyHandlerInstance, 1273412538) && Client.field355 * -1685179677 < 907823158) {
            if (-7868389 * Client.staffModLevel >= 2 && Client.keyHandlerInstance.getKeyPressed(-1523664032, -1694136943) && 29883549 == 546317845 * Client.keyHandlerInstance.field1867) {
                final StringBuilder sb = new StringBuilder();
                for (final Message message : Messages.Messages_hashTable) {
                    if (null != message.prefix && !message.prefix.isEmpty()) {
                        sb.append(message.prefix).append((char)(-2024126312));
                    }
                    sb.append(message.sender).append('\n');
                }
                ScriptFrame.client.ao(sb.toString(), (byte)(-79));
            }
            else {
                if (Client.oculusOrbState * 986256295 == 1 && Client.keyHandlerInstance.field1866 > '\0') {
                    continue;
                }
                Client.field424[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1867 * 546317845;
                Client.field592[Client.field355 * -91537313] = Client.keyHandlerInstance.field1866;
                Client.field355 += 703505099;
            }
        }
        if (Client.staffModLevel * 324465533 >= 2 && Client.keyHandlerInstance.getKeyPressed(1268937952, 195934377) && Client.keyHandlerInstance.getKeyPressed(1446138054, -1653249228) && 364536141 * Client.mouseWheelRotation != 0) {
            int n28 = 257265351 * MusicPatchNode.localPlayer.plane - Client.mouseWheelRotation * -121753353;
            if (n28 < 0) {
                n28 = 0;
            }
            else if (n28 > 3) {
                n28 = 3;
            }
            if (MusicPatchNode.localPlayer.plane * -1900490645 != n28) {
                final int n29 = WorldMapData_0.baseX * -1232093375 + MusicPatchNode.localPlayer.cf[0];
                final int n30 = 827352769 * GameObject.baseY + MusicPatchNode.localPlayer.dy[0];
                final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-1328));
                packetBufferNode9.packetBuffer.dy(0, (byte)(-68));
                packetBufferNode9.packetBuffer.bu(n29, (byte)13);
                packetBufferNode9.packetBuffer.eb(n28, (byte)(-93));
                packetBufferNode9.packetBuffer.ds(n30, -1970263492);
                Client.packetWriter.addNode(packetBufferNode9, 414135591);
            }
            Client.mouseWheelRotation = 0;
        }
        if (1 == MouseHandler.MouseHandler_lastButton * 2035310715) {
            Client.field590.method1138((byte)39);
        }
        if (-896157613 * Client.rootInterface != -1) {
            ReflectionCheck.updateRootInterface(Client.rootInterface * -1439297343, 0, 0, Client.aj * -1053346903, 1658005443 * class262.canvasHeight, 0, 0, -631543188);
        }
        Client.cycleCntr += 1149269939;
        while (true) {
            final ScriptEvent scriptEvent = (ScriptEvent)Client.field567.removeLast();
            if (scriptEvent == null) {
                break;
            }
            final Widget dragTarget = scriptEvent.dragTarget;
            if (1794764952 * dragTarget.childIndex >= 0) {
                final Widget vmethod3380 = class165.vmethod3380(dragTarget.parentId * 2013512150, (byte)5);
                if (null == vmethod3380 || null == vmethod3380.children || dragTarget.childIndex * 1242635275 >= vmethod3380.children.length) {
                    continue;
                }
                if (dragTarget != vmethod3380.children[dragTarget.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent, (byte)(-32));
        }
        while (true) {
            final ScriptEvent scriptEvent2 = (ScriptEvent)Client.field568.removeLast();
            if (scriptEvent2 == null) {
                break;
            }
            final Widget dragTarget2 = scriptEvent2.dragTarget;
            if (55577617 * dragTarget2.childIndex >= 0) {
                final Widget vmethod3381 = class165.vmethod3380(dragTarget2.parentId * 2119821197, (byte)5);
                if (vmethod3381 == null || vmethod3381.children == null || 55577617 * dragTarget2.childIndex >= vmethod3381.children.length) {
                    continue;
                }
                if (dragTarget2 != vmethod3381.children[dragTarget2.childIndex * -2116686776]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent2, (byte)(-14));
        }
        while (true) {
            final ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.removeLast();
            if (null == scriptEvent3) {
                break;
            }
            final Widget dragTarget3 = scriptEvent3.dragTarget;
            if (dragTarget3.childIndex * 278529561 >= 0) {
                final Widget vmethod3382 = class165.vmethod3380(dragTarget3.parentId * 913615679, (byte)5);
                if (vmethod3382 == null || vmethod3382.children == null || dragTarget3.childIndex * 267563868 >= vmethod3382.children.length) {
                    continue;
                }
                if (dragTarget3 != vmethod3382.children[dragTarget3.childIndex * 1303014919]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent3, (byte)92);
        }
        while (true) {
            final class206 class206 = (class206)Client.field569.removeLast();
            if (class206 == null) {
                break;
            }
            FriendsList.method2138(class206, -1075658656);
        }
        client.menu((byte)14);
        class36.method198((byte)(-34));
        if (Client.clickedWidget != null) {
            client.method389((byte)21);
        }
        if (Scene.shouldSendWalk()) {
            final int scene_selectedX = Scene.Scene_selectedX;
            final int scene_selectedY = Scene.Scene_selectedY;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.field2523, Client.packetWriter.isaacCipher, (short)(-45));
            packetBufferNode10.packetBuffer.bf(5, (byte)16);
            packetBufferNode10.packetBuffer.ds(GameObject.baseY * 827352769 + scene_selectedY, -2134982891);
            Buffer.ap(packetBufferNode10.packetBuffer, -1232093375 * WorldMapData_0.baseX + scene_selectedX, (byte)62);
            packetBufferNode10.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(2053597531, 942959081) ? (Client.keyHandlerInstance.getKeyPressed(81, -1099678225) ? 2 : 1) : 0, -1363097720);
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
            Scene.method1264();
            Client.mouseCrossX = MouseHandler.MouseHandler_lastPressedX * -605999195;
            Client.mouseCrossY = -495861217 * MouseHandler.MouseHandler_lastPressedY;
            Client.mouseCrossColor = -1453825313;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * scene_selectedX;
            Client.destinationY = -433165733 * scene_selectedY;
        }
        if (mousedOverWidgetIf1 != MidiPcmStream.mousedOverWidgetIf1) {
            if (mousedOverWidgetIf1 != null) {
                class144.invalidateWidget(mousedOverWidgetIf1, -1761561320);
            }
            if (null != MidiPcmStream.mousedOverWidgetIf1) {
                class144.invalidateWidget(MidiPcmStream.mousedOverWidgetIf1, -1448288452);
            }
        }
        if (class130.field1274 != field1274 && 1239377975 * Client.field515 == -1579360723 * Client.field514) {
            if (null != field1274) {
                class144.invalidateWidget(field1274, -1206073173);
            }
            if (class130.field1274 != null) {
                class144.invalidateWidget(class130.field1274, -1308841611);
            }
        }
        if (null != class130.field1274) {
            if (215597333 * Client.field514 < 1239377975 * Client.field515) {
                Client.field514 -= 1411611075;
                if (Client.field514 * 572313982 == Client.field515 * 1680214758) {
                    class144.invalidateWidget(class130.field1274, -1547777642);
                }
            }
        }
        else if (Client.field514 * -12773700 > 0) {
            Client.field514 += 847248273;
        }
        if (Client.oculusOrbState * 986256295 == 0) {
            final int n31 = 415277801 * MusicPatchNode.localPlayer.br;
            final int n32 = MusicPatchNode.localPlayer.ep * 1788137049;
            if (-1958669353 * class33.oculusOrbFocalPointX - n31 < -500 || class33.oculusOrbFocalPointX * -1958669353 - n31 > 2103066426 || class144.oculusOrbFocalPointY * -1648702306 - n32 < -500 || -967540647 * class144.oculusOrbFocalPointY - n32 > 335356384) {
                class33.oculusOrbFocalPointX = n31 * 200186120;
                class144.oculusOrbFocalPointY = -1359963901 * n32;
            }
            if (n31 != class33.oculusOrbFocalPointX * -1128902711) {
                class33.oculusOrbFocalPointX += -1307750031 * ((n31 - class33.oculusOrbFocalPointX * -1902244220) / 16);
            }
            if (class144.oculusOrbFocalPointY * -622406727 != n32) {
                class144.oculusOrbFocalPointY += 892004233 * ((n32 - class144.oculusOrbFocalPointY * -365969735) / 16);
            }
            final int n33 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
            final int n34 = class144.oculusOrbFocalPointY * 1958842039 >> 7;
            final int tileHeight = class147.getTileHeight(class33.oculusOrbFocalPointX * -1958669353, -365969735 * class144.oculusOrbFocalPointY, -1033627141 * GameEngine.Client_plane, (byte)10);
            int n35 = 0;
            if (n33 > 3 && n34 > 3 && n33 < 100 && n34 < 100) {
                for (int n36 = n33 - 4; n36 <= n33 + 4; ++n36) {
                    for (int n37 = n34 - 4; n37 <= 4 + n34; ++n37) {
                        int n38 = 1711966089 * GameEngine.Client_plane;
                        if (n38 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n36][n37] & 0x2)) {
                            ++n38;
                        }
                        final int n39 = tileHeight - Tiles.Tiles_heights[n38][n36][n37];
                        if (n39 > n35) {
                            n35 = n39;
                        }
                    }
                }
            }
            int n40 = n35 * 687422822;
            if (n40 > 98048) {
                n40 = 98048;
            }
            if (n40 < 32768) {
                n40 = 14190922;
            }
            if (n40 > 654377488 * Client.field456) {
                Client.field456 += (n40 - Client.field456 * 205350563) / 24 * -907898601;
            }
            else if (n40 < 205350563 * Client.field456) {
                Client.field456 += 800423179 * ((n40 - 393161296 * Client.field456) / -532829638);
            }
            class96.field1064 = (class147.getTileHeight(MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, -1785885159 * GameEngine.Client_plane, (byte)(-22)) - Client.camFollowHeight * 71352184) * -1138369095;
        }
        else if (1 == Client.oculusOrbState * 986256295) {
            class324.method1838(-575642538);
            int n41 = -1;
            if (Client.keyHandlerInstance.getKeyPressed(-1315385675, -1132342220)) {
                n41 = 0;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(1976302750, -383580365)) {
                n41 = 658244426;
            }
            if (Client.keyHandlerInstance.getKeyPressed(-1871033238, -1610417595)) {
                if (n41 == 0) {
                    n41 = -1665039399;
                }
                else if (1442781488 == n41) {
                    n41 = 1138270847;
                }
                else {
                    n41 = 423678792;
                }
            }
            else if (Client.keyHandlerInstance.getKeyPressed(50, 271357625)) {
                if (n41 == 0) {
                    n41 = 256;
                }
                else if (1024 == n41) {
                    n41 = 768;
                }
                else {
                    n41 = 668076872;
                }
            }
            int n42 = 0;
            if (Client.keyHandlerInstance.getKeyPressed(35, 882239229)) {
                n42 = -1;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(1934675288, -1017776047)) {
                n42 = 1;
            }
            int n43 = 0;
            if (n41 >= 0 || n42 != 0) {
                n43 = (Client.keyHandlerInstance.getKeyPressed(-2095212188, -933353561) ? (Client.oculusOrbSlowedSpeed * 519949591) : (Client.oculusOrbNormalSpeed * -1180731255)) * 16;
                Client.field595 = n41 * -1988002169;
                Client.field398 = 818868517 * n42;
            }
            if (Client.field644 * -1277774705 < n43) {
                Client.field644 += n43 / 8 * 1804345452;
                if (Client.field644 * -1277774705 > n43) {
                    Client.field644 = n43 * -669870650;
                }
            }
            else if (Client.field644 * -1277774705 > n43) {
                Client.field644 = 655405209 * Client.field644 / 10 * 1574169199;
            }
            if (Client.field644 * 183811307 > 0) {
                final int n44 = Client.field644 * -1221687681 / 16;
                if (1192145045 * Client.field595 >= 0) {
                    final int n45 = Client.field595 * 1382999863 - class125.cameraYaw * 1756320170 & 0x79B16A46;
                    final int n46 = Rasterizer3D.Rasterizer3D_sine[n45];
                    final int n47 = Rasterizer3D.Rasterizer3D_cosine[n45];
                    class33.oculusOrbFocalPointX += n44 * n46 / -880185111 * -1975591465;
                    class144.oculusOrbFocalPointY += 892004233 * (n47 * n44 / 455208691);
                }
                if (896800260 * Client.field398 != 0) {
                    class96.field1064 += Client.field398 * -168443219 * n44 * -241153211;
                    if (-1450162309 * class96.field1064 > 0) {
                        class96.field1064 = 0;
                    }
                }
            }
            else {
                Client.field595 = -591091582;
                Client.field398 = -818868517;
            }
            if (Client.keyHandlerInstance.getKeyPressed(13, 278562187)) {
                Canvas.method92((byte)0);
            }
        }
        if (MouseHandler.MouseHandler_currentButton * 2110759099 == 4 && class473.mouseCam) {
            final int n48 = MouseHandler.MouseHandler_y * 201990279 - 332197605 * Client.mouseCamClickedY;
            Client.camAngleDX = 1932462086 * n48;
            Client.mouseCamClickedY = ((n48 == -1 || n48 == 1) ? (MouseHandler.MouseHandler_y * -1493139626) : ((332197605 * Client.mouseCamClickedY + -1224153235 * MouseHandler.MouseHandler_y) / 2)) * 1302863597;
            final int n49 = Client.mouseCamClickedX * -1491948821 - -2063363905 * MouseHandler.MouseHandler_x;
            Client.camAngleDY = n49 * 2069953976;
            Client.mouseCamClickedX = ((-1 == n49 || n49 == 1) ? (MouseHandler.MouseHandler_x * -2063363905) : ((1316697161 * Client.mouseCamClickedX + MouseHandler.MouseHandler_x * -2063363905) / 2)) * -494901016;
        }
        else {
            if (Client.keyHandlerInstance.getKeyPressed(96, 217052272)) {
                Client.camAngleDY += -300281373 * ((631078216 - 1977625303 * Client.camAngleDY) / 2);
            }
            else if (Client.keyHandlerInstance.getKeyPressed(-304022598, -747817457)) {
                Client.camAngleDY += -1970115876 * ((24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else {
                Client.camAngleDY = -1013559016 * (-979542347 * Client.camAngleDY / 2);
            }
            if (Client.keyHandlerInstance.getKeyPressed(98, -1127006050)) {
                Client.camAngleDX += (12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(99, -1826128147)) {
                Client.camAngleDX += (1036075216 - Client.camAngleDX * -671769676) / 2 * -1181252605;
            }
            else {
                Client.camAngleDX = -720499758 * Client.camAngleDX / 2 * -1181252605;
            }
            Client.mouseCamClickedY = MouseHandler.MouseHandler_y * 1978733270;
            Client.mouseCamClickedX = 1278432381 * MouseHandler.MouseHandler_x;
        }
        Client.camAngleY = -2105301220 * (Client.camAngleDY * 707359217 / 2 + 1205730604 * Client.camAngleY & 0x7FF);
        Client.camAngleX += -637026513 * (Client.camAngleDX * 1937053558 / 2);
        if (Client.camAngleX * -954734641 < 1507951906) {
            Client.camAngleX = -1678819709;
        }
        if (Client.camAngleX * 753170669 > 383) {
            Client.camAngleX = 831981393;
        }
        if (Client.field598) {
            class1.method5((byte)(-55));
        }
        else if (Client.isCameraLocked) {
            if (!Client.field541) {
                final int n50 = 64 + ObjTypeCustomisation.field1471 * 754644876;
                final int n51 = 529814953 * class123.field1209 - 716347358;
                class133.method777(n50, class147.getTileHeight(n50, n51, GameEngine.Client_plane * 1855629682, (byte)(-113)) - class16.field54 * -887836823, n51, -1064453543);
            }
            else if (null != Client.field535) {
                class36.cameraX = Client.field535.vmethod2321(2140171276) * -921551969;
                class297.cameraZ = Client.field535.vmethod2319(2107399454) * 46344275;
                if (Client.field615) {
                    class174.cameraY = Client.field535.vmethod2320((byte)0) * -424093663;
                }
                else {
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * -2032273914, 442270759 * class297.cameraZ, GameEngine.Client_plane * 1367110081, (byte)(-63)) - Client.field535.vmethod2320((byte)0)) * -424093663;
                }
                Client.field535.aa(1592590266);
            }
            if (!Client.field614) {
                final int n52 = FontName.field3970 * -100086587 + 1746500541;
                final int n53 = -1804719232 * MilliClock.field1455 + 64;
                final int n54 = class147.getTileHeight(n52, n53, GameEngine.Client_plane * 1209390145, (byte)(-86)) - ScriptFrame.field343 * 1496735347;
                final int n55 = n52 - -2068729469 * class36.cameraX;
                final int n56 = n54 - -1644920466 * class174.cameraY;
                final int n57 = n53 - -91399205 * class297.cameraZ;
                GraphicsObject.method433((int)(Math.atan2(n56, (int)Math.sqrt(n55 * n55 + n57 * n57)) * 325.9490051269531) & 0xB9FF5A02, (int)(Math.atan2(n55, n57) * -325.9490051269531) & 0x7FF, (byte)125);
            }
            else {
                if (null != Client.field604) {
                    WorldMapSectionType.cameraPitch = Client.field604.method2318(596929685) * 528729485;
                    WorldMapSectionType.cameraPitch = Math.min(Math.max(WorldMapSectionType.cameraPitch * -454744687, 1778445217), -1601959531) * 528729485;
                    Client.field604.aa(1935945935);
                }
                if (Client.field617 != null) {
                    class125.cameraYaw = (Client.field617.method2318(-267904099) & 0x7FF) * 1382930136;
                    Client.field617.aa(-330511204);
                }
            }
        }
        for (int n58 = 0; n58 < 5; ++n58) {
            final int[] cameraShakeCycle = Client.cameraShakeCycle;
            final int n59 = n58;
            ++cameraShakeCycle[n59];
        }
        class373.varcs.clearTransient(2113632754);
        final int value = SecureRandomFuture.get(1421074092);
        final int idleCycles = Client.bq.getIdleCycles((byte)24);
        if (value > 971812054 && idleCycles > 15000) {
            Client.logoutTimer = 719725026;
            MouseHandler.MouseHandler_idleCycles = 989306858;
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.IF_BUTTON2, Client.packetWriter.isaacCipher, (short)(-27282)), 414135591);
        }
        World.friendSystem.processFriendUpdates(1673735823);
        for (int n60 = 0; n60 < Client.field649.size(); ++n60) {
            if (class20.method82((int)Client.field649.get(n60), 854271946) != 2) {
                Client.field649.remove(n60);
                --n60;
            }
        }
        final PacketWriter packetWriter2 = Client.packetWriter;
        packetWriter2.pendingWrites += 716198930;
        if (1383386157 * Client.packetWriter.pendingWrites > -1558243543) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-5482)), 414135591);
        }
        try {
            PacketWriter.ok(Client.packetWriter, 421941662);
        }
        catch (IOException ex) {
            class349.method1918(709882847);
        }
    }
    
    public void np(final byte[] array) {
        class485.SpriteBuffer_decode(array, 1145263442);
    }
    
    public IndexedSprite[] ru() {
        return AbstractFont.AbstractFont_modIconSprites;
    }
    
    static final void ru() {
        if (-1727408401 * GameEngine.Client_plane != Client.field596 * 1728657740) {
            Client.field596 = -1813500035 * GameEngine.Client_plane;
            final int n = 1466895588 * GameEngine.Client_plane;
            final int[] pixels = UrlRequester.sceneMinimapSprite.pixels;
            for (int length = pixels.length, i = 0; i < length; ++i) {
                pixels[i] = 0;
            }
            for (int j = 1; j < 103; ++j) {
                int n2 = -567062490 * (1725334782 - j) + 24628;
                for (int k = 1; k < 103; ++k) {
                    if ((Tiles.Tiles_renderFlags[n][k][j] & 0x18) == 0x0) {
                        Scene.qb(class31.scene, pixels, n2, -1892883133, n, k, j);
                    }
                    if (n < 3 && (Tiles.Tiles_renderFlags[n + 1][k][j] & 0x8) != 0x0) {
                        Scene.qb(class31.scene, pixels, n2, 767493641, n + 1, k, j);
                    }
                    n2 += 4;
                }
            }
            final int n3 = (238 + (int)(Math.random() * 20.0) - 10 << 16) + (-1509660530 + (int)(Math.random() * 20.0) - 10 << 8) + (238 + (int)(Math.random() * 20.0) - 10);
            final int n4 = 238 + (int)(Math.random() * 20.0) - 10 << 16;
            SpritePixels.bg(UrlRequester.sceneMinimapSprite);
            for (int l = 1; l < 103; ++l) {
                for (int n5 = 1; n5 < -303377432; ++n5) {
                    if (0x0 == (Tiles.Tiles_renderFlags[n][n5][l] & 0x18)) {
                        class149.drawObject(n, n5, l, n3, n4, -1039321012);
                    }
                    if (n < 3 && (Tiles.Tiles_renderFlags[1 + n][n5][l] & 0x8) != 0x0) {
                        class149.drawObject(n + 1, n5, l, n3, n4, -1861729166);
                    }
                }
            }
            Client.mapIconCount = 0;
            for (int n6 = 0; n6 < 104; ++n6) {
                for (int n7 = 0; n7 < 104; ++n7) {
                    final long floorDecorationTag = class31.scene.getFloorDecorationTag(GameEngine.Client_plane * -1727408401, n6, n7);
                    if (floorDecorationTag != 0L) {
                        final int n8 = class144.vmethod3248(InterfaceParent.Entity_unpackID(floorDecorationTag), (short)8556).mapIconId * 1270945427;
                        if (n8 >= 0) {
                            if (class354.method1935(n8, 1985394209).field1491) {
                                Client.mapIcons[1573101195 * Client.mapIconCount] = class354.method1935(n8, 1979157056).getSpriteBool(false, -16711936);
                                Client.mapIconXs[Client.mapIconCount * 1573101195] = n6;
                                Client.mapIconYs[Client.mapIconCount * -1954307640] = n7;
                                Client.mapIconCount -= 1271804148;
                            }
                        }
                    }
                }
            }
            RouteStrategy.rasterProvider.apply((byte)0);
        }
    }
    
    public int bp() {
        return ViewportMouse.ViewportMouse_x * 2139535413;
    }
    
    public int ui() {
        return MouseHandler.MouseHandler_lastButton * -1222491879;
    }
    
    static void ui() {
        for (class206 class206 = (class206)Client.field569.last(); null != class206; class206 = (class206)Client.field569.previous()) {
            class206.hw();
        }
    }
    
    public void ui(final int n) {
        class297.musicPlayerStatus = n * -626822165;
    }
    
    boolean or() {
        return null != ModeWhere.field3571 && !ModeWhere.field3571.trim().isEmpty() && TileItem.field1079 != null && !TileItem.field1079.trim().isEmpty();
    }
    
    public static void ie(final rl2 rl2) {
        rl2.iy.yw = class31.scene.yw;
        class31.scene = rl2.iy;
        Tiles.Tiles_heights = rl2.kw;
        Tiles.Tiles_renderFlags = rl2.oo;
        Client.collisionMaps = rl2.se;
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.dn(); pendingSpawn != null; pendingSpawn = (PendingSpawn)Client.pendingSpawns.th()) {
            if (pendingSpawn.ih() == -1) {
                pendingSpawn.ke(0);
                ka(pendingSpawn);
            }
            else {
                pendingSpawn.gy();
            }
        }
        ObjectSound.objectSounds = rl2.oh;
        for (ObjectSound objectSound = (ObjectSound)ObjectSound.objectSounds.dn(); objectSound != null; objectSound = (ObjectSound)ObjectSound.objectSounds.th()) {
            if (objectSound.obj != null) {
                objectSound.cq();
            }
            if (objectSound.soundEffectIds != null) {
                objectSound.field679 = (objectSound.field681 * -442346035 + (int)(Math.random() * (objectSound.field682 * -1018564833 - objectSound.field681 * -442346035))) * -713890281;
            }
        }
        for (int i = 0; i < 104; ++i) {
            for (int j = 0; j < 104; ++j) {
                ji(i, j);
            }
        }
        rl2.iy.sg = true;
        rl2.iy.vh();
        ScriptFrame.client.qx(30);
        final DrawCallbacks rz = Client.rz;
        if (rz != null) {
            rz.swapScene((net.runelite.api.Scene)class31.scene);
        }
        nn();
    }
    
    public void ct(final int scene_cameraYTileMax) {
        Scene.Scene_cameraYTileMax = scene_cameraYTileMax;
    }
    
    public int cc() {
        return Client.hintArrowNpcIndex * 920558921;
    }
    
    public static void dv(final Client client, final String s) throws IOException {
        if (client == null) {
            client.getCameraX2();
        }
        final URL url = new URL(ViewportMouse.field2213 + "public/v1/games/YCfdbvr2pM1zUYMxJRexZY/play");
        final class394 class394 = new class394();
        class394.method2108(s, -2111083217);
        final class9 field24 = class9.field24;
        final OtlTokenRequester field25 = client.field399;
        if (null != field25) {
            client.field400 = field25.request(field24.method30((byte)(-20)), url, class394.method2105(1579045318), "");
            return;
        }
        client.field410 = class14.ni(client.field529, new class10(url, field24, class394, client.field401), (byte)1);
    }
    
    public static int dv(final double n) {
        return (int)Math.round(n / 0.0030679615757712823) & 0x7FF;
    }
    
    static void rw(final int n) {
        if (n == -1 && !Client.playingJingle) {
            FloorUnderlayDefinition.setHsl(-852125385);
        }
        else if (-1 != n && 1976903761 * Client.currentTrackGroupId != n && ClientPreferences.xp(class20.clientPreferences, 12811974) != 0 && !Client.playingJingle) {
            Actor.method538(2, class399.archive6, n, 0, ClientPreferences.xp(class20.clientPreferences, -2059404398), false, -80011001);
        }
        Client.currentTrackGroupId = 1225072817 * n;
    }
    
    static void rt(final SequenceDefinition sequenceDefinition, final int n, final int n2, final int n3) {
        if (-297150195 * Client.soundEffectCount >= 50 || class20.clientPreferences.method573(-1886574262) == 0) {
            return;
        }
        if (sequenceDefinition.animMayaFrameSounds != null && sequenceDefinition.animMayaFrameSounds.containsKey(n)) {
            class161.method908(sequenceDefinition.animMayaFrameSounds.get(n), n2, n3, 736278744);
        }
    }
    
    public SpritePixels[] rt() {
        return Client.mapIcons;
    }
    
    final void td() {
        if (-1 != Client.rootInterface * -896157613) {
            final int n = Client.rootInterface * -1297077663;
            if (SoundSystem.loadInterface(n, 1376777516)) {
                TileItem.drawModelComponents(VerticalAlignment.Widget_interfaceComponents[n], -1, (byte)64);
            }
        }
        for (int i = 0; i < Client.rootWidgetCount * 529365791; ++i) {
            if (Client.field573[i]) {
                Client.field574[i] = true;
            }
            Client.field519[i] = Client.field573[i];
            Client.field573[i] = false;
        }
        Client.field527 = Client.cycle * -1146781383;
        Client.viewportX = -563689483;
        Client.viewportY = -2111961447;
        if (-1 != Client.rootInterface * -1867795216) {
            Client.rootWidgetCount = 0;
            class13.drawWidgets(Client.rootInterface * 1790123763, 0, 0, Client.aj * -1687260435, class262.canvasHeight * 1658005443, 0, 0, -1, (byte)(-84));
        }
        Rasterizer2D.Rasterizer2D_resetClip();
        if (Client.showMouseCross) {
            if (-1306273505 * Client.mouseCrossColor == 1) {
                class173.crossSprites[1513573489 * Client.mouseCrossState / -750987633].drawAt(343799025 * Client.mouseCrossX - 8, 558404539 * Client.mouseCrossY - 8);
            }
            if (-1306273505 * Client.mouseCrossColor == 2) {
                class173.crossSprites[4 + 600946844 * Client.mouseCrossState / 100].drawAt(1164574848 * Client.mouseCrossX - 8, 682495699 * Client.mouseCrossY - 8);
            }
        }
        if (!Client.isMenuOpen) {
            if (-1 != Client.viewportX * 1363644085) {
                class85.method498(-644997833 * Client.viewportX, Client.viewportY * 1975470676, (byte)(-20));
            }
        }
        else {
            final int n2 = -1141903185 * class192.menuX;
            final int n3 = ArchiveLoader.menuY * -217295503;
            final int n4 = -960964385 * DesktopPlatformInfoProvider.menuWidth;
            final int n5 = -1611271296 * class147.menuHeight;
            final int n6 = 6116423;
            Rasterizer2D.Rasterizer2D_fillRectangle(n2, n3, n4, n5, n6);
            Rasterizer2D.Rasterizer2D_fillRectangle(1 + n2, 1 + n3, n4 - 2, 16, 0);
            Rasterizer2D.Rasterizer2D_drawRectangle(1 + n2, n3 + 18, n4 - 2, n5 - 19, 0);
            class492.xb(class137.fontBold12, Strings.gd, 3 + n2, 14 + n3, n6, -1);
            final int n7 = -1307030583 * MouseHandler.MouseHandler_x;
            final int n8 = MouseHandler.MouseHandler_y * 128820104;
            for (int j = 0; j < -1346870982 * Client.menuOptionsCount; ++j) {
                final int n9 = n3 - 367021549 + 15 * (Client.menuOptionsCount * 730065501 - 1 - j);
                int n10 = 16777215;
                if (n7 > n2 && n7 < n2 + n4 && n8 > n9 - 13 && n8 < n9 + 3) {
                    n10 = 792194161;
                }
                class492.xb(class137.fontBold12, Friend.method2152(j, (short)3662), 3 + n2, n9, n10, 0);
            }
            FriendsChat.method2139(1394964037 * class192.menuX, -115281635 * ArchiveLoader.menuY, 765229271 * DesktopPlatformInfoProvider.menuWidth, class147.menuHeight * -324324843, -1848509736);
        }
        if (3 == -539843526 * Client.gameDrawingMode) {
            for (int k = 0; k < Client.rootWidgetCount * -132716496; ++k) {
                if (Client.field519[k]) {
                    Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], -1092569189, 128);
                }
                else if (Client.field574[k]) {
                    Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], 16711680, 182438293);
                }
            }
        }
        class324.method1839(GameEngine.Client_plane * 1025695579, MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * 2086637956, Client.field432 * 2003424072, (short)(-6059));
        Client.field432 = 0;
    }
    
    static void acs(final int n) {
        Language.tempMenuAction = new MenuAction();
        Language.tempMenuAction.param0 = -1836874610 * Client.menuArguments1[n];
        Language.tempMenuAction.param1 = Client.menuArguments2[n] * 1112086437;
        Language.tempMenuAction.opcode = Client.menuOpcodes[n] * -1623394963;
        Language.tempMenuAction.identifier = Client.menuIdentifiers[n] * -1034868499;
        Language.tempMenuAction.itemId = -2066915937 * Client.menuItemIds[n];
        Language.tempMenuAction.action = Client.menuActions[n];
        Language.tempMenuAction.target = Client.menuTargets[n];
    }
    
    final void xi() {
        class425.method2264((byte)32);
        if (Client.clickedWidget != null) {
            return;
        }
        int n = -1222491879 * MouseHandler.MouseHandler_lastButton;
        if (Client.isMenuOpen) {
            if (n != 1 && (class473.mouseCam || 4 != n)) {
                final int n2 = MouseHandler.MouseHandler_x * -2063363905;
                final int n3 = MouseHandler.MouseHandler_y * -1224153235;
                if (n2 < -1141903185 * class192.menuX - 10 || n2 > -960964385 * DesktopPlatformInfoProvider.menuWidth + -1141903185 * class192.menuX + 10 || n3 < ArchiveLoader.menuY * -115281635 - 10 || n3 > ArchiveLoader.menuY * -115281635 + class147.menuHeight * 245252327 + 10) {
                    Client.isMenuOpen = false;
                    final int n4 = class192.menuX * -1141903185;
                    final int n5 = ArchiveLoader.menuY * -115281635;
                    final int n6 = DesktopPlatformInfoProvider.menuWidth * -960964385;
                    final int n7 = 245252327 * class147.menuHeight;
                    for (int i = 0; i < -356793645 * Client.rootWidgetCount; ++i) {
                        if (Client.rootWidgetWidths[i] + Client.rootWidgetXs[i] > n4 && Client.rootWidgetXs[i] < n4 + n6 && Client.rootWidgetHeights[i] + Client.rootWidgetYs[i] > n5 && Client.rootWidgetYs[i] < n7 + n5) {
                            Client.field573[i] = true;
                        }
                    }
                }
            }
            if (n == 1 || (!class473.mouseCam && n == 4)) {
                final int n8 = -1141903185 * class192.menuX;
                final int n9 = ArchiveLoader.menuY * -115281635;
                final int n10 = -960964385 * DesktopPlatformInfoProvider.menuWidth;
                final int n11 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
                final int n12 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
                int n13 = -1;
                for (int j = 0; j < Client.menuOptionsCount * 730065501; ++j) {
                    final int n14 = (Client.menuOptionsCount * 730065501 - 1 - j) * 15 + (31 + n9);
                    if (n11 > n8 && n11 < n8 + n10 && n12 > n14 - 13 && n12 < 3 + n14) {
                        n13 = j;
                    }
                }
                if (n13 != -1) {
                    if (n13 >= 0) {
                        class17.menuAction(Client.menuArguments1[n13], Client.menuArguments2[n13], Client.menuOpcodes[n13], Client.menuIdentifiers[n13], Client.menuItemIds[n13], Client.menuActions[n13], Client.menuTargets[n13], 2020601481 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * 1163896205, -1738112949);
                    }
                }
                Client.isMenuOpen = false;
                final int n15 = class192.menuX * -1141903185;
                final int n16 = -115281635 * ArchiveLoader.menuY;
                final int n17 = DesktopPlatformInfoProvider.menuWidth * -960964385;
                final int n18 = class147.menuHeight * 245252327;
                for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                    if (Client.rootWidgetWidths[k] + Client.rootWidgetXs[k] > n15 && Client.rootWidgetXs[k] < n17 + n15 && Client.rootWidgetYs[k] + Client.rootWidgetHeights[k] > n16 && Client.rootWidgetYs[k] < n16 + n18) {
                        Client.field573[k] = true;
                    }
                }
            }
        }
        else {
            final int method461 = DynamicObject.method461((short)8242);
            if ((n || (!class473.mouseCam && 4 == n)) && fk(this, -1679837219)) {
                n = 2;
            }
            if ((n == 1 || (!class473.mouseCam && n == 4)) && Client.menuOptionsCount * 730065501 > 0) {
                if (method461 >= 0) {
                    class17.menuAction(Client.menuArguments1[method461], Client.menuArguments2[method461], Client.menuOpcodes[method461], Client.menuIdentifiers[method461], Client.menuItemIds[method461], Client.menuActions[method461], Client.menuTargets[method461], 2020601481 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * 1163896205, 1567851040);
                }
            }
            if (2 == n && Client.menuOptionsCount * 730065501 > 0) {
                dz(this, 2020601481 * MouseHandler.MouseHandler_lastPressedX, 1163896205 * MouseHandler.MouseHandler_lastPressedY, 1018516557);
            }
        }
    }
    
    static void xa(final int n, final int n2, final int n3, final int n4) {
        final Widget widgetChild = SoundSystem.getWidgetChild(n, n2, 999269758);
        if (widgetChild != null && widgetChild.onTargetEnter != null) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetEnter;
            HealthBarUpdate.set(scriptEvent, (byte)23);
        }
        Client.selectedSpellItemId = n4 * 35668549;
        Client.isSpellSelected = true;
        Clips.selectedSpellWidget = n * 1000096079;
        Client.selectedSpellChildIndex = -1188784206 * n2;
        SecureRandomFuture.selectedSpellFlags = n3 * 220271070;
        class144.invalidateWidget(widgetChild, -1109177869);
    }
    
    public ParamComposition xa(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return class33.getParamDefinition(n, 367699395);
    }
    
    static final void tm(int n, int n2, int n3, int n4) {
        Client.viewportDrawCount += 1160286419;
        if (MusicPatchNode.localPlayer.br * 1144428983 >> 7 == 1494100363 * Client.destinationX && Client.destinationY * -1748014035 == MusicPatchNode.localPlayer.ep * -411750205 >> 7) {
            Client.destinationX = 0;
        }
        TileItem.method627((byte)0);
        if (-1565733637 * Client.combatTargetPlayerIndex >= 0 && Client.players[-1565733637 * Client.combatTargetPlayerIndex] != null) {
            MouseHandler.addPlayerToScene(Client.players[Client.combatTargetPlayerIndex * -1565733637], false, -1861126010);
        }
        RouteStrategy.addNpcsToScene(true, (short)9159);
        final int n5 = Players.Players_count * -2010934433;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n5; ++i) {
            if (Client.combatTargetPlayerIndex * -1565733637 != players_indices[i]) {
                if (Client.localPlayerIndex * -549033243 != players_indices[i]) {
                    MouseHandler.addPlayerToScene(Client.players[players_indices[i]], true, -1861126010);
                }
            }
        }
        RouteStrategy.addNpcsToScene(false, (short)8899);
        class142.method810(1215119663);
        GraphicsDefaults.method2228((byte)(-106));
        class36.setViewportShape(n, n2, n3, n4, true, -351538103);
        n = -82629945 * Client.viewportOffsetX;
        n2 = Client.viewportOffsetY * 1352043351;
        n3 = 433849721 * Client.viewportWidth;
        n4 = 2042096749 * Client.viewportHeight;
        Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n2 + n4);
        class18.method68(-1413531405);
        Rasterizer2D.method2586();
        int n6 = -954734641 * Client.camAngleX;
        if (205350563 * Client.field456 / 256 > n6) {
            n6 = Client.field456 * 205350563 / 256;
        }
        if (Client.field620[4] && Client.field643[4] + 128 > n6) {
            n6 = Client.field643[4] + 128;
        }
        final int n7 = 704283033 * Client.camAngleY & 0x7FF;
        final int n8 = class33.oculusOrbFocalPointX * -1958669353;
        final int n9 = class96.field1064 * 470489225;
        final int n10 = class144.oculusOrbFocalPointY * -365969735;
        final int method1389 = WorldMapData_0.method1389(n6, (byte)(-61));
        int n11 = n4 - 334;
        if (n11 < 0) {
            n11 = 0;
        }
        else if (n11 > 100) {
            n11 = 100;
        }
        final int n12 = method1389 * (Client.zoomHeight + n11 * (Client.zoomWidth - Client.zoomHeight) / 100) / 256;
        final int n13 = 2048 - n6 & 0x7FF;
        final int n14 = 2048 - n7 & 0x7FF;
        int n15 = 0;
        int n16 = 0;
        int n17 = n12;
        if (n13 != 0) {
            final int n18 = Rasterizer3D.Rasterizer3D_sine[n13];
            final int n19 = Rasterizer3D.Rasterizer3D_cosine[n13];
            final int n20 = n19 * n16 - n18 * n17 >> 16;
            n17 = n18 * n16 + n17 * n19 >> 16;
            n16 = n20;
        }
        if (n14 != 0) {
            final int n21 = Rasterizer3D.Rasterizer3D_sine[n14];
            final int n22 = Rasterizer3D.Rasterizer3D_cosine[n14];
            final int n23 = n15 * n22 + n21 * n17 >> 16;
            n17 = n17 * n22 - n21 * n15 >> 16;
            n15 = n23;
        }
        if (Client.isCameraLocked) {
            WorldMapRectangle.field2405 = (n8 - n15) * -1769642683;
            Players.field1095 = (n9 - n16) * -1412316127;
            KitDefinition.field1519 = 1637163077 * (n10 - n17);
            ScriptEvent.field851 = -268140793 * n6;
            class86.field888 = -523744247 * n7;
        }
        else {
            class36.cameraX = (n8 - n15) * -1682679895;
            class174.cameraY = -424093663 * (n9 - n16);
            class297.cameraZ = 46344275 * (n10 - n17);
            WorldMapSectionType.cameraPitch = n6 * 528729485;
            class125.cameraYaw = n7 * -1545206147;
        }
        if (1 == 986256295 * Client.oculusOrbState && Client.staffModLevel * 324465533 >= 2 && 0 == Client.cycle * -1886224337 % 50 && (1144428983 * MusicPatchNode.localPlayer.br >> 7 != -1958669353 * class33.oculusOrbFocalPointX >> 7 || -365969735 * class144.oculusOrbFocalPointY >> 7 != -411750205 * MusicPatchNode.localPlayer.ep >> 7)) {
            final int n24 = MusicPatchNode.localPlayer.plane * -1900490645;
            final int n25 = -1232093375 * WorldMapData_0.baseX + (class33.oculusOrbFocalPointX * -1958669353 >> 7);
            final int n26 = 827352769 * GameObject.baseY + (class144.oculusOrbFocalPointY * -365969735 >> 7);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-15341));
            packetBufferNode.packetBuffer.dy(1263827259 * Client.field444, (byte)19);
            packetBufferNode.packetBuffer.bu(n25, (byte)74);
            packetBufferNode.packetBuffer.eb(n24, (byte)(-93));
            packetBufferNode.packetBuffer.ds(n26, -1445269054);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        int method1390;
        if (!Client.isCameraLocked) {
            method1390 = UserComparator3.method702((byte)60);
        }
        else {
            int n27;
            if (class20.clientPreferences.getRoofsHidden(-2036454706)) {
                n27 = -1727408401 * GameEngine.Client_plane;
            }
            else if (class147.getTileHeight(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-58)) - class174.cameraY * 1772923873 < 800 && 0x0 != (Tiles.Tiles_renderFlags[-1727408401 * GameEngine.Client_plane][-2100544359 * class36.cameraX >> 7][class297.cameraZ * -91399205 >> 7] & 0x4)) {
                n27 = GameEngine.Client_plane * -1727408401;
            }
            else {
                n27 = 3;
            }
            method1390 = n27;
        }
        final int n28 = -2100544359 * class36.cameraX;
        final int n29 = 1772923873 * class174.cameraY;
        final int n30 = -91399205 * class297.cameraZ;
        final int n31 = WorldMapSectionType.cameraPitch * 1897923909;
        final int n32 = -1010818347 * class125.cameraYaw;
        for (int j = 0; j < 5; ++j) {
            if (Client.field620[j]) {
                final int n33 = (int)(Math.random() * (Client.field621[j] * 2 + 1) - Client.field621[j] + Math.sin(Client.cameraShakeCycle[j] * (Client.field499[j] / 100.0)) * Client.field643[j]);
                if (j == 0) {
                    class36.cameraX += -1682679895 * n33;
                }
                if (j != 0) {
                    class174.cameraY += -424093663 * n33;
                }
                if (j == 2) {
                    class297.cameraZ += 46344275 * n33;
                }
                if (3 == j) {
                    class125.cameraYaw = (class125.cameraYaw * -1010818347 + n33 & 0x7FF) * -1545206147;
                }
                if (4 == j) {
                    WorldMapSectionType.cameraPitch += 528729485 * n33;
                    if (1897923909 * WorldMapSectionType.cameraPitch < 128) {
                        WorldMapSectionType.cameraPitch = -1042102656;
                    }
                    if (1897923909 * WorldMapSectionType.cameraPitch > 383) {
                        WorldMapSectionType.cameraPitch = 639929843;
                    }
                }
            }
        }
        int n34 = -2063363905 * MouseHandler.MouseHandler_x;
        int n35 = -1224153235 * MouseHandler.MouseHandler_y;
        if (0 != MouseHandler.MouseHandler_lastButton * -1222491879) {
            n34 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            n35 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
        }
        if (n34 >= n && n34 < n + n3 && n35 >= n2 && n35 < n2 + n4) {
            final int n36 = n34 - n;
            final int n37 = n35 - n2;
            ViewportMouse.ViewportMouse_x = -580855267 * n36;
            ViewportMouse.ViewportMouse_y = n37 * 1124836073;
            ViewportMouse.ViewportMouse_isInViewport = true;
            ViewportMouse.ViewportMouse_entityCount = 0;
            ViewportMouse.ViewportMouse_false0 = false;
        }
        else {
            class146.method829(1330093008);
        }
        class323.playPcmPlayers(-1422633510);
        qb(n, n2, n3, n4, 0);
        class323.playPcmPlayers(-1044988395);
        final int get3dZoom = UserComparator7.get3dZoom(-1890547398);
        class314.method1779(ScriptFrame.client.by, 1598024648);
        Rasterizer3D.clips.field2227 = Client.viewportZoom * 1241253503;
        Scene.mq(class31.scene, -2100544359 * class36.cameraX, 1772923873 * class174.cameraY, -91399205 * class297.cameraZ, 1897923909 * WorldMapSectionType.cameraPitch, class125.cameraYaw * -1010818347, method1390);
        class314.method1779(false, 1262769191);
        if (Client.renderSelf) {
            Rasterizer2D.method2578();
        }
        Rasterizer3D.clips.field2227 = get3dZoom * 1001249361;
        class323.playPcmPlayers(-749316566);
        class31.scene.clearTempGameObjects();
        Client.overheadTextCount = 0;
        int n38 = 0;
        int n39 = -1;
        int n40 = -1;
        final int n41 = Players.Players_count * -2010934433;
        final int[] players_indices2 = Players.Players_indices;
        for (int k = 0; k < 265474485 * Client.npcCount + n41; ++k) {
            Actor actor;
            if (k < n41) {
                actor = Client.players[players_indices2[k]];
                if (players_indices2[k] == -1565733637 * Client.combatTargetPlayerIndex) {
                    n38 = 1;
                    n39 = k;
                    continue;
                }
                if (MusicPatchNode.localPlayer == actor) {
                    n40 = k;
                    continue;
                }
            }
            else {
                actor = Client.npcs[Client.npcIndices[k - n41]];
            }
            class33.drawActor2d(actor, k, n, n2, n3, n4, 1538298261);
        }
        if (Client.field482 && -1 != n40) {
            class33.drawActor2d(MusicPatchNode.localPlayer, n40, n, n2, n3, n4, 1538298261);
        }
        if (n38 != 0) {
            class33.drawActor2d(Client.players[-1565733637 * Client.combatTargetPlayerIndex], n39, n, n2, n3, n4, 1538298261);
        }
        for (int l = 0; l < Client.overheadTextCount * 734988573; ++l) {
            final int n42 = Client.overheadTextXs[l];
            int n43 = Client.overheadTextYs[l];
            final int n44 = Client.overheadTextXOffsets[l];
            final int n45 = Client.overheadTextAscents[l];
            int n46 = 1;
            while (n46 != 0) {
                n46 = 0;
                for (int n47 = 0; n47 < l; ++n47) {
                    if (n43 + 2 > Client.overheadTextYs[n47] - Client.overheadTextAscents[n47] && n43 - n45 < 2 + Client.overheadTextYs[n47] && n42 - n44 < Client.overheadTextXOffsets[n47] + Client.overheadTextXs[n47] && n42 + n44 > Client.overheadTextXs[n47] - Client.overheadTextXOffsets[n47] && Client.overheadTextYs[n47] - Client.overheadTextAscents[n47] < n43) {
                        n43 = Client.overheadTextYs[n47] - Client.overheadTextAscents[n47];
                        n46 = 1;
                    }
                }
            }
            Client.viewportTempX = -846498395 * Client.overheadTextXs[l];
            final int[] overheadTextYs = Client.overheadTextYs;
            final int n48 = l;
            final int n49 = n43;
            overheadTextYs[n48] = n49;
            Client.viewportTempY = n49 * -1610031701;
            final String s = Client.overheadText[l];
            if (0 == Client.chatEffects * 395188193) {
                int n50 = 16776960;
                if (Client.overheadTextColors[l] < 6) {
                    n50 = Client.field583[Client.overheadTextColors[l]];
                }
                if (Client.overheadTextColors[l] == 6) {
                    n50 = ((Client.viewportDrawCount * 2041464667 % 20 < 10) ? 16711680 : 16776960);
                }
                if (7 == Client.overheadTextColors[l]) {
                    n50 = ((2041464667 * Client.viewportDrawCount % 20 < 10) ? 255 : 65535);
                }
                if (8 == Client.overheadTextColors[l]) {
                    n50 = ((Client.viewportDrawCount * 2041464667 % 20 < 10) ? 45056 : 8454016);
                }
                if (9 == Client.overheadTextColors[l]) {
                    final int n51 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n51 < 50) {
                        n50 = n51 * 1280 + 16711680;
                    }
                    else if (n51 < 100) {
                        n50 = 16776960 - (n51 - 50) * 327680;
                    }
                    else if (n51 < 150) {
                        n50 = 5 * (n51 - 100) + 65280;
                    }
                }
                if (10 == Client.overheadTextColors[l]) {
                    final int n52 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n52 < 50) {
                        n50 = 5 * n52 + 16711680;
                    }
                    else if (n52 < 100) {
                        n50 = 16711935 - (n52 - 50) * 327680;
                    }
                    else if (n52 < 150) {
                        n50 = 255 + 327680 * (n52 - 100) - 5 * (n52 - 100);
                    }
                }
                if (11 == Client.overheadTextColors[l]) {
                    final int n53 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n53 < 50) {
                        n50 = 16777215 - n53 * 327685;
                    }
                    else if (n53 < 100) {
                        n50 = 65280 + 327685 * (n53 - 50);
                    }
                    else if (n53 < 150) {
                        n50 = 16777215 - (n53 - 100) * 327680;
                    }
                }
                if (0 == Client.overheadTextEffects[l]) {
                    class137.fontBold12.aj(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY, n50, 0);
                }
                if (Client.overheadTextEffects[l] == 1) {
                    class137.fontBold12.ae(s, -1848743379 * Client.viewportTempX + n, Client.viewportTempY * 318977283 + n2, n50, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 2) {
                    class137.fontBold12.ap(s, -1848743379 * Client.viewportTempX + n, n2 + 318977283 * Client.viewportTempY, n50, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 3) {
                    class137.fontBold12.by(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY, n50, 0, 2041464667 * Client.viewportDrawCount, 150 - Client.overheadTextCyclesRemaining[l]);
                }
                if (4 == Client.overheadTextEffects[l]) {
                    final int n54 = (150 - Client.overheadTextCyclesRemaining[l]) * (class137.fontBold12.bf(s) + 100) / 150;
                    Rasterizer2D.Rasterizer2D_expandClip(-1848743379 * Client.viewportTempX + n - 50, n2, n + Client.viewportTempX * -1848743379 + 50, n4 + n2);
                    class492.xb(class137.fontBold12, s, 50 + (n + -1848743379 * Client.viewportTempX) - n54, n2 + Client.viewportTempY * 318977283, n50, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n + n3, n2 + n4);
                }
                if (Client.overheadTextEffects[l] == 5) {
                    final int n55 = 150 - Client.overheadTextCyclesRemaining[l];
                    int n56 = 0;
                    if (n55 < 25) {
                        n56 = n55 - 25;
                    }
                    else if (n55 > 125) {
                        n56 = n55 - 125;
                    }
                    Rasterizer2D.Rasterizer2D_expandClip(n, n2 + 318977283 * Client.viewportTempY - class137.fontBold12.al - 1, n3 + n, 5 + (318977283 * Client.viewportTempY + n2));
                    class137.fontBold12.aj(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY + n56, n50, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n4 + n2);
                }
            }
            else {
                class137.fontBold12.aj(s, Client.viewportTempX * -1848743379 + n, n2 + 318977283 * Client.viewportTempY, 16776960, 0);
            }
        }
        class317.method1828(n, n2, 2101583632);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).animate(Client.field432 * -1795081153, -1857796847);
        Friend.method2153(-1530842203);
        class36.cameraX = -1682679895 * n28;
        class174.cameraY = -424093663 * n29;
        class297.cameraZ = n30 * 46344275;
        WorldMapSectionType.cameraPitch = n31 * 528729485;
        class125.cameraYaw = n32 * -1545206147;
        if (Client.isLoading && HorizontalAlignment.method1019(true, false, (byte)29) == 0) {
            Client.isLoading = false;
        }
        if (Client.isLoading) {
            qb(n, n2, n3, n4, 0);
            WorldMapDecoration.drawLoadingMessage(Strings.ao, false, -443292849);
        }
    }
    
    public EvictingDualNodeHashTable tm() {
        return ItemComposition.ItemDefinition_cachedModels;
    }
    
    static final void tt(final String s, final boolean b) {
        if (!Client.showLoadingMessages) {
            return;
        }
        final int n = 4;
        final int n2 = n + 6;
        final int n3 = n + 6;
        final int fa = AbstractFont.fa(WallDecoration.fontPlain12, s, 250);
        final int n4 = class292.fo(WallDecoration.fontPlain12, s, 142976050) * 13;
        Rasterizer2D.Rasterizer2D_fillRectangle(n2 - n, n3 - n, n + (n + fa), n + (n + n4), 0);
        Rasterizer2D.Rasterizer2D_drawRectangle(n2 - n, n3 - n, fa + n + n, n4 + n + n, 16777215);
        WallDecoration.fontPlain12.ak(s, n2, n3, fa, n4, 863081806, -1, 1, 1, 0);
        final int n5 = n2 - n;
        final int n6 = n3 - n;
        final int n7 = fa + n + n;
        final int n8 = n + (n4 + n);
        for (int i = 0; i < -356793645 * Client.rootWidgetCount; ++i) {
            if (Client.rootWidgetWidths[i] + Client.rootWidgetXs[i] > n5 && Client.rootWidgetXs[i] < n7 + n5 && Client.rootWidgetYs[i] + Client.rootWidgetHeights[i] > n6 && Client.rootWidgetYs[i] < n6 + n8) {
                Client.field573[i] = true;
            }
        }
        if (b) {
            RouteStrategy.rasterProvider.drawFull(0, 0, 743265334);
        }
        else {
            FriendsChat.method2139(n2, n3, fa, n4, -1848509736);
        }
    }
    
    @Override
    protected final void fn(final boolean b) {
        boolean b2 = false;
        Label_0192: {
            try {
                if (926096579 * class297.musicPlayerStatus == 2) {
                    if (RouteStrategy.musicTrack == null) {
                        RouteStrategy.musicTrack = MusicTrack.readTrack(class297.musicTrackArchive, class379.musicTrackGroupId * -747672747, VarpDefinition.musicTrackFileId * -1713311926);
                        if (RouteStrategy.musicTrack == null) {
                            b2 = false;
                            break Label_0192;
                        }
                    }
                    if (null == class297.soundCache) {
                        class297.soundCache = new SoundCache(class297.soundEffectsArchive, class297.musicSamplesArchive);
                    }
                    if (class475.midiPcmStream.loadMusicTrack(RouteStrategy.musicTrack, class297.musicPatchesArchive, class297.soundCache, 385013253, -1716222910)) {
                        class475.midiPcmStream.bw(-1233902674);
                        class475.midiPcmStream.setPcmStreamVolume(-280777997 * class100.musicTrackVolume, (byte)19);
                        class475.midiPcmStream.setMusicTrack(RouteStrategy.musicTrack, class120.musicTrackBoolean, -972368442);
                        class297.musicPlayerStatus = 0;
                        RouteStrategy.musicTrack = null;
                        class297.soundCache = null;
                        class297.musicTrackArchive = null;
                        b2 = true;
                        break Label_0192;
                    }
                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
                class475.midiPcmStream.clear((byte)62);
                class297.musicPlayerStatus = 0;
                RouteStrategy.musicTrack = null;
                class297.soundCache = null;
                class297.musicTrackArchive = null;
            }
            b2 = false;
        }
        if (b2 && Client.playingJingle && null != class28.pcmPlayer0) {
            class28.pcmPlayer0.run(-153646085);
        }
        if ((432403667 * Client.gameState == 10 || 1706502190 * Client.gameState == 20 || 30 == Client.gameState * -164764610) && -3223439394100928671L * Client.field581 != 0L && class96.clockNow(969918489) > -3223439394100928671L * Client.field581) {
            Decimator.setWindowedMode(GrandExchangeOfferNameComparator.getWindowedMode(1986286469), (byte)(-30));
        }
        if (b) {
            for (int i = 0; i < 1170960266; ++i) {
                Client.field573[i] = true;
            }
        }
        if (611379254 * Client.gameState == 0) {
            GameEngine.hr(this, 1158424865 * Login.Login_loadingPercent, Login.Login_loadingText, b, -2121821176);
        }
        else if (5 == Client.gameState * -125638234) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, 1822834490);
        }
        else if (Client.gameState * -1275976559 == 10 || 1178868561 * Client.gameState == 11) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, 1268718008);
        }
        else if (-1275976559 * Client.gameState == 20) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -1797569921);
        }
        else if (Client.gameState * -1275976559 == -2091631912) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, 650747034);
        }
        else if (25 == Client.gameState * -1792502060) {
            if (1 == Client.field489 * -2139010133) {
                if (Client.field427 * 1123544212 > Client.field593 * 1920064100) {
                    Client.field593 = Client.field427 * 1957781173;
                }
                WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + (Client.field593 * -2098483510 - Client.field427 * 2088419538) / (Client.field593 * 867316008) + "%" + class96.au, false, 1261356633);
            }
            else if (-1565876177 * Client.field489 == 2) {
                if (Client.field425 * 1372828241 > Client.field426 * -553282566) {
                    Client.field426 = 1177445695 * Client.field425;
                }
                WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + ((Client.field426 * 2093550388 - 1207070001 * Client.field425) / (Client.field426 * 1233759319) + 50) + "%" + class96.au, false, -448775896);
            }
            else {
                WorldMapDecoration.drawLoadingMessage(Strings.ao, false, -274563410);
            }
        }
        else if (Client.gameState * -1275976559 == 30) {
            this.drawLoggedIn(-1573701291);
        }
        else if (-60072220 == Client.gameState * -1275976559) {
            WorldMapDecoration.drawLoadingMessage(Strings.ax + class96.aq + Strings.ai, false, -1652182498);
        }
        else if (-1620872241 == Client.gameState * 1176378151) {
            WorldMapDecoration.drawLoadingMessage(Strings.gi, false, 618707406);
        }
        if (-1480150345 * Client.gameState == 30 && 0 == Client.gameDrawingMode * 133827110 && !b && !Client.isResizable) {
            for (int j = 0; j < -1218114398 * Client.rootWidgetCount; ++j) {
                if (Client.field574[j]) {
                    RouteStrategy.rasterProvider.draw(Client.rootWidgetXs[j], Client.rootWidgetYs[j], Client.rootWidgetWidths[j], Client.rootWidgetHeights[j], 609006122);
                    Client.field574[j] = false;
                }
            }
        }
        else if (Client.gameState * -1275976559 > 0) {
            RouteStrategy.rasterProvider.drawFull(0, 0, -2050042897);
            for (int k = 0; k < Client.rootWidgetCount * -1218874442; ++k) {
                Client.field574[k] = false;
            }
        }
    }
    
    @Override
    protected final void draw(final boolean b, final short n) {
        this.pb(b);
        this.vw(b);
        try {
            boolean b2 = false;
            Label_0277: {
                try {
                    if (926096579 * class297.musicPlayerStatus == 2) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        if (RouteStrategy.musicTrack == null) {
                            if (n <= 244) {
                                throw new IllegalStateException();
                            }
                            RouteStrategy.musicTrack = MusicTrack.readTrack(class297.musicTrackArchive, class379.musicTrackGroupId * -747672747, VarpDefinition.musicTrackFileId * 1412530625);
                            if (RouteStrategy.musicTrack == null) {
                                if (n <= 244) {
                                    throw new IllegalStateException();
                                }
                                b2 = false;
                                break Label_0277;
                            }
                        }
                        if (null == class297.soundCache) {
                            if (n <= 244) {
                                this.pd(b);
                                return;
                            }
                            class297.soundCache = new SoundCache(class297.soundEffectsArchive, class297.musicSamplesArchive);
                        }
                        if (class475.midiPcmStream.loadMusicTrack(RouteStrategy.musicTrack, class297.musicPatchesArchive, class297.soundCache, 22050, -1174424990)) {
                            if (n <= 244) {
                                throw new IllegalStateException();
                            }
                            class475.midiPcmStream.bw(-371554309);
                            class475.midiPcmStream.setPcmStreamVolume(-280777997 * class100.musicTrackVolume, (byte)19);
                            class475.midiPcmStream.setMusicTrack(RouteStrategy.musicTrack, class120.musicTrackBoolean, -972368442);
                            class297.musicPlayerStatus = 0;
                            RouteStrategy.musicTrack = null;
                            class297.soundCache = null;
                            class297.musicTrackArchive = null;
                            b2 = true;
                            break Label_0277;
                        }
                    }
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    class475.midiPcmStream.clear((byte)21);
                    class297.musicPlayerStatus = 0;
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                    class297.musicTrackArchive = null;
                }
                b2 = false;
            }
            if (b2) {
                if (n <= 244) {
                    throw new IllegalStateException();
                }
                if (Client.playingJingle) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    if (null != class28.pcmPlayer0) {
                        if (n <= 244) {
                            this.pd(b);
                            return;
                        }
                        class28.pcmPlayer0.run(-1703203933);
                    }
                }
            }
            Label_0501: {
                if (-1275976559 * Client.gameState != 10) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    if (-1275976559 * Client.gameState != 20) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        if (30 != Client.gameState * -1275976559) {
                            break Label_0501;
                        }
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                    }
                }
                if (-3223439394100928671L * Client.field581 != 0L) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    if (class96.clockNow(123556382) > -3223439394100928671L * Client.field581) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        Decimator.setWindowedMode(GrandExchangeOfferNameComparator.getWindowedMode(745941519), (byte)(-102));
                    }
                }
            }
            if (b) {
                for (int i = 0; i < 100; ++i) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    Client.field573[i] = true;
                }
            }
            Label_1222: {
                if (-1275976559 * Client.gameState == 0) {
                    GameEngine.hr(this, 1158424865 * Login.Login_loadingPercent, Login.Login_loadingText, b, -2001673745);
                }
                else if (5 == Client.gameState * -1275976559) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -1602531743);
                }
                else {
                    if (Client.gameState * -1275976559 != 10) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        if (-1275976559 * Client.gameState == 11) {
                            if (n <= 244) {
                                throw new IllegalStateException();
                            }
                        }
                        else {
                            if (-1275976559 * Client.gameState == 20) {
                                class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -1392932506);
                                break Label_1222;
                            }
                            if (Client.gameState * -1275976559 == 50) {
                                if (n <= 244) {
                                    throw new IllegalStateException();
                                }
                                class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -1040280212);
                                break Label_1222;
                            }
                            else if (25 == Client.gameState * -1275976559) {
                                if (n <= 244) {
                                    this.pd(b);
                                    return;
                                }
                                if (1 == Client.field489 * -2139010133) {
                                    if (n <= 244) {
                                        throw new IllegalStateException();
                                    }
                                    if (Client.field427 * -215929647 > Client.field593 * 817023789) {
                                        if (n <= 244) {
                                            throw new IllegalStateException();
                                        }
                                        Client.field593 = Client.field427 * 1957781173;
                                    }
                                    WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + (Client.field593 * -2098483510 - Client.field427 * 2088419538) / (Client.field593 * 817023789) + "%" + class96.au, false, -215676095);
                                    break Label_1222;
                                }
                                else {
                                    if (-2139010133 * Client.field489 == 2) {
                                        if (Client.field425 * 1372828241 > Client.field426 * 1233759319) {
                                            if (n <= 244) {
                                                this.pd(b);
                                                return;
                                            }
                                            Client.field426 = 1072852375 * Client.field425;
                                        }
                                        WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + ((Client.field426 * 1558423806 - -78064686 * Client.field425) / (Client.field426 * 1233759319) + 50) + "%" + class96.au, false, 1034238525);
                                        break Label_1222;
                                    }
                                    WorldMapDecoration.drawLoadingMessage(Strings.ao, false, -1182225098);
                                    break Label_1222;
                                }
                            }
                            else if (Client.gameState * -1275976559 == 30) {
                                if (n <= 244) {
                                    throw new IllegalStateException();
                                }
                                this.drawLoggedIn(1724186279);
                                break Label_1222;
                            }
                            else if (40 == Client.gameState * -1275976559) {
                                if (n <= 244) {
                                    throw new IllegalStateException();
                                }
                                WorldMapDecoration.drawLoadingMessage(Strings.ax + class96.aq + Strings.ai, false, 1759788841);
                                break Label_1222;
                            }
                            else {
                                if (45 != Client.gameState * -1275976559) {
                                    break Label_1222;
                                }
                                if (n <= 244) {
                                    this.pd(b);
                                    return;
                                }
                                WorldMapDecoration.drawLoadingMessage(Strings.gi, false, -426811633);
                                break Label_1222;
                            }
                        }
                    }
                    class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -1512541376);
                }
            }
            Label_1480: {
                if (-1275976559 * Client.gameState == 30 && 0 == Client.gameDrawingMode * -1928160607) {
                    if (n <= 244) {
                        throw new IllegalStateException();
                    }
                    if (!b) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        if (!Client.isResizable) {
                            if (n <= 244) {
                                throw new IllegalStateException();
                            }
                            for (int j = 0; j < -356793645 * Client.rootWidgetCount; ++j) {
                                if (n <= 244) {
                                    throw new IllegalStateException();
                                }
                                if (Client.field574[j]) {
                                    if (n <= 244) {
                                        throw new IllegalStateException();
                                    }
                                    RouteStrategy.rasterProvider.draw(Client.rootWidgetXs[j], Client.rootWidgetYs[j], Client.rootWidgetWidths[j], Client.rootWidgetHeights[j], 868804024);
                                    Client.field574[j] = false;
                                }
                            }
                            break Label_1480;
                        }
                    }
                }
                if (Client.gameState * -1275976559 > 0) {
                    if (n <= 244) {
                        this.pd(b);
                        return;
                    }
                    RouteStrategy.rasterProvider.drawFull(0, 0, 104272996);
                    for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                        if (n <= 244) {
                            throw new IllegalStateException();
                        }
                        Client.field574[k] = false;
                    }
                }
            }
            this.pd(b);
        }
        catch (RuntimeException ex2) {
            throw HealthBar.get(ex2, "client.bt(" + ')');
        }
    }
    
    static final void xn(final int n, final int n2) {
        if (-664694141 * Client.menuOptionsCount < 2 && -303899309 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            return;
        }
        if (!Client.showMouseOverText) {
            return;
        }
        final int method461 = DynamicObject.method461((short)4507);
        String str;
        if (1 == Client.isItemSelected * -303899309 && 910631562 * Client.menuOptionsCount < 2) {
            str = Strings.gu + Strings.gk + Client.field364 + " " + class96.ab;
        }
        else if (Client.isSpellSelected && 1123067673 * Client.menuOptionsCount < 2) {
            str = Client.field530 + Strings.gk + Client.field522 + " " + class96.ab;
        }
        else {
            str = Friend.method2152(method461, (short)(-4440));
        }
        if (-1866540421 * Client.menuOptionsCount > 2) {
            str = str + class383.method2081(16777215, 263996692) + " " + '/' + " " + (Client.menuOptionsCount * -546619184 - 2) + Strings.gw;
        }
        AbstractFont.lu(class137.fontBold12, str, 4 + n, 15 + n2, -375801084, 0, Client.cycle * -1886224337 / 1000);
    }
    
    static void ws(final NPC npc) {
        npc.bt = 1763542591 * npc.definition.size;
        npc.cv = npc.definition.rotation * -1952936367;
        npc.cr = npc.definition.walkSequence * 869101579;
        npc.bf = -1784513249 * npc.definition.walkBackSequence;
        npc.dl = 1886938753 * npc.definition.walkLeftSequence;
        npc.dp = npc.definition.walkRightSequence * 2010418861;
        npc.cd = npc.definition.idleSequence * -133009915;
        npc.bh = npc.definition.turnLeftSequence * -1457034847;
        npc.dz = npc.definition.turnRightSequence * -1686059033;
        npc.dr = -1079417805 * npc.definition.runSequence;
        npc.bx = npc.definition.runBackSequence * -2020975041;
        npc.bg = npc.definition.runLeftSequence * 1337010697;
        npc.eo = 269496349 * npc.definition.runRightSequence;
        npc.ba = -2121315781 * npc.definition.crawlSequence;
        npc.bm = npc.definition.crawlBackSequence * -605946035;
        npc.bs = npc.definition.crawlLeftSequence * -76847983;
        npc.bu = npc.definition.crawlRightSequence * -1771433781;
    }
    
    public static void sx(final int n) {
        if (Client.aw && ScriptFrame.client.kw() && ScriptFrame.client.getMouseCurrentButton() == 4) {
            ScriptFrame.client.rz(-ScriptFrame.client.ol());
        }
    }
    
    static final void sx(final Actor actor, final int n) {
        Label_2260: {
            if (actor.exactMoveArrive1Cycle * -435598119 >= -1886224337 * Client.cycle) {
                final int max = Math.max(1, -435598119 * actor.exactMoveArrive1Cycle - -1886224337 * Client.cycle);
                final int n2 = -1883924352 * actor.field957 + actor.idleSequence * 1119756096;
                final int n3 = actor.idleSequence * 1119756096 + actor.movementSequence * -161749632;
                actor.walkBackSequence += (n2 - 1144428983 * actor.walkBackSequence) / max * -881028089;
                actor.field1005 += (n3 - -411750205 * actor.field1005) / max * 1193213931;
                actor.crawlLeftSequence = 0;
                actor.turnLeftSequence = -1369167919 * actor.sequence;
            }
            else if (actor.movementFrame * -1274841313 >= -1886224337 * Client.cycle) {
                boolean b = -1274841313 * actor.movementFrame == -1886224337 * Client.cycle || -1 == -1372355773 * actor.overheadTextCyclesRemaining || 1253892101 * actor.playerCycle != 0;
                if (!b) {
                    final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(actor.overheadTextCyclesRemaining * -1372355773, (byte)63);
                    b = (null == spotAnimationDefinition_get || spotAnimationDefinition_get.isCachedModelIdSet(1180241860) || 1 + 1356757385 * actor.pathLength > spotAnimationDefinition_get.frameLengths[actor.currentSequenceFrameIndex * -41215169]);
                }
                if (b) {
                    final int n4 = actor.movementFrame * -1274841313 - actor.exactMoveArrive1Cycle * -435598119;
                    final int n5 = Client.cycle * -1886224337 - actor.exactMoveArrive1Cycle * -435598119;
                    final int n6 = -1883924352 * actor.field957 + 1119756096 * actor.idleSequence;
                    final int n7 = -161749632 * actor.movementSequence + actor.idleSequence * 1119756096;
                    final int n8 = actor.idleSequence * 1119756096 + actor.orientation * 69929344;
                    final int n9 = actor.idleSequence * 1119756096 + -106117248 * actor.crawlSequence;
                    actor.walkBackSequence = -881028089 * ((n6 * (n4 - n5) + n8 * n5) / n4);
                    actor.field1005 = 1193213931 * ((n5 * n9 + (n4 - n5) * n7) / n4);
                }
                actor.crawlLeftSequence = 0;
                actor.turnLeftSequence = -1369167919 * actor.sequence;
                actor.field986 = actor.turnLeftSequence * 841550147;
            }
            else {
                actor.npcCycle = actor.sequenceFrameCycle * 1603478597;
                if (1134756167 * actor.field970 == 0) {
                    actor.crawlLeftSequence = 0;
                }
                else {
                    if (-1372355773 * actor.overheadTextCyclesRemaining != -1 && actor.playerCycle * 1253892101 == 0) {
                        final SequenceDefinition spotAnimationDefinition_get2 = ItemContainer.SpotAnimationDefinition_get(-1372355773 * actor.overheadTextCyclesRemaining, (byte)55);
                        if (actor.field1003 * -1181739279 > 0 && spotAnimationDefinition_get2.precedenceAnimating * 1069382699 == 0) {
                            actor.crawlLeftSequence -= 1610286357;
                            break Label_2260;
                        }
                        if (actor.field1003 * -1181739279 <= 0 && 0 == 1957040329 * spotAnimationDefinition_get2.priority) {
                            actor.crawlLeftSequence -= 1610286357;
                            break Label_2260;
                        }
                    }
                    final int n10 = actor.walkBackSequence * 1144428983;
                    final int n11 = actor.field1005 * -411750205;
                    final int n12 = 1119756096 * actor.idleSequence + 128 * actor.hitSplatTypes2[actor.field970 * 1134756167 - 1];
                    final int n13 = actor.pathX[actor.field970 * 1134756167 - 1] * 128 + 1119756096 * actor.idleSequence;
                    if (n10 < n12) {
                        if (n11 < n13) {
                            actor.turnLeftSequence = -398716160;
                        }
                        else if (n11 > n13) {
                            actor.turnLeftSequence = -558202624;
                        }
                        else {
                            actor.turnLeftSequence = -478459392;
                        }
                    }
                    else if (n10 > n12) {
                        if (n11 < n13) {
                            actor.turnLeftSequence = -239229696;
                        }
                        else if (n11 > n13) {
                            actor.turnLeftSequence = -79743232;
                        }
                        else {
                            actor.turnLeftSequence = -159486464;
                        }
                    }
                    else if (n11 < n13) {
                        actor.turnLeftSequence = -318972928;
                    }
                    else if (n11 > n13) {
                        actor.turnLeftSequence = 0;
                    }
                    final MoveSpeed moveSpeed = actor.pathTraversed[actor.field970 * 1134756167 - 1];
                    if (n12 - n10 <= 256 && n12 - n10 >= -256 && n13 - n11 <= 256 && n13 - n11 >= -256) {
                        int n14 = -1751341433 * actor.turnLeftSequence - actor.field986 * -1703696531 & 0x7FF;
                        if (n14 > 1024) {
                            n14 -= 2048;
                        }
                        int n15 = actor.runSequence * 1648569641;
                        if (n14 >= -256 && n14 <= 256) {
                            n15 = 736907545 * actor.targetIndex;
                        }
                        else if (n14 >= 256 && n14 < 768) {
                            n15 = actor.recolourEndCycle * -1059657777;
                        }
                        else if (n14 >= -768 && n14 <= -256) {
                            n15 = -127994241 * actor.field985;
                        }
                        if (n15 == -1) {
                            n15 = 736907545 * actor.targetIndex;
                        }
                        actor.npcCycle = 327373721 * n15;
                        int n16 = 4;
                        boolean isClickable = true;
                        if (actor instanceof NPC) {
                            isClickable = ((NPC)actor).definition.isClickable;
                        }
                        if (isClickable) {
                            if (actor.field986 * -1703696531 != actor.turnLeftSequence * -1751341433 && actor.rotation * 1005900761 == -1 && 0 != 351748387 * actor.field993) {
                                n16 = 2;
                            }
                            if (actor.field970 * 1134756167 > 2) {
                                n16 = 6;
                            }
                            if (actor.field970 * 1134756167 > 3) {
                                n16 = 8;
                            }
                            if (actor.crawlLeftSequence * 1489558979 > 0 && 1134756167 * actor.field970 > 1) {
                                n16 = 8;
                                actor.crawlLeftSequence += 1610286357;
                            }
                        }
                        else {
                            if (1134756167 * actor.field970 > 1) {
                                n16 = 6;
                            }
                            if (actor.field970 * 1134756167 > 2) {
                                n16 = 8;
                            }
                            if (actor.crawlLeftSequence * 1489558979 > 0 && actor.field970 * 1134756167 > 1) {
                                n16 = 8;
                                actor.crawlLeftSequence += 1610286357;
                            }
                        }
                        if (moveSpeed == MoveSpeed.RUN) {
                            n16 <<= 1;
                        }
                        else if (moveSpeed == MoveSpeed.CRAWL) {
                            n16 >>= 1;
                        }
                        if (n16 >= 8) {
                            if (actor.npcCycle * -1302441815 == 736907545 * actor.targetIndex && actor.field984 * 1939789287 != -1) {
                                actor.npcCycle = actor.field984 * 863812623;
                            }
                            else if (-1302441815 * actor.npcCycle == 1648569641 * actor.runSequence && -1 != 793978951 * actor.x) {
                                actor.npcCycle = 538384239 * actor.x;
                            }
                            else if (-127994241 * actor.field985 == actor.npcCycle * -1302441815 && actor.walkLeftSequence * 1755337849 != -1) {
                                actor.npcCycle = actor.walkLeftSequence * -1205815471;
                            }
                            else if (actor.recolourEndCycle * -1059657777 == actor.npcCycle * -1302441815 && actor.field1006 * 802247051 != -1) {
                                actor.npcCycle = 2091568403 * actor.field1006;
                            }
                        }
                        else if (n16 <= 1) {
                            if (actor.targetIndex * 736907545 == actor.npcCycle * -1302441815 && -1254675467 * actor.runLeftSequence != -1) {
                                actor.npcCycle = actor.runLeftSequence * -560417683;
                            }
                            else if (actor.runSequence * 1648569641 == -1302441815 * actor.npcCycle && actor.field936 * 572220041 != -1) {
                                actor.npcCycle = actor.field936 * -630501663;
                            }
                            else if (-127994241 * actor.field985 == -1302441815 * actor.npcCycle && actor.walkSequence * -1312118043 != -1) {
                                actor.npcCycle = actor.walkSequence * 1773625821;
                            }
                            else if (-1302441815 * actor.npcCycle == actor.recolourEndCycle * -1059657777 && actor.walkRightSequence * -428343529 != -1) {
                                actor.npcCycle = -483333697 * actor.walkRightSequence;
                            }
                        }
                        if (n12 != n10 || n11 != n13) {
                            if (n10 < n12) {
                                actor.walkBackSequence += -881028089 * n16;
                                if (actor.walkBackSequence * 1144428983 > n12) {
                                    actor.walkBackSequence = -881028089 * n12;
                                }
                            }
                            else if (n10 > n12) {
                                actor.walkBackSequence -= -881028089 * n16;
                                if (1144428983 * actor.walkBackSequence < n12) {
                                    actor.walkBackSequence = n12 * -881028089;
                                }
                            }
                            if (n11 < n13) {
                                actor.field1005 += 1193213931 * n16;
                                if (-411750205 * actor.field1005 > n13) {
                                    actor.field1005 = 1193213931 * n13;
                                }
                            }
                            else if (n11 > n13) {
                                actor.field1005 -= 1193213931 * n16;
                                if (-411750205 * actor.field1005 < n13) {
                                    actor.field1005 = 1193213931 * n13;
                                }
                            }
                        }
                        if (actor.walkBackSequence * 1144428983 == n12 && actor.field1005 * -411750205 == n13) {
                            actor.field970 -= 400971895;
                            if (actor.field1003 * -1181739279 > 0) {
                                actor.field1003 -= 1622809105;
                            }
                        }
                    }
                    else {
                        actor.walkBackSequence = -881028089 * n12;
                        actor.field1005 = n13 * 1193213931;
                        actor.field970 -= 400971895;
                        if (actor.field1003 * -1181739279 > 0) {
                            actor.field1003 -= 1622809105;
                        }
                    }
                }
            }
        }
        if (actor.walkBackSequence * 1144428983 < 128 || actor.field1005 * -411750205 < 128 || 1144428983 * actor.walkBackSequence >= 13184 || actor.field1005 * -411750205 >= 13184) {
            actor.overheadTextCyclesRemaining = 1690721941;
            actor.exactMoveArrive1Cycle = 0;
            actor.movementFrame = 0;
            actor.method533(-2027453697);
            actor.walkBackSequence = -1102445696 * actor.hitSplatTypes2[0] + -1606165824 * actor.idleSequence;
            actor.field1005 = actor.idleSequence * 254242752 + -1887439488 * actor.pathX[0];
            actor.method536((byte)123);
        }
        if (actor == MusicPatchNode.localPlayer && (1144428983 * actor.walkBackSequence < 1536 || -411750205 * actor.field1005 < 1536 || actor.walkBackSequence * 1144428983 >= 11776 || -411750205 * actor.field1005 >= 11776)) {
            actor.overheadTextCyclesRemaining = 1690721941;
            actor.exactMoveArrive1Cycle = 0;
            actor.movementFrame = 0;
            actor.method533(-2114074852);
            actor.walkBackSequence = -1102445696 * actor.hitSplatTypes2[0] + actor.idleSequence * -1606165824;
            actor.field1005 = actor.idleSequence * 254242752 + -1887439488 * actor.pathX[0];
            actor.method536((byte)50);
        }
        if (-1 != 1005900761 * actor.rotation) {
            final int n17 = 65536;
            Actor actor2;
            if (1005900761 * actor.rotation < n17) {
                actor2 = Client.npcs[actor.rotation * 1005900761];
            }
            else {
                actor2 = Client.players[actor.rotation * 1005900761 - n17];
            }
            if (null != actor2) {
                final int n18 = 1144428983 * actor.walkBackSequence - actor2.walkBackSequence * 1144428983;
                final int n19 = actor.field1005 * -411750205 - -411750205 * actor2.field1005;
                if (n18 != 0 || n19 != 0) {
                    actor.turnLeftSequence = ((int)(Math.atan2(n18, n19) * 325.94932345220167) & 0x7FF) * 385564471;
                }
            }
            else if (actor.false0) {
                actor.rotation = -1052277865;
                actor.false0 = false;
            }
        }
        if (0 == 1134756167 * actor.field970 || 1489558979 * actor.crawlLeftSequence > 0) {
            int n20 = -1;
            if (-714961113 * actor.runBackSequence != -1 && -1282076959 * actor.movementFrameCycle != -1) {
                final int n21 = actor.runBackSequence * -1320709248 - 1205837952 * WorldMapData_0.baseX + 64;
                final int n22 = -897093504 * actor.movementFrameCycle - -1473027968 * GameObject.baseY + 64;
                final int n23 = actor.walkBackSequence * 1144428983 - n21;
                final int n24 = -411750205 * actor.field1005 - n22;
                if (n23 != 0 || n24) {
                    n20 = ((int)(Math.atan2(n23, n24) * 325.94932345220167) & 0x7FF);
                }
            }
            else if (actor.field983 * -283165269 != -1) {
                n20 = -283165269 * actor.field983;
            }
            if (n20 != -1) {
                actor.turnLeftSequence = n20 * 385564471;
                if (actor.field938) {
                    actor.field986 = 841550147 * actor.turnLeftSequence;
                }
            }
            actor.method527(-2137628969);
        }
        final int n25 = -1751341433 * actor.turnLeftSequence - actor.field986 * -1703696531 & 0x7FF;
        if (n25 != 0) {
            actor.graphicsCount += 531854385;
            final int n26 = (n25 > 1024) ? -1 : 1;
            actor.field986 += n26 * (actor.field993 * 351748387) * -1228309915;
            boolean b2 = true;
            if (n25 < actor.field993 * 351748387 || n25 > 2048 - actor.field993 * 351748387) {
                actor.field986 = 841550147 * actor.turnLeftSequence;
                b2 = false;
            }
            if (actor.field993 * 351748387 > 0 && actor.npcCycle * -1302441815 == 1590591885 * actor.sequenceFrameCycle && (-1223990063 * actor.graphicsCount > 25 || b2)) {
                if (n26 == -1 && 1319769839 * actor.crawlRightSequence != -1) {
                    actor.npcCycle = actor.crawlRightSequence * -1570491945;
                }
                else if (n26 == 1 && 1796560353 * actor.exactMoveDirection != -1) {
                    actor.npcCycle = -1883552135 * actor.exactMoveDirection;
                }
                else {
                    actor.npcCycle = actor.targetIndex * 961712881;
                }
            }
            actor.field986 = -1228309915 * (actor.field986 * -1703696531 & 0x7FF);
        }
        else {
            if (actor.false0) {
                actor.rotation = -1052277865;
                actor.false0 = false;
            }
            actor.graphicsCount = 0;
        }
        NetFileRequest.method1876(actor, (byte)(-102));
    }
    
    public void oc() {
        this.wu.tick();
    }
    
    public static void oc(final int n) {
        if (ScriptFrame.client.fd) {
            ScriptFrame.client.yb.setProperty("JX_ACCESS_TOKEN", (ModeWhere.field3571 == null) ? "" : ModeWhere.field3571);
            ScriptFrame.client.yb.setProperty("JX_REFRESH_TOKEN", (TileItem.field1079 == null) ? "" : TileItem.field1079);
            ScriptFrame.client.hf();
        }
    }
    
    static int pb() {
        if (null != Client.archiveLoaders && Client.archiveLoadersDone * -397497277 < Client.archiveLoaders.size()) {
            int n = 0;
            for (int i = 0; i <= Client.archiveLoadersDone * -397497277; ++i) {
                n += ((ArchiveLoader)Client.archiveLoaders.get(i)).loadedCount * -1464399353;
            }
            return n * 10000 / (Client.field397 * 1240602605);
        }
        return 10000;
    }
    
    public NPC[] pb() {
        return Client.npcs;
    }
    
    public void pb(final boolean b) {
        this.wu.frame();
    }
    
    static void yl(final int n, final int n2, final int n3, final int n4, final String targetName) {
        final Widget widgetChild = SoundSystem.getWidgetChild(n2, n3, 53488088);
        if (null == widgetChild) {
            return;
        }
        if (widgetChild.onOp != null) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.opIndex = n * -247460251;
            scriptEvent.targetName = targetName;
            scriptEvent.args = widgetChild.onOp;
            HealthBarUpdate.set(scriptEvent, (byte)(-72));
        }
        boolean method353 = true;
        if (1021339961 * widgetChild.contentType > 0) {
            method353 = Message.method353(widgetChild, (byte)(-4));
        }
        if (!method353) {
            return;
        }
        if ((KeyHandler.getWidgetFlags(widgetChild, 1625328510) >> n - 1 + 1 & 0x1) == 0x0) {
            return;
        }
        if (n == 1) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.IF_BUTTON1, Client.packetWriter.isaacCipher, (short)(-27539));
            packetBufferNode.packetBuffer.ba(n2, -2081835031);
            packetBufferNode.packetBuffer.cq(n3, (byte)(-106));
            packetBufferNode.packetBuffer.cq(n4, (byte)52);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (2 == n) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.OPLOC5, Client.packetWriter.isaacCipher, (short)(-6488));
            packetBufferNode2.packetBuffer.ba(n2, -2081835031);
            packetBufferNode2.packetBuffer.cq(n3, (byte)67);
            packetBufferNode2.packetBuffer.cq(n4, (byte)51);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
        }
        if (3 == n) {
            final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2540, Client.packetWriter.isaacCipher, (short)(-10287));
            packetBufferNode3.packetBuffer.ba(n2, -2081835031);
            packetBufferNode3.packetBuffer.cq(n3, (byte)(-34));
            packetBufferNode3.packetBuffer.cq(n4, (byte)63);
            Client.packetWriter.addNode(packetBufferNode3, 414135591);
        }
        if (4 == n) {
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPNPC5, Client.packetWriter.isaacCipher, (short)(-20708));
            packetBufferNode4.packetBuffer.ba(n2, -2081835031);
            packetBufferNode4.packetBuffer.cq(n3, (byte)100);
            packetBufferNode4.packetBuffer.cq(n4, (byte)(-49));
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (5 == n) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.OPNPC2, Client.packetWriter.isaacCipher, (short)(-7840));
            packetBufferNode5.packetBuffer.ba(n2, -2081835031);
            packetBufferNode5.packetBuffer.cq(n3, (byte)52);
            packetBufferNode5.packetBuffer.cq(n4, (byte)(-99));
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (6 == n) {
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2535, Client.packetWriter.isaacCipher, (short)(-12360));
            packetBufferNode6.packetBuffer.ba(n2, -2081835031);
            packetBufferNode6.packetBuffer.cq(n3, (byte)6);
            packetBufferNode6.packetBuffer.cq(n4, (byte)78);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (7 == n) {
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2558, Client.packetWriter.isaacCipher, (short)(-16608));
            packetBufferNode7.packetBuffer.ba(n2, -2081835031);
            packetBufferNode7.packetBuffer.cq(n3, (byte)(-63));
            packetBufferNode7.packetBuffer.cq(n4, (byte)9);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (8 == n) {
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2527, Client.packetWriter.isaacCipher, (short)(-24045));
            packetBufferNode8.packetBuffer.ba(n2, -2081835031);
            packetBufferNode8.packetBuffer.cq(n3, (byte)(-98));
            packetBufferNode8.packetBuffer.cq(n4, (byte)(-101));
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (n == 9) {
            final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.WALK, Client.packetWriter.isaacCipher, (short)(-20195));
            packetBufferNode9.packetBuffer.ba(n2, -2081835031);
            packetBufferNode9.packetBuffer.cq(n3, (byte)61);
            packetBufferNode9.packetBuffer.cq(n4, (byte)(-55));
            Client.packetWriter.addNode(packetBufferNode9, 414135591);
        }
        if (10 == n) {
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.OPPLAYERT, Client.packetWriter.isaacCipher, (short)(-396));
            packetBufferNode10.packetBuffer.ba(n2, -2081835031);
            packetBufferNode10.packetBuffer.cq(n3, (byte)(-77));
            packetBufferNode10.packetBuffer.cq(n4, (byte)2);
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
        }
    }
    
    public int xl() {
        return class503.SpriteBuffer_spriteWidth * -822007097;
    }
    
    final boolean xl() {
        final int method461 = DynamicObject.method461((short)(-10307));
        int n = (Client.leftClickOpensMenu && 730065501 * Client.menuOptionsCount > 2) ? 1 : 0;
        if (n == 0) {
            int n2;
            if (method461 < 0) {
                n2 = 0;
            }
            else {
                int n3 = Client.menuOpcodes[method461];
                if (n3 >= 2000) {
                    n3 -= 2000;
                }
                n2 = ((1007 == n3) ? 1 : 0);
            }
            n = n2;
        }
        return n != 0 && !Client.menuShiftClick[method461];
    }
    
    static final void xh(final int n, final int n2, final int n3, final int n4) {
        for (int i = 0; i < -1210581120 * Client.rootWidgetCount; ++i) {
            if (Client.rootWidgetXs[i] + Client.rootWidgetWidths[i] > n && Client.rootWidgetXs[i] < n3 + n && Client.rootWidgetHeights[i] + Client.rootWidgetYs[i] > n2 && Client.rootWidgetYs[i] < n2 + n4) {
                Client.field574[i] = true;
            }
        }
    }
    
    public int xh() {
        return Scene.Scene_selectedY;
    }
    
    static void yh(final int n, final int n2) {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.CONTINUE, Client.packetWriter.isaacCipher, (short)(-18547));
        packetBufferNode.packetBuffer.el(n, -437883978);
        Buffer.ap(packetBufferNode.packetBuffer, n2, (byte)88);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    public static void bc(final int n) {
        int bi;
        final int n2 = bi = ScriptFrame.client.getCameraPitch();
        if (Client.zz && Client.field620[4]) {
            if (Client.bi > 383 && n2 == 383) {
                bi = Client.bi;
                if (bi > 512) {
                    bi = 512;
                }
                ScriptFrame.client.wu(bi);
            }
            else if (Client.bi < 128 && n2 == 128) {
                bi = Client.bi;
                if (bi < 0) {
                    bi = 0;
                }
                ScriptFrame.client.wu(bi);
            }
        }
        Client.bi = bi;
    }
    
    public NPC xm() {
        if (this.getHintArrowType() != 1) {
            return null;
        }
        final int cc = ScriptFrame.client.cc();
        final NPC[] pb = ScriptFrame.client.pb();
        if (cc < 0 || cc >= pb.length) {
            return null;
        }
        return pb[cc];
    }
    
    static final void xm(final int n, final int n2) {
        if (2074325964 * Client.menuOptionsCount < 2 && 1585527800 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            return;
        }
        if (!Client.showMouseOverText) {
            return;
        }
        final int method461 = DynamicObject.method461((short)(-21506));
        String str;
        if (1 == Client.isItemSelected * -303899309 && 730065501 * Client.menuOptionsCount < 2) {
            str = Strings.gu + Strings.gk + Client.field364 + " " + class96.ab;
        }
        else if (Client.isSpellSelected && -2082785611 * Client.menuOptionsCount < 2) {
            str = Client.field530 + Strings.gk + Client.field522 + " " + class96.ab;
        }
        else {
            str = Friend.method2152(method461, (short)8456);
        }
        if (346284195 * Client.menuOptionsCount > 2) {
            str = str + class383.method2081(16777215, 1600759522) + " " + '/' + " " + (Client.menuOptionsCount * 730065501 - 2) + Strings.gw;
        }
        AbstractFont.lu(class137.fontBold12, str, 4 + n, 15 + n2, 1457057533, 0, Client.cycle * -1886224337 / 1884055912);
    }
    
    static void rm(final int n, final int n2, final int n3) {
        if (ClientPreferences.setUsernameToRemember(class20.clientPreferences, 1929137554) != 0 && 0 != n2 && Client.soundEffectCount * -297150195 < 50) {
            Client.soundEffectIds[Client.soundEffectCount * -297150195] = n;
            Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n2;
            Client.queuedSoundEffectDelays[Client.soundEffectCount * 61417041] = n3;
            Client.soundEffects[2080329020 * Client.soundEffectCount] = null;
            Client.soundLocations[Client.soundEffectCount * -297150195] = 0;
            Client.soundEffectCount += 1996033835;
        }
    }
    
    static void pf(final int n) {
        if (Client.gameState * 1536014233 == n) {
            return;
        }
        if (-543762698 * Client.gameState == 30) {
            Client.field590.method1138((byte)(-18));
        }
        if (0 == -1275976559 * Client.gameState) {
            ScriptFrame.client.bs(-274523606);
        }
        if (n == 20 || 40 == n || -469874174 == n || n == 50) {
            class284.method1595(0, -884532457);
            Client.field391 = 0;
            Client.field392 = 0;
            Client.timer.method2096(n, (byte)109);
            if (n != 20) {
                class14.method53(false, -1681094222);
            }
        }
        if (n != 20 && n != 40 && null != class333.field3090) {
            class333.field3090.close(-1988005204);
            class333.field3090 = null;
        }
        if (Client.gameState * 60185530 == 25) {
            Client.field489 = 0;
            Client.field427 = 0;
            Client.field593 = -1903772507;
            Client.field425 = 0;
            Client.field426 = 1411073903;
        }
        if (n == 5 || 10 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, true, class134.method779((byte)95) ? 0 : 12, (byte)(-17));
        }
        else if (20 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, (11 == 1118751281 * Client.gameState) ? 4 : 0, (byte)(-40));
        }
        else if (11 == n) {
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 4, (byte)(-15));
        }
        else if (50 == n) {
            class205.method1137("", "Updating date of birth...", "", -409644738);
            KeyHandler.getIdleCycles(NetFileRequest.archive10, class452.archive8, false, 7, (byte)(-53));
        }
        else {
            Player.method519(2128365525);
        }
        Client.gameState = -283337844 * n;
    }
    
    public void ia(final byte[][] spriteBuffer_pixels) {
        VarbitComposition.SpriteBuffer_pixels = spriteBuffer_pixels;
    }
    
    public static void ne(final int n) {
        ScriptFrame.client.getCallbacks().post((Object)new ClanChannelChanged((net.runelite.api.clan.ClanChannel)ScriptFrame.client.ok(), -1, true));
    }
    
    void tz() {
        final int n = -1687260435 * Client.aj;
        final int n2 = class262.canvasHeight * 2009284788;
        if (-760965190 * this.av < n) {
            final int n3 = this.av * 32852039;
        }
        if (this.ar * 2136513012 < n2) {
            final int n4 = this.ar * -290966994;
        }
        if (class20.clientPreferences != null) {
            try {
                class26.method113(ScriptFrame.client, "resize", new Object[] { GrandExchangeOfferNameComparator.getWindowedMode(488146917) }, -1559517733);
            }
            catch (Throwable t) {}
        }
    }
    
    public void tz(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        class485.worldToMinimap(n, n2, n3, n4, spritePixels, spriteMask, 1850494258);
    }
    
    static final void zi(int n, int n2, final int n3, final int n4, final int n5, final int n6) {
        final int n7 = n3 - n;
        final int n8 = n4 - n2;
        final int n9 = (n7 >= 0) ? n7 : (-n7);
        final int n10 = (n8 >= 0) ? n8 : (-n8);
        int n11 = n9;
        if (n11 < n10) {
            n11 = n10;
        }
        if (n11 == 0) {
            return;
        }
        int n12 = (n7 << 16) / n11;
        int n13 = (n8 << 16) / n11;
        if (n13 <= n12) {
            n12 = -n12;
        }
        else {
            n13 = -n13;
        }
        final int n14 = n6 * n13 >> 17;
        final int n15 = 1 + n13 * n6 >> 17;
        final int n16 = n12 * n6 >> 17;
        final int n17 = n6 * n12 + 1 >> 17;
        n -= Rasterizer2D.Rasterizer2D_xClipStart;
        n2 -= Rasterizer2D.Rasterizer2D_yClipStart;
        final int n18 = n + n14;
        final int n19 = n - n15;
        final int n20 = n7 + n - n15;
        final int n21 = n + n7 + n14;
        final int n22 = n16 + n2;
        final int n23 = n2 - n17;
        final int n24 = n2 + n8 - n17;
        final int n25 = n2 + n8 + n16;
        VarpDefinition.method981(n18, n19, n20, -1740756415);
        class144.method825(n22, n23, n24, n18, n19, n20, 0.0f, 0.0f, 0.0f, n5, -1971682982);
        VarpDefinition.method981(n18, n20, n21, -1740756415);
        class144.method825(n22, n24, n25, n18, n20, n21, 0.0f, 0.0f, 0.0f, n5, -1201853298);
    }
    
    public IndexedSprite aw() {
        return new IndexedSprite();
    }
    
    final boolean method391(final PacketWriter packetWriter, final int n) {
        final int n2 = this.wa++;
        assert n2 < 100;
        if (n2 == 0) {
            assert Client.yn == null;
            if (Client.uo != null && !Client.uo.isAlive()) {
                final rl2 rl2 = Client.yn = Client.gk;
                Client.gk = null;
                Client.uo = null;
                Client.tt = false;
                assert ScriptFrame.client.kh() == 30;
                oh(rl2);
                assert ScriptFrame.client.kh() == 25;
            }
        }
        if (!Client.tt) {
            final AbstractSocket socket = packetWriter.getSocket((byte)89);
            final PacketBuffer packetBuffer = packetWriter.packetBuffer;
            boolean b = false;
            Label_16547: {
                if (null == socket) {
                    b = false;
                }
                else {
                    try {
                        if (packetWriter.field1133 == null) {
                            if (packetWriter.field1135) {
                                if (!socket.isAvailable(1, -1455908539)) {
                                    b = false;
                                    break Label_16547;
                                }
                                socket.read(packetWriter.packetBuffer.al, 0, 1, -2106093590);
                                packetWriter.field1136 = 0;
                                packetWriter.field1135 = false;
                            }
                            packetBuffer.at = 0;
                            if (packetBuffer.method2464((byte)55)) {
                                if (!socket.isAvailable(1, 1324343592)) {
                                    b = false;
                                    break Label_16547;
                                }
                                socket.read(packetWriter.packetBuffer.al, 1, 1, -2106093590);
                                packetWriter.field1136 = 0;
                            }
                            packetWriter.field1135 = true;
                            final ServerPacket[] serverPacket_values = PacketBufferNode.ServerPacket_values(-1731859764);
                            final int ws = PacketBuffer.ws(packetBuffer, -134338815);
                            if (ws < 0 || ws >= serverPacket_values.length) {
                                throw new IOException(ws + " " + -1633313603 * packetBuffer.at);
                            }
                            packetWriter.field1133 = serverPacket_values[ws];
                            packetWriter.serverPacketLength = -1975731211 * packetWriter.field1133.id;
                        }
                        if (889658999 * packetWriter.serverPacketLength == -1) {
                            if (!socket.isAvailable(1, 1009537393)) {
                                b = false;
                                break Label_16547;
                            }
                            packetWriter.getSocket((byte)3).read(packetBuffer.al, 0, 1, -2106093590);
                            packetWriter.serverPacketLength = (packetBuffer.al[0] & 0xFF) * 1873812295;
                        }
                        if (889658999 * packetWriter.serverPacketLength == -2) {
                            if (!socket.isAvailable(2, -1685053219)) {
                                b = false;
                                break Label_16547;
                            }
                            packetWriter.getSocket((byte)34).read(packetBuffer.al, 0, 2, -2106093590);
                            packetBuffer.at = 0;
                            packetWriter.serverPacketLength = packetBuffer.cl(-18531300) * 1873812295;
                        }
                        if (!socket.isAvailable(packetWriter.serverPacketLength * 889658999, -1038952857)) {
                            b = false;
                            break Label_16547;
                        }
                        packetBuffer.at = 0;
                        socket.read(packetBuffer.al, 0, packetWriter.serverPacketLength * 889658999, -2106093590);
                        packetWriter.field1136 = 0;
                        Client.timer.method2095(-1033751982);
                        packetWriter.field1139 = packetWriter.field1138;
                        packetWriter.field1138 = packetWriter.serverPacket;
                        packetWriter.serverPacket = packetWriter.field1133;
                        if (packetWriter.field1133 == ServerPacket.field2608) {
                            final int cx = packetBuffer.cx(-1431320958);
                            final int cx2 = packetBuffer.cx(-1766788505);
                            final int gcDuration = NetCache.getGcDuration(1990174320);
                            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPLOC3, Client.packetWriter.isaacCipher, (short)(-778));
                            packetBufferNode.packetBuffer.eb(1913114939 * Client.aa, (byte)(-5));
                            packetBufferNode.packetBuffer.dp(gcDuration, -531273454);
                            packetBufferNode.packetBuffer.el(cx, -437883978);
                            packetBufferNode.packetBuffer.el(cx2, -437883978);
                            Client.packetWriter.addNode(packetBufferNode, 414135591);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2599 == packetWriter.field1133) {
                            final byte wu = Buffer.wu(packetBuffer, 435772489);
                            final long n3 = packetBuffer.cr(-1187743029) + ((long)packetBuffer.cl(789347979) << 32);
                            boolean b2 = false;
                            final ClanChannel clanChannel = (wu >= 0) ? Client.currentClanChannels[wu] : MouseHandler.guestClanChannel;
                            if (clanChannel == null) {
                                b2 = true;
                            }
                            else {
                                for (int i = 0; i < 100; ++i) {
                                    if (Client.field652[i] == n3) {
                                        b2 = true;
                                        break;
                                    }
                                }
                            }
                            if (!b2) {
                                Client.field652[1960529059 * Client.field588] = n3;
                                Client.field588 = 1561052939 * ((1 + 1960529059 * Client.field588) % 100);
                                class136.addChatMessage((wu >= 0) ? 43 : 46, "", SceneTilePaint.readString(packetBuffer, (byte)98), clanChannel.name, (short)(-29165));
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2580) {
                            final int vl = Buffer.vl(packetBuffer, 363073604);
                            final int db = packetBuffer.db((byte)(-18));
                            int zc = Buffer.zc(packetBuffer, 718104300);
                            if (65535 == zc) {
                                zc = -1;
                            }
                            int or = Buffer.or(packetBuffer, -523126268);
                            if (or == 65535) {
                                or = -1;
                            }
                            for (int j = or; j <= zc; ++j) {
                                final long n4 = ((long)vl << 32) + j;
                                final Node at = Client.widgetFlags.at(n4);
                                if (at != null) {
                                    at.hw();
                                }
                                Client.widgetFlags.put(new IntegerNode(db), n4);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2649 == packetWriter.field1133) {
                            final int tn = Buffer.tn(packetBuffer, -1019786063);
                            final int en = packetBuffer.en(383378593);
                            final int qd = Buffer.qd(packetBuffer, (byte)68);
                            final Widget vmethod3380 = class165.vmethod3380(en, (byte)5);
                            if (tn != vmethod3380.rawX * -115015413 || qd != 1651158159 * vmethod3380.rawY || 0 != -1596536121 * vmethod3380.xAlignment || 0 != 1484444061 * vmethod3380.yAlignment) {
                                vmethod3380.rawX = tn * 1806877347;
                                vmethod3380.rawY = qd * 1231090287;
                                vmethod3380.xAlignment = 0;
                                vmethod3380.yAlignment = 0;
                                class144.invalidateWidget(vmethod3380, -759995140);
                                this.alignWidget(vmethod3380, -1113228420);
                                if (883712245 * vmethod3380.type == 0) {
                                    WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[en >> 16], vmethod3380, false, (byte)44);
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2670 == packetWriter.field1133) {
                            final int eq = packetBuffer.eq((byte)(-113));
                            final int df = packetBuffer.df(-2049377759);
                            final Widget vmethod3381 = class165.vmethod3380(packetBuffer.cx(-1942066629), (byte)5);
                            ChatChannel.method470(vmethod3381, eq, df, -2141558177);
                            class144.invalidateWidget(vmethod3381, -1868692992);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2648 == packetWriter.field1133) {
                            class293.forceDisconnect(Buffer.ra(packetBuffer, (byte)7), 16777216);
                            packetWriter.field1133 = null;
                            b = false;
                            break Label_16547;
                        }
                        if (ServerPacket.field2646 == packetWriter.field1133) {
                            class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5).rotationKey = (packetBuffer.cl(-411117698) + (Buffer.zc(packetBuffer, 966913588) << 16)) * -1510822541;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2672 == packetWriter.field1133) {
                            final NPC npc = Client.npcs[packetBuffer.cl(-1233194695)];
                            final int cl = packetBuffer.cl(-564423679);
                            final int cx3 = packetBuffer.cx(-1566544666);
                            if (null != npc) {
                                npc.cj(0, cl, cx3 >> 16, cx3 & 0xFFFF, 329491762);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2634) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2572, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2691 == packetWriter.field1133) {
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2680) {
                            final int en2 = packetBuffer.en(383378593);
                            final int or2 = Buffer.or(packetBuffer, -523126268);
                            final short n5 = (short)Buffer.qd(packetBuffer, (byte)31);
                            final int df2 = packetBuffer.df(-2067010725);
                            final NPC npc2 = Client.npcs[or2];
                            if (null != npc2) {
                                npc2.method597(df2, en2, n5, 2033131793);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2584) {
                            final int cl2 = packetBuffer.cl(407268215);
                            Player localPlayer;
                            if (cl2 == Client.localPlayerIndex * -549033243) {
                                localPlayer = MusicPatchNode.localPlayer;
                            }
                            else {
                                localPlayer = Client.players[cl2];
                            }
                            final int cl3 = packetBuffer.cl(-1741304105);
                            final int cx4 = packetBuffer.cx(-985464491);
                            if (localPlayer != null) {
                                localPlayer.cj(0, cl3, cx4 >> 16, cx4 & 0xFFFF, -936694757);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2623 == packetWriter.field1133) {
                            final int cd = packetBuffer.cd(-1555687167);
                            final boolean b3 = Buffer.ra(packetBuffer, (byte)7) == 1;
                            String cw = "";
                            boolean b4 = false;
                            if (b3) {
                                cw = packetBuffer.cw((byte)0);
                                if (World.friendSystem.isIgnored(new Username(cw, class70.loginType), -1193559293)) {
                                    b4 = true;
                                }
                            }
                            final String cw2 = packetBuffer.cw((byte)0);
                            if (!b4) {
                                UserComparator5.addGameMessage(cd, cw, cw2, -397121414);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2693) {
                            final int db2 = packetBuffer.db((byte)61);
                            final int db3 = packetBuffer.db((byte)22);
                            final Widget vmethod3382 = class165.vmethod3380(db2, (byte)5);
                            class282.method1591(vmethod3382, db3, -872142615);
                            class144.invalidateWidget(vmethod3382, -1931944308);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2601 == packetWriter.field1133) {
                            final int cx5 = packetBuffer.cx(-1031831027);
                            final boolean spriteTiling = packetBuffer.dq(-2070899692) == 1;
                            final Widget vmethod3383 = class165.vmethod3380(cx5, (byte)5);
                            if (vmethod3383.spriteTiling != spriteTiling) {
                                vmethod3383.spriteTiling = spriteTiling;
                                class144.invalidateWidget(vmethod3383, -1684416866);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2641 == packetWriter.field1133) {
                            b = this.method386(packetWriter, (byte)(-11));
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2665) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2567, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2619) {
                            final int en3 = packetBuffer.en(383378593);
                            final int cl4 = packetBuffer.cl(-209183685);
                            final Widget vmethod3384 = class165.vmethod3380(en3, (byte)5);
                            if (1 != -123768459 * vmethod3384.modelType || -168077555 * vmethod3384.modelId != cl4) {
                                vmethod3384.modelType = -1714481443;
                                vmethod3384.modelId = 509431749 * cl4;
                                class144.invalidateWidget(vmethod3384, -732205257);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2690 == packetWriter.field1133) {
                            Client.isCameraLocked = true;
                            Client.field598 = false;
                            Client.field541 = true;
                            ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                            class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                            final int cl5 = packetBuffer.cl(-1286672797);
                            final int cl6 = packetBuffer.cl(-1479201784);
                            Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                            final int ra = Buffer.ra(packetBuffer, (byte)7);
                            final int n6 = ObjTypeCustomisation.field1471 * 957080960 + 64;
                            final int n7 = 64 + 958794368 * class123.field1209;
                            int n8;
                            int n9;
                            if (Client.field615) {
                                n8 = class174.cameraY * 1772923873;
                                n9 = class147.getTileHeight(n6, n7, -1727408401 * GameEngine.Client_plane, (byte)14) - cl5;
                            }
                            else {
                                n8 = class147.getTileHeight(class36.cameraX * -2100544359, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-32)) - class174.cameraY * 1772923873;
                                n9 = cl5;
                            }
                            Client.field535 = new class453(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, n8, n6, n7, n9, cl6, ra);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2644 == packetWriter.field1133) {
                            b = nk(this, packetWriter, 2, -1339454052);
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2698) {
                            FontName.field3968 = packetBuffer.df(-2030790816) * -522523151;
                            class9.field28 = Buffer.ra(packetBuffer, (byte)7) * 671253333;
                            while (-1633313603 * packetBuffer.at < 889658999 * packetWriter.serverPacketLength) {
                                EnumComposition.processZoneOperation(Varcs.setInt((byte)(-49))[Buffer.ra(packetBuffer, (byte)7)], -302991134);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2581 == packetWriter.field1133) {
                            final Widget vmethod3385 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                            vmethod3385.modelType = -848477033;
                            vmethod3385.modelId = MusicPatchNode.localPlayer.appearance.getChatHeadId((short)5890) * 509431749;
                            class144.invalidateWidget(vmethod3385, -1320057585);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2684 == packetWriter.field1133) {
                            int cl7 = packetBuffer.cl(-330729419);
                            if (65535 == cl7) {
                                cl7 = -1;
                            }
                            Client.rootInterface = cl7 * -32945189;
                            hp(this, false, 36188245);
                            ZoneOperation.Widget_resetModelFrames(cl7, 1669002823);
                            class12.runWidgetOnLoadListener(-896157613 * Client.rootInterface, (byte)120);
                            for (int k = 0; k < 100; ++k) {
                                Client.field573[k] = true;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2669 == packetWriter.field1133) {
                            World.friendSystem.readUpdate(packetBuffer, packetWriter.serverPacketLength * 889658999, 734353750);
                            Client.field557 = 1831095645 * Client.cycleCntr;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2626) {
                            Client.minimapState = Buffer.ra(packetBuffer, (byte)7) * -690225493;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2588) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2571, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2695) {
                            Players.varclan = null;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2618 == packetWriter.field1133) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2570, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2592 == packetWriter.field1133) {
                            final String cw3 = packetBuffer.cw((byte)0);
                            final Object[] args = new Object[cw3.length() + 1];
                            for (int l = cw3.length() - 1; l >= 0; --l) {
                                if (cw3.charAt(l) == 's') {
                                    args[1 + l] = packetBuffer.cw((byte)0);
                                }
                                else {
                                    args[1 + l] = new Integer(packetBuffer.cx(-2068482619));
                                }
                            }
                            args[0] = new Integer(packetBuffer.cx(-952844878));
                            final ScriptEvent scriptEvent = new ScriptEvent();
                            scriptEvent.args = args;
                            HealthBarUpdate.set(scriptEvent, (byte)(-99));
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2666 == packetWriter.field1133) {
                            GrandExchangeEvents.updatePlayers(packetBuffer, packetWriter.serverPacketLength * 889658999, -48927414);
                            class85.method499(-1194378494);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2628 == packetWriter.field1133) {
                            final byte wu2 = Buffer.wu(packetBuffer, 435772489);
                            final String cw4 = packetBuffer.cw((byte)0);
                            final long n10 = packetBuffer.cl(-2118266993);
                            final long n11 = packetBuffer.cr(-1865097483);
                            final PlayerType playerType = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)78), Buffer.ra(packetBuffer, (byte)7), (short)173);
                            final long n12 = n11 + (n10 << 32);
                            boolean b5 = false;
                            final ClanChannel clanChannel2 = (wu2 >= 0) ? Client.currentClanChannels[wu2] : MouseHandler.guestClanChannel;
                            Label_3765: {
                                if (clanChannel2 == null) {
                                    b5 = true;
                                }
                                else {
                                    for (int n13 = 0; n13 < 100; ++n13) {
                                        if (Client.field652[n13] == n12) {
                                            b5 = true;
                                            break Label_3765;
                                        }
                                    }
                                    if (playerType.isUser && World.friendSystem.isIgnored(new Username(cw4, class70.loginType), -1638991570)) {
                                        b5 = true;
                                    }
                                }
                            }
                            if (!b5) {
                                Client.field652[Client.field588 * 1960529059] = n12;
                                Client.field588 = 1561052939 * ((Client.field588 * 1960529059 + 1) % 100);
                                final String escapeBrackets = AbstractFont.escapeBrackets(SceneTilePaint.readString(packetBuffer, (byte)40));
                                final int n14 = (wu2 >= 0) ? 41 : 44;
                                if (2138745227 * playerType.modIcon != -1) {
                                    class136.addChatMessage(n14, ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 1319912203) + cw4, escapeBrackets, clanChannel2.name, (short)(-17263));
                                }
                                else {
                                    class136.addChatMessage(n14, cw4, escapeBrackets, clanChannel2.name, (short)8938);
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2591) {
                            final PacketBuffer packetBuffer2 = packetBuffer;
                            packetBuffer2.at += 491706444;
                            if (packetBuffer.de(1987573484)) {
                                UserComparator4.method681(packetBuffer, -1633313603 * packetBuffer.at - 28, (byte)(-18));
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2622) {
                            class127.loadRegions(false, packetWriter.packetBuffer, (byte)41);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2583 == packetWriter.field1133) {
                            final int ra2 = Buffer.ra(packetBuffer, (byte)7);
                            if (Buffer.ra(packetBuffer, (byte)7) == 0) {
                                Client.grandExchangeOffers[ra2] = new GrandExchangeOffer();
                                ms(ra2);
                                final PacketBuffer packetBuffer3 = packetBuffer;
                                packetBuffer3.at -= 1524603270;
                            }
                            else {
                                final PacketBuffer packetBuffer4 = packetBuffer;
                                packetBuffer4.at += 1516355947;
                                Client.grandExchangeOffers[ra2] = new GrandExchangeOffer(packetBuffer, false);
                                ms(ra2);
                            }
                            Client.field629 = -1209118871 * Client.cycleCntr;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2637) {
                            final int ef = packetBuffer.ef(-381986387);
                            final Widget vmethod3386 = class165.vmethod3380(packetBuffer.db((byte)36), (byte)5);
                            if (ef != vmethod3386.sequenceId * -1526544909 || ef == -1) {
                                vmethod3386.sequenceId = -1195025605 * ef;
                                vmethod3386.modelFrame = 0;
                                vmethod3386.modelFrameCycle = 0;
                                class144.invalidateWidget(vmethod3386, -1823728500);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.REBUILD_REGION_NORMAL) {
                            final boolean b6 = Buffer.ra(packetBuffer, (byte)7) == 1;
                            final Widget vmethod3387 = class165.vmethod3380(packetBuffer.cx(-1955080863), (byte)5);
                            SecureRandomCallable.method476(vmethod3387, MusicPatchNode.localPlayer.appearance, b6, (short)222);
                            class144.invalidateWidget(vmethod3387, -2048582340);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2633 == packetWriter.field1133) {
                            final int da = packetBuffer.da(418943913);
                            final int db4 = packetBuffer.db((byte)(-52));
                            final int n15 = ((da >> 10 & 0x1F) << 19) + ((da >> 5 & 0x1F) << 11) + ((da & 0x1F) << 3);
                            final Widget vmethod3388 = class165.vmethod3380(db4, (byte)5);
                            if (1409091639 * vmethod3388.color != n15) {
                                vmethod3388.color = n15 * -1604768377;
                                class144.invalidateWidget(vmethod3388, -1639948277);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2609) {
                            final int cl8 = packetBuffer.cl(-932029717);
                            final int n16 = packetBuffer.df(-2099963950) * 4;
                            final int dq = packetBuffer.dq(-2070899692);
                            final byte dx = packetBuffer.dx(-2139483258);
                            final int n17 = packetBuffer.dq(-2070899692) * 4;
                            final int cl9 = packetBuffer.cl(-1017986430);
                            final int zc2 = Buffer.zc(packetBuffer, 615047838);
                            final int cy = packetBuffer.cy((byte)(-118));
                            final int ra3 = Buffer.ra(packetBuffer, (byte)7);
                            final int ea = packetBuffer.ea(1943847738);
                            final int n18 = ea >> 16;
                            final int n19 = ea >> 8 & 0xFF;
                            final int n20 = n18 + (ea >> 4 & 0x7);
                            final int n21 = n19 + (ea & 0x7);
                            final byte wu3 = Buffer.wu(packetBuffer, 435772489);
                            final int n22 = dx + n20;
                            final int n23 = wu3 + n21;
                            if (n20 >= 0 && n21 >= 0 && n20 < 104 && n21 < 104 && n22 >= 0 && n23 >= 0 && n22 < 104 && n23 < 104 && 65535 != cl9) {
                                final int n24 = 128 * n20 + 64;
                                final int n25 = 128 * n21 + 64;
                                final int n26 = 128 * n22 + 64;
                                final int n27 = 128 * n23 + 64;
                                final Projectile projectile = new Projectile(cl9, GameEngine.Client_plane * -1727408401, n24, n25, class147.getTileHeight(n24, n25, -1727408401 * GameEngine.Client_plane, (byte)(-128)) - n17, cl8 + Client.cycle * -1886224337, Client.cycle * -1886224337 + zc2, ra3, dq, cy, n16);
                                projectile.setDestination(n26, n27, class147.getTileHeight(n26, n27, -1727408401 * GameEngine.Client_plane, (byte)(-20)) - n16, cl8 + -1886224337 * Client.cycle, -335674854);
                                Client.projectiles.addFirst(projectile);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.LOGOUT_TRANSFER) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2564, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.UPDATE_UID192 == packetWriter.field1133) {
                            FriendSystem.gh(World.friendSystem, (byte)0);
                            Client.field557 = Client.cycleCntr * 1831095645;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2686 == packetWriter.field1133) {
                            final int n28 = -1633313603 * packetBuffer.at + packetWriter.serverPacketLength * 889658999;
                            int cl10 = packetBuffer.cl(-1548026108);
                            if (65535 == cl10) {
                                cl10 = -1;
                            }
                            int cl11 = packetBuffer.cl(-32389084);
                            if (-896157613 * Client.rootInterface != cl10) {
                                Client.rootInterface = -32945189 * cl10;
                                hp(this, false, -128333256);
                                ZoneOperation.Widget_resetModelFrames(Client.rootInterface * -896157613, 1514593980);
                                class12.runWidgetOnLoadListener(-896157613 * Client.rootInterface, (byte)108);
                                for (int n29 = 0; n29 < 100; ++n29) {
                                    Client.field573[n29] = true;
                                }
                            }
                            while (cl11-- > 0) {
                                final int cx6 = packetBuffer.cx(-918516400);
                                final int cl12 = packetBuffer.cl(393574395);
                                final int ra4 = Buffer.ra(packetBuffer, (byte)7);
                                InterfaceParent ifOpenSub = (InterfaceParent)Client.interfaceParents.at(cx6);
                                if (ifOpenSub != null && cl12 != 944864121 * ifOpenSub.group) {
                                    class357.closeInterface(ifOpenSub, true, 1657285879);
                                    ifOpenSub = null;
                                }
                                if (null == ifOpenSub) {
                                    ifOpenSub = AttackOption.ifOpenSub(cx6, cl12, ra4, -1618920051);
                                }
                                ifOpenSub.field848 = true;
                            }
                            for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
                                if (interfaceParent.field848) {
                                    interfaceParent.field848 = false;
                                }
                                else {
                                    class357.closeInterface(interfaceParent, true, -532926407);
                                }
                            }
                            Client.widgetFlags = new NodeHashTable(512);
                            while (-1633313603 * packetBuffer.at < n28) {
                                final int cx7 = packetBuffer.cx(-2134259560);
                                final int cl13 = packetBuffer.cl(-1161284053);
                                final int cl14 = packetBuffer.cl(-961414764);
                                final int cx8 = packetBuffer.cx(-1105036428);
                                for (int n30 = cl13; n30 <= cl14; ++n30) {
                                    Client.widgetFlags.put(new IntegerNode(cx8), ((long)cx7 << 32) + n30);
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2650) {
                            final int ra5 = Buffer.ra(packetBuffer, (byte)7);
                            final int ra6 = Buffer.ra(packetBuffer, (byte)7);
                            final int ra7 = Buffer.ra(packetBuffer, (byte)7);
                            final int ra8 = Buffer.ra(packetBuffer, (byte)7);
                            Client.field620[ra5] = true;
                            Client.field621[ra5] = ra6;
                            Client.field643[ra5] = ra7;
                            Client.field499[ra5] = ra8;
                            Client.cameraShakeCycle[ra5] = 0;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2668 == packetWriter.field1133) {
                            final int or3 = Buffer.or(packetBuffer, -523126268);
                            final int eq2 = packetBuffer.eq((byte)(-31));
                            int or4 = Buffer.or(packetBuffer, -523126268);
                            if (or4 == 65535) {
                                or4 = -1;
                            }
                            final NPC npc3 = Client.npcs[or3];
                            if (null != npc3) {
                                if (or4 == npc3.cs * -1372355773 && or4 != -1) {
                                    final int n31 = ItemContainer.SpotAnimationDefinition_get(or4, (byte)28).replyMode * 789159225;
                                    if (n31 != 0) {
                                        npc3.dw = 0;
                                        npc3.dn = 0;
                                        npc3.bd = -401806131 * eq2;
                                        npc3.bo = 0;
                                    }
                                    else if (n31 == 2) {
                                        npc3.bo = 0;
                                    }
                                }
                                else if (or4 == -1 || -1 == -1372355773 * npc3.cs || ItemContainer.SpotAnimationDefinition_get(or4, (byte)38).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(npc3.cs * -1372355773, (byte)25).forcedPriority * -1932560049) {
                                    npc3.cs = or4 * -1690721941;
                                    final NPC actor = npc3;
                                    Label_5919: {
                                        if (actor instanceof NPC) {
                                            switch (actor.getId()) {
                                                case 8615:
                                                case 8616:
                                                case 8617:
                                                case 8618:
                                                case 8619:
                                                case 8620:
                                                case 8621:
                                                case 8622: {
                                                    break Label_5919;
                                                }
                                            }
                                        }
                                        final AnimationChanged animationChanged = new AnimationChanged();
                                        animationChanged.setActor((net.runelite.api.Actor)actor);
                                        ScriptFrame.client.getCallbacks().post((Object)animationChanged);
                                    }
                                    npc3.dw = 0;
                                    npc3.dn = 0;
                                    npc3.bd = eq2 * -401806131;
                                    npc3.bo = 0;
                                    npc3.dk = -1718989897 * npc3.cb;
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2652 == packetWriter.field1133) {
                            UserComparator3.method699(packetBuffer, 889658999 * packetWriter.serverPacketLength, 2115875003);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2632 == packetWriter.field1133) {
                            for (int n32 = 0; n32 < Client.players.length; ++n32) {
                                if (Client.players[n32] != null) {
                                    Client.players[n32].cs = 1690721941;
                                    final Player actor2 = Client.players[n32];
                                    if (actor2 instanceof NPC) {
                                        switch (((NPC)actor2).getId()) {
                                            case 8615:
                                            case 8616:
                                            case 8617:
                                            case 8618:
                                            case 8619:
                                            case 8620:
                                            case 8621:
                                            case 8622: {
                                                continue;
                                            }
                                        }
                                    }
                                    final AnimationChanged animationChanged2 = new AnimationChanged();
                                    animationChanged2.setActor((net.runelite.api.Actor)actor2);
                                    ScriptFrame.client.getCallbacks().post((Object)animationChanged2);
                                }
                            }
                            for (int n33 = 0; n33 < Client.npcs.length; ++n33) {
                                if (null != Client.npcs[n33]) {
                                    Client.npcs[n33].cs = 1690721941;
                                    final NPC actor3 = Client.npcs[n33];
                                    if (actor3 instanceof NPC) {
                                        switch (actor3.getId()) {
                                            case 8615:
                                            case 8616:
                                            case 8617:
                                            case 8618:
                                            case 8619:
                                            case 8620:
                                            case 8621:
                                            case 8622: {
                                                continue;
                                            }
                                        }
                                    }
                                    final AnimationChanged animationChanged3 = new AnimationChanged();
                                    animationChanged3.setActor((net.runelite.api.Actor)actor3);
                                    ScriptFrame.client.getCallbacks().post((Object)animationChanged3);
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2605) {
                            FontName.field3968 = packetBuffer.dq(-2070899692) * -522523151;
                            class9.field28 = packetBuffer.df(-2131522089) * 671253333;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2600 == packetWriter.field1133) {
                            EnumComposition.processZoneOperation(ZoneOperation.field2568, -302991134);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2630) {
                            if (Buffer.kn(packetBuffer, 1404535452)) {
                                if (null == class132.field1277) {
                                    class132.field1277 = new class354();
                                }
                            }
                            else {
                                class132.field1277 = null;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2681) {
                            Client.field560 = 1358928753 * Client.cycleCntr;
                            final byte wu4 = Buffer.wu(packetBuffer, 435772489);
                            final class156 class156 = new class156(packetBuffer);
                            ClanChannel guestClanChannel;
                            if (wu4 >= 0) {
                                guestClanChannel = Client.currentClanChannels[wu4];
                            }
                            else {
                                guestClanChannel = MouseHandler.guestClanChannel;
                            }
                            class156.ny(class156, guestClanChannel, (byte)(-101));
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2596) {
                            final int cx9 = packetBuffer.cx(-1782930002);
                            final int or5 = Buffer.or(packetBuffer, -523126268);
                            if ((Varps.Varps_temp[or5] = cx9) != Varps.Varps_main[or5]) {
                                Varps.Varps_main[or5] = cx9;
                                ye(or5);
                            }
                            class7.changeGameOptions(or5, 2026496728);
                            Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = or5;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2678) {
                            final int cx10 = packetBuffer.cx(-2049948052);
                            final int dq2 = packetBuffer.dq(-2070899692);
                            final Widget vmethod3389 = class165.vmethod3380(cx10, (byte)5);
                            class162.method911(vmethod3389, 1693987821 * MusicPatchNode.localPlayer.appearance.npcTransformId, dq2, (byte)(-125));
                            class144.invalidateWidget(vmethod3389, -2040286804);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2683 == packetWriter.field1133) {
                            Client.field598 = false;
                            Client.isCameraLocked = false;
                            Client.field541 = false;
                            Client.field614 = false;
                            FontName.field3970 = 0;
                            MilliClock.field1455 = 0;
                            ScriptFrame.field343 = 0;
                            Client.field615 = false;
                            Archive.field3467 = 0;
                            WorldMapElement.field1503 = 0;
                            class138.field1314 = 0;
                            KeyHandler.field81 = 0;
                            ObjTypeCustomisation.field1471 = 0;
                            class123.field1209 = 0;
                            class16.field54 = 0;
                            Client.field535 = null;
                            Client.field604 = null;
                            Client.field617 = null;
                            for (int n34 = 0; n34 < 5; ++n34) {
                                Client.field620[n34] = false;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2629 == packetWriter.field1133) {
                            int da2 = packetBuffer.da(2071927776);
                            if (65535 == da2) {
                                da2 = -1;
                            }
                            class1.playSong(da2, -1439083269);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2659) {
                            final int cr = packetBuffer.cr(-1071565434);
                            int da3 = packetBuffer.da(2031643103);
                            if (da3 == 65535) {
                                da3 = -1;
                            }
                            CollisionMap.playJingle(da3, cr, 1287836101);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2676 == packetWriter.field1133) {
                            final int db5 = packetBuffer.db((byte)(-4));
                            final int en4 = packetBuffer.en(383378593);
                            int zc3 = Buffer.zc(packetBuffer, -1366156200);
                            if (zc3 == 65535) {
                                zc3 = -1;
                            }
                            final Widget vmethod3390 = class165.vmethod3380(db5, (byte)5);
                            if (!vmethod3390.modelOrthog) {
                                if (-1 == zc3) {
                                    vmethod3390.modelType = 0;
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                final ItemComposition set = HealthBarUpdate.set(zc3, (byte)69);
                                vmethod3390.modelType = 1732008820;
                                vmethod3390.modelId = zc3 * 509431749;
                                vmethod3390.modelAngleX = 874786355 * set.xan2d;
                                vmethod3390.modelAngleY = set.yan2d * -2065246853;
                                vmethod3390.modelZoom = -1582059804 * set.zoom2d / en4 * -467727501;
                                class144.invalidateWidget(vmethod3390, -1684430252);
                            }
                            else {
                                vmethod3390.itemId = -1852876811 * zc3;
                                vmethod3390.itemQuantity = en4 * -568259577;
                                final ItemComposition set2 = HealthBarUpdate.set(zc3, (byte)36);
                                vmethod3390.modelAngleX = 874786355 * set2.xan2d;
                                vmethod3390.modelAngleY = -2065246853 * set2.yan2d;
                                vmethod3390.modelAngleZ = 745454881 * set2.zan2d;
                                vmethod3390.modelOffsetX = -183088313 * set2.offsetX2d;
                                vmethod3390.modelOffsetY = set2.offsetY2d * -347855449;
                                vmethod3390.modelZoom = set2.zoom2d * 1614948179;
                                if (set2.isStackable * 1552863327 == 1) {
                                    vmethod3390.itemQuantityMode = -761533221;
                                }
                                else {
                                    vmethod3390.itemQuantityMode = -1523066442;
                                }
                                if (-289037969 * vmethod3390.modelRotation > 0) {
                                    vmethod3390.modelZoom = -467727501 * (100808544 * vmethod3390.modelZoom / (-289037969 * vmethod3390.modelRotation));
                                }
                                else if (vmethod3390.rawWidth * -1960603747 > 0) {
                                    vmethod3390.modelZoom = 100808544 * vmethod3390.modelZoom / (-1960603747 * vmethod3390.rawWidth) * -467727501;
                                }
                                class144.invalidateWidget(vmethod3390, -696429148);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.field2631) {
                            Client.isCameraLocked = true;
                            Client.field598 = false;
                            Client.field541 = true;
                            ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                            class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                            final int cl15 = packetBuffer.cl(-422042403);
                            final int n35 = Buffer.ra(packetBuffer, (byte)7) * 128 + 64;
                            final int n36 = Buffer.ra(packetBuffer, (byte)7) * 128 + 64;
                            final int cl16 = packetBuffer.cl(769607351);
                            Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                            final int ra9 = Buffer.ra(packetBuffer, (byte)7);
                            final int n37 = 64 + 957080960 * ObjTypeCustomisation.field1471;
                            final int n38 = 64 + 958794368 * class123.field1209;
                            int n39;
                            int n40;
                            if (Client.field615) {
                                n39 = class174.cameraY * 1772923873;
                                n40 = class147.getTileHeight(n37, n38, -1727408401 * GameEngine.Client_plane, (byte)(-25)) - cl15;
                            }
                            else {
                                n39 = class147.getTileHeight(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-114)) - 1772923873 * class174.cameraY;
                                n40 = cl15;
                            }
                            Client.field535 = new class452(class36.cameraX * -2100544359, class297.cameraZ * -91399205, n39, n37, n38, n40, n35, n36, cl16, ra9);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.PLAYER_INFO == packetWriter.field1133) {
                            if (-1 != -896157613 * Client.rootInterface) {
                                class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 0, (byte)63);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.NPC_INFO_SMALL == packetWriter.field1133 && Client.isCameraLocked) {
                            Client.field598 = true;
                            Client.field614 = false;
                            Client.field541 = false;
                            for (int n41 = 0; n41 < 5; ++n41) {
                                Client.field620[n41] = false;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.ENTER_FREECAM) {
                            Client.destinationX = Buffer.ra(packetBuffer, (byte)7) * -1970850269;
                            if (1494100363 * Client.destinationX == 255) {
                                Client.destinationX = 0;
                            }
                            Client.destinationY = Buffer.ra(packetBuffer, (byte)7) * 875414437;
                            if (255 == Client.destinationY * -1748014035) {
                                Client.destinationY = 0;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.MESSAGE_PRIVATE == packetWriter.field1133) {
                            Client.isCameraLocked = true;
                            Client.field598 = false;
                            Client.field614 = true;
                            final int cm = packetBuffer.cm((byte)(-1));
                            final int method77 = class18.method77(WorldMapSectionType.cameraPitch * 1897923909 + packetBuffer.cm((byte)(-70)) & 0x7EB, 185659219);
                            final int n42 = cm + class125.cameraYaw * -1010818347;
                            final int cl17 = packetBuffer.cl(-1708300883);
                            final int ra10 = Buffer.ra(packetBuffer, (byte)7);
                            Client.field604 = new class454(WorldMapSectionType.cameraPitch * 1897923909, method77, cl17, ra10);
                            Client.field617 = new class454(-1010818347 * class125.cameraYaw, n42, cl17, ra10);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.SPOTANIM_SPECIFIC) {
                            Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.TRIGGER_ONDIALOGABORT) {
                            final byte[] array = new byte[889658999 * packetWriter.serverPacketLength];
                            packetBuffer.method2459(array, 0, array.length, 213421029);
                            Ignored.compareTo_ignored(new Buffer(array).readStringCp1252NullTerminated((byte)0), true, false, (byte)(-46));
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2614 == packetWriter.field1133) {
                            Client.isCameraLocked = true;
                            Client.field598 = false;
                            Client.field541 = false;
                            ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                            class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                            class16.field54 = packetBuffer.cl(108842569) * -1725771559;
                            KeyHandler.field81 = Buffer.ra(packetBuffer, (byte)7) * -2052337259;
                            class138.field1314 = Buffer.ra(packetBuffer, (byte)7) * -449391195;
                            if (class138.field1314 * -1514927571 >= 100) {
                                class36.cameraX = ObjTypeCustomisation.field1471 * -1848049280 - 317330880;
                                class297.cameraZ = class123.field1209 * 2021222272 - 1328933696;
                                class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-84)) - class16.field54 * -887836823) * -424093663;
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2647 == packetWriter.field1133) {
                            class36.method199(-1230139284);
                            final byte wu5 = Buffer.wu(packetBuffer, 435772489);
                            final class142 class157 = new class142(packetBuffer);
                            ClanSettings guestClanSettings;
                            if (wu5 >= 0) {
                                guestClanSettings = Client.currentClanSettings[wu5];
                            }
                            else {
                                guestClanSettings = ItemComposition.guestClanSettings;
                            }
                            class157.method807(guestClanSettings, (byte)(-52));
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.NPC_INFO_LARGE) {
                            class133.queueSoundEffect(packetBuffer.cl(-1014425859), Buffer.ra(packetBuffer, (byte)7), packetBuffer.cl(-1022215190), (byte)(-121));
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.field2620 == packetWriter.field1133) {
                            final int cx11 = packetBuffer.cx(-1102594152);
                            if (cx11 != 1263827259 * Client.field444) {
                                Client.field444 = cx11 * 1409021939;
                                class173.method955((byte)14);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (packetWriter.field1133 == ServerPacket.UPDATE_ZONE_PARTIAL_FOLLOWS) {
                            ClientPacket.process((byte)2);
                            Client.runEnergy = packetBuffer.cl(276882904) * 440508051;
                            Client.field433 = -235455367 * Client.cycleCntr;
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.MESSAGE_PRIVATE_ECHO == packetWriter.field1133) {
                            final int db6 = packetBuffer.db((byte)(-26));
                            int zc4 = Buffer.zc(packetBuffer, -608834965);
                            final Widget vmethod3391 = class165.vmethod3380(db6, (byte)5);
                            if (null != vmethod3391 && 0 == vmethod3391.type * 883712245) {
                                if (zc4 > -1273374131 * vmethod3391.scrollHeight - vmethod3391.height * 1473950221) {
                                    zc4 = -1273374131 * vmethod3391.scrollHeight - 1473950221 * vmethod3391.height;
                                }
                                if (zc4 < 0) {
                                    zc4 = 0;
                                }
                                if (zc4 != vmethod3391.scrollY * 1223232735) {
                                    vmethod3391.scrollY = 946188063 * zc4;
                                    class144.invalidateWidget(vmethod3391, -1200074952);
                                }
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.IF_SETNPCHEAD == packetWriter.field1133) {
                            final String cw5 = packetBuffer.cw((byte)0);
                            final Widget vmethod3392 = class165.vmethod3380(packetBuffer.db((byte)(-58)), (byte)5);
                            if (!cw5.equals(vmethod3392.field2916)) {
                                vmethod3392.field2916 = cw5;
                                class144.invalidateWidget(vmethod3392, -2051847910);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        if (ServerPacket.UPDATE_INV_CLEAR == packetWriter.field1133) {
                            class36.method199(-1702031066);
                            final byte wu6 = Buffer.wu(packetBuffer, 435772489);
                            if (1 == packetWriter.serverPacketLength * 889658999) {
                                if (wu6 >= 0) {
                                    Client.currentClanSettings[wu6] = null;
                                }
                                else {
                                    ItemComposition.guestClanSettings = null;
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (wu6 >= 0) {
                                Client.currentClanSettings[wu6] = new ClanSettings(packetBuffer);
                            }
                            else {
                                ItemComposition.guestClanSettings = new ClanSettings(packetBuffer);
                            }
                            packetWriter.field1133 = null;
                            b = true;
                            break Label_16547;
                        }
                        else {
                            if (packetWriter.field1133 == ServerPacket.field2696) {
                                final int ra11 = Buffer.ra(packetBuffer, (byte)7);
                                final NPC npc4 = Client.npcs[packetBuffer.cl(-9549574)];
                                final int cl18 = packetBuffer.cl(548791468);
                                final int cx12 = packetBuffer.cx(-1357243832);
                                if (null != npc4) {
                                    npc4.cj(ra11, cl18, cx12 >> 16, cx12 & 0xFFFF, 1144191941);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.MESSAGE_CLANCHANNEL_SYSTEM) {
                                for (int n43 = 0; n43 < Varps.Varps_main.length; ++n43) {
                                    if (Varps.Varps_temp[n43] != Varps.Varps_main[n43]) {
                                        Varps.Varps_main[n43] = Varps.Varps_temp[n43];
                                        ye(n43);
                                        class7.changeGameOptions(n43, 2088303063);
                                        Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = n43;
                                    }
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2657 == packetWriter.field1133) {
                                final int cx13 = packetBuffer.cx(-1990126175);
                                int cl19 = packetBuffer.cl(-15014118);
                                if (cx13 < -70000) {
                                    cl19 += 32768;
                                }
                                Widget vmethod3393;
                                if (cx13 >= 0) {
                                    vmethod3393 = class165.vmethod3380(cx13, (byte)5);
                                }
                                else {
                                    vmethod3393 = null;
                                }
                                while (-1633313603 * packetBuffer.at < packetWriter.serverPacketLength * 889658999) {
                                    final int cd2 = packetBuffer.cd(-426902874);
                                    final int cl20 = packetBuffer.cl(-1689732117);
                                    int n44 = 0;
                                    if (cl20 != 0) {
                                        n44 = Buffer.ra(packetBuffer, (byte)7);
                                        if (255 == n44) {
                                            n44 = packetBuffer.cx(-1837588246);
                                        }
                                    }
                                    if (null != vmethod3393 && cd2 >= 0 && cd2 < vmethod3393.itemIds.length) {
                                        vmethod3393.itemIds[cd2] = cl20;
                                        vmethod3393.field3007[cd2] = n44;
                                    }
                                    class373.itemContainerSetItem(cl19, cd2, cl20 - 1, n44, (byte)96);
                                }
                                if (null != vmethod3393) {
                                    class144.invalidateWidget(vmethod3393, -1790487158);
                                }
                                ClientPacket.process((byte)2);
                                Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (cl19 & 0x7FFF);
                                id((Client.changedItemContainersCount - 565562765) * -710491461 - 1 & 0x1F);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.CLANCHANNEL_DELTA == packetWriter.field1133) {
                                class31.logOut(753503088);
                                packetWriter.field1133 = null;
                                b = false;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2642) {
                                b = nk(this, packetWriter, 1, 2099745711);
                                break Label_16547;
                            }
                            if (ServerPacket.field2689 == packetWriter.field1133) {
                                Client.isCameraLocked = true;
                                Client.field598 = false;
                                Client.field614 = true;
                                final int method78 = class425.method2262(packetBuffer.cm((byte)(-22)) & 0x7EB, -1975852814);
                                final int method79 = class18.method77(packetBuffer.cm((byte)(-8)) & 0x7EB, -1972013751);
                                final int cl21 = packetBuffer.cl(-529066593);
                                final int ra12 = Buffer.ra(packetBuffer, (byte)7);
                                Client.field604 = new class454(1897923909 * WorldMapSectionType.cameraPitch, method79, cl21, ra12);
                                Client.field617 = new class454(-1010818347 * class125.cameraYaw, method78, cl21, ra12);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2694 == packetWriter.field1133) {
                                ClientPacket.process((byte)2);
                                Client.weight = packetBuffer.cm((byte)(-7)) * 717110291;
                                Client.field433 = Client.cycleCntr * -235455367;
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.IF_SETOBJECT) {
                                EnumComposition.processZoneOperation(ZoneOperation.field2569, -302991134);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.TRADING_POST_RESULTS) {
                                FontName.field3968 = Buffer.ra(packetBuffer, (byte)7) * -522523151;
                                class9.field28 = packetBuffer.eq((byte)(-77)) * 671253333;
                                for (int n45 = 1555915261 * class9.field28; n45 < 8 + class9.field28 * 1555915261; ++n45) {
                                    for (int n46 = FontName.field3968 * -191732975; n46 < FontName.field3968 * -191732975 + 8; ++n46) {
                                        if (null != Client.groundItems[GameEngine.Client_plane * -1727408401][n45][n46]) {
                                            Client.groundItems[GameEngine.Client_plane * -1727408401][n45][n46] = null;
                                            class121.updateItemPile(n45, n46, 1912824087);
                                        }
                                    }
                                }
                                for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
                                    if (68300005 * pendingSpawn.x >= 1555915261 * class9.field28 && pendingSpawn.x * 68300005 < 8 + 1555915261 * class9.field28 && pendingSpawn.y * 800888185 >= -191732975 * FontName.field3968 && 800888185 * pendingSpawn.y < 8 + -191732975 * FontName.field3968 && pendingSpawn.plane * 593068225 == -1727408401 * GameEngine.Client_plane) {
                                        pendingSpawn.endCycle = 0;
                                    }
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2679 == packetWriter.field1133) {
                                final int db7 = packetBuffer.db((byte)32);
                                final int db8 = packetBuffer.db((byte)7);
                                final InterfaceParent interfaceParent2 = (InterfaceParent)Client.interfaceParents.at(db7);
                                final InterfaceParent interfaceParent3 = (InterfaceParent)Client.interfaceParents.at(db8);
                                if (interfaceParent3 != null) {
                                    class357.closeInterface(interfaceParent3, interfaceParent2 == null || interfaceParent3.group * 944864121 != interfaceParent2.group * 944864121, 999158409);
                                }
                                if (interfaceParent2 != null) {
                                    interfaceParent2.hw();
                                    Client.interfaceParents.put(interfaceParent2, db8);
                                }
                                final Widget vmethod3394 = class165.vmethod3380(db7, (byte)5);
                                if (vmethod3394 != null) {
                                    class144.invalidateWidget(vmethod3394, -924850867);
                                }
                                final Widget vmethod3395 = class165.vmethod3380(db8, (byte)5);
                                if (vmethod3395 != null) {
                                    class144.invalidateWidget(vmethod3395, -1981317778);
                                    WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[1713081171 * vmethod3395.id >>> 16], vmethod3395, true, (byte)82);
                                }
                                if (-1 != Client.rootInterface * -896157613) {
                                    class127.runIntfCloseListeners(Client.rootInterface * -896157613, 1, (byte)63);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2677) {
                                final World world = new World();
                                world.host = packetBuffer.cw((byte)0);
                                world.id = packetBuffer.cl(850825208) * -2098511939;
                                world.properties = packetBuffer.cx(-1104249900) * 1038974297;
                                class138.updateGameState(45, 552377169);
                                socket.close(1844163550);
                                FloorOverlayDefinition.changeWorld(world, 1003171316);
                                packetWriter.field1133 = null;
                                b = false;
                                break Label_16547;
                            }
                            if (ServerPacket.IF_OPENSUB == packetWriter.field1133) {
                                class146.updateNpcs(true, packetBuffer, -1232221421);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.REFLECTION_CHECK == packetWriter.field1133) {
                                EnumComposition.processZoneOperation(ZoneOperation.field2562, -302991134);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2660) {
                                final Widget vmethod3396 = class165.vmethod3380(packetBuffer.cx(-1721245302), (byte)5);
                                for (int n47 = 0; n47 < vmethod3396.itemIds.length; ++n47) {
                                    vmethod3396.itemIds[n47] = -1;
                                    vmethod3396.itemIds[n47] = 0;
                                }
                                class144.invalidateWidget(vmethod3396, -533569643);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2682 == packetWriter.field1133) {
                                Client.isCameraLocked = true;
                                Client.field598 = false;
                                Client.field614 = false;
                                FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 775826691;
                                MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                                ScriptFrame.field343 = packetBuffer.cl(-1764139467) * -213879109;
                                Archive.field3467 = Buffer.ra(packetBuffer, (byte)7) * -1982200011;
                                WorldMapElement.field1503 = Buffer.ra(packetBuffer, (byte)7) * -2025357;
                                if (942361787 * WorldMapElement.field1503 >= 100) {
                                    final int n48 = 64 + 332584320 * FontName.field3970;
                                    final int n49 = 64 + MilliClock.field1455 * -1804719232;
                                    final int n50 = class147.getTileHeight(n48, n49, GameEngine.Client_plane * -1727408401, (byte)(-14)) - ScriptFrame.field343 * 1496735347;
                                    final int n51 = n48 - -2100544359 * class36.cameraX;
                                    final int n52 = n50 - class174.cameraY * 1772923873;
                                    final int n53 = n49 - -91399205 * class297.cameraZ;
                                    WorldMapSectionType.cameraPitch = ((int)(Math.atan2(n52, (int)Math.sqrt(n51 * n51 + n53 * n53)) * 325.9490051269531) & 0x7FF) * 528729485;
                                    bc(-1);
                                    class125.cameraYaw = ((int)(Math.atan2(n51, n53) * -325.9490051269531) & 0x7FF) * -1545206147;
                                    if (1897923909 * WorldMapSectionType.cameraPitch < 128) {
                                        WorldMapSectionType.cameraPitch = -1042102656;
                                        bc(-1);
                                    }
                                    if (1897923909 * WorldMapSectionType.cameraPitch > 383) {
                                        WorldMapSectionType.cameraPitch = 639929843;
                                        bc(-1);
                                    }
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2586 == packetWriter.field1133) {
                                ScriptFrame.method343(packetBuffer.cw((byte)0), (byte)(-42));
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2697 == packetWriter.field1133) {
                                final int ra13 = Buffer.ra(packetBuffer, (byte)7);
                                final int cl22 = packetBuffer.cl(-720055362);
                                Player localPlayer2;
                                if (cl22 == -549033243 * Client.localPlayerIndex) {
                                    localPlayer2 = MusicPatchNode.localPlayer;
                                }
                                else {
                                    localPlayer2 = Client.players[cl22];
                                }
                                final int cl23 = packetBuffer.cl(-936480674);
                                final int cx14 = packetBuffer.cx(-1120033762);
                                if (localPlayer2 != null) {
                                    localPlayer2.cj(ra13, cl23, cx14 >> 16, cx14 & 0xFFFF, 484630619);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2615) {
                                EnumComposition.processZoneOperation(ZoneOperation.field2565, -302991134);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2593 == packetWriter.field1133) {
                                ClientPacket.process((byte)2);
                                final int dq3 = packetBuffer.dq(-2070899692);
                                final int dq4 = packetBuffer.dq(-2070899692);
                                final int en5 = packetBuffer.en(383378593);
                                Client.experience[dq3] = en5;
                                Client.currentLevels[dq3] = dq4;
                                Client.levels[dq3] = 1;
                                for (int n54 = 0; n54 < 98; ++n54) {
                                    if (en5 >= Skills.Skills_experienceTable[n54]) {
                                        Client.levels[dq3] = 2 + n54;
                                    }
                                }
                                Client.changedSkills[(Client.changedSkillsCount += 1059665337) * -744210295 - 1 & 0x1F] = dq3;
                                fk((Client.changedSkillsCount + 1059665337) * -744210295 - 1 & 0x1F);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.RESET_ANIMS) {
                                class127.loadRegions(true, packetWriter.packetBuffer, (byte)(-4));
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.UPDATE_INV_FULL == packetWriter.field1133) {
                                final int zc5 = Buffer.zc(packetBuffer, -1083724169);
                                final int or6 = Buffer.or(packetBuffer, -523126268);
                                final int vl2 = Buffer.vl(packetBuffer, 363073604);
                                final int cl24 = packetBuffer.cl(134788575);
                                final Widget vmethod3397 = class165.vmethod3380(vl2, (byte)5);
                                if (or6 != 797932055 * vmethod3397.modelAngleX || vmethod3397.modelAngleY * -480949115 != zc5 || cl24 != 942674363 * vmethod3397.modelZoom) {
                                    vmethod3397.modelAngleX = or6 * -142910041;
                                    vmethod3397.modelAngleY = -230241203 * zc5;
                                    vmethod3397.modelZoom = cl24 * -467727501;
                                    class144.invalidateWidget(vmethod3397, -1038538751);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.CAM_LOOKAT == packetWriter.field1133) {
                                final int ra14 = Buffer.ra(packetBuffer, (byte)7);
                                int n55 = ra14 >> 2;
                                final int n56 = ra14 & 0x3;
                                final int n57 = Client.field431[n55];
                                final int ej = packetBuffer.ej(1641573586);
                                final int n58 = ej >> 16;
                                final int n59 = ej >> 8 & 0xFF;
                                final int n60 = n58 + (ej >> 4 & 0x7);
                                final int n61 = (ej & 0x7) + n59;
                                final int da4 = packetBuffer.da(899499504);
                                if (n60 >= 0 && n61 >= 0 && n60 < 103 && n61 < 103) {
                                    if (n57 == 0) {
                                        final BoundaryObject method80 = class31.scene.method1252(GameEngine.Client_plane * -1727408401, n60, n61);
                                        if (null != method80) {
                                            final int entity_unpackID = InterfaceParent.Entity_unpackID(method80.tag * -4009183385476919801L);
                                            if (n55 == 2) {
                                                method80.renderable1 = new DynamicObject(entity_unpackID, 2, 4 + n56, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, method80.renderable1);
                                                method80.renderable2 = new DynamicObject(entity_unpackID, 2, n56 + 1 & 0x3, -1727408401 * GameEngine.Client_plane, n60, n61, da4, false, method80.renderable2);
                                            }
                                            else {
                                                method80.renderable1 = new DynamicObject(entity_unpackID, n55, n56, -1727408401 * GameEngine.Client_plane, n60, n61, da4, false, method80.renderable1);
                                            }
                                        }
                                    }
                                    else if (n57 == 1) {
                                        final WallDecoration method81 = class31.scene.method1253(GameEngine.Client_plane * -1727408401, n60, n61);
                                        if (method81 != null) {
                                            final int entity_unpackID2 = InterfaceParent.Entity_unpackID(method81.tag * -4691380879163567243L);
                                            if (n55 == 4 || n55 == 5) {
                                                method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n56, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, method81.renderable1);
                                            }
                                            else if (6 == n55) {
                                                method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + n56, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, method81.renderable1);
                                            }
                                            else if (7 == n55) {
                                                method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + (n56 + 2 & 0x3), -1727408401 * GameEngine.Client_plane, n60, n61, da4, false, method81.renderable1);
                                            }
                                            else if (8 == n55) {
                                                method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n56 + 4, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, method81.renderable1);
                                                method81.renderable2 = new DynamicObject(entity_unpackID2, 4, (n56 + 2 & 0x3) + 4, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, method81.renderable2);
                                            }
                                        }
                                    }
                                    else if (n57 == 2) {
                                        final GameObject gameObject = class31.scene.getGameObject(-1727408401 * GameEngine.Client_plane, n60, n61);
                                        if (n55 == 11) {
                                            n55 = 10;
                                        }
                                        if (null != gameObject) {
                                            gameObject.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(gameObject.tag * 5016412888503339625L), n55, n56, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, gameObject.renderable);
                                        }
                                    }
                                    else if (n57 == 3) {
                                        final FloorDecoration floorDecoration = class31.scene.getFloorDecoration(GameEngine.Client_plane * -1727408401, n60, n61);
                                        if (floorDecoration != null) {
                                            floorDecoration.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(floorDecoration.tag * 3423223696102332293L), 22, n56, GameEngine.Client_plane * -1727408401, n60, n61, da4, false, floorDecoration.renderable);
                                        }
                                    }
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2613) {
                                EnumComposition.processZoneOperation(ZoneOperation.field2566, -302991134);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.REBUILD_REGION == packetWriter.field1133) {
                                class244.method1392(Buffer.ra(packetBuffer, (byte)7), 1315268736);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.HEAT_MAP == packetWriter.field1133) {
                                if (Buffer.ra(packetBuffer, (byte)7) == 1) {
                                    class323.field3037 = (class96.clockNow(1116833410) - Buffer.ks(packetBuffer, (byte)1)) * 9023382677616235961L;
                                    class375.grandExchangeEvents = new GrandExchangeEvents(packetBuffer, true);
                                }
                                else {
                                    class375.grandExchangeEvents = null;
                                }
                                Client.field635 = Client.cycleCntr * -707539581;
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.UPDATE_RUNENERGY) {
                                Client.isCameraLocked = true;
                                Client.field598 = false;
                                Client.field614 = true;
                                FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 775826691;
                                MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                                ScriptFrame.field343 = packetBuffer.cl(-1128798179) * -213879109;
                                final int cl25 = packetBuffer.cl(-1044876584);
                                final int ra15 = Buffer.ra(packetBuffer, (byte)7);
                                final int n62 = 64 + 332584320 * FontName.field3970;
                                final int n63 = -1804719232 * MilliClock.field1455 + 64;
                                final int n64 = class147.getTileHeight(n62, n63, GameEngine.Client_plane * -1727408401, (byte)(-77)) - ScriptFrame.field343 * 1496735347;
                                final int n65 = n62 - -2100544359 * class36.cameraX;
                                final int n66 = n64 - class174.cameraY * 1772923873;
                                final int n67 = n63 - class297.cameraZ * -91399205;
                                final int method82 = class18.method77((int)(Math.atan2(n66, Math.sqrt(n67 * n67 + n65 * n65)) * 325.9490051269531) & 0x7FF, 961412559);
                                final int method83 = class425.method2262((int)(Math.atan2(n65, n67) * -325.9490051269531) & 0x7FF, -744009447);
                                Client.field604 = new class454(1897923909 * WorldMapSectionType.cameraPitch, method82, cl25, ra15);
                                Client.field617 = new class454(-1010818347 * class125.cameraYaw, method83, cl25, ra15);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.IF_SETTEXT) {
                                FloorUnderlayDefinition.privateChatMode = class399.method2128(Buffer.ra(packetBuffer, (byte)7), -108064052);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.GAMEFRAME_FULL) {
                                World.friendSystem.ignoreList.read(packetBuffer, 889658999 * packetWriter.serverPacketLength, -1460121478);
                                Login.FriendSystem_invalidateIgnoreds(-681433942);
                                Client.field557 = 1831095645 * Client.cycleCntr;
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2616) {
                                class146.updateNpcs(false, packetBuffer, -1232221421);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.IF_SETPOSITION == packetWriter.field1133) {
                                if (Players.varclan == null) {
                                    Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                                }
                                final class497 ac = MenuAction.HitSplatDefinition_cached.ac((Buffer)packetBuffer, 2049638438);
                                Players.varclan.field3820.vmethod8143(-52705447 * ac.field4105, ac.field4104, 606161244);
                                Client.field554[(Client.field555 -= 2007914853) * 2106773395 - 1 & 0x1F] = ac.field4105 * -52705447;
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2664) {
                                final byte dj = packetBuffer.dj(-1640834672);
                                final int cl26 = packetBuffer.cl(-1031513761);
                                if (Varps.Varps_main[cl26] != (Varps.Varps_temp[cl26] = dj)) {
                                    Varps.Varps_main[cl26] = dj;
                                    ye(cl26);
                                }
                                class7.changeGameOptions(cl26, -656329934);
                                Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = cl26;
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2594) {
                                final int or7 = Buffer.or(packetBuffer, -523126268);
                                User.method2164(or7, (short)19082);
                                Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (or7 & 0x7FFF);
                                id((Client.changedItemContainersCount - 565562765) * -710491461 - 1 & 0x1F);
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.UPDATE_INV_PARTIAL == packetWriter.field1133) {
                                final int zc6 = Buffer.zc(packetBuffer, 1377670908);
                                final Widget vmethod3398 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                                if (vmethod3398.modelType * -123768459 != 6 || vmethod3398.modelId * -168077555 != zc6) {
                                    vmethod3398.modelType = -1696954066;
                                    vmethod3398.modelId = 509431749 * zc6;
                                    class144.invalidateWidget(vmethod3398, -1222091962);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (packetWriter.field1133 == ServerPacket.field2607) {
                                final String cw6 = packetBuffer.cw((byte)0);
                                final long n68 = packetBuffer.cl(710225373);
                                final long n69 = packetBuffer.cr(179785750);
                                final PlayerType playerType2 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)9), Buffer.ra(packetBuffer, (byte)7), (short)173);
                                final long n70 = n69 + (n68 << 32);
                                boolean b7 = false;
                                for (int n71 = 0; n71 < 100; ++n71) {
                                    if (Client.field652[n71] == n70) {
                                        b7 = true;
                                        break;
                                    }
                                }
                                if (World.friendSystem.isIgnored(new Username(cw6, class70.loginType), -247791625)) {
                                    b7 = true;
                                }
                                if (!b7 && 0 == 43311027 * Client.field476) {
                                    Client.field652[1960529059 * Client.field588] = n70;
                                    Client.field588 = (1 + Client.field588 * 1960529059) % 100 * 1561052939;
                                    final String escapeBrackets2 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)105), (byte)(-55)));
                                    int n72;
                                    if (playerType2.isPrivileged) {
                                        n72 = 7;
                                    }
                                    else {
                                        n72 = 3;
                                    }
                                    if (2138745227 * playerType2.modIcon != -1) {
                                        UserComparator5.addGameMessage(n72, ArchiveDiskActionHandler.addImageTag(playerType2.modIcon * 2138745227, 700369183) + cw6, escapeBrackets2, -397121414);
                                    }
                                    else {
                                        UserComparator5.addGameMessage(n72, cw6, escapeBrackets2, -397121414);
                                    }
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2627 == packetWriter.field1133) {
                                final int zc7 = Buffer.zc(packetBuffer, 900882209);
                                final Widget vmethod3399 = class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5);
                                if (-123768459 * vmethod3399.modelType != 2 || zc7 != vmethod3399.modelId * -168077555) {
                                    vmethod3399.modelType = 866004410;
                                    vmethod3399.modelId = 509431749 * zc7;
                                    class144.invalidateWidget(vmethod3399, -658905792);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            if (ServerPacket.field2658 == packetWriter.field1133) {
                                Client.field560 = Client.cycleCntr * 1358928753;
                                final byte wu7 = Buffer.wu(packetBuffer, 435772489);
                                if (1 == 889658999 * packetWriter.serverPacketLength) {
                                    if (wu7 >= 0) {
                                        Client.currentClanChannels[wu7] = null;
                                        ly((int)wu7);
                                    }
                                    else {
                                        MouseHandler.guestClanChannel = null;
                                        ne(-1);
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (wu7 >= 0) {
                                    Client.currentClanChannels[wu7] = new ClanChannel(packetBuffer);
                                    ly((int)wu7);
                                }
                                else {
                                    MouseHandler.guestClanChannel = new ClanChannel(packetBuffer);
                                    ne(-1);
                                }
                                packetWriter.field1133 = null;
                                b = true;
                                break Label_16547;
                            }
                            else {
                                if (ServerPacket.field2671 == packetWriter.field1133) {
                                    for (int n73 = 0; n73 < VarpDefinition.field1475 * -774485467; ++n73) {
                                        if (null != GraphicsDefaults.decode(n73, -1728591446)) {
                                            Varps.Varps_temp[n73] = 0;
                                            Varps.Varps_main[n73] = 0;
                                            ye(n73);
                                        }
                                    }
                                    ClientPacket.process((byte)2);
                                    Client.changedVarpCount += 994771232;
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (packetWriter.field1133 == ServerPacket.field2667) {
                                    final InterfaceParent interfaceParent4 = (InterfaceParent)Client.interfaceParents.at(packetBuffer.cx(-1840012001));
                                    if (interfaceParent4 != null) {
                                        class357.closeInterface(interfaceParent4, true, 451769020);
                                    }
                                    if (Client.meslayerContinueWidget != null) {
                                        class144.invalidateWidget(Client.meslayerContinueWidget, -1346046072);
                                        Client.meslayerContinueWidget = null;
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (packetWriter.field1133 == ServerPacket.CHAT_FILTER_SETTINGS) {
                                    final int dq5 = packetBuffer.dq(-2070899692);
                                    String cw7 = packetBuffer.cw((byte)0);
                                    final int dq6 = packetBuffer.dq(-2070899692);
                                    if (dq5 >= 1 && dq5 <= 8) {
                                        if (cw7.equalsIgnoreCase(Strings.at)) {
                                            cw7 = null;
                                        }
                                        Client.playerMenuActions[dq5 - 1] = cw7;
                                        lg(dq5 - 1);
                                        Client.playerOptionsPriorities[dq5 - 1] = (dq6 == 0);
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (packetWriter.field1133 == ServerPacket.field2579) {
                                    UserComparator5.addGameMessage(6, packetBuffer.cw((byte)0), AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)14), (byte)(-70))), -397121414);
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2597 == packetWriter.field1133) {
                                    final String cw8 = packetBuffer.cw((byte)0);
                                    final long ks = Buffer.ks(packetBuffer, (byte)1);
                                    final long n74 = packetBuffer.cl(-954225362);
                                    final long n75 = packetBuffer.cr(-1769089437);
                                    final PlayerType playerType3 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)96), Buffer.ra(packetBuffer, (byte)7), (short)173);
                                    final long n76 = n75 + (n74 << 32);
                                    boolean b8 = false;
                                    for (int n77 = 0; n77 < 100; ++n77) {
                                        if (Client.field652[n77] == n76) {
                                            b8 = true;
                                            break;
                                        }
                                    }
                                    if (playerType3.isUser && World.friendSystem.isIgnored(new Username(cw8, class70.loginType), -446504338)) {
                                        b8 = true;
                                    }
                                    if (!b8 && Client.field476 * 43311027 == 0) {
                                        Client.field652[1960529059 * Client.field588] = n76;
                                        Client.field588 = 1561052939 * ((1 + 1960529059 * Client.field588) % 100);
                                        final String escapeBrackets3 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)127), (byte)(-123)));
                                        if (-1 != playerType3.modIcon * 2138745227) {
                                            class136.addChatMessage(9, ArchiveDiskActionHandler.addImageTag(playerType3.modIcon * 2138745227, 268055948) + cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)(-599));
                                        }
                                        else {
                                            class136.addChatMessage(9, cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)17835);
                                        }
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (packetWriter.field1133 == ServerPacket.field2685) {
                                    final int ra16 = Buffer.ra(packetBuffer, (byte)7);
                                    final int zc8 = Buffer.zc(packetBuffer, 1309351999);
                                    final int ej2 = packetBuffer.ej(1527899684);
                                    final int n78 = ej2 >> 16;
                                    final int n79 = ej2 >> 8 & 0xFF;
                                    final int n80 = n78 + (ej2 >> 4 & 0x7);
                                    final int n81 = (ej2 & 0x7) + n79;
                                    final int cl27 = packetBuffer.cl(-1701020308);
                                    if (n80 >= 0 && n81 >= 0 && n80 < 104 && n81 < 104) {
                                        final int n82 = 64 + n80 * 128;
                                        final int n83 = n81 * 128 + 64;
                                        Client.graphicsObjects.addFirst(new GraphicsObject(cl27, -1727408401 * GameEngine.Client_plane, n82, n83, class147.getTileHeight(n82, n83, GameEngine.Client_plane * -1727408401, (byte)(-116)) - ra16, zc8, Client.cycle * -1886224337));
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (packetWriter.field1133 == ServerPacket.VARCLAN) {
                                    Client.publicChatMode = packetBuffer.dq(-2070899692) * 1410976369;
                                    Client.tradeChatMode = Buffer.ra(packetBuffer, (byte)7) * -2053731769;
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2651 == packetWriter.field1133) {
                                    Client.rebootTimer = packetBuffer.da(593539611) * 860606706;
                                    Client.field433 = -235455367 * Client.cycleCntr;
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2598 == packetWriter.field1133) {
                                    Client.hintArrowType = Buffer.ra(packetBuffer, (byte)7) * -1378513753;
                                    if (1 == Client.hintArrowType * 633821975) {
                                        Client.hintArrowNpcIndex = packetBuffer.cl(-345173441) * -431692551;
                                    }
                                    if (Client.hintArrowType * 633821975 >= 2 && Client.hintArrowType * 633821975 <= 6) {
                                        if (633821975 * Client.hintArrowType == 2) {
                                            Client.hintArrowSubX = 2045745472;
                                            Client.hintArrowSubY = 349971264;
                                        }
                                        if (3 == Client.hintArrowType * 633821975) {
                                            Client.hintArrowSubX = 0;
                                            Client.hintArrowSubY = 349971264;
                                        }
                                        if (Client.hintArrowType * 633821975 == 4) {
                                            Client.hintArrowSubX = -203476352;
                                            Client.hintArrowSubY = 349971264;
                                        }
                                        if (5 == 633821975 * Client.hintArrowType) {
                                            Client.hintArrowSubX = 2045745472;
                                            Client.hintArrowSubY = 0;
                                        }
                                        if (6 == 633821975 * Client.hintArrowType) {
                                            Client.hintArrowSubX = 2045745472;
                                            Client.hintArrowSubY = 699942528;
                                        }
                                        Client.hintArrowType = 1537939790;
                                        Client.hintArrowX = packetBuffer.cl(-581172257) * -501846925;
                                        Client.hintArrowY = packetBuffer.cl(-82536012) * 1886247917;
                                        Client.hintArrowHeight = Buffer.ra(packetBuffer, (byte)7) * 233713123;
                                    }
                                    if (10 == Client.hintArrowType * 633821975) {
                                        Client.hintArrowPlayerIndex = packetBuffer.cl(-525800591) * -1034603829;
                                    }
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2610 == packetWriter.field1133) {
                                    final int df3 = packetBuffer.df(-2061479858);
                                    final int da5 = packetBuffer.da(875053707);
                                    final int vl3 = Buffer.vl(packetBuffer, 363073604);
                                    final InterfaceParent interfaceParent5 = (InterfaceParent)Client.interfaceParents.at(vl3);
                                    if (null != interfaceParent5) {
                                        class357.closeInterface(interfaceParent5, da5 != 944864121 * interfaceParent5.group, -468684917);
                                    }
                                    AttackOption.ifOpenSub(vl3, da5, df3, -1618920051);
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2611 == packetWriter.field1133) {
                                    final int cx15 = packetBuffer.cx(-1510462923);
                                    int cl28 = packetBuffer.cl(-514639578);
                                    if (cx15 < -70000) {
                                        cl28 += 32768;
                                    }
                                    Widget vmethod3400;
                                    if (cx15 >= 0) {
                                        vmethod3400 = class165.vmethod3380(cx15, (byte)5);
                                    }
                                    else {
                                        vmethod3400 = null;
                                    }
                                    if (vmethod3400 != null) {
                                        for (int n84 = 0; n84 < vmethod3400.itemIds.length; ++n84) {
                                            vmethod3400.itemIds[n84] = 0;
                                            vmethod3400.field3007[n84] = 0;
                                        }
                                    }
                                    WorldMapRegion.initWorldMapData0(cl28, -28927295);
                                    for (int cl29 = packetBuffer.cl(-999551438), n85 = 0; n85 < cl29; ++n85) {
                                        final int da6 = packetBuffer.da(1894655884);
                                        int n86 = packetBuffer.dq(-2070899692);
                                        if (n86 == 255) {
                                            n86 = Buffer.vl(packetBuffer, 363073604);
                                        }
                                        if (null != vmethod3400 && n85 < vmethod3400.itemIds.length) {
                                            vmethod3400.itemIds[n85] = da6;
                                            vmethod3400.field3007[n85] = n86;
                                        }
                                        class373.itemContainerSetItem(cl28, n85, da6 - 1, n86, (byte)75);
                                    }
                                    if (vmethod3400 != null) {
                                        class144.invalidateWidget(vmethod3400, -1057992265);
                                    }
                                    ClientPacket.process((byte)2);
                                    Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (cl28 & 0x7FFF);
                                    id((Client.changedItemContainersCount - 565562765) * -710491461 - 1 & 0x1F);
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                if (ServerPacket.field2674 == packetWriter.field1133) {
                                    EnumComposition.processZoneOperation(ZoneOperation.field2563, -302991134);
                                    packetWriter.field1133 = null;
                                    b = true;
                                    break Label_16547;
                                }
                                class387.RunException_sendStackTrace("" + ((null != packetWriter.field1133) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((null != packetWriter.field1138) ? (1287795301 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (1287795301 * packetWriter.field1139.length) : -1) + class96.an + packetWriter.serverPacketLength * 889658999, null, (byte)8);
                                class31.logOut(-1155109789);
                            }
                        }
                    }
                    catch (IOException ex2) {
                        class349.method1918(709882847);
                    }
                    catch (Exception ex) {
                        String str = "" + ((packetWriter.field1133 != null) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((packetWriter.field1138 != null) ? (1287795301 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (1287795301 * packetWriter.field1139.length) : -1) + class96.an + 889658999 * packetWriter.serverPacketLength + class96.an + (MusicPatchNode.localPlayer.cf[0] + -1232093375 * WorldMapData_0.baseX) + class96.an + (GameObject.baseY * 827352769 + MusicPatchNode.localPlayer.dy[0]) + class96.an;
                        for (int n87 = 0; n87 < 889658999 * packetWriter.serverPacketLength && n87 < 50; ++n87) {
                            str = str + packetBuffer.al[n87] + class96.an;
                        }
                        class387.RunException_sendStackTrace(str, ex, (byte)8);
                        class31.logOut(-1613801130);
                    }
                    b = true;
                }
            }
            final boolean b9 = b;
            if (!b9 || n2 == 99) {
                final rl2 yn = Client.yn;
                if (yn != null) {
                    assert Client.gk == null;
                    assert Client.uo == null;
                    Client.yn = null;
                    assert ScriptFrame.client.kh() == 25;
                    ie(yn);
                    assert ScriptFrame.client.kh() == 30;
                }
            }
            return b9;
        }
        assert Client.yn == null;
        return false;
    }
    
    @Override
    protected final void resizeGame(final byte b) {
        try {
            Client.field581 = (class96.clockNow(276585591) + 500L) * -1343645632282639199L;
            this.resizeJS(-1447416501);
            if (-1 != Client.rootInterface * -896157613) {
                hp(this, true, -1010946495);
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.am(" + ')');
        }
    }
    
    public void resizeGame(final boolean isLowDetail) {
        Client.isLowDetail = isLowDetail;
    }
    
    public MenuAction pm() {
        return new MenuAction();
    }
    
    public long[] pm() {
        return ViewportMouse.ViewportMouse_entityTags;
    }
    
    static final void ut(final boolean b) {
        for (int i = 0; i < 265474485 * Client.npcCount; ++i) {
            final NPC npc = Client.npcs[Client.npcIndices[i]];
            if (npc != null && npc.isVisible(1666539507) && b == npc.definition.isVisible && npc.definition.transformIsVisible(41635170)) {
                final int n = npc.br * 1144428983 >> 7;
                final int n2 = npc.ep * -411750205 >> 7;
                if (n >= 0 && n < 104 && n2 >= 0 && n2 < 104) {
                    if (1 == npc.bt * 353040509 && 0x40 == (npc.br * 1144428983 & 0x7F) && 0x40 == (-411750205 * npc.ep & 0x7F)) {
                        if (Client.viewportDrawCount * 2041464667 == Client.tileLastDrawnActor[n][n2]) {
                            continue;
                        }
                        Client.tileLastDrawnActor[n][n2] = 2041464667 * Client.viewportDrawCount;
                    }
                    final long calculateTag = FaceNormal.calculateTag(0, 0, 1, !npc.definition.isInteractable, Client.npcIndices[i], 1317460578);
                    npc.cx = -14183397 * Client.cycle;
                    class31.scene.drawEntity(GameEngine.Client_plane * -1727408401, 1144428983 * npc.br, -411750205 * npc.ep, class147.getTileHeight(1119756096 * npc.bt - 64 + 1144428983 * npc.br, 1119756096 * npc.bt - 64 + npc.ep * -411750205, -1727408401 * GameEngine.Client_plane, (byte)(-11)), 60 + (1119756096 * npc.bt - 64), npc, npc.dx * -1703696531, calculateTag, npc.an);
                }
            }
        }
    }
    
    public static void ut(final int n) {
        if (Client.id != null && Client.id.getWidth() > 383) {
            ScriptFrame.client.fb((net.runelite.api.SpritePixels)ScriptFrame.client.cs(new int[] { 0 }, 1, 1));
        }
    }
    
    public static void mm(final Actor actor, final int n) {
        Client.jd = null;
    }
    
    static final int va(final int n, final int n2, final int n3) {
        final int n4 = n >> 7;
        final int n5 = n2 >> 7;
        if (n4 >= 0 && n5 >= 0 && n4 <= 103 && n5 <= 103) {
            int n6 = n3;
            if (n6 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n4][n5] & 0x2)) {
                ++n6;
            }
            final int n7 = n & 0x7F;
            final int n8 = n2 & 0x7F;
            return n8 * (n7 * Tiles.Tiles_heights[n6][n4 + 1][n5 + 1] + Tiles.Tiles_heights[n6][n4][1 + n5] * (128 - n7) >> 7) + (n7 * Tiles.Tiles_heights[n6][1 + n4][n5] + Tiles.Tiles_heights[n6][n4][n5] * (128 - n7) >> 7) * (128 - n8) >> 7;
        }
        return 0;
    }
    
    public SpritePixels[] df() {
        return Players.mapMarkerSprites;
    }
    
    static final void rg() {
        if (GraphicsObject.ClanChat_inClanChat) {
            if (UserComparator5.friendsChat != null) {
                UserList.ge(UserComparator5.friendsChat, (byte)35);
            }
            for (int i = 0; i < -2010934433 * Players.Players_count; ++i) {
                Client.players[Players.Players_indices[i]].clearIsInFriendsChat(1898293273);
            }
            GraphicsObject.ClanChat_inClanChat = false;
        }
    }
    
    boolean method385(final PacketWriter packetWriter, final int n, final int n2) {
        try {
            if (0 == packetWriter.pendingWrites * 889658999) {
                if (n2 <= -1754346109) {
                    throw new IllegalStateException();
                }
                UserComparator5.friendsChat = null;
                sx(-1);
            }
            else {
                if (null == UserComparator5.friendsChat) {
                    UserComparator5.friendsChat = new FriendsChat(class70.loginType, ScriptFrame.client);
                    doCycleLoggedIn(-1);
                }
                UserComparator5.friendsChat.method2142(packetWriter.packetBuffer, n, (byte)1);
            }
            Client.hintArrowSubX = Client.field433 * 235003969;
            GraphicsObject.ClanChat_inClanChat = true;
            packetWriter.field1138 = null;
            return true;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.jp(" + ')');
        }
    }
    
    public void lk(final int scene_cameraYawCosine) {
        Scene.Scene_cameraYawCosine = scene_cameraYawCosine;
    }
    
    public byte[][][] no() {
        return Tiles.Tiles_shapes;
    }
    
    public ObjectComposition no(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return class144.vmethod3248(n, (short)2415);
    }
    
    public static void nn() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2538, Client.packetWriter.isaacCipher, (short)(-21)), 414135591);
    }
    
    public static void nn(final int n) {
        final DraggingWidgetChanged draggingWidgetChanged = new DraggingWidgetChanged();
        draggingWidgetChanged.setDraggingWidget(ScriptFrame.client.isDraggingWidget());
        ScriptFrame.client.getCallbacks().post((Object)draggingWidgetChanged);
    }
    
    static String zh(String string, final Widget widget) {
        if (string.indexOf("%") != -1) {
            for (int i = 1; i <= 5; ++i) {
                Label_0116: {
                    break Label_0116;
                    int index = 0;
                    do {
                        final String substring = string.substring(0, index);
                        final int method478 = ArchiveLoader.method478(widget, i - 1, 1696113134);
                        String string2;
                        if (method478 < 1618490166) {
                            string2 = Integer.toString(method478);
                        }
                        else {
                            string2 = "*";
                        }
                        string = substring + string2 + string.substring(index + 2);
                        index = string.indexOf("%" + i);
                    } while (-1 != index);
                }
            }
        }
        return string;
    }
    
    public SoundEffect zo(final Archive archive, final int n, final int n2) {
        return SoundEffect.readSoundEffect(archive, n, n2);
    }
    
    static final void zo(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            if (-1 != n8) {
                Client.field573[n8] = true;
            }
            else {
                for (int i = 0; i < 1577948625; ++i) {
                    Client.field573[i] = true;
                }
            }
            return;
        }
        WorldMapSection2.field2292 = null;
        class11.drawInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, n8, -465475629);
        if (null != WorldMapSection2.field2292) {
            class11.drawInterface(WorldMapSection2.field2292, -1412584499, n2, n3, n4, n5, 1160585409 * class230.field2130, class101.field1082 * -2041029009, n8, -465475629);
            WorldMapSection2.field2292 = null;
        }
    }
    
    public ScriptEvent rx() {
        return new ScriptEvent();
    }
    
    final void rx() {
        if (Client.rebootTimer * -1496573241 > 1) {
            Client.rebootTimer -= 1317177079;
        }
        if (Client.logoutTimer * 1705142349 > 0) {
            Client.logoutTimer += 100200315;
        }
        if (Client.hadNetworkError) {
            Client.hadNetworkError = false;
            class349.method1918(709882847);
            return;
        }
        if (!Client.isMenuOpen) {
            class156.addCancelMenuEntry(-742935767);
        }
        for (int n = 0; n < 100 && this.method391(Client.packetWriter, -2068912564); ++n) {}
        if (30 != -1275976559 * Client.gameState) {
            return;
        }
        while (null != class36.reflectionChecks.up()) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2549, Client.packetWriter.isaacCipher, (short)(-30351));
            packetBufferNode.packetBuffer.bf(0, (byte)115);
            final int n2 = packetBufferNode.packetBuffer.at * -1633313603;
            class432.vmethod7769(packetBufferNode.packetBuffer, (byte)(-36));
            packetBufferNode.packetBuffer.cu(-1633313603 * packetBufferNode.packetBuffer.at - n2, 1108049741);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (Client.timer.field3670) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2552, Client.packetWriter.isaacCipher, (short)(-9396));
            packetBufferNode2.packetBuffer.bf(0, (byte)125);
            final int n3 = -1633313603 * packetBufferNode2.packetBuffer.at;
            Client.timer.write(packetBufferNode2.packetBuffer, 192004678);
            packetBufferNode2.packetBuffer.cu(-1633313603 * packetBufferNode2.packetBuffer.at - n3, -1844397054);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
            Timer.ct(Client.timer, (byte)40);
        }
        synchronized (UserComparator6.mouseRecorder.lock) {
            if (Client.lockMouseRecorder) {
                if (0 != -1222491879 * MouseHandler.MouseHandler_lastButton || 535437747 * UserComparator6.mouseRecorder.index >= 40) {
                    PacketBufferNode packetBufferNode3 = null;
                    int n4 = 0;
                    int n5 = 0;
                    int n6 = 0;
                    int n7 = 0;
                    for (int n8 = 0; n8 < 535437747 * UserComparator6.mouseRecorder.index && (packetBufferNode3 == null || -1633313603 * packetBufferNode3.packetBuffer.at - n4 < 246); ++n8) {
                        n5 = n8;
                        int n9 = UserComparator6.mouseRecorder.ys[n8];
                        if (n9 < -1) {
                            n9 = -1;
                        }
                        else if (n9 > 65534) {
                            n9 = 65534;
                        }
                        int n10 = UserComparator6.mouseRecorder.xs[n8];
                        if (n10 < -1) {
                            n10 = -1;
                        }
                        else if (n10 > 65534) {
                            n10 = 65534;
                        }
                        if (Client.lastMouseRecordX * -751176573 != n10 || Client.lastMouseRecordY * -2076298705 != n9) {
                            if (packetBufferNode3 == null) {
                                packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2559, Client.packetWriter.isaacCipher, (short)(-5651));
                                packetBufferNode3.packetBuffer.bf(0, (byte)103);
                                n4 = packetBufferNode3.packetBuffer.at * -1633313603;
                                final PacketBuffer packetBuffer = packetBufferNode3.packetBuffer;
                                packetBuffer.at += 1262255402;
                                n6 = 0;
                                n7 = 0;
                            }
                            int n11;
                            int n12;
                            int n13;
                            if (-1L != Client.lastMouseRecordTime * 8511124946921102523L) {
                                n11 = n10 - -751176573 * Client.lastMouseRecordX;
                                n12 = n9 - -2076298705 * Client.lastMouseRecordY;
                                n13 = (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) / 20L);
                                n6 += (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) % 20L);
                            }
                            else {
                                n11 = n10;
                                n12 = n9;
                                n13 = Integer.MAX_VALUE;
                            }
                            Client.lastMouseRecordX = -791348693 * n10;
                            Client.lastMouseRecordY = 824333519 * n9;
                            if (n13 < 8 && n11 >= -32 && n11 <= 31 && n12 >= -32 && n12 <= 31) {
                                n11 += 32;
                                n12 += 32;
                                packetBufferNode3.packetBuffer.cq((n13 << 12) + (n11 << 6) + n12, (byte)(-65));
                            }
                            else if (n13 < 32 && n11 >= -128 && n11 <= 127 && n12 >= -128 && n12 <= 127) {
                                n11 += 128;
                                n12 += 128;
                                packetBufferNode3.packetBuffer.bf(n13 + 128, (byte)54);
                                packetBufferNode3.packetBuffer.cq((n11 << 8) + n12, (byte)32);
                            }
                            else if (n13 < 32) {
                                packetBufferNode3.packetBuffer.bf(n13 + 192, (byte)58);
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            else {
                                packetBufferNode3.packetBuffer.cq((n13 & 0x1FFF) + 57344, (byte)(-30));
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            ++n7;
                            Client.lastMouseRecordTime = 2560228884295272563L * UserComparator6.mouseRecorder.millis[n8];
                        }
                    }
                    if (null != packetBufferNode3) {
                        packetBufferNode3.packetBuffer.cu(packetBufferNode3.packetBuffer.at * -1633313603 - n4, -1736470854);
                        final int n14 = packetBufferNode3.packetBuffer.at * -1633313603;
                        packetBufferNode3.packetBuffer.at = -1516355947 * n4;
                        packetBufferNode3.packetBuffer.bf(n6 / n7, (byte)20);
                        packetBufferNode3.packetBuffer.bf(n6 % n7, (byte)75);
                        packetBufferNode3.packetBuffer.at = -1516355947 * n14;
                        Client.packetWriter.addNode(packetBufferNode3, 414135591);
                    }
                    if (n5 >= UserComparator6.mouseRecorder.index * 535437747) {
                        UserComparator6.mouseRecorder.index = 0;
                    }
                    else {
                        final MouseRecorder mouseRecorder = UserComparator6.mouseRecorder;
                        mouseRecorder.index -= -1762036357 * n5;
                        System.arraycopy(UserComparator6.mouseRecorder.xs, n5, UserComparator6.mouseRecorder.xs, 0, UserComparator6.mouseRecorder.index * 535437747);
                        System.arraycopy(UserComparator6.mouseRecorder.ys, n5, UserComparator6.mouseRecorder.ys, 0, 535437747 * UserComparator6.mouseRecorder.index);
                        System.arraycopy(UserComparator6.mouseRecorder.millis, n5, UserComparator6.mouseRecorder.millis, 0, UserComparator6.mouseRecorder.index * 535437747);
                    }
                }
            }
            else {
                UserComparator6.mouseRecorder.index = 0;
            }
        }
        if (1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && 4 == MouseHandler.MouseHandler_lastButton * -1222491879) || MouseHandler.MouseHandler_lastButton * -1222491879 == 2) {
            long n15 = MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L - 2243792022961482123L * Client.mouseLastLastPressedTimeMillis;
            if (n15 > 32767L) {
                n15 = 32767L;
            }
            Client.mouseLastLastPressedTimeMillis = 5332065808650620587L * MouseHandler.MouseHandler_lastPressedTimeMillis;
            int n16 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
            if (n16 < 0) {
                n16 = 0;
            }
            else if (n16 > 1658005443 * class262.canvasHeight) {
                n16 = class262.canvasHeight * 1658005443;
            }
            int n17 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            if (n17 < 0) {
                n17 = 0;
            }
            else if (n17 > -1687260435 * Client.aj) {
                n17 = -1687260435 * Client.aj;
            }
            final int n18 = (int)n15;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.field2477, Client.packetWriter.isaacCipher, (short)(-21913));
            packetBufferNode4.packetBuffer.cq(((2 == MouseHandler.MouseHandler_lastButton * -1222491879) ? 1 : 0) + (n18 << 1), (byte)(-58));
            packetBufferNode4.packetBuffer.cq(n17, (byte)80);
            packetBufferNode4.packetBuffer.cq(n16, (byte)(-87));
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (Client.keyHandlerInstance.pressedKeysCount * 1888573011 > 0) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2469, Client.packetWriter.isaacCipher, (short)(-13039));
            packetBufferNode5.packetBuffer.cq(0, (byte)87);
            final int n19 = -1633313603 * packetBufferNode5.packetBuffer.at;
            final long clockNow = class96.clockNow(671407650);
            for (int i = 0; i < 1888573011 * Client.keyHandlerInstance.pressedKeysCount; ++i) {
                long n20 = clockNow - 8736327498043665535L * Client.timeOfPreviousKeyPress;
                if (n20 > 16777215L) {
                    n20 = 16777215L;
                }
                Client.timeOfPreviousKeyPress = clockNow * 4061967902176514943L;
                packetBufferNode5.packetBuffer.ez((int)n20, -2120527803);
                packetBufferNode5.packetBuffer.bf(Client.keyHandlerInstance.field1856[i], (byte)119);
            }
            packetBufferNode5.packetBuffer.ca(packetBufferNode5.packetBuffer.at * -1633313603 - n19, -845044470);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (Client.packetIndicator * -1504372859 > 0) {
            Client.packetIndicator -= 1691830605;
        }
        if (Client.keyHandlerInstance.getKeyPressed(96, -1688100542) || Client.keyHandlerInstance.getKeyPressed(97, -115613372) || Client.keyHandlerInstance.getKeyPressed(98, -657029111) || Client.keyHandlerInstance.getKeyPressed(99, -43417270)) {
            Client.emitPackets = true;
        }
        if (Client.emitPackets && Client.packetIndicator * -1504372859 <= 0) {
            Client.packetIndicator = -523126268;
            Client.emitPackets = false;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2541, Client.packetWriter.isaacCipher, (short)(-27746));
            packetBufferNode6.packetBuffer.cq(Client.camAngleY * 704283033, (byte)(-101));
            packetBufferNode6.packetBuffer.cq(-954734641 * Client.camAngleX, (byte)27);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (AbstractByteArrayCopier.hasFocus && !Client.hadFocus) {
            Client.hadFocus = true;
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-4684));
            packetBufferNode7.packetBuffer.bf(1, (byte)67);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (!AbstractByteArrayCopier.hasFocus && Client.hadFocus) {
            Client.hadFocus = false;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-29564));
            packetBufferNode8.packetBuffer.bf(0, (byte)45);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (null != class126.worldMap) {
            class126.worldMap.ft(805177122);
        }
        Coord.method1686(-400215695);
        WorldMapElement.method988((byte)1);
        UserComparator8.method689((byte)(-25));
        if (30 != Client.gameState * -1275976559) {
            return;
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn.endCycle * 1457211081 > 0) {
                final PendingSpawn pendingSpawn2 = pendingSpawn;
                pendingSpawn2.endCycle -= 376812409;
            }
            if (0 == pendingSpawn.endCycle * 1457211081) {
                if (pendingSpawn.objectId * 637177597 < 0 || class195.method1053(637177597 * pendingSpawn.objectId, pendingSpawn.field922 * 1599541283, 1874887941)) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, 68300005 * pendingSpawn.x, 800888185 * pendingSpawn.y, pendingSpawn.objectId * 637177597, -1665966001 * pendingSpawn.field927, pendingSpawn.field922 * 1599541283, pendingSpawn.field931 * 1699404385, -2132894967);
                    pendingSpawn.hw();
                }
            }
            else {
                if (-536117851 * pendingSpawn.startCycle > 0) {
                    final PendingSpawn pendingSpawn3 = pendingSpawn;
                    pendingSpawn3.startCycle -= 237969965;
                }
                if (-536117851 * pendingSpawn.startCycle == 0 && 68300005 * pendingSpawn.x >= 1 && 800888185 * pendingSpawn.y >= 1 && pendingSpawn.x * 68300005 <= 102 && 800888185 * pendingSpawn.y <= 102 && (pendingSpawn.id * 552715177 < 0 || class195.method1053(pendingSpawn.id * 552715177, pendingSpawn.objectType * -1966402261, 1009513503))) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, pendingSpawn.x * 68300005, pendingSpawn.y * 800888185, 552715177 * pendingSpawn.id, 120493739 * pendingSpawn.rotation, pendingSpawn.objectType * -1966402261, 1699404385 * pendingSpawn.field931, -2131993711);
                    pendingSpawn.startCycle = -237969965;
                    if (pendingSpawn.objectId * 637177597 == 552715177 * pendingSpawn.id && -1 == pendingSpawn.objectId * 637177597) {
                        pendingSpawn.hw();
                    }
                    else if (637177597 * pendingSpawn.objectId == pendingSpawn.id * 552715177 && -1665966001 * pendingSpawn.field927 == pendingSpawn.rotation * 120493739 && -1966402261 * pendingSpawn.objectType == pendingSpawn.field922 * 1599541283) {
                        pendingSpawn.hw();
                    }
                }
            }
        }
        for (int j = 0; j < Client.soundEffectCount * -297150195; ++j) {
            final int[] queuedSoundEffectDelays = Client.queuedSoundEffectDelays;
            final int n21 = j;
            --queuedSoundEffectDelays[n21];
            if (Client.queuedSoundEffectDelays[j] < -10) {
                Client.soundEffectCount -= 831233477;
                for (int k = j; k < Client.soundEffectCount * -297150195; ++k) {
                    Client.soundEffectIds[k] = Client.soundEffectIds[1 + k];
                    Client.soundEffects[k] = Client.soundEffects[k + 1];
                    Client.queuedSoundEffectLoops[k] = Client.queuedSoundEffectLoops[1 + k];
                    Client.queuedSoundEffectDelays[k] = Client.queuedSoundEffectDelays[k + 1];
                    Client.soundLocations[k] = Client.soundLocations[k + 1];
                }
                --j;
            }
            else {
                SoundEffect soundEffect = Client.soundEffects[j];
                if (null == soundEffect) {
                    final SoundEffect soundEffect2 = null;
                    soundEffect = SoundEffect.readSoundEffect(class426.field3811, Client.soundEffectIds[j], 0);
                    if (soundEffect == null) {
                        continue;
                    }
                    final int[] queuedSoundEffectDelays2 = Client.queuedSoundEffectDelays;
                    final int n22 = j;
                    queuedSoundEffectDelays2[n22] += soundEffect.calculateDelay();
                    Client.soundEffects[j] = soundEffect;
                }
                if (Client.queuedSoundEffectDelays[j] < 0) {
                    int setUsernameToRemember;
                    if (Client.soundLocations[j] != 0) {
                        final int n23 = (Client.soundLocations[j] & 0xFF) * 128;
                        int n24 = 128 * (Client.soundLocations[j] >> 16 & 0xFF) + 64 - MusicPatchNode.localPlayer.br * 1144428983;
                        if (n24 < 0) {
                            n24 = -n24;
                        }
                        int n25 = 64 + (Client.soundLocations[j] >> 8 & 0xFF) * 128 - -411750205 * MusicPatchNode.localPlayer.ep;
                        if (n25 < 0) {
                            n25 = -n25;
                        }
                        int n26 = n24 + n25 - 128;
                        if (n26 > n23) {
                            Client.queuedSoundEffectDelays[j] = -100;
                            continue;
                        }
                        if (n26 < 0) {
                            n26 = 0;
                        }
                        setUsernameToRemember = (n23 - n26) * class20.clientPreferences.method573(-1816072154) / n23;
                    }
                    else {
                        setUsernameToRemember = ClientPreferences.setUsernameToRemember(class20.clientPreferences, 1759802213);
                    }
                    if (setUsernameToRemember > 0) {
                        final RawPcmStream rawPcmStream = RawPcmStream.createRawPcmStream(soundEffect.toRawSound().resample(WorldMapSectionType.decimator), 100, setUsernameToRemember);
                        rawPcmStream.setNumLoops(Client.queuedSoundEffectLoops[j] - 1);
                        class130.pcmStreamMixer.addSubStream(rawPcmStream);
                    }
                    Client.queuedSoundEffectDelays[j] = -100;
                }
            }
        }
        if (Client.playingJingle && !class4.method8(-1818341837)) {
            if (ClientPreferences.xp(class20.clientPreferences, -1139329393) != 0 && -1 != Client.currentTrackGroupId * 1976903761) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, ClientPreferences.xp(class20.clientPreferences, 437136588), false, -1744973117);
            }
            Client.playingJingle = false;
        }
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.field1136 -= 18974871;
        if (997558489 * Client.packetWriter.field1136 > 750) {
            class349.method1918(709882847);
            return;
        }
        class207.method1162(-1470812896);
        EnumComposition.method1013(-1074260583);
        final int[] players_indices = Players.Players_indices;
        for (int l = 0; l < -2010934433 * Players.Players_count; ++l) {
            final Player player = Client.players[players_indices[l]];
            if (null != player && player.dt * -536830723 > 0) {
                final Player player2 = player;
                player2.dt -= 1655791701;
                if (player.dt * -536830723 == 0) {
                    player.bw = null;
                }
            }
        }
        for (int n27 = 0; n27 < 265474485 * Client.npcCount; ++n27) {
            final NPC npc = Client.npcs[Client.npcIndices[n27]];
            if (npc != null && -536830723 * npc.dt > 0) {
                final NPC npc2 = npc;
                npc2.dt -= 1655791701;
                if (npc.dt * -536830723 == 0) {
                    npc.bw = null;
                }
            }
        }
        Client.field432 -= 603147329;
        if (-1306273505 * Client.mouseCrossColor != 0) {
            Client.mouseCrossState += 2130385748;
            if (Client.mouseCrossState * 1513573489 >= 400) {
                Client.mouseCrossColor = 0;
            }
        }
        final Widget mousedOverWidgetIf1 = MidiPcmStream.mousedOverWidgetIf1;
        final Widget field1274 = class130.field1274;
        MidiPcmStream.mousedOverWidgetIf1 = null;
        class130.field1274 = null;
        Client.draggedOnWidget = null;
        Client.field622 = false;
        Client.field540 = false;
        Client.field355 = 0;
        while (class207.mt(Client.keyHandlerInstance, 1665032574) && Client.field355 * -1685179677 < 128) {
            if (324465533 * Client.staffModLevel >= 2 && Client.keyHandlerInstance.getKeyPressed(82, 367201562) && 66 == 546317845 * Client.keyHandlerInstance.field1867) {
                final StringBuilder sb = new StringBuilder();
                for (final Message message : Messages.Messages_hashTable) {
                    if (null != message.prefix && !message.prefix.isEmpty()) {
                        sb.append(message.prefix).append(':');
                    }
                    sb.append(message.sender).append('\n');
                }
                ScriptFrame.client.ao(sb.toString(), (byte)(-69));
            }
            else {
                if (Client.oculusOrbState * 986256295 == 1 && Client.keyHandlerInstance.field1866 > '\0') {
                    continue;
                }
                Client.field424[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1867 * 546317845;
                Client.field592[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1866;
                Client.field355 += 703505099;
            }
        }
        if (Client.staffModLevel * 324465533 >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -1766902595) && Client.keyHandlerInstance.getKeyPressed(81, -1726972160) && -121753353 * Client.mouseWheelRotation != 0) {
            int n28 = -1900490645 * MusicPatchNode.localPlayer.plane - Client.mouseWheelRotation * -121753353;
            if (n28 < 0) {
                n28 = 0;
            }
            else if (n28 > 3) {
                n28 = 3;
            }
            if (MusicPatchNode.localPlayer.plane * -1900490645 != n28) {
                final int n29 = WorldMapData_0.baseX * -1232093375 + MusicPatchNode.localPlayer.cf[0];
                final int n30 = 827352769 * GameObject.baseY + MusicPatchNode.localPlayer.dy[0];
                final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)288);
                packetBufferNode9.packetBuffer.dy(0, (byte)36);
                packetBufferNode9.packetBuffer.bu(n29, (byte)32);
                packetBufferNode9.packetBuffer.eb(n28, (byte)(-27));
                packetBufferNode9.packetBuffer.ds(n30, -1732931124);
                Client.packetWriter.addNode(packetBufferNode9, 414135591);
            }
            Client.mouseWheelRotation = 0;
        }
        if (1 == MouseHandler.MouseHandler_lastButton * -1222491879) {
            Client.field590.method1138((byte)1);
        }
        if (-896157613 * Client.rootInterface != -1) {
            ReflectionCheck.updateRootInterface(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, 1658005443 * class262.canvasHeight, 0, 0, -631543188);
        }
        Client.cycleCntr -= 1340429835;
        while (true) {
            final ScriptEvent scriptEvent = (ScriptEvent)Client.field567.removeLast();
            if (scriptEvent == null) {
                break;
            }
            final Widget dragTarget = scriptEvent.dragTarget;
            if (55577617 * dragTarget.childIndex >= 0) {
                final Widget vmethod3380 = class165.vmethod3380(dragTarget.parentId * 913615679, (byte)5);
                if (null == vmethod3380 || null == vmethod3380.children || dragTarget.childIndex * 55577617 >= vmethod3380.children.length) {
                    continue;
                }
                if (dragTarget != vmethod3380.children[dragTarget.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent, (byte)11);
        }
        while (true) {
            final ScriptEvent scriptEvent2 = (ScriptEvent)Client.field568.removeLast();
            if (scriptEvent2 == null) {
                break;
            }
            final Widget dragTarget2 = scriptEvent2.dragTarget;
            if (55577617 * dragTarget2.childIndex >= 0) {
                final Widget vmethod3381 = class165.vmethod3380(dragTarget2.parentId * 913615679, (byte)5);
                if (vmethod3381 == null || vmethod3381.children == null || 55577617 * dragTarget2.childIndex >= vmethod3381.children.length) {
                    continue;
                }
                if (dragTarget2 != vmethod3381.children[dragTarget2.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent2, (byte)(-10));
        }
        while (true) {
            final ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.removeLast();
            if (null == scriptEvent3) {
                break;
            }
            final Widget dragTarget3 = scriptEvent3.dragTarget;
            if (dragTarget3.childIndex * 55577617 >= 0) {
                final Widget vmethod3382 = class165.vmethod3380(dragTarget3.parentId * 913615679, (byte)5);
                if (vmethod3382 == null || vmethod3382.children == null || dragTarget3.childIndex * 55577617 >= vmethod3382.children.length) {
                    continue;
                }
                if (dragTarget3 != vmethod3382.children[dragTarget3.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent3, (byte)(-53));
        }
        while (true) {
            final class206 class206 = (class206)Client.field569.removeLast();
            if (class206 == null) {
                break;
            }
            FriendsList.method2138(class206, -1711602702);
        }
        this.menu((byte)26);
        class36.method198((byte)(-20));
        if (Client.clickedWidget != null) {
            this.method389((byte)(-57));
        }
        if (Scene.shouldSendWalk()) {
            final int scene_selectedX = Scene.Scene_selectedX;
            final int scene_selectedY = Scene.Scene_selectedY;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.field2523, Client.packetWriter.isaacCipher, (short)(-11599));
            packetBufferNode10.packetBuffer.bf(5, (byte)87);
            packetBufferNode10.packetBuffer.ds(GameObject.baseY * 827352769 + scene_selectedY, -1881545312);
            Buffer.ap(packetBufferNode10.packetBuffer, -1232093375 * WorldMapData_0.baseX + scene_selectedX, (byte)61);
            packetBufferNode10.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, 1087771502) ? (Client.keyHandlerInstance.getKeyPressed(81, 148346379) ? 2 : 1) : 0, -1817693839);
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
            Scene.method1264();
            Client.mouseCrossX = MouseHandler.MouseHandler_lastPressedX * -1884483333;
            Client.mouseCrossY = 2130738719 * MouseHandler.MouseHandler_lastPressedY;
            Client.mouseCrossColor = -1453825313;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * scene_selectedX;
            Client.destinationY = 875414437 * scene_selectedY;
        }
        if (mousedOverWidgetIf1 != MidiPcmStream.mousedOverWidgetIf1) {
            if (mousedOverWidgetIf1 != null) {
                class144.invalidateWidget(mousedOverWidgetIf1, -1443595946);
            }
            if (null != MidiPcmStream.mousedOverWidgetIf1) {
                class144.invalidateWidget(MidiPcmStream.mousedOverWidgetIf1, -1507601334);
            }
        }
        if (class130.field1274 != field1274 && 1239377975 * Client.field515 == 215597333 * Client.field514) {
            if (null != field1274) {
                class144.invalidateWidget(field1274, -1634871142);
            }
            if (class130.field1274 != null) {
                class144.invalidateWidget(class130.field1274, -626541551);
            }
        }
        if (null != class130.field1274) {
            if (215597333 * Client.field514 < 1239377975 * Client.field515) {
                Client.field514 -= 1411611075;
                if (Client.field514 * 215597333 == Client.field515 * 1239377975) {
                    class144.invalidateWidget(class130.field1274, -1698056047);
                }
            }
        }
        else if (Client.field514 * 215597333 > 0) {
            Client.field514 += 1411611075;
        }
        if (Client.oculusOrbState * 986256295 == 0) {
            final int n31 = 1144428983 * MusicPatchNode.localPlayer.br;
            final int n32 = MusicPatchNode.localPlayer.ep * -411750205;
            if (-1958669353 * class33.oculusOrbFocalPointX - n31 < -500 || class33.oculusOrbFocalPointX * -1958669353 - n31 > 500 || class144.oculusOrbFocalPointY * -365969735 - n32 < -500 || -365969735 * class144.oculusOrbFocalPointY - n32 > 500) {
                class33.oculusOrbFocalPointX = n31 * 1293848551;
                class144.oculusOrbFocalPointY = 892004233 * n32;
            }
            if (n31 != class33.oculusOrbFocalPointX * -1958669353) {
                class33.oculusOrbFocalPointX += 1293848551 * ((n31 - class33.oculusOrbFocalPointX * -1958669353) / 16);
            }
            if (class144.oculusOrbFocalPointY * -365969735 != n32) {
                class144.oculusOrbFocalPointY += 892004233 * ((n32 - class144.oculusOrbFocalPointY * -365969735) / 16);
            }
            final int n33 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
            final int n34 = class144.oculusOrbFocalPointY * -365969735 >> 7;
            final int tileHeight = class147.getTileHeight(class33.oculusOrbFocalPointX * -1958669353, -365969735 * class144.oculusOrbFocalPointY, -1727408401 * GameEngine.Client_plane, (byte)(-58));
            int n35 = 0;
            if (n33 > 3 && n34 > 3 && n33 < 100 && n34 < 100) {
                for (int n36 = n33 - 4; n36 <= n33 + 4; ++n36) {
                    for (int n37 = n34 - 4; n37 <= 4 + n34; ++n37) {
                        int n38 = -1727408401 * GameEngine.Client_plane;
                        if (n38 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n36][n37] & 0x2)) {
                            ++n38;
                        }
                        final int n39 = tileHeight - Tiles.Tiles_heights[n38][n36][n37];
                        if (n39 > n35) {
                            n35 = n39;
                        }
                    }
                }
            }
            int n40 = n35 * 192;
            if (n40 > 98048) {
                n40 = 98048;
            }
            if (n40 < 32768) {
                n40 = 32768;
            }
            if (n40 > 205350563 * Client.field456) {
                Client.field456 += (n40 - Client.field456 * 205350563) / 24 * 800423179;
            }
            else if (n40 < 205350563 * Client.field456) {
                Client.field456 += 800423179 * ((n40 - 205350563 * Client.field456) / 80);
            }
            class96.field1064 = (class147.getTileHeight(MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, -1727408401 * GameEngine.Client_plane, (byte)(-70)) - Client.camFollowHeight * 394960243) * -1138369095;
        }
        else if (1 == Client.oculusOrbState * 986256295) {
            class324.method1838(-847989433);
            int n41 = -1;
            if (Client.keyHandlerInstance.getKeyPressed(33, -1105522743)) {
                n41 = 0;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(49, -2088379484)) {
                n41 = 1024;
            }
            if (Client.keyHandlerInstance.getKeyPressed(48, 1013825425)) {
                if (n41 == 0) {
                    n41 = 1792;
                }
                else if (1024 == n41) {
                    n41 = 1280;
                }
                else {
                    n41 = 1536;
                }
            }
            else if (Client.keyHandlerInstance.getKeyPressed(50, 794321215)) {
                if (n41 == 0) {
                    n41 = 256;
                }
                else if (1024 == n41) {
                    n41 = 768;
                }
                else {
                    n41 = 512;
                }
            }
            int n42 = 0;
            if (Client.keyHandlerInstance.getKeyPressed(35, -1936871296)) {
                n42 = -1;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(51, -1498281556)) {
                n42 = 1;
            }
            int n43 = 0;
            if (n41 >= 0 || n42 != 0) {
                n43 = (Client.keyHandlerInstance.getKeyPressed(81, -2045326920) ? (Client.oculusOrbSlowedSpeed * 519949591) : (Client.oculusOrbNormalSpeed * 1101365113)) * 16;
                Client.field595 = n41 * -1988002169;
                Client.field398 = 818868517 * n42;
            }
            if (Client.field644 * -1277774705 < n43) {
                Client.field644 += n43 / 8 * 1574169199;
                if (Client.field644 * -1277774705 > n43) {
                    Client.field644 = n43 * 1574169199;
                }
            }
            else if (Client.field644 * -1277774705 > n43) {
                Client.field644 = 1384929543 * Client.field644 / 10 * 1574169199;
            }
            if (Client.field644 * -1277774705 > 0) {
                final int n44 = Client.field644 * -1277774705 / 16;
                if (1382999863 * Client.field595 >= 0) {
                    final int n45 = Client.field595 * 1382999863 - class125.cameraYaw * -1010818347 & 0x7FF;
                    final int n46 = Rasterizer3D.Rasterizer3D_sine[n45];
                    final int n47 = Rasterizer3D.Rasterizer3D_cosine[n45];
                    class33.oculusOrbFocalPointX += n44 * n46 / 65536 * 1293848551;
                    class144.oculusOrbFocalPointY += 892004233 * (n47 * n44 / 65536);
                }
                if (-168443219 * Client.field398 != 0) {
                    class96.field1064 += Client.field398 * -168443219 * n44 * -1138369095;
                    if (470489225 * class96.field1064 > 0) {
                        class96.field1064 = 0;
                    }
                }
            }
            else {
                Client.field595 = 1988002169;
                Client.field398 = -818868517;
            }
            if (Client.keyHandlerInstance.getKeyPressed(13, -462234060)) {
                Canvas.method92((byte)0);
            }
        }
        if (MouseHandler.MouseHandler_currentButton * 114417019 == 4 && class473.mouseCam) {
            final int n48 = MouseHandler.MouseHandler_y * -1224153235 - 332197605 * Client.mouseCamClickedY;
            Client.camAngleDX = 1932462086 * n48;
            Client.mouseCamClickedY = ((n48 == -1 || n48 == 1) ? (MouseHandler.MouseHandler_y * -1224153235) : ((332197605 * Client.mouseCamClickedY + -1224153235 * MouseHandler.MouseHandler_y) / 2)) * 1302863597;
            final int n49 = Client.mouseCamClickedX * -1491948821 - -2063363905 * MouseHandler.MouseHandler_x;
            Client.camAngleDY = n49 * -503524914;
            Client.mouseCamClickedX = ((-1 == n49 || n49 == 1) ? (MouseHandler.MouseHandler_x * -2063363905) : ((-1491948821 * Client.mouseCamClickedX + MouseHandler.MouseHandler_x * -2063363905) / 2)) * -837440061;
        }
        else {
            if (Client.keyHandlerInstance.getKeyPressed(96, -1587891655)) {
                Client.camAngleDY += 1895721191 * ((-24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else if (Client.keyHandlerInstance.getKeyPressed(97, 1120085512)) {
                Client.camAngleDY += 1895721191 * ((24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else {
                Client.camAngleDY = 1895721191 * (1977625303 * Client.camAngleDY / 2);
            }
            if (Client.keyHandlerInstance.getKeyPressed(98, -518567116)) {
                Client.camAngleDX += (12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(99, 1148345253)) {
                Client.camAngleDX += (-12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else {
                Client.camAngleDX = 1441154731 * Client.camAngleDX / 2 * -1181252605;
            }
            Client.mouseCamClickedY = MouseHandler.MouseHandler_y * 652543465;
            Client.mouseCamClickedX = 1278432381 * MouseHandler.MouseHandler_x;
        }
        Client.camAngleY = 642728617 * (Client.camAngleDY * 1977625303 / 2 + 704283033 * Client.camAngleY & 0x7FF);
        Client.camAngleX += -637026513 * (Client.camAngleDX * 1441154731 / 2);
        if (Client.camAngleX * -954734641 < 128) {
            Client.camAngleX = 64984960;
        }
        if (Client.camAngleX * -954734641 > 383) {
            Client.camAngleX = 831981393;
        }
        if (Client.field598) {
            class1.method5((byte)48);
        }
        else if (Client.isCameraLocked) {
            if (!Client.field541) {
                final int n50 = 64 + ObjTypeCustomisation.field1471 * 957080960;
                final int n51 = 958794368 * class123.field1209 + 64;
                class133.method777(n50, class147.getTileHeight(n50, n51, GameEngine.Client_plane * -1727408401, (byte)8) - class16.field54 * -887836823, n51, -825487565);
            }
            else if (null != Client.field535) {
                class36.cameraX = Client.field535.vmethod2321(2102201087) * -1682679895;
                class297.cameraZ = Client.field535.vmethod2319(2107399454) * 46344275;
                if (Client.field615) {
                    class174.cameraY = Client.field535.vmethod2320((byte)0) * -424093663;
                }
                else {
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, -91399205 * class297.cameraZ, GameEngine.Client_plane * -1727408401, (byte)(-86)) - Client.field535.vmethod2320((byte)0)) * -424093663;
                }
                Client.field535.aa(622681320);
            }
            if (!Client.field614) {
                final int n52 = FontName.field3970 * 332584320 + 64;
                final int n53 = -1804719232 * MilliClock.field1455 + 64;
                final int n54 = class147.getTileHeight(n52, n53, GameEngine.Client_plane * -1727408401, (byte)9) - ScriptFrame.field343 * 1496735347;
                final int n55 = n52 - -2100544359 * class36.cameraX;
                final int n56 = n54 - 1772923873 * class174.cameraY;
                final int n57 = n53 - -91399205 * class297.cameraZ;
                GraphicsObject.method433((int)(Math.atan2(n56, (int)Math.sqrt(n55 * n55 + n57 * n57)) * 325.9490051269531) & 0x7FF, (int)(Math.atan2(n55, n57) * -325.9490051269531) & 0x7FF, (byte)3);
            }
            else {
                if (null != Client.field604) {
                    WorldMapSectionType.cameraPitch = Client.field604.method2318(917274990) * 528729485;
                    WorldMapSectionType.cameraPitch = Math.min(Math.max(WorldMapSectionType.cameraPitch * 1897923909, 128), 383) * 528729485;
                    Client.field604.aa(-2028784286);
                }
                if (Client.field617 != null) {
                    class125.cameraYaw = (Client.field617.method2318(-1013825389) & 0x7FF) * -1545206147;
                    Client.field617.aa(325615881);
                }
            }
        }
        for (int n58 = 0; n58 < 5; ++n58) {
            final int[] cameraShakeCycle = Client.cameraShakeCycle;
            final int n59 = n58;
            ++cameraShakeCycle[n59];
        }
        class373.varcs.clearTransient(827311522);
        final int value = SecureRandomFuture.get(-655132116);
        final int idleCycles = Client.bq.getIdleCycles((byte)39);
        if (value > 15000 && idleCycles > 15000) {
            Client.logoutTimer = 719725026;
            MouseHandler.MouseHandler_idleCycles = 1393311740;
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.IF_BUTTON2, Client.packetWriter.isaacCipher, (short)(-26126)), 414135591);
        }
        World.friendSystem.processFriendUpdates(1673735823);
        for (int n60 = 0; n60 < Client.field649.size(); ++n60) {
            if (class20.method82((int)Client.field649.get(n60), 854271946) != 2) {
                Client.field649.remove(n60);
                --n60;
            }
        }
        final PacketWriter packetWriter2 = Client.packetWriter;
        packetWriter2.pendingWrites -= 1313905755;
        if (1383386157 * Client.packetWriter.pendingWrites > 50) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-8172)), 414135591);
        }
        try {
            PacketWriter.ok(Client.packetWriter, 421941662);
        }
        catch (IOException ex) {
            class349.method1918(709882847);
        }
    }
    
    public VarbitComposition rx(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        VarbitComposition varbitComposition = (VarbitComposition)VarbitComposition.VarbitDefinition_cached.get(n);
        if (varbitComposition == null) {
            ScriptFrame.client.ly(n);
            varbitComposition = (VarbitComposition)VarbitComposition.VarbitDefinition_cached.get(n);
        }
        if (varbitComposition.getIndex() == 0 && varbitComposition.getLeastSignificantBit() == 0 && varbitComposition.getMostSignificantBit() == 0) {
            return null;
        }
        return varbitComposition;
    }
    
    static final void qs(final int n) {
        class31.logOut(-1702373325);
        switch (n) {
            case 1: {
                class220.method1233((byte)28);
                break;
            }
            case 2: {
                UrlRequest.method680(-120265876);
                break;
            }
        }
    }
    
    public static boolean nk(final Client client, final PacketWriter packetWriter, final int n, final int n2) {
        if (client == null) {
            client.method385(packetWriter, n, n);
        }
        try {
            if (0 == packetWriter.serverPacketLength * 889658999) {
                if (n2 <= -1754346109) {
                    throw new IllegalStateException();
                }
                UserComparator5.friendsChat = null;
                lv(-1);
            }
            else {
                if (null == UserComparator5.friendsChat) {
                    UserComparator5.friendsChat = new FriendsChat(class70.loginType, ScriptFrame.client);
                    lv(-1);
                }
                UserComparator5.friendsChat.method2142(packetWriter.packetBuffer, n, (byte)1);
            }
            Client.field558 = Client.cycleCntr * 235003969;
            GraphicsObject.ClanChat_inClanChat = true;
            packetWriter.field1133 = null;
            return true;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.jp(" + ')');
        }
    }
    
    public int[] qc() {
        return Client.changedItemContainers;
    }
    
    static final void qc(final int n) {
        class31.logOut(-1797743780);
        switch (n) {
            case 2: {
                UrlRequest.method680(895383048);
                break;
            }
            case 1: {
                class220.method1233((byte)45);
                break;
            }
        }
    }
    
    public void sq(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        class426.drawSpriteOnMinimap(n, n2, n3, n4, spritePixels, spriteMask, -1609285207);
    }
    
    public static int sq(final int n, final int n2, final int n3, final int n4) {
        return n3 * n2 - n4 * n >> 16;
    }
    
    static final void sq() {
        for (int i = 0; i < 265474485 * Client.npcCount; ++i) {
            final NPC npc = Client.npcs[Client.npcIndices[i]];
            if (null != npc) {
                ReflectionCheck.updateActorSequence(npc, 1458410691 * npc.definition.size, (byte)(-115));
            }
        }
    }
    
    static final void sf(final int n, final int n2, final int n3) {
        if (1757542919 * class36.cameraX < n) {
            class36.cameraX += (2083910077 * KeyHandler.field81 + class138.field1314 * 286592875 * (n - -44351246 * class36.cameraX) / 1000) * -1682679895;
            if (-2100544359 * class36.cameraX > n) {
                class36.cameraX = 433054288 * n;
            }
        }
        if (class36.cameraX * -2100544359 > n) {
            class36.cameraX -= -1467009963 * (KeyHandler.field81 * -1414373437 + class138.field1314 * -1514927571 * (1030733891 * class36.cameraX - n) / 1000);
            if (-2100544359 * class36.cameraX < n) {
                class36.cameraX = n * -1682679895;
            }
        }
        if (1772923873 * class174.cameraY < n2) {
            class174.cameraY += (-1532562542 * KeyHandler.field81 + (n2 - class174.cameraY * 1772923873) * (class138.field1314 * -1514927571) / 1000) * -424093663;
            if (class174.cameraY * -2081624323 > n2) {
                class174.cameraY = 1400506015 * n2;
            }
        }
        if (class174.cameraY * -1725908671 > n2) {
            class174.cameraY -= (KeyHandler.field81 * 1154941495 + (-812826086 * class174.cameraY - n2) * (-1514927571 * class138.field1314) / 1000) * -1976661959;
            if (1772923873 * class174.cameraY < n2) {
                class174.cameraY = -424093663 * n2;
            }
        }
        if (-1663501237 * class297.cameraZ < n3) {
            class297.cameraZ += (-1514927571 * class138.field1314 * (n3 - -91399205 * class297.cameraZ) / 1000 + KeyHandler.field81 * 2083910077) * 1727882307;
            if (-91399205 * class297.cameraZ > n3) {
                class297.cameraZ = n3 * 46344275;
            }
        }
        if (-1669364580 * class297.cameraZ > n3) {
            class297.cameraZ -= (588820708 * class138.field1314 * (class297.cameraZ * 354065738 - n3) / -964829904 + 2083910077 * KeyHandler.field81) * -1389693481;
            if (-91399205 * class297.cameraZ < n3) {
                class297.cameraZ = -292538573 * n3;
            }
        }
    }
    
    public int rc() {
        return Client.mouseWheelRotation * -121753353;
    }
    
    static final void rc() {
        if (ItemContainer.field844) {
            for (int i = 0; i < -2010934433 * Players.Players_count; ++i) {
                Player.ue(Client.players[Players.Players_indices[i]], 453146982);
            }
            ItemContainer.field844 = false;
        }
    }
    
    static final void qt(final int n) {
        class31.logOut(-1607039649);
        switch (n) {
            case 1: {
                class220.method1233((byte)110);
                break;
            }
            case 2: {
                UrlRequest.method680(-897604906);
                break;
            }
        }
    }
    
    static final void ur(final Actor actor, final int n, final int n2, final int n3, final int n4, final int n5) {
        if (actor != null && actor.isVisible(1666539507)) {
            if (actor instanceof NPC) {
                NPCComposition npcComposition = ((NPC)actor).definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, -1074003365);
                }
                if (null == npcComposition) {
                    return;
                }
            }
            final int n6 = Players.Players_count * -2010934433;
            final int[] players_indices = Players.Players_indices;
            final boolean b = n < n6;
            int n7 = -2;
            if (actor.overheadText != null && (!b || (actor.showPublicPlayerChat && (Client.publicChatMode * -1963411823 == 4 || (!actor.isAutoChatting && (0 == -1963411823 * Client.publicChatMode || Client.publicChatMode * -1963411823 == 3 || (Client.publicChatMode * -1963411823 == 1 && Player.yc((Player)actor, -1675316220)))))))) {
                class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame, -1469227743);
                if (Client.viewportTempX * -1848743379 > -1 && Client.overheadTextCount * 734988573 < 1025553311 * Client.overheadTextLimit) {
                    Client.overheadTextXOffsets[734988573 * Client.overheadTextCount] = class137.fontBold12.bf(actor.overheadText) / 2;
                    Client.overheadTextAscents[Client.overheadTextCount * 734988573] = class137.fontBold12.al;
                    Client.overheadTextXs[734988573 * Client.overheadTextCount] = -1848743379 * Client.viewportTempX;
                    Client.overheadTextYs[Client.overheadTextCount * 734988573] = 318977283 * Client.viewportTempY - n7;
                    Client.overheadTextColors[Client.overheadTextCount * 734988573] = actor.field1002 * -1337884343;
                    Client.overheadTextEffects[734988573 * Client.overheadTextCount] = actor.recolourStartCycle * 819594233;
                    Client.overheadTextCyclesRemaining[Client.overheadTextCount * 734988573] = -536830723 * actor.spotAnimation;
                    Client.overheadText[Client.overheadTextCount * 734988573] = actor.overheadText;
                    Client.overheadTextCount -= 1973288651;
                    n7 += 12;
                }
            }
            if (!actor.healthBars.method1971()) {
                UserComparator6.method716(actor, -767387641 * actor.sequenceFrame + 15, 1833676965);
                for (HealthBar healthBar = (HealthBar)actor.healthBars.up(); null != healthBar; healthBar = (HealthBar)actor.healthBars.by()) {
                    final HealthBarUpdate lx = HealthBar.lx(healthBar, -1886224337 * Client.cycle, (byte)(-66));
                    if (null != lx) {
                        final HealthBarDefinition definition = healthBar.definition;
                        final SpritePixels ms = HealthBarDefinition.ms(definition, -2092855289);
                        final SpritePixels frontSprite = definition.getFrontSprite((byte)12);
                        int n8 = 0;
                        int n9;
                        if (ms != null && frontSprite != null) {
                            if (definition.widthPadding * 166630382 < frontSprite.subWidth) {
                                n8 = -2064168457 * definition.widthPadding;
                            }
                            n9 = frontSprite.subWidth - n8 * 2;
                        }
                        else {
                            n9 = 279738407 * definition.width;
                        }
                        int n10 = 255;
                        final int n11 = -1886224337 * Client.cycle - lx.cycle * -1225111563;
                        final int n12 = lx.health2 * -2028064551 * n9 / (definition.width * 279738407);
                        int n15;
                        if (lx.cycleOffset * -2116244499 > n11) {
                            final int n13 = (definition.field1533 * 294055185 == 0) ? 0 : (294055185 * definition.field1533 * (n11 / (294055185 * definition.field1533)));
                            final int n14 = n9 * (1250696899 * lx.health) / (279738407 * definition.width);
                            n15 = n14 + n13 * (n12 - n14) / (-2116244499 * lx.cycleOffset);
                        }
                        else {
                            n15 = n12;
                            final int n16 = definition.int5 * -407931959 + lx.cycleOffset * -2116244499 - n11;
                            if (definition.int3 * -471494485 >= 0) {
                                n10 = (n16 << 8) / (definition.int5 * -407931959 - -471494485 * definition.int3);
                            }
                        }
                        if (-2028064551 * lx.health2 > 0 && n15 < 1) {
                            n15 = 1;
                        }
                        if (ms != null && frontSprite != null) {
                            int n17;
                            if (n9 == n15) {
                                n17 = n15 + 2 * n8;
                            }
                            else {
                                n17 = n15 + n8;
                            }
                            final int subHeight = ms.subHeight;
                            n7 += subHeight;
                            final int n18 = -1848743379 * Client.viewportTempX + n2 - (n9 >> 1);
                            final int n19 = Client.viewportTempY * 318977283 + n3 - n7;
                            final int n20 = n18 - n8;
                            if (n10 >= 0 && n10 < 255) {
                                ms.drawTransAt(n20, n19, n10);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n20 + n17, n19 + subHeight);
                                frontSprite.drawTransAt(n20, n19, n10);
                            }
                            else {
                                ms.drawAt(n20, n19);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n17 + n20, n19 + subHeight);
                                frontSprite.drawAt(n20, n19);
                            }
                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4 + n2, n3 + n5);
                            n7 += 2;
                        }
                        else {
                            n7 += 5;
                            if (-1848743379 * Client.viewportTempX > -1) {
                                final int n21 = n2 + -1848743379 * Client.viewportTempX - (n9 >> 1);
                                final int n22 = Client.viewportTempY * 318977283 + n3 - n7;
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21, n22, n15, 5, 65280);
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21 + n15, n22, n9 - n15, 5, 16711680);
                            }
                            n7 += 2;
                        }
                    }
                    else if (healthBar.isEmpty(-12674764)) {
                        healthBar.hw();
                    }
                }
            }
            if (-2 == n7) {
                n7 += 7;
            }
            if (b && actor.movingOrientation * -1532330627 == Client.cycle * -1886224337 && class13.method46((Player)actor, 1775822117)) {
                final Player player = (Player)actor;
                if (b) {
                    class374.worldToScreen(1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, -860578722);
                    final AbstractFont abstractFont = Client.fontsMap.get(FontName.FontName_plain12);
                    n7 += 4;
                    abstractFont.drawCentered(player.username.getName(-710264960), Client.viewportTempX * -1848743379 + n2, Client.viewportTempY * 318977283 + n3 - n7, 16777215, 0);
                    n7 += 18;
                }
            }
            if (b) {
                final Player player2 = (Player)actor;
                if (player2.isHidden) {
                    return;
                }
                if (-1 != player2.headIconPk * -1875167049 || -1 != -1905401649 * player2.headIconPrayer) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, -42149826);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        if (-1875167049 * player2.headIconPk != -1) {
                            n7 += 25;
                            class36.headIconPkSprites[player2.headIconPk * -1875167049].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - n7);
                        }
                        if (-1905401649 * player2.headIconPrayer != -1) {
                            n7 += 25;
                            class425.headIconPrayerSprites[-1905401649 * player2.headIconPrayer].drawAt(Client.viewportTempX * -1848743379 + n2 - 12, n3 + Client.viewportTempY * 318977283 - n7);
                        }
                    }
                }
                if (n >= 0 && 10 == 633821975 * Client.hintArrowType && Client.hintArrowPlayerIndex * 561980131 == players_indices[n]) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame + 15, 1077776545);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[1].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - (n7 + KitDefinition.headIconHintSprites[1].subHeight));
                    }
                }
            }
            else {
                final NPC npc = (NPC)actor;
                final int[] ae = NPC.ae(npc, (byte)14);
                final short[] method602 = npc.method602(-1409964229);
                if (method602 != null && null != ae) {
                    for (int i = 0; i < method602.length; ++i) {
                        if (method602[i] >= 0) {
                            if (ae[i] >= 0) {
                                final long n23 = (long)ae[i] << 8 | (long)method602[i];
                                SpritePixels spritePixels = (SpritePixels)Client.archive5.method2126(n23, (short)19005);
                                if (spritePixels == null) {
                                    final SpritePixels[] method603 = UserComparator3.method699(class452.archive8, ae[i], 0, 1271520368);
                                    if (null != method603 && method602[i] < method603.length) {
                                        spritePixels = method603[method602[i]];
                                        Client.archive5.method2122(n23, spritePixels, 747668912);
                                    }
                                }
                                if (null != spritePixels) {
                                    UserComparator6.method716(actor, actor.sequenceFrame * -767387641 + 15, 1557207116);
                                    if (-1848743379 * Client.viewportTempX > -1) {
                                        spritePixels.drawAt(-1848743379 * Client.viewportTempX + n2 - (spritePixels.subWidth >> 1), 318977283 * Client.viewportTempY + (n3 - spritePixels.subHeight) - 4);
                                    }
                                }
                            }
                        }
                    }
                }
                if (1 == Client.hintArrowType * 633821975 && 920558921 * Client.hintArrowNpcIndex == Client.npcIndices[n - n6] && Client.cycle * -1886224337 % 20 < 10) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, -1090878730);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[0].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - 28);
                    }
                }
            }
            for (int j = 0; j < 4; ++j) {
                final int n24 = actor.hitSplatValues[j];
                final int n25 = actor.pathY[j];
                HitSplatDefinition hitSplatDefinition = null;
                int n26 = 0;
                if (n25 >= 0) {
                    if (n24 <= -1886224337 * Client.cycle) {
                        continue;
                    }
                    hitSplatDefinition = class122.method725(actor.pathY[j], (byte)4);
                    n26 = 292771999 * hitSplatDefinition.field1672;
                    if (hitSplatDefinition != null && null != hitSplatDefinition.transforms) {
                        hitSplatDefinition = hitSplatDefinition.transform((byte)(-47));
                        if (hitSplatDefinition == null) {
                            actor.hitSplatValues[j] = -1;
                            continue;
                        }
                    }
                }
                else if (n24 < 0) {
                    continue;
                }
                final int n27 = actor.hitSplatValues2[j];
                HitSplatDefinition hitSplatDefinition2 = null;
                if (n27 >= 0) {
                    hitSplatDefinition2 = class122.method725(n27, (byte)4);
                    if (null != hitSplatDefinition2 && hitSplatDefinition2.transforms != null) {
                        hitSplatDefinition2 = hitSplatDefinition2.transform((byte)(-63));
                    }
                }
                if (n24 - n26 <= -1886224337 * Client.cycle) {
                    if (null == hitSplatDefinition) {
                        actor.hitSplatValues[j] = -1;
                    }
                    else {
                        UserComparator6.method716(actor, actor.sequenceFrame * -767387641 / 2, 1113361307);
                        if (Client.viewportTempX * -1848743379 > -1) {
                            if (j != 0) {
                                Client.viewportTempY += 2135862948;
                            }
                            if (j == 2) {
                                Client.viewportTempX -= 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            if (3 == j) {
                                Client.viewportTempX += 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            int subWidth = 0;
                            int subWidth2 = 0;
                            int subWidth3 = 0;
                            int subWidth4 = 0;
                            int xOffset = 0;
                            int xOffset2 = 0;
                            int xOffset3 = 0;
                            int xOffset4 = 0;
                            SpritePixels dc = null;
                            SpritePixels method604 = null;
                            SpritePixels method605 = null;
                            SpritePixels method606 = null;
                            int subWidth5 = 0;
                            int subWidth6 = 0;
                            int subWidth7 = 0;
                            int subWidth8 = 0;
                            int xOffset5 = 0;
                            int xOffset6 = 0;
                            int xOffset7 = 0;
                            int xOffset8 = 0;
                            int n28 = 0;
                            final SpritePixels dc2 = HitSplatDefinition.dc(hitSplatDefinition, 1318501199);
                            if (null != dc2) {
                                subWidth = dc2.subWidth;
                                final int subHeight2 = dc2.subHeight;
                                if (subHeight2 > n28) {
                                    n28 = subHeight2;
                                }
                                xOffset = dc2.xOffset;
                            }
                            final SpritePixels method607 = hitSplatDefinition.method1077(-1363118160);
                            if (null != method607) {
                                subWidth2 = method607.subWidth;
                                final int subHeight3 = method607.subHeight;
                                if (subHeight3 > n28) {
                                    n28 = subHeight3;
                                }
                                xOffset2 = method607.xOffset;
                            }
                            final SpritePixels method608 = hitSplatDefinition.method1072(1933903350);
                            if (method608 != null) {
                                subWidth3 = method608.subWidth;
                                final int subHeight4 = method608.subHeight;
                                if (subHeight4 > n28) {
                                    n28 = subHeight4;
                                }
                                xOffset3 = method608.xOffset;
                            }
                            final SpritePixels method609 = hitSplatDefinition.method1078((byte)88);
                            if (method609 != null) {
                                subWidth4 = method609.subWidth;
                                final int subHeight5 = method609.subHeight;
                                if (subHeight5 > n28) {
                                    n28 = subHeight5;
                                }
                                xOffset4 = method609.xOffset;
                            }
                            if (hitSplatDefinition2 != null) {
                                dc = HitSplatDefinition.dc(hitSplatDefinition2, 1037910505);
                                if (dc != null) {
                                    subWidth5 = dc.subWidth;
                                    final int subHeight6 = dc.subHeight;
                                    if (subHeight6 > n28) {
                                        n28 = subHeight6;
                                    }
                                    xOffset5 = dc.xOffset;
                                }
                                method604 = hitSplatDefinition2.method1077(-842132954);
                                if (method604 != null) {
                                    subWidth6 = method604.subWidth;
                                    final int subHeight7 = method604.subHeight;
                                    if (subHeight7 > n28) {
                                        n28 = subHeight7;
                                    }
                                    xOffset6 = method604.xOffset;
                                }
                                method605 = hitSplatDefinition2.method1072(1559841841);
                                if (null != method605) {
                                    subWidth7 = method605.subWidth;
                                    final int subHeight8 = method605.subHeight;
                                    if (subHeight8 > n28) {
                                        n28 = subHeight8;
                                    }
                                    xOffset7 = method605.xOffset;
                                }
                                method606 = hitSplatDefinition2.method1078((byte)36);
                                if (null != method606) {
                                    subWidth8 = method606.subWidth;
                                    final int subHeight9 = method606.subHeight;
                                    if (subHeight9 > n28) {
                                        n28 = subHeight9;
                                    }
                                    xOffset8 = method606.xOffset;
                                }
                            }
                            Font font = hitSplatDefinition.getFont(1644925127);
                            if (null == font) {
                                font = Language.fontPlain11;
                            }
                            Font font2;
                            if (null != hitSplatDefinition2) {
                                font2 = hitSplatDefinition2.getFont(1644925127);
                                if (font2 == null) {
                                    font2 = Language.fontPlain11;
                                }
                            }
                            else {
                                font2 = Language.fontPlain11;
                            }
                            String string = null;
                            int bf = 0;
                            final String string2 = hitSplatDefinition.getString(actor.hitSplatTypes[j], -1273436540);
                            final int bf2 = font.bf(string2);
                            if (hitSplatDefinition2 != null) {
                                string = hitSplatDefinition2.getString(actor.hitSplatCycles[j], -1102873574);
                                bf = font2.bf(string);
                            }
                            int n29 = 0;
                            int n30 = 0;
                            if (subWidth2 > 0) {
                                if (null != method608 || method609 != null) {
                                    n29 = 1 + bf2 / subWidth2;
                                }
                                else {
                                    n29 = 1;
                                }
                            }
                            if (null != hitSplatDefinition2 && subWidth6 > 0) {
                                if (null == method605 && method606 == null) {
                                    n30 = 1;
                                }
                                else {
                                    n30 = bf / subWidth6 + 1;
                                }
                            }
                            final int n32;
                            int n31 = n32 = 0;
                            if (subWidth > 0) {
                                n31 += subWidth;
                            }
                            n31 += 2;
                            final int n33 = n31;
                            if (subWidth3 > 0) {
                                n31 += subWidth3;
                            }
                            final int n34 = n31;
                            int n35 = n31;
                            int n37;
                            if (subWidth2 > 0) {
                                final int n36 = n29 * subWidth2;
                                n37 = n31 + n36;
                                n35 += (n36 - bf2) / 2;
                            }
                            else {
                                n37 = n31 + bf2;
                            }
                            final int n38 = n37;
                            if (subWidth4 > 0) {
                                n37 += subWidth4;
                            }
                            int n39 = 0;
                            int n40 = 0;
                            int n41 = 0;
                            int n42 = 0;
                            int n43 = 0;
                            if (hitSplatDefinition2 != null) {
                                n37 += 2;
                                n39 = n37;
                                if (subWidth5 > 0) {
                                    n37 += subWidth5;
                                }
                                n37 += 2;
                                n40 = n37;
                                if (subWidth7 > 0) {
                                    n37 += subWidth7;
                                }
                                n41 = n37;
                                n43 = n37;
                                if (subWidth6 > 0) {
                                    final int n44 = subWidth6 * n30;
                                    n37 += n44;
                                    n43 += (n44 - bf) / 2;
                                }
                                else {
                                    n37 += bf;
                                }
                                n42 = n37;
                                if (subWidth8 > 0) {
                                    n37 += subWidth8;
                                }
                            }
                            final int n45 = actor.hitSplatValues[j] - -1886224337 * Client.cycle;
                            final int n46 = hitSplatDefinition.field1663 * 895105585 - 895105585 * hitSplatDefinition.field1663 * n45 / (292771999 * hitSplatDefinition.field1672);
                            final int n47 = 498242719 * hitSplatDefinition.field1676 * n45 / (hitSplatDefinition.field1672 * 292771999) + -(hitSplatDefinition.field1676 * 498242719);
                            final int n48 = n2 + -1848743379 * Client.viewportTempX - (n37 >> 1) + n46;
                            int n50;
                            final int n49 = n50 = n3 + Client.viewportTempY * 318977283 - 12 + n47;
                            int n51 = n49 + n28;
                            final int n52 = n49 + 15 + 1785373205 * hitSplatDefinition.field1680;
                            final int n53 = n52 - font.at;
                            final int n54 = font.aa + n52;
                            if (n53 < n50) {
                                n50 = n53;
                            }
                            if (n54 > n51) {
                                n51 = n54;
                            }
                            int n55 = 0;
                            if (null != hitSplatDefinition2) {
                                n55 = 1785373205 * hitSplatDefinition2.field1680 + (n49 + 15);
                                final int n56 = n55 - font2.at;
                                final int n57 = n55 + font2.aa;
                                if (n56 < n50) {}
                                if (n57 > n51) {}
                            }
                            int n58 = 255;
                            if (-1413310139 * hitSplatDefinition.field1683 >= 0) {
                                n58 = (n45 << 8) / (hitSplatDefinition.field1672 * 292771999 - hitSplatDefinition.field1683 * -1413310139);
                            }
                            if (n58 >= 0 && n58 < 255) {
                                if (dc2 != null) {
                                    dc2.drawTransAt(n48 + n32 - xOffset, n49, n58);
                                }
                                if (null != method608) {
                                    method608.drawTransAt(n33 + n48 - xOffset3, n49, n58);
                                }
                                if (method607 != null) {
                                    for (int k = 0; k < n29; ++k) {
                                        method607.drawTransAt(k * subWidth2 + (n34 + n48 - xOffset2), n49, n58);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawTransAt(n48 + n38 - xOffset4, n49, n58);
                                }
                                font.am(string2, n35 + n48, n52, hitSplatDefinition.textColor * -2000718353, 0, n58);
                                if (null != hitSplatDefinition2) {
                                    if (null != dc) {
                                        dc.drawTransAt(n39 + n48 - xOffset5, n49, n58);
                                    }
                                    if (method605 != null) {
                                        method605.drawTransAt(n40 + n48 - xOffset7, n49, n58);
                                    }
                                    if (null != method604) {
                                        for (int l = 0; l < n30; ++l) {
                                            method604.drawTransAt(n48 + n41 - xOffset6 + subWidth6 * l, n49, n58);
                                        }
                                    }
                                    if (method606 != null) {
                                        method606.drawTransAt(n42 + n48 - xOffset8, n49, n58);
                                    }
                                    font2.am(string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353, 0, n58);
                                }
                            }
                            else {
                                if (dc2 != null) {
                                    dc2.drawAt(n32 + n48 - xOffset, n49);
                                }
                                if (null != method608) {
                                    method608.drawAt(n33 + n48 - xOffset3, n49);
                                }
                                if (null != method607) {
                                    for (int n59 = 0; n59 < n29; ++n59) {
                                        method607.drawAt(subWidth2 * n59 + (n34 + n48 - xOffset2), n49);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawAt(n48 + n38 - xOffset4, n49);
                                }
                                class492.xb(font, string2, n48 + n35, n52, hitSplatDefinition.textColor * -2000718353 | 0xFF000000, 0);
                                if (null != hitSplatDefinition2) {
                                    if (dc != null) {
                                        dc.drawAt(n39 + n48 - xOffset5, n49);
                                    }
                                    if (method605 != null) {
                                        method605.drawAt(n40 + n48 - xOffset7, n49);
                                    }
                                    if (method604 != null) {
                                        for (int n60 = 0; n60 < n30; ++n60) {
                                            method604.drawAt(n48 + n41 - xOffset6 + n60 * subWidth6, n49);
                                        }
                                    }
                                    if (null != method606) {
                                        method606.drawAt(n48 + n42 - xOffset8, n49);
                                    }
                                    class492.xb(font2, string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353 | 0xFF000000, 0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void mr(final int n) {
        Client.camAngleY = n * 642728617;
    }
    
    static final void ze(final Widget[] field2292, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
        class18.method68(13913212);
        for (int i = 0; i < field2292.length; ++i) {
            final Widget widget = field2292[i];
            if (widget != null) {
                if (widget.parentId * 267180539 != n) {
                    if (n != -745511024) {
                        continue;
                    }
                    if (Client.clickedWidget != widget) {
                        continue;
                    }
                }
                int n9;
                if (n8 == -1) {
                    Client.rootWidgetXs[Client.rootWidgetCount * -356793645] = n6 + 262951665 * widget.x;
                    Client.rootWidgetYs[1638686327 * Client.rootWidgetCount] = widget.y * -747355095 + n7;
                    Client.rootWidgetWidths[-356793645 * Client.rootWidgetCount] = 477925637 * widget.width;
                    Client.rootWidgetHeights[1968264070 * Client.rootWidgetCount] = 1473950221 * widget.height;
                    n9 = (Client.rootWidgetCount -= 117305455) * 936877921 - 1;
                }
                else {
                    n9 = n8;
                }
                widget.rootIndex = n9 * 1700653155;
                widget.cycle = -949533450 * Client.cycle;
                if (!widget.modelOrthog || !class393.isComponentHidden(widget, (byte)1)) {
                    if (-1488841310 * widget.contentType > 0) {
                        MouseHandler.method193(widget, -976210275);
                    }
                    int n10 = n6 + -1709462332 * widget.x;
                    int n11 = n7 + -747355095 * widget.y;
                    int n12 = 1634279623 * widget.transparencyTop;
                    if (widget == Client.clickedWidget) {
                        if (-1412584499 != n && !widget.spriteFlipH) {
                            WorldMapSection2.field2292 = field2292;
                            class230.field2130 = n6 * -774716861;
                            class101.field1082 = 232549719 * n7;
                            continue;
                        }
                        if (Client.isDraggingWidget && Client.field540) {
                            final int n13 = 1191282125 * MouseHandler.MouseHandler_x;
                            final int n14 = MouseHandler.MouseHandler_y * 31533696;
                            int n15 = n13 - Client.widgetClickX * -1789924433;
                            int n16 = n14 - 1902621241 * Client.widgetClickY;
                            if (n15 < 1084046795 * Client.field495) {
                                n15 = Client.field495 * 1703039583;
                            }
                            if (n15 + -814423512 * widget.width > -794961409 * Client.clickedWidgetParent.width + -1815893143 * Client.field495) {
                                n15 = 1084046795 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - widget.width * -821499132;
                            }
                            if (n16 < Client.field542 * -732311595) {
                                n16 = Client.field542 * -746723443;
                            }
                            if (-280245501 * widget.height + n16 > Client.clickedWidgetParent.height * 27213226 + -746723443 * Client.field542) {
                                n16 = Client.clickedWidgetParent.height * 1473950221 + Client.field542 * 1723404152 - -1739104946 * widget.height;
                            }
                            n10 = n15;
                            n11 = n16;
                        }
                        if (!widget.spriteFlipH) {
                            n12 = 128;
                        }
                    }
                    int n23;
                    int n24;
                    int n25;
                    int n26;
                    if (9 == widget.type * 883712245) {
                        int n17 = n10;
                        int n18 = n11;
                        int n19 = n10 + -794961409 * widget.width;
                        int n20 = widget.height * -615566948 + n11;
                        if (n19 < n17) {
                            final int n21 = n17;
                            n17 = n19;
                            n19 = n21;
                        }
                        if (n20 < n18) {
                            final int n22 = n18;
                            n18 = n20;
                            n20 = n22;
                        }
                        ++n19;
                        ++n20;
                        n23 = ((n17 > n2) ? n17 : n2);
                        n24 = ((n18 > n3) ? n18 : n3);
                        n25 = ((n19 < n4) ? n19 : n4);
                        n26 = ((n20 < n5) ? n20 : n5);
                    }
                    else {
                        final int n27 = widget.width * -1034163002 + n10;
                        final int n28 = widget.height * -513129096 + n11;
                        n23 = ((n10 > n2) ? n10 : n2);
                        n24 = ((n11 > n3) ? n11 : n3);
                        n25 = ((n27 < n4) ? n27 : n4);
                        n26 = ((n28 < n5) ? n28 : n5);
                    }
                    if (widget.modelOrthog) {
                        if (n23 >= n25) {
                            continue;
                        }
                        if (n24 >= n26) {
                            continue;
                        }
                    }
                    if (widget.contentType * 1021339961 != 0) {
                        if (1021339961 * widget.contentType == -1080477423) {
                            if (class20.clientPreferences.method562((short)(-15074))) {
                                n11 += 15;
                                WallDecoration.fontPlain12.as("Fps:" + Client.aa * 1913114939, n10 + -794961409 * widget.width, n11, 16776960, -1);
                                n11 += 15;
                                final Runtime runtime = Runtime.getRuntime();
                                final int j = (int)((runtime.totalMemory() - runtime.freeMemory()) / 1024L);
                                int n29 = -669776179;
                                if (j > -413642180 && !Client.isLowDetail) {
                                    n29 = 1685128088;
                                }
                                WallDecoration.fontPlain12.as("Mem:" + j + "k", n10 + -1152299152 * widget.width, n11, n29, -1);
                                n11 += 15;
                            }
                            continue;
                        }
                        else {
                            if (widget.contentType * 1021339961 == 1337) {
                                Client.viewportX = n10 * 563689483;
                                Client.viewportY = n11 * 2111961447;
                                class18.drawEntities(n10, n11, widget.width * -1224748572, widget.height * 134211365, 46445770);
                                Client.field573[widget.rootIndex * 372799529] = true;
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1021339961 * widget.contentType == 1338) {
                                class155.drawMinimap(widget, n10, n11, n9, 308617254);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1339 == widget.contentType * 1021339961) {
                                DynamicObject.drawCompass(widget, n10, n11, n9, -1899464569);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (widget.contentType * -1754986559 == 1275771195) {
                                WorldMap.flashCategory(class126.worldMap, n10, n11, -2129109308 * widget.width, widget.height * 1473950221, Client.cycle * -1886224337, -2113994299);
                            }
                            if (1813531252 == -1048355528 * widget.contentType) {
                                class126.worldMap.drawOverview(n10, n11, widget.width * -998098765, 637018711 * widget.height, (byte)18);
                            }
                            if (widget.contentType * 2099472525 == -1552634242) {
                                class121.field1184.draw(n10, Client.cycle * -1101276684, 1222117983);
                            }
                        }
                    }
                    if (0 == 1702896828 * widget.type) {
                        if (!widget.modelOrthog && class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (!widget.modelOrthog) {
                            if (widget.scrollY * 1223232735 > widget.scrollHeight * 1575984336 - widget.height * 1473950221) {
                                widget.scrollY = widget.scrollHeight * 1388840168 - widget.height * -1670539583;
                            }
                            if (1223232735 * widget.scrollY < 0) {
                                widget.scrollY = 0;
                            }
                        }
                        class11.drawInterface(field2292, widget.id * -1263038901, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * -1607935506, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - widget.scrollY * 1223232735, n9, -465475629);
                        }
                        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(1713081171 * widget.id);
                        if (null != interfaceParent) {
                            class13.drawWidgets(interfaceParent.group * 944864121, n23, n24, n25, n26, n10, n11, n9, (byte)(-95));
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(535186619);
                    }
                    else if (11 == widget.type * -2000896188) {
                        if (class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * -1111653597, n23, n24, n25, n26, n10 - -1469632775 * widget.scrollX, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(1367839533);
                    }
                    if (Client.isResizable || Client.field519[n9] || -14141293 * Client.gameDrawingMode > 1) {
                        if (0 == 19120993 * widget.type && !widget.modelOrthog && widget.scrollHeight * -1273374131 > widget.height * 1473950221) {
                            class103.drawScrollBar(n10 + widget.width * -298903432, n11, widget.scrollY * 1223232735, 1441948024 * widget.height, -1921141033 * widget.scrollHeight, (byte)0);
                        }
                        if (1 != widget.type * 883712245) {
                            if (129167879 * widget.type == 3) {
                                int n30;
                                if (class452.runCs1(widget, -273848975)) {
                                    n30 = widget.color2 * 1449039161;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && -1834304757 * widget.mouseOverColor2 != 0) {
                                        n30 = 1780253209 * widget.mouseOverColor2;
                                    }
                                }
                                else {
                                    n30 = widget.color * 1409091639;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != widget.mouseOverColor * 1899405042) {
                                        n30 = widget.mouseOverColor * -469722974;
                                    }
                                }
                                if (widget.noScrollThrough) {
                                    switch (widget.fillMode.field4118 * 829197766) {
                                        case 2: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradientAlpha(n10, n11, -794961409 * widget.width, 1473950221 * widget.height, widget.color * 631766385, widget.color2 * 1076134680, -376680410 - (widget.transparencyTop * 1641328450 & 0x17C49409), 255 - (widget.transparencyBot * -602680669 & 0x1A9F161D));
                                            break;
                                        }
                                        default: {
                                            if (n12 == 0) {
                                                Rasterizer2D.Rasterizer2D_fillRectangle(n10, n11, widget.width * -1533826695, widget.height * 1905703370, n30);
                                                break;
                                            }
                                            Rasterizer2D.Rasterizer2D_fillRectangleAlpha(n10, n11, -1353971227 * widget.width, -1430631705 * widget.height, n30, -984689136 - (n12 & 0xFF));
                                            break;
                                        }
                                        case 1: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradient(n10, n11, -794961409 * widget.width, 1473950221 * widget.height, 1409091639 * widget.color, widget.color2 * 1449039161);
                                            break;
                                        }
                                    }
                                }
                                else if (n12 == 0) {
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n10, n11, widget.width * -794961409, 1020359499 * widget.height, n30);
                                }
                                else {
                                    Rasterizer2D.Rasterizer2D_drawRectangleAlpha(n10, n11, widget.width * -794961409, -273800360 * widget.height, n30, 1644684897 - (n12 & 0x2526EAA9));
                                }
                            }
                            else if (1606925660 * widget.type == 4) {
                                final Font font = widget.getFont(-654734692);
                                if (font == null) {
                                    if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1219329986);
                                    }
                                }
                                else {
                                    String str = widget.field2916;
                                    int n31;
                                    if (class452.runCs1(widget, 851956009)) {
                                        n31 = widget.color2 * -262511108;
                                        if (MidiPcmStream.mousedOverWidgetIf1 == widget && widget.mouseOverColor2 * 1646588218 != 0) {
                                            n31 = widget.mouseOverColor2 * 1780253209;
                                        }
                                        if (widget.buttonText.length() > 0) {
                                            str = widget.buttonText;
                                        }
                                    }
                                    else {
                                        n31 = widget.color * 1409091639;
                                        if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != 1614966389 * widget.mouseOverColor) {
                                            n31 = widget.mouseOverColor * 1614966389;
                                        }
                                    }
                                    if (widget.modelOrthog && -1 != widget.itemId * 1341882926) {
                                        final ItemComposition set = HealthBarUpdate.set(-2006098851 * widget.itemId, (byte)110);
                                        str = set.name;
                                        if (str == null) {
                                            str = Strings.at;
                                        }
                                        if ((1 == -1921561432 * set.isStackable || 1 != 1141492289 * widget.itemQuantity) && -1 != 1336975799 * widget.itemQuantity) {
                                            str = class383.method2081(16748608, 1088379904) + str + class96.al + " " + (char)1312172784 + ArchiveDiskAction.formatItemStacks(widget.itemQuantity * -2007061657, (short)403);
                                        }
                                    }
                                    if (widget == Client.meslayerContinueWidget) {
                                        str = Strings.gi;
                                        n31 = 1409091639 * widget.color;
                                    }
                                    if (!widget.modelOrthog) {
                                        str = class121.method720(str, widget, (short)(-8827));
                                    }
                                    font.az(str, n10, n11, widget.width * 96137039, widget.height * 1473950221, n31, widget.isIf3 ? 0 : -1, Decimator.scaleRate(405341908 * widget.transparencyTop, 825809086), widget.textXAlignment * -95786467, widget.textYAlignment * -1553957401, -931338759 * widget.textLineHeight);
                                }
                            }
                            else if (5 == -2110435408 * widget.type) {
                                if (!widget.modelOrthog) {
                                    final SpritePixels sprite = widget.getSprite(class452.runCs1(widget, -1193945430), class14.urlRequester, (byte)0);
                                    if (sprite != null) {
                                        sprite.drawAt(n10, n11);
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -987582422);
                                    }
                                }
                                else {
                                    SpritePixels spritePixels;
                                    if (-1 != 775952475 * widget.itemId) {
                                        spritePixels = class252.getItemSprite(widget.itemId * -440584618, widget.itemQuantity * 1336975799, widget.outline * 1413994205, -353676735 * widget.spriteShadow, widget.itemQuantityMode * -199485615, false, 751384849);
                                    }
                                    else {
                                        spritePixels = widget.getSprite(false, class14.urlRequester, (byte)0);
                                    }
                                    if (null != spritePixels) {
                                        final int width = spritePixels.width;
                                        final int height = spritePixels.height;
                                        if (widget.field2913) {
                                            Rasterizer2D.Rasterizer2D_expandClip(n10, n11, widget.width * -10219558 + n10, widget.height * 1473950221 + n11);
                                            final int n32 = (widget.width * -794961409 + (width - 1)) / width;
                                            final int n33 = (height - 1 + widget.height * 1473950221) / height;
                                            for (int k = 0; k < n32; ++k) {
                                                for (int l = 0; l < n33; ++l) {
                                                    if (widget.spriteAngle * -1364021006 != 0) {
                                                        spritePixels.method2632(k * width + n10 + width / 2, height / 2 + (n11 + l * height), widget.spriteAngle * -689913243, 4096);
                                                    }
                                                    else if (n12 != 0) {
                                                        spritePixels.drawTransAt(n10 + width * k, height * l + n11, 256 - (n12 & 0xFF));
                                                    }
                                                    else {
                                                        spritePixels.drawAt(k * width + n10, n11 + height * l);
                                                    }
                                                }
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                        else {
                                            final int n34 = -576720896 * widget.width / width;
                                            if (widget.spriteAngle * 2097367332 != 0) {
                                                spritePixels.method2632(widget.width * -1672767656 / 2 + n10, widget.height * -273228736 / 2 + n11, widget.spriteAngle * -738051099, n34);
                                            }
                                            else if (n12 != 0) {
                                                spritePixels.drawTransScaledAt(n10, n11, widget.width * -792075725, widget.height * -1594223745, 256 - (n12 & 0xFF));
                                            }
                                            else if (widget.width * -1761219459 == width && height == widget.height * 276504650) {
                                                spritePixels.drawAt(n10, n11);
                                            }
                                            else {
                                                spritePixels.drawScaledAt(n10, n11, -794961409 * widget.width, widget.height * 1473950221);
                                            }
                                        }
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1956108447);
                                    }
                                }
                            }
                            else if (421046112 * widget.type == 6) {
                                final boolean runCs1 = class452.runCs1(widget, -1262687224);
                                int n35;
                                if (runCs1) {
                                    n35 = widget.sequenceId2 * -717228843;
                                }
                                else {
                                    n35 = -1526544909 * widget.sequenceId;
                                }
                                Model model = null;
                                int n36 = 0;
                                if (-1 != -2006098851 * widget.itemId) {
                                    final ItemComposition set2 = HealthBarUpdate.set(-31769976 * widget.itemId, (byte)56);
                                    if (set2 != null) {
                                        model = set2.getCountObj(widget.itemQuantity * 1336975799, 1436959172).getModel(1, -873903476);
                                        if (null != model) {
                                            model.calculateBoundsCylinder();
                                            n36 = 1550732737 * model.et / 2;
                                        }
                                        else {
                                            class144.invalidateWidget(widget, -948983257);
                                        }
                                    }
                                }
                                else if (widget.modelType * -24545498 == 5) {
                                    if (0 == 1848578764 * widget.modelId) {
                                        model = Client.playerAppearance.getModel(null, -1, null, -1, (byte)124);
                                    }
                                    else {
                                        model = MusicPatchNode.localPlayer.getModel((byte)(-93));
                                    }
                                }
                                else if (413705944 * widget.modelType == 7) {
                                    model = widget.field2894.getModel(null, -1, ItemContainer.SpotAnimationDefinition_get(MusicPatchNode.localPlayer.cd * 909946189, (byte)9), 424813829 * MusicPatchNode.localPlayer.bp, (byte)127);
                                }
                                else {
                                    NPCComposition definition = null;
                                    NewShit method599 = null;
                                    if (6 == -123768459 * widget.modelType) {
                                        final int n37 = widget.modelId * -1212275261;
                                        if (n37 >= 0 && n37 < Client.npcs.length) {
                                            final NPC npc = Client.npcs[n37];
                                            if (npc != null) {
                                                definition = npc.definition;
                                                method599 = npc.method599(-1892236491);
                                            }
                                        }
                                    }
                                    SequenceDefinition spotAnimationDefinition_get = null;
                                    int n38 = -1;
                                    if (n35 != -1) {
                                        spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n35, (byte)93);
                                        n38 = 1575517389 * widget.modelFrame;
                                    }
                                    model = widget.getModel(spotAnimationDefinition_get, n38, runCs1, MusicPatchNode.localPlayer.appearance, definition, method599, 755841891);
                                    if (model == null && Widget.field2877) {
                                        class144.invalidateWidget(widget, -934177668);
                                    }
                                }
                                WorldMapArea.getRegionLowX(n10 + widget.width * 1397265369 / 2, widget.height * 1473950221 / 2 + n11, (byte)32);
                                final int n39 = widget.modelZoom * -1155801960 * Rasterizer3D.Rasterizer3D_sine[797932055 * widget.modelAngleX] >> 16;
                                final int n40 = 942674363 * widget.modelZoom * Rasterizer3D.Rasterizer3D_cosine[797932055 * widget.modelAngleX] >> 16;
                                if (model != null) {
                                    if (!widget.modelOrthog) {
                                        model.method1343(0, widget.modelAngleY * -480949115, 0, widget.modelAngleX * -1442815145, 0, n39, n40);
                                    }
                                    else {
                                        model.calculateBoundsCylinder();
                                        if (widget.field2891) {
                                            model.method1327(0, -480949115 * widget.modelAngleY, -246094980 * widget.modelAngleZ, 957221089 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), n40 + widget.modelOffsetY * 844501061, 942674363 * widget.modelZoom);
                                        }
                                        else {
                                            model.method1343(0, widget.modelAngleY * -1704773818, -1023931993 * widget.modelAngleZ, -561755180 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 474772715 + (n39 + n36), 844501061 * widget.modelOffsetY + n40);
                                        }
                                    }
                                }
                                Tiles.method474(1441948024);
                            }
                            else {
                                if (8 == widget.type * -359625746 && class130.field1274 == widget && Client.field515 * 1303961632 == Client.field514 * -303215342) {
                                    int n41 = 0;
                                    int n42 = 0;
                                    final Font fontPlain12 = WallDecoration.fontPlain12;
                                    String s = class121.method720(widget.field2916, widget, (short)(-20862));
                                    while (s.length() > 0) {
                                        final int index = s.indexOf(class96.aq);
                                        String substring;
                                        if (-1 != index) {
                                            substring = s.substring(0, index);
                                            s = s.substring(4 + index);
                                        }
                                        else {
                                            substring = s;
                                            s = "";
                                        }
                                        final int bf = fontPlain12.bf(substring);
                                        if (bf > n41) {
                                            n41 = bf;
                                        }
                                        n42 += 1 + fontPlain12.al;
                                    }
                                    n41 += 6;
                                    n42 += 7;
                                    int n43 = n10 + widget.width * 6187588 - 5 - n41;
                                    int n44 = widget.height * 1473950221 + n11 + 5;
                                    if (n43 < 5 + n10) {
                                        n43 = 5 + n10;
                                    }
                                    if (n41 + n43 > n4) {
                                        n43 = n4 - n41;
                                    }
                                    if (n44 + n42 > n5) {
                                        n44 = n5 - n42;
                                    }
                                    Rasterizer2D.Rasterizer2D_fillRectangle(n43, n44, n41, n42, -34154706);
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n43, n44, n41, n42, 0);
                                    final String field2293 = widget.field2916;
                                    int n45 = n44 + fontPlain12.al + 2;
                                    String s2 = class121.method720(field2293, widget, (short)(-31386));
                                    while (s2.length() > 0) {
                                        final int index2 = s2.indexOf(class96.aq);
                                        String substring2;
                                        if (-1 != index2) {
                                            substring2 = s2.substring(0, index2);
                                            s2 = s2.substring(4 + index2);
                                        }
                                        else {
                                            substring2 = s2;
                                            s2 = "";
                                        }
                                        class492.xb(fontPlain12, substring2, n43 + 3, n45, 0, -1);
                                        n45 += 1 + fontPlain12.al;
                                    }
                                }
                                if (9 == widget.type * 883712245) {
                                    int n46;
                                    int n47;
                                    int n48;
                                    int n49;
                                    if (widget.isScrollBar) {
                                        n46 = n10;
                                        n47 = n11 + 1473950221 * widget.height;
                                        n48 = n10 + widget.width * -794961409;
                                        n49 = n11;
                                    }
                                    else {
                                        n46 = n10;
                                        n47 = n11;
                                        n48 = -794961409 * widget.width + n10;
                                        n49 = 1840282621 * widget.height + n11;
                                    }
                                    if (-1884587278 * widget.lineWid == 1) {
                                        Rasterizer2D.Rasterizer2D_drawLine(n46, n47, n48, n49, 1409091639 * widget.color);
                                    }
                                    else {
                                        class36.method196(n46, n47, n48, n49, widget.color * 1409091639, 1354778849 * widget.lineWid, (byte)24);
                                    }
                                }
                                else if (widget.type * 883712245 == 12) {
                                    final class314 method600 = widget.method1815((byte)29);
                                    final class309 method601 = widget.method1817(-1740765458);
                                    if (method600 != null && method601 != null && method600.da(264638805)) {
                                        final Font font2 = widget.getFont(-1939810135);
                                        if (null != font2) {
                                            Client.field565.method2637(n10, n11, widget.width * -794961409, 1473950221 * widget.height, class314.jo(method600, -974489383), class314.method1714(method600, -91399205), method600.method1769(983603378), method600.method1753(1996372773), method600.method1745((byte)(-39)), 1988017620);
                                            final int n50 = widget.isIf3 ? (widget.spriteShadow * -353676735) : -1;
                                            if (!class314.method1728(method600, 1937780843) && method600.method1740(-2142536749).method2004(632728558)) {
                                                Client.field565.method2639(method601.field2816 * 1912484269, n50, method601.field2817 * -90398499, 216034339 * method601.field2818, 583683555);
                                                Client.field565.method2638(method600.method1741((byte)(-32)), font2, (byte)29);
                                            }
                                            else {
                                                Client.field565.method2639(widget.color * -358017576, n50, -90398499 * method601.field2817, 216034339 * method601.field2818, -544860265);
                                                Client.field565.method2638(method600.method1740(-1627765654), font2, (byte)(-67));
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public NodeDeque io() {
        return Client.field567;
    }
    
    static final void zc(final Widget[] field2292, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
        class18.method68(-1316527871);
        for (int i = 0; i < field2292.length; ++i) {
            final Widget widget = field2292[i];
            if (widget != null) {
                if (widget.parentId * 913615679 != n) {
                    if (n != -1412584499) {
                        continue;
                    }
                    if (Client.clickedWidget != widget) {
                        continue;
                    }
                }
                int n9;
                if (n8 == -1) {
                    Client.rootWidgetXs[Client.rootWidgetCount * -356793645] = n6 + -1610754946 * widget.x;
                    Client.rootWidgetYs[-356793645 * Client.rootWidgetCount] = widget.y * -980907723 + n7;
                    Client.rootWidgetWidths[-670551757 * Client.rootWidgetCount] = 1552451991 * widget.width;
                    Client.rootWidgetHeights[-472857051 * Client.rootWidgetCount] = -1913550630 * widget.height;
                    n9 = (Client.rootWidgetCount += 1127867739) * 1670428383 - 1;
                }
                else {
                    n9 = n8;
                }
                widget.rootIndex = n9 * -1254589459;
                widget.cycle = -95399417 * Client.cycle;
                if (!widget.modelOrthog || !class393.isComponentHidden(widget, (byte)1)) {
                    if (1021339961 * widget.contentType > 0) {
                        MouseHandler.method193(widget, 1279063211);
                    }
                    int n10 = n6 + 262951665 * widget.x;
                    int n11 = n7 + -747355095 * widget.y;
                    int n12 = 365639904 * widget.transparencyTop;
                    if (widget == Client.clickedWidget) {
                        if (-1412584499 != n && !widget.spriteFlipH) {
                            WorldMapSection2.field2292 = field2292;
                            class230.field2130 = n6 * -1940447936;
                            class101.field1082 = -1606832003 * n7;
                            continue;
                        }
                        if (Client.isDraggingWidget && Client.field540) {
                            final int n13 = -430607376 * MouseHandler.MouseHandler_x;
                            final int n14 = MouseHandler.MouseHandler_y * -11659223;
                            int n15 = n13 - Client.widgetClickX * 201194000;
                            int n16 = n14 - 1902621241 * Client.widgetClickY;
                            if (n15 < 1084046795 * Client.field495) {
                                n15 = Client.field495 * 1084046795;
                            }
                            if (n15 + -794961409 * widget.width > -794961409 * Client.clickedWidgetParent.width + -1077523334 * Client.field495) {
                                n15 = -716256603 * Client.field495 + Client.clickedWidgetParent.width * 1709883158 - widget.width * 1624990263;
                            }
                            if (n16 < Client.field542 * -746723443) {
                                n16 = Client.field542 * -746723443;
                            }
                            if (1473950221 * widget.height + n16 > Client.clickedWidgetParent.height * 1660921681 + -1837037475 * Client.field542) {
                                n16 = Client.clickedWidgetParent.height * -363094072 + Client.field542 * -746723443 - 852346784 * widget.height;
                            }
                            n10 = n15;
                            n11 = n16;
                        }
                        if (!widget.spriteFlipH) {
                            n12 = 1472698609;
                        }
                    }
                    int n23;
                    int n24;
                    int n25;
                    int n26;
                    if (9 == widget.type * 883712245) {
                        int n17 = n10;
                        int n18 = n11;
                        int n19 = n10 + -794961409 * widget.width;
                        int n20 = widget.height * 1473950221 + n11;
                        if (n19 < n17) {
                            final int n21 = n17;
                            n17 = n19;
                            n19 = n21;
                        }
                        if (n20 < n18) {
                            final int n22 = n18;
                            n18 = n20;
                            n20 = n22;
                        }
                        ++n19;
                        ++n20;
                        n23 = ((n17 > n2) ? n17 : n2);
                        n24 = ((n18 > n3) ? n18 : n3);
                        n25 = ((n19 < n4) ? n19 : n4);
                        n26 = ((n20 < n5) ? n20 : n5);
                    }
                    else {
                        final int n27 = widget.width * -1328152087 + n10;
                        final int n28 = widget.height * 1352628515 + n11;
                        n23 = ((n10 > n2) ? n10 : n2);
                        n24 = ((n11 > n3) ? n11 : n3);
                        n25 = ((n27 < n4) ? n27 : n4);
                        n26 = ((n28 < n5) ? n28 : n5);
                    }
                    if (widget.modelOrthog) {
                        if (n23 >= n25) {
                            continue;
                        }
                        if (n24 >= n26) {
                            continue;
                        }
                    }
                    if (widget.contentType * -1058542473 != 0) {
                        if (1021339961 * widget.contentType == -1741954320) {
                            if (class20.clientPreferences.method562((short)14081)) {
                                n11 += 15;
                                WallDecoration.fontPlain12.as("Fps:" + Client.aa * 1829595766, n10 + 667579801 * widget.width, n11, 204294659, -1);
                                n11 += 15;
                                final Runtime runtime = Runtime.getRuntime();
                                final int j = (int)((runtime.totalMemory() - runtime.freeMemory()) / 1024L);
                                int n29 = 42550884;
                                if (j > 327680 && !Client.isLowDetail) {
                                    n29 = -200571188;
                                }
                                WallDecoration.fontPlain12.as("Mem:" + j + "k", n10 + -794961409 * widget.width, n11, n29, -1);
                                n11 += 15;
                            }
                            continue;
                        }
                        else {
                            if (widget.contentType * 2024111464 == 1337) {
                                Client.viewportX = n10 * 563689483;
                                Client.viewportY = n11 * 1645548713;
                                class18.drawEntities(n10, n11, widget.width * -794961409, widget.height * -793792751, 336031301);
                                Client.field573[widget.rootIndex * 4213763] = true;
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1021339961 * widget.contentType == -1512303239) {
                                class155.drawMinimap(widget, n10, n11, n9, -1843193291);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1339 == widget.contentType * 1021339961) {
                                DynamicObject.drawCompass(widget, n10, n11, n9, -431481921);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (widget.contentType * 1021339961 == 1400) {
                                WorldMap.flashCategory(class126.worldMap, n10, n11, -794961409 * widget.width, widget.height * -1860660709, Client.cycle * 1474766100, -2108362594);
                            }
                            if (1401 == 1021339961 * widget.contentType) {
                                class126.worldMap.drawOverview(n10, n11, widget.width * -1887353857, 1235012128 * widget.height, (byte)(-89));
                            }
                            if (widget.contentType * 1021339961 == 1402) {
                                class121.field1184.draw(n10, Client.cycle * -1617723489, -1428334597);
                            }
                        }
                    }
                    if (0 == 883712245 * widget.type) {
                        if (!widget.modelOrthog && class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (!widget.modelOrthog) {
                            if (widget.scrollY * 1223232735 > widget.scrollHeight * -1273374131 - widget.height * 1473950221) {
                                widget.scrollY = widget.scrollHeight * 1941770835 - widget.height * 978547347;
                            }
                            if (1223232735 * widget.scrollY < 0) {
                                widget.scrollY = 0;
                            }
                        }
                        class11.drawInterface(field2292, widget.id * 1713081171, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * -1222099823, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - widget.scrollY * 1223232735, n9, -465475629);
                        }
                        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(1713081171 * widget.id);
                        if (null != interfaceParent) {
                            class13.drawWidgets(interfaceParent.group * 944864121, n23, n24, n25, n26, n10, n11, n9, (byte)(-11));
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(-1524500694);
                    }
                    else if (11 == widget.type * 1208142921) {
                        if (class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * -1816074197, n23, n24, n25, n26, n10 - 936654890 * widget.scrollX, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(227232682);
                    }
                    if (Client.isResizable || Client.field519[n9] || 235961581 * Client.gameDrawingMode > 1) {
                        if (0 == 883712245 * widget.type && !widget.modelOrthog && widget.scrollHeight * 1616135606 > widget.height * 1473950221) {
                            class103.drawScrollBar(n10 + widget.width * -794961409, n11, widget.scrollY * -1716609284, 1473950221 * widget.height, 789397886 * widget.scrollHeight, (byte)0);
                        }
                        if (1 != widget.type * 463148520) {
                            if (-190047686 * widget.type == 3) {
                                int n30;
                                if (class452.runCs1(widget, 1494442345)) {
                                    n30 = widget.color2 * 1449039161;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 24624452 * widget.mouseOverColor2 != 0) {
                                        n30 = 1174289293 * widget.mouseOverColor2;
                                    }
                                }
                                else {
                                    n30 = widget.color * -1141244816;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != widget.mouseOverColor * 49291370) {
                                        n30 = widget.mouseOverColor * -3204933;
                                    }
                                }
                                if (widget.noScrollThrough) {
                                    switch (widget.fillMode.field4118 * -894516731) {
                                        default: {
                                            if (n12 == 0) {
                                                Rasterizer2D.Rasterizer2D_fillRectangle(n10, n11, widget.width * 1698228524, widget.height * 748190711, n30);
                                                break;
                                            }
                                            Rasterizer2D.Rasterizer2D_fillRectangleAlpha(n10, n11, -794961409 * widget.width, 169217511 * widget.height, n30, 256 - (n12 & 0xFF));
                                            break;
                                        }
                                        case 2: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradientAlpha(n10, n11, -2087256637 * widget.width, -2098510045 * widget.height, widget.color * -2044583002, widget.color2 * 1449039161, 255 - (widget.transparencyTop * 1634279623 & 0xFF), 255 - (widget.transparencyBot * -1519858387 & 0x66E1D657));
                                            break;
                                        }
                                        case 1: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradient(n10, n11, -1897507091 * widget.width, 557410457 * widget.height, -2136293318 * widget.color, widget.color2 * 1449039161);
                                            break;
                                        }
                                    }
                                }
                                else if (n12 == 0) {
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n10, n11, widget.width * -1053297097, 1473950221 * widget.height, n30);
                                }
                                else {
                                    Rasterizer2D.Rasterizer2D_drawRectangleAlpha(n10, n11, widget.width * -794961409, 529550270 * widget.height, n30, 256 - (n12 & 0xFF));
                                }
                            }
                            else if (-730383470 * widget.type == 4) {
                                final Font font = widget.getFont(-937238736);
                                if (font == null) {
                                    if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1600593027);
                                    }
                                }
                                else {
                                    String str = widget.field2916;
                                    int n31;
                                    if (class452.runCs1(widget, 1981758054)) {
                                        n31 = widget.color2 * 1449039161;
                                        if (MidiPcmStream.mousedOverWidgetIf1 == widget && widget.mouseOverColor2 * -1098167586 != 0) {
                                            n31 = widget.mouseOverColor2 * -2054152990;
                                        }
                                        if (widget.buttonText.length() > 0) {
                                            str = widget.buttonText;
                                        }
                                    }
                                    else {
                                        n31 = widget.color * 1050328208;
                                        if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != 1614966389 * widget.mouseOverColor) {
                                            n31 = widget.mouseOverColor * 1056143771;
                                        }
                                    }
                                    if (widget.modelOrthog && -1 != widget.itemId * 186503292) {
                                        final ItemComposition set = HealthBarUpdate.set(-2006098851 * widget.itemId, (byte)59);
                                        str = set.name;
                                        if (str == null) {
                                            str = Strings.at;
                                        }
                                        if ((1 == -781315634 * set.isStackable || 1 != 114959116 * widget.itemQuantity) && -1 != 1336975799 * widget.itemQuantity) {
                                            str = class383.method2081(792168647, -2124848372) + str + class96.al + " " + (char)(-111436903) + ArchiveDiskAction.formatItemStacks(widget.itemQuantity * 1336975799, (short)17342);
                                        }
                                    }
                                    if (widget == Client.meslayerContinueWidget) {
                                        str = Strings.gi;
                                        n31 = 1409091639 * widget.color;
                                    }
                                    if (!widget.modelOrthog) {
                                        str = class121.method720(str, widget, (short)(-29682));
                                    }
                                    font.az(str, n10, n11, widget.width * -1247827725, widget.height * -1040688999, n31, widget.isIf3 ? 0 : -1, Decimator.scaleRate(1634279623 * widget.transparencyTop, 862737214), widget.textXAlignment * 1002257489, widget.textYAlignment * -1553957401, -1335094201 * widget.textLineHeight);
                                }
                            }
                            else if (5 == -284366274 * widget.type) {
                                if (!widget.modelOrthog) {
                                    final SpritePixels sprite = widget.getSprite(class452.runCs1(widget, 637559510), class14.urlRequester, (byte)0);
                                    if (sprite != null) {
                                        sprite.drawAt(n10, n11);
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1273096202);
                                    }
                                }
                                else {
                                    SpritePixels spritePixels;
                                    if (-1 != -2006098851 * widget.itemId) {
                                        spritePixels = class252.getItemSprite(widget.itemId * 1472244661, widget.itemQuantity * 1336975799, widget.outline * 1638912775, -353676735 * widget.spriteShadow, widget.itemQuantityMode * 643339119, false, 1283335695);
                                    }
                                    else {
                                        spritePixels = widget.getSprite(false, class14.urlRequester, (byte)0);
                                    }
                                    if (null != spritePixels) {
                                        final int width = spritePixels.width;
                                        final int height = spritePixels.height;
                                        if (widget.field2913) {
                                            Rasterizer2D.Rasterizer2D_expandClip(n10, n11, widget.width * -2009858192 + n10, widget.height * 73854740 + n11);
                                            final int n32 = (widget.width * -794961409 + (width - 1)) / width;
                                            final int n33 = (height - 1 + widget.height * 638623349) / height;
                                            for (int k = 0; k < n32; ++k) {
                                                for (int l = 0; l < n33; ++l) {
                                                    if (widget.spriteAngle * 121443844 != 0) {
                                                        spritePixels.method2632(k * width + n10 + width / 2, height / 2 + (n11 + l * height), widget.spriteAngle * -1225274927, -1929357208);
                                                    }
                                                    else if (n12 != 0) {
                                                        spritePixels.drawTransAt(n10 + width * k, height * l + n11, -1229336592 - (n12 & 0x853D99E6));
                                                    }
                                                    else {
                                                        spritePixels.drawAt(k * width + n10, n11 + height * l);
                                                    }
                                                }
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                        else {
                                            final int n34 = -576720896 * widget.width / width;
                                            if (widget.spriteAngle * -738051099 != 0) {
                                                spritePixels.method2632(widget.width * -794961409 / 2 + n10, widget.height * 1473950221 / 2 + n11, widget.spriteAngle * -738051099, n34);
                                            }
                                            else if (n12 != 0) {
                                                spritePixels.drawTransScaledAt(n10, n11, widget.width * -835142823, widget.height * 1473950221, 256 - (n12 & 0x1D95F1AF));
                                            }
                                            else if (widget.width * -794961409 != width || height != widget.height * 1739610397) {
                                                spritePixels.drawScaledAt(n10, n11, -794961409 * widget.width, widget.height * -788654251);
                                            }
                                            else {
                                                spritePixels.drawAt(n10, n11);
                                            }
                                        }
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -2009095431);
                                    }
                                }
                            }
                            else if (883712245 * widget.type == 6) {
                                final boolean runCs1 = class452.runCs1(widget, -970472079);
                                int n35;
                                if (runCs1) {
                                    n35 = widget.sequenceId2 * 754419161;
                                }
                                else {
                                    n35 = -1526544909 * widget.sequenceId;
                                }
                                Model model = null;
                                int n36 = 0;
                                if (-1 != -2006098851 * widget.itemId) {
                                    final ItemComposition set2 = HealthBarUpdate.set(-2006098851 * widget.itemId, (byte)66);
                                    if (set2 != null) {
                                        model = set2.getCountObj(widget.itemQuantity * 1393499129, 284979348).getModel(1, -311447951);
                                        if (null != model) {
                                            model.calculateBoundsCylinder();
                                            n36 = 1550732737 * model.et / 2;
                                        }
                                        else {
                                            class144.invalidateWidget(widget, -1831986467);
                                        }
                                    }
                                }
                                else if (widget.modelType * -123768459 == 5) {
                                    if (0 == -2040625229 * widget.modelId) {
                                        model = Client.playerAppearance.getModel(null, -1, null, -1, (byte)87);
                                    }
                                    else {
                                        model = MusicPatchNode.localPlayer.getModel((byte)(-2));
                                    }
                                }
                                else if (1432342981 * widget.modelType == 7) {
                                    model = widget.field2894.getModel(null, -1, ItemContainer.SpotAnimationDefinition_get(MusicPatchNode.localPlayer.cd * 1590591885, (byte)103), -15175183 * MusicPatchNode.localPlayer.bp, (byte)88);
                                }
                                else {
                                    NPCComposition definition = null;
                                    NewShit method599 = null;
                                    if (6 == 472842938 * widget.modelType) {
                                        final int n37 = widget.modelId * -168077555;
                                        if (n37 >= 0 && n37 < Client.npcs.length) {
                                            final NPC npc = Client.npcs[n37];
                                            if (npc != null) {
                                                definition = npc.definition;
                                                method599 = npc.method599(-2011668247);
                                            }
                                        }
                                    }
                                    SequenceDefinition spotAnimationDefinition_get = null;
                                    int n38 = -1;
                                    if (n35 != -1) {
                                        spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n35, (byte)72);
                                        n38 = 1575517389 * widget.modelFrame;
                                    }
                                    model = widget.getModel(spotAnimationDefinition_get, n38, runCs1, MusicPatchNode.localPlayer.appearance, definition, method599, 1868904221);
                                    if (model == null && Widget.field2877) {
                                        class144.invalidateWidget(widget, -714356189);
                                    }
                                }
                                WorldMapArea.getRegionLowX(n10 + widget.width * -432239278 / 2, widget.height * 1473950221 / 2 + n11, (byte)32);
                                final int n39 = widget.modelZoom * -1277716619 * Rasterizer3D.Rasterizer3D_sine[797932055 * widget.modelAngleX] >> 16;
                                final int n40 = 942674363 * widget.modelZoom * Rasterizer3D.Rasterizer3D_cosine[1707646116 * widget.modelAngleX] >> 16;
                                if (model != null) {
                                    if (!widget.modelOrthog) {
                                        model.method1343(0, widget.modelAngleY * 1599144181, 0, widget.modelAngleX * 797932055, 0, n39, n40);
                                    }
                                    else {
                                        model.calculateBoundsCylinder();
                                        if (widget.field2891) {
                                            model.method1327(0, -480949115 * widget.modelAngleY, -989483448 * widget.modelAngleZ, 797932055 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), n40 + widget.modelOffsetY * 39404101, 912047205 * widget.modelZoom);
                                        }
                                        else {
                                            model.method1343(0, widget.modelAngleY * -608251785, -1188179443 * widget.modelAngleZ, 797932055 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), 844501061 * widget.modelOffsetY + n40);
                                        }
                                    }
                                }
                                Tiles.method474(1441948024);
                            }
                            else {
                                if (8 == widget.type * 883712245 && class130.field1274 == widget && Client.field515 * -1307675315 == Client.field514 * 215597333) {
                                    int n41 = 0;
                                    int n42 = 0;
                                    final Font fontPlain12 = WallDecoration.fontPlain12;
                                    String s = class121.method720(widget.field2916, widget, (short)(-2689));
                                    while (s.length() > 0) {
                                        final int index = s.indexOf(class96.aq);
                                        String substring;
                                        if (-1 != index) {
                                            substring = s.substring(0, index);
                                            s = s.substring(4 + index);
                                        }
                                        else {
                                            substring = s;
                                            s = "";
                                        }
                                        final int bf = fontPlain12.bf(substring);
                                        if (bf > n41) {
                                            n41 = bf;
                                        }
                                        n42 += 1 + fontPlain12.al;
                                    }
                                    n41 += 6;
                                    n42 += 7;
                                    int n43 = n10 + widget.width * -794961409 - 5 - n41;
                                    int n44 = widget.height * 1017687548 + n11 + 5;
                                    if (n43 < 5 + n10) {
                                        n43 = 5 + n10;
                                    }
                                    if (n41 + n43 > n4) {
                                        n43 = n4 - n41;
                                    }
                                    if (n44 + n42 > n5) {
                                        n44 = n5 - n42;
                                    }
                                    Rasterizer2D.Rasterizer2D_fillRectangle(n43, n44, n41, n42, 1480688020);
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n43, n44, n41, n42, 0);
                                    final String field2293 = widget.field2916;
                                    int n45 = n44 + fontPlain12.al + 2;
                                    String s2 = class121.method720(field2293, widget, (short)(-10478));
                                    while (s2.length() > 0) {
                                        final int index2 = s2.indexOf(class96.aq);
                                        String substring2;
                                        if (-1 != index2) {
                                            substring2 = s2.substring(0, index2);
                                            s2 = s2.substring(4 + index2);
                                        }
                                        else {
                                            substring2 = s2;
                                            s2 = "";
                                        }
                                        class492.xb(fontPlain12, substring2, n43 + 3, n45, 0, -1);
                                        n45 += 1 + fontPlain12.al;
                                    }
                                }
                                if (9 == widget.type * 1788162385) {
                                    int n46;
                                    int n47;
                                    int n48;
                                    int n49;
                                    if (widget.isScrollBar) {
                                        n46 = n10;
                                        n47 = n11 + 1117554500 * widget.height;
                                        n48 = n10 + widget.width * -794961409;
                                        n49 = n11;
                                    }
                                    else {
                                        n46 = n10;
                                        n47 = n11;
                                        n48 = -794961409 * widget.width + n10;
                                        n49 = 1473950221 * widget.height + n11;
                                    }
                                    if (-736416983 * widget.lineWid == 1) {
                                        Rasterizer2D.Rasterizer2D_drawLine(n46, n47, n48, n49, -43440439 * widget.color);
                                    }
                                    else {
                                        class36.method196(n46, n47, n48, n49, widget.color * 1409091639, 104063785 * widget.lineWid, (byte)90);
                                    }
                                }
                                else if (widget.type * -1760518000 == 12) {
                                    final class314 method600 = widget.method1815((byte)(-76));
                                    final class309 method601 = widget.method1817(-1740765458);
                                    if (method600 != null && method601 != null && method600.da(-1226903248)) {
                                        final Font font2 = widget.getFont(-1435080237);
                                        if (null != font2) {
                                            Client.field565.method2637(n10, n11, widget.width * -53897656, 1577932512 * widget.height, class314.jo(method600, -587390350), class314.method1714(method600, -91399205), method600.method1769(1410345982), method600.method1753(-787675047), method600.method1745((byte)10), 284194478);
                                            final int n50 = widget.isIf3 ? (widget.spriteShadow * -518536352) : -1;
                                            if (!class314.method1728(method600, 1749390616) && method600.method1740(-1921104025).method2004(1988620543)) {
                                                Client.field565.method2639(method601.field2816 * 1912484269, n50, method601.field2817 * -90398499, 216034339 * method601.field2818, -1076077108);
                                                Client.field565.method2638(method600.method1741((byte)32), font2, (byte)(-64));
                                            }
                                            else {
                                                Client.field565.method2639(widget.color * 1409091639, n50, -90398499 * method601.field2817, 216034339 * method601.field2818, -615353442);
                                                Client.field565.method2638(method600.method1740(-1792903342), font2, (byte)(-28));
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static void ox(final SceneTileModel sceneTileModel, final int n, final int n2, final int n3, final int n4) {
        final SceneTileModel sceneTileModel2 = Client.zz[sceneTileModel.getShape() << 2 | (sceneTileModel.getRotation() & 0x3)];
        final int[] vertexX = sceneTileModel2.getVertexX();
        final int[] vertexZ = sceneTileModel2.getVertexZ();
        final int[] faceX = sceneTileModel2.getFaceX();
        final int[] faceY = sceneTileModel2.getFaceY();
        final int[] faceZ = sceneTileModel2.getFaceZ();
        final int n5 = n3 - n;
        final int n6 = n4 - n2;
        for (int i = 0; i < vertexX.length; ++i) {
            SceneTileModel.field2121[i] = n + (vertexX[i] * n5 >> 7);
            SceneTileModel.field2122[i] = n2 + ((128 - vertexZ[i]) * n6 >> 7);
        }
        for (int j = 0; j < faceX.length; ++j) {
            final int n7 = faceX[j];
            final int n8 = faceY[j];
            final int n9 = faceZ[j];
            final boolean b = sceneTileModel2.getTriangleColorA()[j] == 0;
            final int n10 = b ? sceneTileModel.getModelUnderlay() : sceneTileModel.getModelOverlay();
            if (!b || n10 != 0) {
                class220.ve(SceneTileModel.field2122[n7], SceneTileModel.field2122[n8], SceneTileModel.field2122[n9], SceneTileModel.field2121[n7], SceneTileModel.field2121[n8], SceneTileModel.field2121[n9], 0.0f, 0.0f, 0.0f, n10);
            }
        }
    }
    
    public int ls() {
        return class100.musicTrackVolume * -280777997;
    }
    
    public static void ll(final Widget widget, final int n, final int n2, final float n3) {
        final SpriteMask un = widget.un(false);
        final Player fv = ScriptFrame.client.fv();
        final int fu = fv.fu();
        final int gk = fv.gk();
        final SpritePixels[] gg = ScriptFrame.client.gg();
        class220.ui(n, n2, n + un.he(), n2 + un.da());
        for (int i = 0; i < Client.mapIconCount * 1573101195; ++i) {
            ScriptFrame.client.sq(n, n2, (int)(((Client.mapIconXs[i] << 7) + 64 - fu) * n3), (int)(((Client.mapIconYs[i] << 7) + 64 - gk) * n3), Client.mapIcons[i], un);
        }
        for (int j = 0; j < 104; ++j) {
            for (int k = 0; k < 104; ++k) {
                if (Client.groundItems[GameEngine.Client_plane * -1727408401][j][k] != null) {
                    ScriptFrame.client.sq(n, n2, (int)(((j << 7) + 64 - fu) * n3), (int)(((k << 7) + 64 - gk) * n3), gg[0], un);
                }
            }
        }
        final int[] qm = ScriptFrame.client.qm();
        final int qe = ScriptFrame.client.qe();
        final NPC[] pb = ScriptFrame.client.pb();
        for (int l = 0; l < qe; ++l) {
            final NPC npc = pb[qm[l]];
            if (npc != null && npc.hb() != null) {
                NPCComposition npcComposition = npc.hb();
                if (npcComposition != null && npcComposition.getConfigs() != null) {
                    npcComposition = npcComposition.xw();
                }
                if (npcComposition != null && npcComposition.isMinimapVisible() && npcComposition.isInteractible()) {
                    ScriptFrame.client.sq(n, n2, (int)((npc.fu() - fu) * n3), (int)((npc.gk() - gk) * n3), gg[1], un);
                }
            }
        }
        final int[] jc = ScriptFrame.client.jc();
        final int nq = ScriptFrame.client.nq();
        final Player[] ic = ScriptFrame.client.ic();
        final Player fv2 = ScriptFrame.client.fv();
        for (int n4 = 0; n4 < nq; ++n4) {
            final Player player = ic[jc[n4]];
            if (player != null && player.sn() != null && !player.ny() && player != fv2) {
                final int n5 = player.fu() - fu;
                final int n6 = player.gk() - gk;
                final int n7 = (int)(n5 * n3);
                final int n8 = (int)(n6 * n3);
                SpritePixels spritePixels;
                if (player.isFriend()) {
                    spritePixels = gg[3];
                }
                else if (fv2.getTeam() != 0 && player.getTeam() != 0 && fv2.getTeam() == player.getTeam()) {
                    spritePixels = gg[4];
                }
                else if (player.isFriendsChatMember()) {
                    spritePixels = gg[5];
                }
                else if (player.isClanMember()) {
                    spritePixels = gg[6];
                }
                else {
                    spritePixels = gg[2];
                }
                ScriptFrame.client.sq(n, n2, n7, n8, spritePixels, un);
            }
        }
        final int hintArrowType = ScriptFrame.client.getHintArrowType();
        if (hintArrowType != 0 && ScriptFrame.client.getGameCycle() % 20 < 10) {
            if (hintArrowType == 1 || hintArrowType == 10) {
                final Actor actor = (hintArrowType == 1) ? ScriptFrame.client.xm() : ScriptFrame.client.pt();
                if (actor != null) {
                    ScriptFrame.client.tz(n, n2, (int)((actor.fu() - fu) * n3), (int)((actor.gk() - gk) * n3), ScriptFrame.client.df()[1], un);
                }
            }
            else if (hintArrowType == 2) {
                ScriptFrame.client.tz(n, n2, (int)(((ScriptFrame.client.nm() - ScriptFrame.client.getBaseX() << 7) + ScriptFrame.client.lo() - fu) * n3), (int)(((ScriptFrame.client.dd() - ScriptFrame.client.getBaseY() << 7) + ScriptFrame.client.vg() - gk) * n3), ScriptFrame.client.df()[1], un);
            }
        }
        final int sl = ScriptFrame.client.sl();
        final int yg = ScriptFrame.client.yg();
        if (sl != 0) {
            ScriptFrame.client.sq(n, n2, (int)(((sl << 7) + 64 - fu) * n3), (int)(((yg << 7) + 64 - gk) * n3), ScriptFrame.client.df()[0], un);
        }
        if (!fv.ny()) {
            class220.lv(un.he() / 2 + n - 1, un.da() / 2 + n2 - 1, 3, 3, 16777215);
        }
    }
    
    static void rr(final int n, final int n2, final int n3) {
        if (n == 0) {
            return;
        }
        final int n4 = n >> 8;
        final int n5 = n >> 4 & 0x7;
        final int n6 = n & 0xF;
        Client.soundEffectIds[-297150195 * Client.soundEffectCount] = n4;
        Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n5;
        Client.queuedSoundEffectDelays[-297150195 * Client.soundEffectCount] = 0;
        Client.soundEffects[-297150195 * Client.soundEffectCount] = null;
        Client.soundLocations[Client.soundEffectCount * -297150195] = n6 + (((n2 - 64) / 128 << 16) + ((n3 - 64) / 128 << 8));
        Client.soundEffectCount += 831233477;
    }
    
    static final String zf(final int n, final int n2) {
        final int n3 = n2 - n;
        if (n3 < -9) {
            return class383.method2081(16711680, 517521685);
        }
        if (n3 < -6) {
            return class383.method2081(16723968, 1513707984);
        }
        if (n3 < -3) {
            return class383.method2081(16740352, 1087483466);
        }
        if (n3 < 0) {
            return class383.method2081(16756736, 930201077);
        }
        if (n3 > 9) {
            return class383.method2081(65280, -1399168650);
        }
        if (n3 > 6) {
            return class383.method2081(4259584, -1299200232);
        }
        if (n3 > 3) {
            return class383.method2081(8453888, 184192675);
        }
        if (n3 > 0) {
            return class383.method2081(12648192, -1279077425);
        }
        return class383.method2081(16776960, 1065343845);
    }
    
    public EvictingDualNodeHashTable mq() {
        return Script.Script_cached;
    }
    
    public void bq(final int scene_selectedY) {
        Scene.Scene_selectedY = scene_selectedY;
    }
    
    public static void doCycleJs5Connect(final Client client, final String s) throws IOException {
        if (client == null) {
            client.ol();
        }
        final URL url = new URL(ViewportMouse.field2213 + "public/v1/games/YCfdbvr2pM1zUYMxJRexZY/play");
        final class394 class394 = new class394();
        class394.method2108(s, -711773314);
        final class9 field24 = class9.field24;
        final OtlTokenRequester field25 = client.field399;
        if (null != field25) {
            client.field400 = field25.request(field24.method30((byte)(-30)), url, class394.method2105(1691951415), "");
            return;
        }
        client.field410 = class14.ni(client.field529, new class10(url, field24, class394, client.field401), (byte)1);
    }
    
    void doCycleJs5Connect(final int n) {
        try {
            if (1551453085 * NetCache.NetCache_crcMismatches >= 4) {
                if (n != -121494842) {
                    throw new IllegalStateException();
                }
                this.br("js5crc", -552728071);
                class138.updateGameState(1000, 2128571652);
            }
            else {
                if (-1386597723 * NetCache.NetCache_ioExceptions >= 4) {
                    if (n != -121494842) {
                        throw new IllegalStateException();
                    }
                    if (Client.gameState * -1275976559 <= 5) {
                        this.br("js5io", -988697268);
                        class138.updateGameState(1000, 1730523932);
                        return;
                    }
                    Client.js5Cycles = 1891795480;
                    NetCache.NetCache_ioExceptions = -483971193;
                }
                if ((Client.js5Cycles += 185484651) * -95141699 + 1 > 0) {
                    return;
                }
                try {
                    if (Client.js5ConnectState * -1348062367 == 0) {
                        if (n != -121494842) {
                            throw new IllegalStateException();
                        }
                        WorldMapSection0.js5SocketTask = Client.af.newSocketTask(UserComparator8.worldHost, ItemContainer.currentPort * -1275160227, -1731609371);
                        Client.js5ConnectState += 1300738209;
                    }
                    if (-1348062367 * Client.js5ConnectState == 1) {
                        if (n != -121494842) {
                            throw new IllegalStateException();
                        }
                        if (2 == WorldMapSection0.js5SocketTask.status) {
                            if (n != -121494842) {
                                throw new IllegalStateException();
                            }
                            this.js5Error(-1, (byte)(-19));
                            return;
                        }
                        else if (WorldMapSection0.js5SocketTask.status == 1) {
                            if (n != -121494842) {
                                throw new IllegalStateException();
                            }
                            Client.js5ConnectState += 1300738209;
                        }
                    }
                    if (2 == -1348062367 * Client.js5ConnectState) {
                        if (n != -121494842) {
                            throw new IllegalStateException();
                        }
                        KitDefinition.js5Socket = class186.method1008((Socket)WorldMapSection0.js5SocketTask.result, 40000, 5000, -1233454888);
                        final Buffer buffer = new Buffer(5);
                        buffer.writeShort(15, (byte)34);
                        buffer.writeInt(213, -2081835031);
                        KitDefinition.js5Socket.write(buffer.array, 0, 5, -2115422184);
                        Client.js5ConnectState += 1300738209;
                        class132.field1276 = class96.clockNow(1702705842) * -51531514477814883L;
                    }
                    if (Client.js5ConnectState * -1348062367 == 3) {
                        if (n != -121494842) {
                            throw new IllegalStateException();
                        }
                        if (KitDefinition.js5Socket.available(-1098401834) > 0) {
                            if (n != -121494842) {
                                throw new IllegalStateException();
                            }
                            final int unsignedByte = KitDefinition.js5Socket.readUnsignedByte(-591957582);
                            if (unsignedByte != 0) {
                                if (n != -121494842) {
                                    throw new IllegalStateException();
                                }
                                this.js5Error(unsignedByte, (byte)(-55));
                                return;
                            }
                            else {
                                Client.js5ConnectState += 1300738209;
                            }
                        }
                        else if (class96.clockNow(2071127077) - class132.field1276 * 4041510135797154485L > 30000L) {
                            if (n != -121494842) {
                                throw new IllegalStateException();
                            }
                            this.js5Error(-2, (byte)(-42));
                            return;
                        }
                    }
                    if (-1348062367 * Client.js5ConnectState == 4) {
                        if (n != -121494842) {
                            throw new IllegalStateException();
                        }
                        final AbstractSocket js5Socket = KitDefinition.js5Socket;
                        boolean b;
                        if (Client.gameState * -1275976559 > 20) {
                            if (n != -121494842) {
                                throw new IllegalStateException();
                            }
                            b = true;
                        }
                        else {
                            b = false;
                        }
                        final boolean b2 = b;
                        if (NetCache.NetCache_socket != null) {
                            try {
                                NetCache.NetCache_socket.close(-2110024060);
                            }
                            catch (Exception ex2) {}
                            NetCache.NetCache_socket = null;
                        }
                        NetCache.NetCache_socket = js5Socket;
                        class177.vmethod3380(b2, 1787184956);
                        NetCache.NetCache_responseHeaderBuffer.offset = 0;
                        Script.NetCache_currentResponse = null;
                        NetCache.NetCache_responseArchiveBuffer = null;
                        NetCache.field3504 = 0;
                        while (true) {
                            final NetFileRequest netFileRequest = (NetFileRequest)NetCache.NetCache_pendingPriorityResponses.first();
                            if (netFileRequest == null) {
                                break;
                            }
                            NetCache.NetCache_pendingPriorityWrites.put(netFileRequest, netFileRequest.hr);
                            NetCache.NetCache_pendingPriorityWritesCount -= 1320339335;
                            NetCache.NetCache_pendingPriorityResponsesCount += 1677618233;
                        }
                        if (n != -121494842) {
                            return;
                        }
                        while (true) {
                            final NetFileRequest netFileRequest2 = (NetFileRequest)NetCache.NetCache_pendingResponses.first();
                            if (netFileRequest2 == null) {
                                break;
                            }
                            NetCache.NetCache_pendingWritesQueue.addLast(netFileRequest2);
                            NetCache.NetCache_pendingWrites.put(netFileRequest2, netFileRequest2.hr);
                            NetCache.NetCache_pendingWritesCount -= 2069940741;
                            NetCache.NetCache_pendingResponsesCount += 979537415;
                        }
                        if (NetCache.field3506 != 0) {
                            if (n != -121494842) {
                                return;
                            }
                            try {
                                final Buffer buffer2 = new Buffer(4);
                                buffer2.writeShort(4, (byte)50);
                                buffer2.writeShort(NetCache.field3506, (byte)69);
                                buffer2.writeVarInt(0, (byte)(-101));
                                NetCache.NetCache_socket.write(buffer2.array, 0, 4, -2115422184);
                            }
                            catch (IOException ex3) {
                                try {
                                    NetCache.NetCache_socket.close(-1742372907);
                                }
                                catch (Exception ex4) {}
                                NetCache.NetCache_ioExceptions -= 161323731;
                                NetCache.NetCache_socket = null;
                            }
                        }
                        NetCache.NetCache_loadTime = 0;
                        NetCache.field3509 = class96.clockNow(-475221393) * -6047020038529116697L;
                        WorldMapSection0.js5SocketTask = null;
                        KitDefinition.js5Socket = null;
                        Client.js5ConnectState = 0;
                        Client.js5Errors = 0;
                    }
                }
                catch (IOException ex5) {
                    this.js5Error(-3, (byte)(-104));
                }
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.hm(" + ')');
        }
    }
    
    static int tk() {
        return Client.isResizable ? 2 : 1;
    }
    
    public NodeDeque[][][] gk() {
        return Client.groundItems;
    }
    
    public void gp(final int n) {
        class379.musicTrackGroupId = n * -1643562499;
    }
    
    public NodeDeque if() {
        return new NodeDeque();
    }
    
    public int getItemCount() {
        return MouseRecorder.ItemDefinition_fileCount * -1485716275;
    }
    
    static final void vm(final int n, final int n2, final boolean b) {
        if (b && 1717695041 * class28.timeOfPreviousKeyPress == n && 583188571 * class425.field3798 == n2) {
            return;
        }
        class28.timeOfPreviousKeyPress = 1006050753 * n;
        class425.field3798 = n2 * -193171501;
        class138.updateGameState(25, 1345619831);
        WorldMapDecoration.drawLoadingMessage(Strings.ao, true, 1592233764);
        final int n3 = WorldMapData_0.baseX * -1232093375;
        final int n4 = 827352769 * GameObject.baseY;
        WorldMapData_0.baseX = (n - 6) * -102332920;
        GameObject.baseY = 1527335432 * (n2 - 6);
        final int n5 = WorldMapData_0.baseX * -1232093375 - n3;
        final int n6 = GameObject.baseY * 827352769 - n4;
        final int n7 = WorldMapData_0.baseX * -1232093375;
        final int n8 = GameObject.baseY * 827352769;
        for (int i = 0; i < 65536; ++i) {
            final NPC npc = Client.npcs[i];
            if (null != npc) {
                for (int j = 0; j < 10; ++j) {
                    final int[] cf = npc.cf;
                    final int n9 = j;
                    cf[n9] -= n5;
                    final int[] dy = npc.dy;
                    final int n10 = j;
                    dy[n10] -= n6;
                }
                final NPC npc2 = npc;
                npc2.br -= n5 * -1102445696;
                final NPC npc3 = npc;
                npc3.ep -= n6 * -1887439488;
            }
        }
        for (int k = 0; k < 2048; ++k) {
            final Player player = Client.players[k];
            if (player != null) {
                for (int l = 0; l < 10; ++l) {
                    final int[] cf2 = player.cf;
                    final int n11 = l;
                    cf2[n11] -= n5;
                    final int[] dy2 = player.dy;
                    final int n12 = l;
                    dy2[n12] -= n6;
                }
                final Player player2 = player;
                player2.br -= -1102445696 * n5;
                final Player player3 = player;
                player3.ep -= -1887439488 * n6;
            }
        }
        int n13 = 0;
        int n14 = 104;
        int n15 = 1;
        if (n5 < 0) {
            n13 = 103;
            n14 = -1;
            n15 = -1;
        }
        int n16 = 0;
        int n17 = 104;
        int n18 = 1;
        if (n6 < 0) {
            n16 = 103;
            n17 = -1;
            n18 = -1;
        }
        for (int n19 = n13; n14 != n19; n19 += n15) {
            for (int n20 = n16; n20 != n17; n20 += n18) {
                final int n21 = n5 + n19;
                final int n22 = n20 + n6;
                for (int n23 = 0; n23 < 4; ++n23) {
                    if (n21 >= 0 && n22 >= 0 && n21 < 104 && n22 < 104) {
                        Client.groundItems[n23][n19][n20] = Client.groundItems[n23][n21][n22];
                    }
                    else {
                        Client.groundItems[n23][n19][n20] = null;
                    }
                }
            }
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn != null; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            final PendingSpawn pendingSpawn2 = pendingSpawn;
            pendingSpawn2.x -= n5 * -1524387603;
            final PendingSpawn pendingSpawn3 = pendingSpawn;
            pendingSpawn3.y -= n6 * -1930509111;
            if (pendingSpawn.x * 68300005 < 0 || 800888185 * pendingSpawn.y < 0 || pendingSpawn.x * 68300005 >= 104 || 800888185 * pendingSpawn.y >= 104) {
                pendingSpawn.hw();
            }
        }
        if (1494100363 * Client.destinationX != 0) {
            Client.destinationX -= n5 * -1970850269;
            Client.destinationY -= 875414437 * n6;
        }
        Client.soundEffectCount = 0;
        Client.isCameraLocked = false;
        class36.cameraX -= (n5 << 7) * -1682679895;
        class297.cameraZ -= 46344275 * (n6 << 7);
        class33.oculusOrbFocalPointX -= (n5 << 7) * 1293848551;
        class144.oculusOrbFocalPointY -= (n6 << 7) * 892004233;
        Client.field596 = 1715437485;
        NodeDeque.la(Client.graphicsObjects);
        NodeDeque.la(Client.projectiles);
        for (int n24 = 0; n24 < 4; ++n24) {
            Client.collisionMaps[n24].clear(1900381387);
        }
    }
    
    public void vm() {
        this.wa = 0;
    }
    
    public void wd(final int scene_cameraZ) {
        Scene.Scene_cameraZ = scene_cameraZ;
    }
    
    static final void wd(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn2; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn2.plane * 593068225 == n && pendingSpawn2.x * 68300005 == n2 && n3 == 800888185 * pendingSpawn2.y && n4 == -1586499579 * pendingSpawn2.type) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn == null) {
            pendingSpawn = new PendingSpawn();
            pendingSpawn.plane = -1417998527 * n;
            pendingSpawn.type = n4 * 2090818765;
            pendingSpawn.x = n2 * -1524387603;
            pendingSpawn.y = n3 * -1930509111;
            pendingSpawn.field931 = 620279391;
            Messages.method656(pendingSpawn, 1256969151);
            Client.pendingSpawns.addFirst(pendingSpawn);
        }
        pendingSpawn.id = 1572573337 * n5;
        pendingSpawn.objectType = 192741763 * n6;
        pendingSpawn.rotation = 1233957891 * n7;
        pendingSpawn.startCycle = n9 * 237969965;
        pendingSpawn.endCycle = n10 * 376812409;
        pendingSpawn.method524(n8, (byte)(-23));
    }
    
    static final String aam(final int i) {
        String str = Integer.toString(i);
        for (int j = str.length() - 3; j > 0; j -= 3) {
            str = str.substring(0, j) + class96.an + str.substring(j);
        }
        if (str.length() > 9) {
            return " " + class383.method2081(65408, 2042288509) + str.substring(0, str.length() - 8) + Strings.gb + " " + class96.ac + str + class96.au + class96.al;
        }
        if (str.length() > 6) {
            return " " + class383.method2081(1112844350, 337858522) + str.substring(0, str.length() - 4) + Strings.gn + " " + class96.ac + str + class96.au + class96.al;
        }
        return " " + class383.method2081(16776960, 231474197) + str + class96.al;
    }
    
    final void aas(final boolean b) {
        SequenceDefinition.method1129(Client.rootInterface * -896157613, Client.aj * -1687260435, class262.canvasHeight * 1658005443, b, -726165376);
    }
    
    @Override
    public Username username(final int n) {
        try {
            Username username;
            if (null != MusicPatchNode.localPlayer) {
                if (n <= -192249480) {
                    throw new IllegalStateException();
                }
                username = MusicPatchNode.localPlayer.username;
            }
            else {
                username = null;
            }
            return username;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.nv(" + ')');
        }
    }
    
    static final InterfaceParent adp(final int n, final int n2, final int n3) {
        final InterfaceParent interfaceParent = new InterfaceParent();
        interfaceParent.group = n2 * 1194766678;
        interfaceParent.type = 100799 * n3;
        Client.interfaceParents.put(interfaceParent, n);
        ZoneOperation.Widget_resetModelFrames(n2, 1636362482);
        final Widget vmethod3380 = class165.vmethod3380(n, (byte)5);
        class144.invalidateWidget(vmethod3380, -1516852038);
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -1062568799);
            Client.meslayerContinueWidget = null;
        }
        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[n >> 16], vmethod3380, false, (byte)9);
        class12.runWidgetOnLoadListener(n2, (byte)120);
        if (-1 != Client.rootInterface * -896157613) {
            class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 1, (byte)63);
        }
        return interfaceParent;
    }
    
    public static void dz(final Client client, int n, int n2, final int n3) {
        if (client == null) {
            client.openMenu(n, n, n);
            return;
        }
        final MenuOpened menuOpened = new MenuOpened();
        menuOpened.setMenuEntries(client.getMenuEntries());
        ScriptFrame.client.getCallbacks().post((Object)menuOpened);
        final Font qk = client.qk();
        int textWidth = qk.getTextWidth("Choose Option");
        int n4 = 0;
        for (int i = 0; i < Client.menuOptionsCount * 730065501; ++i) {
            if (Client.qi[i] == null) {
                ++n4;
            }
        }
        for (int j = 0; j < Client.menuOptionsCount * 730065501; ++j) {
            if (Client.qi[j] == null) {
                String s = Client.menuActions[j];
                if (!Client.menuTargets[j].isEmpty()) {
                    s = s + " " + Client.menuTargets[j];
                }
                if (Client.menuOpcodes[j] == MenuAction.RUNELITE_SUBMENU.getId()) {
                    s += " <gt>";
                }
                final int textWidth2 = qk.getTextWidth(s);
                if (textWidth2 > textWidth) {
                    textWidth = textWidth2;
                }
            }
        }
        textWidth += 8;
        final int n5 = n4 * 15 + 22;
        int n6 = n - textWidth / 2;
        if (textWidth + n6 > client.getCanvasWidth()) {
            n6 = client.getCanvasWidth() - textWidth;
        }
        if (n6 < 0) {
            n6 = 0;
        }
        int n7 = n2;
        if (n2 + n5 > client.getCanvasHeight()) {
            n7 = client.getCanvasHeight() - n5;
        }
        if (n7 < 0) {
            n7 = 0;
        }
        class192.menuX = n6 * -945723825;
        ArchiveLoader.menuY = n7 * 232216885;
        DesktopPlatformInfoProvider.menuWidth = textWidth * -760159457;
        class147.menuHeight = (n4 * 15 + 22) * -1944661289;
        n -= ScriptFrame.client.getViewportXOffset();
        n2 -= ScriptFrame.client.getViewportYOffset();
        ScriptFrame.client.la().fx(ScriptFrame.client.getPlane(), n, n2, false);
        client.us(true);
    }
    
    static final boolean adx(final Widget widget) {
        final int n = widget.contentType * 1749193166;
        if (n == -1810240313) {
            Client.logoutTimer = -780265955;
            return true;
        }
        if (n >= -2086958761 && n <= 1265785008) {
            Client.playerAppearance.changeAppearance((n - 1879005350) / 2, (n & 0x1) == 0x1, -1539835312);
        }
        if (n >= 314 && n <= -1518486229) {
            PlayerComposition.ok(Client.playerAppearance, (n - 1347819948) / 2, (n & 0x1) == 0x1, -1457177181);
        }
        if (-838629333 == n) {
            Client.playerAppearance.method1694(0, -214256070);
        }
        if (325 == n) {
            Client.playerAppearance.method1694(1, 990839808);
        }
        if (n == 326) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2468, Client.packetWriter.isaacCipher, (short)(-17164));
            PlayerComposition.yo(Client.playerAppearance, packetBufferNode.packetBuffer, (byte)102);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
            return true;
        }
        return false;
    }
    
    static boolean agp() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    public IterableNodeHashTable mo(final int n) {
        return new IterableNodeHashTable(n);
    }
    
    static final void ro() {
        if (GraphicsObject.ClanChat_inClanChat) {
            if (UserComparator5.friendsChat != null) {
                UserList.ge(UserComparator5.friendsChat, (byte)(-20));
            }
            for (int i = 0; i < -1054405482 * Players.Players_count; ++i) {
                Client.players[Players.Players_indices[i]].clearIsInFriendsChat(1798630189);
            }
            GraphicsObject.ClanChat_inClanChat = false;
        }
    }
    
    public int[] iw() {
        return Client.queuedSoundEffectLoops;
    }
    
    static void yi(final int n, final int n2) {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.CONTINUE, Client.packetWriter.isaacCipher, (short)(-21546));
        packetBufferNode.packetBuffer.el(n, -437883978);
        Buffer.ap(packetBufferNode.packetBuffer, n2, (byte)122);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    public int ji() {
        return MouseHandler.MouseHandler_idleCycles * -119381545;
    }
    
    public static void ji(final int n, final int n2) {
        class121.updateItemPile(n, n2, 1957371418);
    }
    
    public IterableNodeHashTable de() {
        return Messages.Messages_hashTable;
    }
    
    final void menu(final byte b) {
        if (!this.isMenuOpen()) {
            boolean b2;
            do {
                b2 = true;
                for (int i = 0; i < Client.menuOptionsCount * 730065501 - 1; ++i) {
                    if (Client.menuOpcodes[i] < 1000 && Client.menuOpcodes[i + 1] > 1000) {
                        vv(i, i + 1);
                        b2 = false;
                    }
                }
            } while (!b2);
            this.getCallbacks().post((Object)new PostMenuSort());
        }
        if (this.ht() != null) {
            return;
        }
        if (this.isMenuOpen()) {
            this.ue();
        }
        else {
            this.wi();
        }
    }
    
    public WorldMapElement menu(final int n) {
        return this.ku()[n];
    }
    
    public void ue() {
        final int ui = this.ui();
        final boolean b = ui == 1 || (!this.kw() && ui == 4);
        final int wk = this.wk();
        final int vw = this.vw();
        if (!b) {
            final boolean b2 = wk >= class192.menuX * -1141903185 - 10 && wk <= DesktopPlatformInfoProvider.menuWidth * -960964385 + class192.menuX * -1141903185 + 10 && vw >= ArchiveLoader.menuY * -115281635 - 10 && vw <= ArchiveLoader.menuY * -115281635 + class147.menuHeight * 245252327 + 10;
            final boolean b3 = Client.tk != -1 && wk >= Client.uw - 10 && wk <= Client.dg + Client.uw + 10 && vw >= Client.io - 10 && vw <= Client.io + Client.rc + 10;
            if (!b2 && !b3) {
                this.us(false);
                Client.tk = -1;
            }
            else if (!b3) {
                Client.tk = -1;
            }
        }
        int n = 0;
        int n2 = 0;
        for (int i = 0; i < Client.menuOptionsCount * 730065501; ++i) {
            if (Client.qi[i] == null) {
                ++n;
            }
            else if (Client.qi[i].ai == Client.tk) {
                ++n2;
            }
        }
        int n3 = -1;
        int n4 = 0;
        int tk = -1;
        for (int j = 0; j < Client.menuOptionsCount * 730065501; ++j) {
            if (Client.qi[j] == null) {
                n3 = ArchiveLoader.menuY * -115281635 + (n - 1 - n4++) * 15 + 31;
                if (wk > class192.menuX * -1141903185 && wk < class192.menuX * -1141903185 + DesktopPlatformInfoProvider.menuWidth * -960964385 && vw > n3 - 13 && vw < n3 + 3) {
                    tk = j;
                    break;
                }
            }
        }
        if (Client.tk != -1) {
            int n5 = 0;
            for (int k = 0; k < Client.menuOptionsCount * 730065501; ++k) {
                if (Client.qi[k] != null) {
                    if (Client.qi[k].ai == Client.tk) {
                        final int n6 = Client.io + (n2 - 1 - n5++) * 15 + 31;
                        if (wk > Client.uw && wk < Client.uw + Client.dg && vw > n6 - 13 && vw < n6 + 3) {
                            tk = k;
                            break;
                        }
                    }
                }
            }
        }
        if (b) {
            if (tk >= 0) {
                class17.menuAction(Client.menuArguments1[tk], Client.menuArguments2[tk], Client.menuOpcodes[tk], Client.menuIdentifiers[tk], Client.menuItemIds[tk], Client.menuActions[tk], Client.menuTargets[tk], this.ge(), this.sr(), -1745540313);
            }
            this.us(false);
            Client.tk = -1;
        }
        else if (tk >= 0) {
            int n7 = 0;
            for (int l = 0; l < Client.menuOptionsCount * 730065501; ++l) {
                if (Client.qi[l] != null && Client.qi[l].ai == tk) {
                    ++n7;
                }
            }
            if (n7 == 0) {
                return;
            }
            final Font qk = this.qk();
            int textWidth = qk.getTextWidth(Client.menuTargets[tk]);
            for (int n8 = 0; n8 < Client.menuOptionsCount * 730065501; ++n8) {
                if (Client.qi[n8] != null && Client.qi[n8].ai == tk) {
                    String string = Client.menuActions[n8];
                    if (!Client.menuTargets[n8].isEmpty()) {
                        string = string + " " + Client.menuTargets[n8];
                    }
                    final int textWidth2 = qk.getTextWidth(string);
                    if (textWidth2 > textWidth) {
                        textWidth = textWidth2;
                    }
                }
            }
            textWidth += 8;
            int uw = class192.menuX * -1141903185 + DesktopPlatformInfoProvider.menuWidth * -960964385;
            if (uw + textWidth > this.getCanvasWidth()) {
                uw = class192.menuX * -1141903185 - textWidth;
            }
            if (uw < 0) {
                uw = 0;
            }
            assert n3 > -1;
            final int rc = n7 * 15 + 22;
            int io = n3 - 12 - 19;
            if (io + rc > this.getCanvasHeight()) {
                io = this.getCanvasHeight() - rc;
            }
            if (io < 0) {
                io = 0;
            }
            Client.tk = tk;
            Client.uw = uw;
            Client.io = io;
            Client.dg = textWidth;
            Client.rc = rc;
        }
    }
    
    static final void ue(final Actor actor, final int n) {
        class374.worldToScreen(actor.walkBackSequence * 5935509, actor.field1005 * 1513005800, n, 795376926);
    }
    
    public rl11 ue() {
        return new rl11();
    }
    
    public int vt() {
        return Scene.Scene_drawnCount;
    }
    
    static final void vt(final int n, final int n2, final int n3, final int n4, final int n5) {
        final long boundaryObjectTag = class31.scene.getBoundaryObjectTag(n, n2, n3);
        if (boundaryObjectTag != 0L) {
            final int objectFlags = class31.scene.getObjectFlags(n, n2, n3, boundaryObjectTag);
            final int n6 = objectFlags >> 6 & 0x3;
            final int n7 = objectFlags & 0x1F;
            int n8 = n4;
            if (class173.method957(boundaryObjectTag)) {
                n8 = n5;
            }
            final int[] pixels = UrlRequester.sceneMinimapSprite.pixels;
            final int n9 = (103 - n3) * 2048 + (n2 * 4 + 24624);
            final ObjectComposition vmethod3248 = class144.vmethod3248(InterfaceParent.Entity_unpackID(boundaryObjectTag), (short)14191);
            if (-1 != vmethod3248.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite = class333.mapSceneSprites[vmethod3248.mapSceneId * 771086195];
                if (indexedSprite != null) {
                    indexedSprite.ax((vmethod3248.sizeX * -1064754148 - indexedSprite.yOffset) / 2 + (48 + n2 * 4), (vmethod3248.sizeY * 1952358772 - indexedSprite.subWidth) / 2 + ((104 - n3 - -1659393955 * vmethod3248.sizeY) * 4 + 48));
                }
            }
            else {
                if (n7 == 0 || n7 == 2) {
                    if (n6 == 0) {
                        pixels[512 + n9] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[1 + n9] = (pixels[n9] = n8);
                        pixels[3 + n9] = (pixels[n9 + 2] = n8);
                    }
                    else if (2 == n6) {
                        pixels[512 + (n9 + 3)] = (pixels[n9 + 3] = n8);
                        pixels[1536 + (3 + n9)] = (pixels[3 + n9 + 1024] = n8);
                    }
                    else if (n6 == 3) {
                        pixels[1 + (n9 + 1536)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[1536 + n9 + 2] = n8);
                    }
                }
                if (3 == n7) {
                    if (n6 == 0) {
                        pixels[n9] = n8;
                    }
                    else if (n6 == 1) {
                        pixels[3 + n9] = n8;
                    }
                    else if (2 == n6) {
                        pixels[n9 + 3 + 1536] = n8;
                    }
                    else if (3 == n6) {
                        pixels[1536 + n9] = n8;
                    }
                }
                if (n7 == 2) {
                    if (3 == n6) {
                        pixels[n9 + 512] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 0) {
                        pixels[n9 + 1] = (pixels[n9] = n8);
                        pixels[n9 + 3] = (pixels[n9 + 2] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[512 + (3 + n9)] = (pixels[3 + n9] = n8);
                        pixels[n9 + 3 + 1536] = (pixels[n9 + 3 + 1024] = n8);
                    }
                    else if (2 == n6) {
                        pixels[1 + (1536 + n9)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[2 + (1536 + n9)] = n8);
                    }
                }
            }
        }
        final long gameObjectTag = class31.scene.getGameObjectTag(n, n2, n3);
        if (gameObjectTag != 0L) {
            final int objectFlags2 = class31.scene.getObjectFlags(n, n2, n3, gameObjectTag);
            final int n10 = objectFlags2 >> 6 & 0x3;
            final int n11 = objectFlags2 & 0x1F;
            final ObjectComposition vmethod3249 = class144.vmethod3248(InterfaceParent.Entity_unpackID(gameObjectTag), (short)29422);
            if (-1 != vmethod3249.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite2 = class333.mapSceneSprites[771086195 * vmethod3249.mapSceneId];
                if (indexedSprite2 != null) {
                    indexedSprite2.ax(48 + n2 * 4 + (-1064754148 * vmethod3249.sizeX - indexedSprite2.yOffset) / 2, (1952358772 * vmethod3249.sizeY - indexedSprite2.subWidth) / 2 + (4 * (104 - n3 - vmethod3249.sizeY * -1659393955) + 48));
                }
            }
            else if (n11 == 9) {
                int n12 = 15658734;
                if (class173.method957(gameObjectTag)) {
                    n12 = 15597568;
                }
                final int[] pixels2 = UrlRequester.sceneMinimapSprite.pixels;
                final int n13 = 24624 + n2 * 4 + (103 - n3) * 2048;
                if (n10 && n10 != 2) {
                    pixels2[1 + (512 + n13)] = (pixels2[n13] = n12);
                    pixels2[n13 + 1536 + 3] = (pixels2[2 + (n13 + 1024)] = n12);
                }
                else {
                    pixels2[1 + (n13 + 1024)] = (pixels2[1536 + n13] = n12);
                    pixels2[3 + n13] = (pixels2[2 + (n13 + 512)] = n12);
                }
            }
        }
        final long floorDecorationTag = class31.scene.getFloorDecorationTag(n, n2, n3);
        if (0L != floorDecorationTag) {
            final ObjectComposition vmethod3250 = class144.vmethod3248(InterfaceParent.Entity_unpackID(floorDecorationTag), (short)23400);
            if (vmethod3250.mapSceneId * 771086195 != -1) {
                final IndexedSprite indexedSprite3 = class333.mapSceneSprites[771086195 * vmethod3250.mapSceneId];
                if (null != indexedSprite3) {
                    indexedSprite3.ax(n2 * 4 + 48 + (vmethod3250.sizeX * -1064754148 - indexedSprite3.yOffset) / 2, 48 + (104 - n3 - -1659393955 * vmethod3250.sizeY) * 4 + (vmethod3250.sizeY * 1952358772 - indexedSprite3.subWidth) / 2);
                }
            }
        }
    }
    
    static final void vn(final int n, final int n2, final boolean b) {
        if (b && 1961272017 * class28.timeOfPreviousKeyPress == n && 583188571 * class425.field3798 == n2) {
            return;
        }
        class28.timeOfPreviousKeyPress = 765136833 * n;
        class425.field3798 = n2 * 548797545;
        class138.updateGameState(25, 582149776);
        WorldMapDecoration.drawLoadingMessage(Strings.ao, true, -1417083483);
        final int n3 = WorldMapData_0.baseX * -1232093375;
        final int n4 = 1181912452 * GameObject.baseY;
        WorldMapData_0.baseX = (n - 6) * -102332920;
        GameObject.baseY = 1527335432 * (n2 - 6);
        final int n5 = WorldMapData_0.baseX * 1629396262 - n3;
        final int n6 = GameObject.baseY * 827352769 - n4;
        final int n7 = WorldMapData_0.baseX * -1571870524;
        final int n8 = GameObject.baseY * 1872220972;
        for (int i = 0; i < 1210141725; ++i) {
            final NPC npc = Client.npcs[i];
            if (null != npc) {
                for (int j = 0; j < 10; ++j) {
                    final int[] cf = npc.cf;
                    final int n9 = j;
                    cf[n9] -= n5;
                    final int[] dy = npc.dy;
                    final int n10 = j;
                    dy[n10] -= n6;
                }
                final NPC npc2 = npc;
                npc2.br -= n5 * -1182727737;
                final NPC npc3 = npc;
                npc3.ep -= n6 * -1711720217;
            }
        }
        for (int k = 0; k < 2005629951; ++k) {
            final Player player = Client.players[k];
            if (player != null) {
                for (int l = 0; l < 10; ++l) {
                    final int[] cf2 = player.cf;
                    final int n11 = l;
                    cf2[n11] -= n5;
                    final int[] dy2 = player.dy;
                    final int n12 = l;
                    dy2[n12] -= n6;
                }
                final Player player2 = player;
                player2.br -= -1115240321 * n5;
                final Player player3 = player;
                player3.ep -= 101113890 * n6;
            }
        }
        int n13 = 0;
        int n14 = 104;
        int n15 = 1;
        if (n5 < 0) {
            n13 = -496848664;
            n14 = -1;
            n15 = -1;
        }
        int n16 = 0;
        int n17 = -417856522;
        int n18 = 1;
        if (n6 < 0) {
            n16 = 103;
            n17 = -1;
            n18 = -1;
        }
        for (int n19 = n13; n14 != n19; n19 += n15) {
            for (int n20 = n16; n20 != n17; n20 += n18) {
                final int n21 = n5 + n19;
                final int n22 = n20 + n6;
                for (int n23 = 0; n23 < 4; ++n23) {
                    if (n21 >= 0 && n22 >= 0 && n21 < 104 && n22 < 104) {
                        Client.groundItems[n23][n19][n20] = Client.groundItems[n23][n21][n22];
                    }
                    else {
                        Client.groundItems[n23][n19][n20] = null;
                    }
                }
            }
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn != null; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            final PendingSpawn pendingSpawn2 = pendingSpawn;
            pendingSpawn2.x -= n5 * -258134666;
            final PendingSpawn pendingSpawn3 = pendingSpawn;
            pendingSpawn3.y -= n6 * -1275818246;
            if (pendingSpawn.x * -1258442965 < 0 || 800888185 * pendingSpawn.y < 0 || pendingSpawn.x * 68300005 >= 1841514703 || -1832619097 * pendingSpawn.y >= 104) {
                pendingSpawn.hw();
            }
        }
        if (64013018 * Client.destinationX != 0) {
            Client.destinationX -= n5 * -1970850269;
            Client.destinationY -= 874287942 * n6;
        }
        Client.soundEffectCount = 0;
        Client.isCameraLocked = false;
        class36.cameraX -= (n5 << 7) * 653284190;
        class297.cameraZ -= 46344275 * (n6 << 7);
        class33.oculusOrbFocalPointX -= (n5 << 7) * 1293848551;
        class144.oculusOrbFocalPointY -= (n6 << 7) * 892004233;
        Client.field596 = -1818324430;
        NodeDeque.la(Client.graphicsObjects);
        NodeDeque.la(Client.projectiles);
        for (int n24 = 0; n24 < 4; ++n24) {
            Client.collisionMaps[n24].clear(1840705610);
        }
    }
    
    public void vn(final int n) {
        class100.musicTrackVolume = n * 111967803;
    }
    
    public boolean vn() {
        return ViewportMouse.ViewportMouse_isInViewport;
    }
    
    static final void so(final Actor actor) {
        actor.isWalking = false;
        if (-1 != actor.npcCycle * -1205036571) {
            final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(-1302441815 * actor.npcCycle, (byte)104);
            if (spotAnimationDefinition_get != null) {
                if (!spotAnimationDefinition_get.isCachedModelIdSet(826706712) && null != spotAnimationDefinition_get.frameIds) {
                    actor.field975 -= 105665867;
                    if (424813829 * actor.crawlBackSequence < spotAnimationDefinition_get.frameIds.length && actor.field975 * -154820809 > spotAnimationDefinition_get.frameLengths[actor.crawlBackSequence * -344835964]) {
                        actor.field975 = -1745959164;
                        actor.crawlBackSequence -= 965491696;
                        ZoneOperation.method1599(spotAnimationDefinition_get, actor.crawlBackSequence * 206959269, -1894703772 * actor.walkBackSequence, actor.field1005 * -847351578, -1566363123);
                    }
                    if (actor.crawlBackSequence * 424813829 >= spotAnimationDefinition_get.frameIds.length) {
                        if (-1980390217 * spotAnimationDefinition_get.frameCount > 0) {
                            actor.crawlBackSequence -= spotAnimationDefinition_get.frameCount * -152931979;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange -= 1794632673;
                            }
                            if (424813829 * actor.crawlBackSequence < 0 || 1123697296 * actor.crawlBackSequence >= spotAnimationDefinition_get.frameIds.length || (spotAnimationDefinition_get.field1823 && -309244972 * actor.combatLevelChange >= spotAnimationDefinition_get.iterations * 1786137655)) {
                                actor.field975 = 0;
                                actor.crawlBackSequence = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        ZoneOperation.method1599(spotAnimationDefinition_get, 424813829 * actor.crawlBackSequence, actor.walkBackSequence * 1144428983, actor.field1005 * -411750205, -1566363123);
                    }
                }
                else if (spotAnimationDefinition_get.isCachedModelIdSet(46995755)) {
                    actor.crawlBackSequence -= 1111664245;
                    final int method1128 = spotAnimationDefinition_get.method1128(329575940);
                    if (-1904394203 * actor.crawlBackSequence < method1128) {
                        KeyHandler.method108(spotAnimationDefinition_get, actor.crawlBackSequence * 538161240, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 1263378768);
                    }
                    else {
                        if (spotAnimationDefinition_get.frameCount * 1363943497 > 0) {
                            actor.crawlBackSequence -= 1003955238 * spotAnimationDefinition_get.frameCount;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange -= 2020915777;
                            }
                            if (-1370744014 * actor.crawlBackSequence < 0 || -1933243049 * actor.crawlBackSequence >= method1128 || (spotAnimationDefinition_get.field1823 && -581701878 * actor.combatLevelChange >= 1263450357 * spotAnimationDefinition_get.iterations)) {
                                actor.crawlBackSequence = 0;
                                actor.field975 = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        KeyHandler.method108(spotAnimationDefinition_get, -1412764712 * actor.crawlBackSequence, actor.walkBackSequence * 1911341143, -40719244 * actor.field1005, -630245197);
                    }
                }
                else {
                    actor.npcCycle = -327373721;
                }
            }
            else {
                actor.npcCycle = -1328975607;
            }
        }
        final IterableNodeHashTableIterator iterableNodeHashTableIterator = new IterableNodeHashTableIterator(Actor.qq(actor, (byte)10));
        for (Graphic graphic = (Graphic)iterableNodeHashTableIterator.method2390(); graphic != null; graphic = (Graphic)iterableNodeHashTableIterator.next()) {
            if (421941662 * graphic.field4170 != -1) {
                if (-1783321644 * Client.cycle >= -1415749665 * graphic.field4171) {
                    final int n = ItemContainer.SpotAnimationDefinition_get(graphic.field4170 * 588770448, 1585703973).sequence * 374130911;
                    if (n == -1) {
                        graphic.hw();
                        actor.runRightSequence += 1822461181;
                    }
                    else {
                        graphic.field4169 = Math.max(971664459 * graphic.field4169, 0) * -902926287;
                        final SequenceDefinition spotAnimationDefinition_get2 = ItemContainer.SpotAnimationDefinition_get(n, (byte)69);
                        if (null != spotAnimationDefinition_get2.frameIds && !spotAnimationDefinition_get2.isCachedModelIdSet(-999912599)) {
                            final Graphic graphic2 = graphic;
                            graphic2.field4168 += 1417617079;
                            if (971664459 * graphic.field4169 < spotAnimationDefinition_get2.frameIds.length && graphic.field4168 * 77733639 > spotAnimationDefinition_get2.frameLengths[graphic.field4169 * 971664459]) {
                                graphic.field4168 = 1417617079;
                                final Graphic graphic3 = graphic;
                                graphic3.field4169 -= 749282175;
                                ZoneOperation.method1599(spotAnimationDefinition_get2, graphic.field4169 * 971664459, 1885716476 * actor.walkBackSequence, actor.field1005 * 726362540, -1566363123);
                            }
                            if (971664459 * graphic.field4169 >= spotAnimationDefinition_get2.frameIds.length) {
                                graphic.hw();
                                actor.runRightSequence += 1822461181;
                            }
                        }
                        else if (spotAnimationDefinition_get2.isCachedModelIdSet(-396185208)) {
                            final Graphic graphic4 = graphic;
                            graphic4.field4169 -= 793313949;
                            if (graphic.field4169 * 971664459 < spotAnimationDefinition_get2.method1128(-235227561)) {
                                KeyHandler.method108(spotAnimationDefinition_get2, graphic.field4169 * -1568086177, actor.walkBackSequence * 1144428983, actor.field1005 * 29387083, -1066002556);
                            }
                            else {
                                graphic.hw();
                                actor.runRightSequence -= 391658690;
                            }
                        }
                        else {
                            graphic.hw();
                            actor.runRightSequence += 1822461181;
                        }
                    }
                }
            }
        }
        if (actor.overheadTextCyclesRemaining * -1841645566 != -1 && 1253892101 * actor.playerCycle <= 1 && ItemContainer.SpotAnimationDefinition_get(actor.overheadTextCyclesRemaining * -1372355773, (byte)100).precedenceAnimating * 293312759 == 1 && 358698313 * actor.field1003 > 0 && -435598119 * actor.exactMoveArrive1Cycle <= Client.cycle * -1886224337 && -1274841313 * actor.movementFrame < Client.cycle * 1991548092) {
            actor.playerCycle = 221528781;
            return;
        }
        if (-1371988260 * actor.overheadTextCyclesRemaining != -1 && -943523526 * actor.playerCycle == 0) {
            final SequenceDefinition spotAnimationDefinition_get3 = ItemContainer.SpotAnimationDefinition_get(-1372355773 * actor.overheadTextCyclesRemaining, (byte)18);
            if (null != spotAnimationDefinition_get3) {
                if (!spotAnimationDefinition_get3.isCachedModelIdSet(1101243308) && spotAnimationDefinition_get3.frameIds != null) {
                    actor.pathLength -= 1029834430;
                    if (actor.currentSequenceFrameIndex * -41215169 < spotAnimationDefinition_get3.frameIds.length && actor.pathLength * 1356757385 > spotAnimationDefinition_get3.frameLengths[-41215169 * actor.currentSequenceFrameIndex]) {
                        actor.pathLength = 672779449;
                        actor.currentSequenceFrameIndex -= 63286081;
                        ZoneOperation.method1599(spotAnimationDefinition_get3, -41215169 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, -1566363123);
                    }
                    if (actor.currentSequenceFrameIndex * -41215169 >= spotAnimationDefinition_get3.frameIds.length) {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * 572865817;
                        actor.y += 1155051053;
                        if (-714583282 * actor.y >= 1262269190 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                        else if (actor.currentSequenceFrameIndex * -41215169 >= 0 && -41215169 * actor.currentSequenceFrameIndex < spotAnimationDefinition_get3.frameIds.length) {
                            ZoneOperation.method1599(spotAnimationDefinition_get3, actor.currentSequenceFrameIndex * 920026702, 1144428983 * actor.walkBackSequence, -1920876326 * actor.field1005, -1566363123);
                        }
                        else {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                    }
                    actor.isWalking = spotAnimationDefinition_get3.stretches;
                }
                else if (spotAnimationDefinition_get3.isCachedModelIdSet(-1595052359)) {
                    actor.currentSequenceFrameIndex -= 1058387851;
                    final int method1129 = spotAnimationDefinition_get3.method1128(-577422666);
                    if (actor.currentSequenceFrameIndex * 1803717561 < method1129) {
                        KeyHandler.method108(spotAnimationDefinition_get3, -205246184 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, 1439964226);
                    }
                    else {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * -823260553;
                        actor.y += 706817609;
                        if (actor.y * -92383341 >= -973039974 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = -182054912;
                        }
                        else if (-41215169 * actor.currentSequenceFrameIndex >= 0 && actor.currentSequenceFrameIndex * 223356150 < method1129) {
                            KeyHandler.method108(spotAnimationDefinition_get3, -41215169 * actor.currentSequenceFrameIndex, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 358043143);
                        }
                        else {
                            actor.overheadTextCyclesRemaining = -1268403739;
                        }
                    }
                }
                else {
                    actor.overheadTextCyclesRemaining = 430514670;
                }
            }
            else {
                actor.overheadTextCyclesRemaining = 1690721941;
            }
        }
        if (actor.playerCycle * 1253892101 > 0) {
            actor.playerCycle -= 1286843329;
        }
    }
    
    public void nd(final int n, final int n2, final int n3, final int n4, final int n5) {
        Rasterizer2D.Rasterizer2D_drawHorizontalLineAlpha(n, n2, n3, n4, n5);
    }
    
    public static void pw(final int n) {
        pc();
        ScriptFrame.client.getCallbacks().post((Object)new ClientTick());
        if (ScriptFrame.client.getOculusOrbState() != 0) {
            final MenuEntry[] menuEntries = ScriptFrame.client.getMenuEntries();
            final ArrayList list = new ArrayList<MenuEntry>(menuEntries.length);
            for (final MenuEntry menuEntry : menuEntries) {
                switch (rl6.yc[menuEntry.getType().ordinal()]) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27: {
                        break;
                    }
                    default: {
                        list.add(menuEntry);
                        break;
                    }
                }
            }
            ScriptFrame.client.setMenuEntries(list.toArray(new MenuEntry[0]));
        }
    }
    
    void pw() {
        if (1000 == 1920173040 * Client.gameState) {
            return;
        }
        if (!Tile.method1214((byte)43)) {
            this.doCycleJs5Connect(-121494842);
        }
    }
    
    public void nx(final int n) {
        Client.hintArrowSubX = n * -1041777051;
    }
    
    static void pi(final Archive archive, final String s) {
        final ArchiveLoader e = new ArchiveLoader(archive, s);
        Client.archiveLoaders.add(e);
        Client.field397 += 1472564749 * e.groupCount;
    }
    
    public int[] ge() {
        return Client.soundLocations;
    }
    
    public int ge() {
        return MouseHandler.MouseHandler_lastPressedX * 2020601481;
    }
    
    static final int ace() {
        return -1696080550 - Math.round(200.0f * ((float)class20.clientPreferences.getBrightness(1698257036) - 0.5f));
    }
    
    @Override
    public final void fl() {
        if (!this.ae(85836688)) {
            return;
        }
        for (int i = 0; i <= 28; ++i) {
            final String parameter = this.getParameter(Integer.toString(i));
            if (null != parameter) {
                switch (i) {
                    case 7: {
                        AABB.field2070 = class146.vmethod3254(Integer.parseInt(parameter), 1232360723);
                        break;
                    }
                    case 17: {
                        GrandExchangeOffer.field3530 = parameter;
                        break;
                    }
                    case 21: {
                        Client.param21 = Integer.parseInt(parameter) * 350704254;
                        break;
                    }
                    case 6: {
                        ClanSettings.clientLanguage = Language.method1943(Integer.parseInt(parameter), (byte)(-1));
                        break;
                    }
                    case 14: {
                        TriBool.field3738 = Integer.parseInt(parameter) * 57474092;
                        break;
                    }
                    case 4: {
                        if (Client.clientType * -749752677 == -1) {
                            Client.clientType = Integer.parseInt(parameter) * -240023661;
                            break;
                        }
                        break;
                    }
                    case 9: {
                        class108.param9 = parameter;
                        break;
                    }
                    case 12: {
                        Client.worldId = Integer.parseInt(parameter) * -938056821;
                        break;
                    }
                    case 15: {
                        Client.gameBuild = Integer.parseInt(parameter) * 681867921;
                        break;
                    }
                    case 11: {
                        ViewportMouse.field2213 = parameter;
                        break;
                    }
                    case 3: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            Client.isMembersWorld = true;
                            break;
                        }
                        Client.isMembersWorld = false;
                        break;
                    }
                    case 10: {
                        Client.field358 = (StudioGame)StructComposition.findEnumerated(TaskHandler.getClipMidX(1954960039), Integer.parseInt(parameter), (short)173);
                        if (Client.field358 == StudioGame.oldscape) {
                            class70.loginType = LoginType.oldscape;
                            break;
                        }
                        class70.loginType = LoginType.field3998;
                        break;
                    }
                    case 8: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            break;
                        }
                        break;
                    }
                    case 25: {
                        final int index = parameter.indexOf(".");
                        if (index == -1) {
                            Client.param25 = Integer.parseInt(parameter) * -1712441187;
                            break;
                        }
                        Client.param25 = Integer.parseInt(parameter.substring(0, index)) * -1712441187;
                        Integer.parseInt(parameter.substring(1 + index));
                        break;
                    }
                    case 5: {
                        Client.worldProperties = Integer.parseInt(parameter) * 1294598713;
                        break;
                    }
                }
            }
        }
        Scene.Scene_isLowDetail = false;
        Client.isLowDetail = false;
        UserComparator8.worldHost = this.getCodeBase().getHost();
        final String name = AABB.field2070.name;
        final int n = 0;
        try {
            JagexCache.idxCount = -1219778168;
            JagexCache.cacheGamebuild = n * -201905196;
            try {
                ModeWhere.operatingSystemName = System.getProperty("os.name");
            }
            catch (Exception ex2) {
                ModeWhere.operatingSystemName = "Unknown";
            }
            WorldMapSectionType.formattedOperatingSystemName = ModeWhere.operatingSystemName.toLowerCase();
            try {
                HorizontalAlignment.userHomeDirectory = System.getProperty("user.home");
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex3) {}
            try {
                if (WorldMapSectionType.formattedOperatingSystemName.startsWith("win")) {
                    if (HorizontalAlignment.userHomeDirectory == null) {
                        HorizontalAlignment.userHomeDirectory = ni("USERPROFILE");
                    }
                }
                else if (HorizontalAlignment.userHomeDirectory == null) {
                    HorizontalAlignment.userHomeDirectory = ni("HOME");
                }
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex4) {}
            if (HorizontalAlignment.userHomeDirectory == null) {
                HorizontalAlignment.userHomeDirectory = "~/";
            }
            class130.cacheParentPaths = new String[] { "c:/rscache/", "/rscache/", "c:/windows/", "c:/winnt/", "c:/", HorizontalAlignment.userHomeDirectory, "/tmp/", "" };
            class96.cacheSubPaths = new String[] { ".jagex_cache_" + 857374030 * JagexCache.cacheGamebuild, ".file_store_" + -1325133847 * JagexCache.cacheGamebuild };
            int j = 0;
        Label_0764:
            while (j < 4) {
                class335.cacheDir = ClanSettings.method867("oldschool", name, j, 669570218);
                if (!class335.cacheDir.exists()) {
                    class335.cacheDir.mkdirs();
                }
                final File[] listFiles = class335.cacheDir.listFiles();
                if (null != listFiles) {
                    final File[] array = listFiles;
                    for (int k = 0; k < array.length; ++k) {
                        final File file = array[k];
                        boolean b;
                        try {
                            final RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
                            final int read = randomAccessFile.read();
                            randomAccessFile.seek(0L);
                            randomAccessFile.write(read);
                            randomAccessFile.seek(0L);
                            randomAccessFile.close();
                            b = true;
                        }
                        catch (Exception ex5) {
                            b = false;
                        }
                        if (!b) {
                            ++j;
                            continue Label_0764;
                        }
                    }
                    break;
                }
                break;
            }
            class513.FileSystem_cacheDir = class335.cacheDir;
            if (!class513.FileSystem_cacheDir.exists()) {
                throw new RuntimeException("");
            }
            FileSystem.FileSystem_hasPermissions = true;
            Tiles.method475((byte)1);
            JagexCache.JagexCache_dat2File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.dat2", -807116544), "rw", 1048576000L), 1189117966, 0);
            JagexCache.JagexCache_idx255File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx255", -1492797291), "rw", 1048576L), 6000, 0);
            class370.JagexCache_idxFiles = new BufferedFile[JagexCache.idxCount * 1064766397];
            for (int l = 0; l < 2135726056 * JagexCache.idxCount; ++l) {
                class370.JagexCache_idxFiles[l] = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx" + l, -1118295403), "rw", 1048576L), -1180475864, 0);
            }
        }
        catch (Exception ex) {
            class387.RunException_sendStackTrace(null, ex, (byte)8);
        }
        ScriptFrame.client = this;
        RunException.field4178 = Client.clientType * 1056936977;
        ModeWhere.field3571 = ni("JX_ACCESS_TOKEN");
        TileItem.field1079 = ni("JX_REFRESH_TOKEN");
        SpriteMask.field2808 = ni("JX_SESSION_ID");
        class121.field1185 = ni("JX_CHARACTER_ID");
        Login.field749 = class31.method133(ni("JX_DISPLAY_NAME"), -200016343);
        if (Boolean.parseBoolean(System.getProperty("jagex.disableBouncyCastle"))) {
            this.field401 = true;
        }
        if (-1 == 1537844755 * Client.field363) {
            if (ay(this, -1305825059) || this.method369((byte)112)) {
                Client.field363 = 2078698903;
            }
            else {
                Client.field363 = 0;
            }
        }
        this.ak(-751531174, 503, -1614136243, 1, (byte)(-42));
    }
    
    public void nw(final int n) {
        Client.destinationY = n * 875414437;
    }
    
    static void tw() {
        if (null != class126.worldMap) {
            class126.worldMap.method2381(GameEngine.Client_plane * -1727408401, (1144428983 * MusicPatchNode.localPlayer.br >> 7) + -1232093375 * WorldMapData_0.baseX, 827352769 * GameObject.baseY + (MusicPatchNode.localPlayer.ep * 1385920810 >> 7), false, (byte)15);
            class126.worldMap.de(-1959809103);
        }
    }
    
    static final void um(final int n, final int n2) {
        if (2 != Client.hintArrowType * 633821975) {
            return;
        }
        class374.worldToScreen(Client.hintArrowSubX * 1774830445 + (-354805479 * Client.hintArrowX - WorldMapData_0.baseX * 683341200 << 7), Client.hintArrowSubY * 1698142413 + (Client.hintArrowY * 796703205 - GameObject.baseY * 660209066 << 7), Client.hintArrowHeight * -887816298, -12508927);
        if (Client.viewportTempX * -780238050 > -1 && Client.cycle * 1297989201 % 20 < 10) {
            KitDefinition.headIconHintSprites[0].drawAt(n + -1279555920 * Client.viewportTempX - 12, Client.viewportTempY * 369341397 + n2 - 28);
        }
    }
    
    public void um(final int n) {
        Client.hintArrowNpcIndex = n * -431692551;
    }
    
    void resizeJS(final int n) {
        try {
            final int n2 = -1687260435 * Client.aj;
            final int n3 = class262.canvasHeight * 1658005443;
            if (-927540391 * this.av < n2) {
                final int n4 = this.av * -927540391;
            }
            if (this.ar * -1747234661 < n3) {
                final int n5 = this.ar * -1747234661;
            }
            if (class20.clientPreferences != null) {
                if (n == 400526726) {
                    throw new IllegalStateException();
                }
                try {
                    class26.method113(ScriptFrame.client, "resize", new Object[] { GrandExchangeOfferNameComparator.getWindowedMode(230039065) }, -811231383);
                }
                catch (Throwable t) {}
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.ip(" + ')');
        }
    }
    
    public void fo(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        Rasterizer2D.Rasterizer2D_fillRectangleGradientAlpha(n, n2, n3, n4, n5, n6, n7, n8);
    }
    
    @Override
    protected final void fo() {
        class134.rsOrdinal(new int[] { 20, 260, 10000 }, new int[] { 1000, 100, 500 }, -1115390879);
        FriendsChat.worldPort = ((0 == -1274626977 * Client.gameBuild) ? 43594 : (40000 + -453810525 * Client.worldId)) * -1326916691;
        class127.js5Port = -1927102761 * ((0 == Client.gameBuild * -1274626977) ? 443 : (50000 + -453810525 * Client.worldId));
        ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
        PlayerComposition.field2837 = class315.field2864;
        PlayerComposition.field2828 = class315.field2863;
        WorldMapIcon_0.field2359 = class315.field2865;
        class437.field3825 = class315.field2866;
        class14.urlRequester = new class108(this.field401, 213);
        this.ai((byte)(-11));
        this.av((byte)110);
        class123.mouseWheel = this.aa(-1586741985);
        this.ah((class29)Client.field590, 0, (byte)(-45));
        this.ah((class29)Client.keyHandlerInstance, 1, (byte)(-91));
        WorldMapID.masterDisk = new ArchiveDisk(255, JagexCache.JagexCache_dat2File, JagexCache.JagexCache_idx255File, 500000);
        class20.clientPreferences = class205.vmethod3951(-1771635816);
        this.ay(1660960278);
        final String field167 = ReflectionCheck.field167;
        class31.field90 = this;
        if (field167 != null) {
            class31.field91 = field167;
        }
        Decimator.setWindowedMode(class20.clientPreferences.method577((byte)106), (byte)(-66));
        World.friendSystem = new FriendSystem(class70.loginType);
        this.field529 = new class14("tokenRequest", 1, 1);
    }
    
    public Widget[] fo(final int n) {
        final Widget[][] oh = this.oh();
        if (oh == null || n < 0 || n >= oh.length || oh[n] == null) {
            return null;
        }
        return oh[n];
    }
    
    static final void ri() {
        if (GraphicsObject.ClanChat_inClanChat) {
            if (UserComparator5.friendsChat != null) {
                UserList.ge(UserComparator5.friendsChat, (byte)(-81));
            }
            for (int i = 0; i < -2010934433 * Players.Players_count; ++i) {
                Client.players[Players.Players_indices[i]].clearIsInFriendsChat(1344103605);
            }
            GraphicsObject.ClanChat_inClanChat = false;
        }
    }
    
    public static void ri(final int[] array, final int n, final int n2, final int n3) {
        if (!ScriptFrame.client.isGpu() || array != ScriptFrame.client.xj().getPixels()) {
            array[n] = n2;
            return;
        }
        array[n] = ((n2 & 0xFFFFFF) | n3 + ((array[n] >>> 24) * (255 - n3) * 32897 >>> 23) << 24);
    }
    
    final boolean vc(final PacketWriter packetWriter) {
        final AbstractSocket socket = packetWriter.getSocket((byte)82);
        final PacketBuffer packetBuffer = packetWriter.packetBuffer;
        if (null == socket) {
            return false;
        }
        try {
            if (packetWriter.field1133 == null) {
                if (packetWriter.field1135) {
                    if (!socket.isAvailable(1, 1937138756)) {
                        return false;
                    }
                    socket.read(packetWriter.packetBuffer.al, 0, 1, -2106093590);
                    packetWriter.field1136 = 0;
                    packetWriter.field1135 = false;
                }
                packetBuffer.at = 0;
                if (packetBuffer.method2464((byte)53)) {
                    if (!socket.isAvailable(1, -1681298247)) {
                        return false;
                    }
                    socket.read(packetWriter.packetBuffer.al, 1, 1, -2106093590);
                    packetWriter.field1136 = 0;
                }
                packetWriter.field1135 = true;
                final ServerPacket[] serverPacket_values = PacketBufferNode.ServerPacket_values(-1731859764);
                final int ws = PacketBuffer.ws(packetBuffer, 1632422991);
                if (ws < 0 || ws >= serverPacket_values.length) {
                    throw new IOException(ws + " " + -2097076138 * packetBuffer.at);
                }
                packetWriter.field1133 = serverPacket_values[ws];
                packetWriter.serverPacketLength = -1975731211 * packetWriter.field1133.id;
            }
            if (889658999 * packetWriter.serverPacketLength == -1) {
                if (!socket.isAvailable(1, 1346485346)) {
                    return false;
                }
                packetWriter.getSocket((byte)20).read(packetBuffer.al, 0, 1, -2106093590);
                packetWriter.serverPacketLength = (packetBuffer.al[0] & 0xFF) * 1873812295;
            }
            if (-737317500 * packetWriter.serverPacketLength == 171032808) {
                if (!socket.isAvailable(2, 656328759)) {
                    return false;
                }
                packetWriter.getSocket((byte)41).read(packetBuffer.al, 0, 2, -2106093590);
                packetBuffer.at = 0;
                packetWriter.serverPacketLength = packetBuffer.cl(-683573597) * 1873812295;
            }
            if (!socket.isAvailable(packetWriter.serverPacketLength * -1905066566, 1104272201)) {
                return false;
            }
            packetBuffer.at = 0;
            socket.read(packetBuffer.al, 0, packetWriter.serverPacketLength * 889658999, -2106093590);
            packetWriter.field1136 = 0;
            Client.timer.method2095(-1033751982);
            packetWriter.field1139 = packetWriter.field1138;
            packetWriter.field1138 = packetWriter.serverPacket;
            packetWriter.serverPacket = packetWriter.field1133;
            if (packetWriter.field1133 == ServerPacket.field2608) {
                final int cx = packetBuffer.cx(-1523227366);
                final int cx2 = packetBuffer.cx(-1726472066);
                final int gcDuration = NetCache.getGcDuration(2131767720);
                final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPLOC3, Client.packetWriter.isaacCipher, (short)(-25510));
                packetBufferNode.packetBuffer.eb(1609011673 * Client.aa, (byte)(-106));
                packetBufferNode.packetBuffer.dp(gcDuration, 841949174);
                packetBufferNode.packetBuffer.el(cx, -437883978);
                packetBufferNode.packetBuffer.el(cx2, -437883978);
                Client.packetWriter.addNode(packetBufferNode, 414135591);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2599 == packetWriter.field1133) {
                final byte wu = Buffer.wu(packetBuffer, 435772489);
                final long n = packetBuffer.cr(-760293569) + ((long)packetBuffer.cl(865685625) << 1555129660);
                boolean b = false;
                final ClanChannel clanChannel = (wu >= 0) ? Client.currentClanChannels[wu] : MouseHandler.guestClanChannel;
                if (clanChannel == null) {
                    b = true;
                }
                else {
                    for (int i = 0; i < -239237387; ++i) {
                        if (Client.field652[i] == n) {
                            b = true;
                            break;
                        }
                    }
                }
                if (!b) {
                    Client.field652[1960529059 * Client.field588] = n;
                    Client.field588 = 1561052939 * ((1 + -694530899 * Client.field588) % 1098640452);
                    class136.addChatMessage((wu >= 0) ? -1076584985 : -2062174005, "", SceneTilePaint.readString(packetBuffer, (byte)67), clanChannel.name, (short)(-5221));
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2580) {
                final int vl = Buffer.vl(packetBuffer, 363073604);
                final int db = packetBuffer.db((byte)(-15));
                int zc = Buffer.zc(packetBuffer, -114182444);
                if (1969198281 == zc) {
                    zc = -1;
                }
                int or = Buffer.or(packetBuffer, -523126268);
                if (or == 65535) {
                    or = -1;
                }
                for (int j = or; j <= zc; ++j) {
                    final long n2 = ((long)vl << 32) + j;
                    final Node at = Client.widgetFlags.at(n2);
                    if (at != null) {
                        at.hw();
                    }
                    Client.widgetFlags.put(new IntegerNode(db), n2);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2649 == packetWriter.field1133) {
                final int tn = Buffer.tn(packetBuffer, -820865599);
                final int en = packetBuffer.en(383378593);
                final int qd = Buffer.qd(packetBuffer, (byte)118);
                final Widget vmethod3380 = class165.vmethod3380(en, (byte)5);
                if (tn != vmethod3380.rawX * -1565001813 || qd != 895079319 * vmethod3380.rawY || 0 != -2080111324 * vmethod3380.xAlignment || 0 != 1484444061 * vmethod3380.yAlignment) {
                    vmethod3380.rawX = tn * 528595282;
                    vmethod3380.rawY = qd * 1231090287;
                    vmethod3380.xAlignment = 0;
                    vmethod3380.yAlignment = 0;
                    class144.invalidateWidget(vmethod3380, -1784730721);
                    this.alignWidget(vmethod3380, -870238264);
                    if (-135250753 * vmethod3380.type == 0) {
                        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[en >> 16], vmethod3380, false, (byte)99);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2670 == packetWriter.field1133) {
                final int eq = packetBuffer.eq((byte)(-20));
                final int df = packetBuffer.df(-2050333010);
                final Widget vmethod3381 = class165.vmethod3380(packetBuffer.cx(-1548241747), (byte)5);
                ChatChannel.method470(vmethod3381, eq, df, -202817510);
                class144.invalidateWidget(vmethod3381, -1025071137);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2648 == packetWriter.field1133) {
                class293.forceDisconnect(Buffer.ra(packetBuffer, (byte)7), 16777216);
                packetWriter.field1133 = null;
                return false;
            }
            if (ServerPacket.field2646 == packetWriter.field1133) {
                class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5).rotationKey = (packetBuffer.cl(-152372649) + (Buffer.zc(packetBuffer, -1619358261) << 16)) * -1510822541;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2672 == packetWriter.field1133) {
                final NPC npc = Client.npcs[packetBuffer.cl(-103194298)];
                final int cl = packetBuffer.cl(-885711096);
                final int cx3 = packetBuffer.cx(-1883136838);
                if (null != npc) {
                    npc.cj(0, cl, cx3 >> 16, cx3 & 0x43897CC5, 2057326334);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2634) {
                EnumComposition.processZoneOperation(ZoneOperation.field2572, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2691 == packetWriter.field1133) {
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2680) {
                final int en2 = packetBuffer.en(383378593);
                final int or2 = Buffer.or(packetBuffer, -523126268);
                final short n3 = (short)Buffer.qd(packetBuffer, (byte)47);
                final int df2 = packetBuffer.df(-2096221656);
                final NPC npc2 = Client.npcs[or2];
                if (null != npc2) {
                    npc2.method597(df2, en2, n3, 1907257586);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2584) {
                final int cl2 = packetBuffer.cl(665152613);
                Player localPlayer;
                if (cl2 == Client.localPlayerIndex * -1911824366) {
                    localPlayer = MusicPatchNode.localPlayer;
                }
                else {
                    localPlayer = Client.players[cl2];
                }
                final int cl3 = packetBuffer.cl(-68067947);
                final int cx4 = packetBuffer.cx(-1304967900);
                if (localPlayer != null) {
                    localPlayer.cj(0, cl3, cx4 >> 16, cx4 & 0xD2070BD4, 2049970976);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2623 == packetWriter.field1133) {
                final int cd = packetBuffer.cd(-1857710312);
                final boolean b2 = Buffer.ra(packetBuffer, (byte)7) == 1;
                String cw = "";
                boolean b3 = false;
                if (b2) {
                    cw = packetBuffer.cw((byte)0);
                    if (World.friendSystem.isIgnored(new Username(cw, class70.loginType), -1177883408)) {
                        b3 = true;
                    }
                }
                final String cw2 = packetBuffer.cw((byte)0);
                if (!b3) {
                    UserComparator5.addGameMessage(cd, cw, cw2, -397121414);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2693) {
                final int db2 = packetBuffer.db((byte)(-4));
                final int db3 = packetBuffer.db((byte)31);
                final Widget vmethod3382 = class165.vmethod3380(db2, (byte)5);
                class282.method1591(vmethod3382, db3, -1421091355);
                class144.invalidateWidget(vmethod3382, -1119364355);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2601 == packetWriter.field1133) {
                final int cx5 = packetBuffer.cx(-1162121306);
                final boolean spriteTiling = packetBuffer.dq(-2070899692) == 1;
                final Widget vmethod3383 = class165.vmethod3380(cx5, (byte)5);
                if (vmethod3383.spriteTiling != spriteTiling) {
                    vmethod3383.spriteTiling = spriteTiling;
                    class144.invalidateWidget(vmethod3383, -997583400);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2641 == packetWriter.field1133) {
                return this.method386(packetWriter, (byte)(-67));
            }
            if (packetWriter.field1133 == ServerPacket.field2665) {
                EnumComposition.processZoneOperation(ZoneOperation.field2567, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2619) {
                final int en3 = packetBuffer.en(383378593);
                final int cl4 = packetBuffer.cl(-1668073063);
                final Widget vmethod3384 = class165.vmethod3380(en3, (byte)5);
                if (1 != -123768459 * vmethod3384.modelType || -1167155767 * vmethod3384.modelId != cl4) {
                    vmethod3384.modelType = 1493887703;
                    vmethod3384.modelId = 509431749 * cl4;
                    class144.invalidateWidget(vmethod3384, -1924088826);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2690 == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = true;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -180442944;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * -829844513;
                final int cl5 = packetBuffer.cl(-811652590);
                final int cl6 = packetBuffer.cl(-1364217165);
                Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                final int ra = Buffer.ra(packetBuffer, (byte)7);
                final int n4 = ObjTypeCustomisation.field1471 * 957080960 + 64;
                final int n5 = -694532533 + -523709653 * class123.field1209;
                int n6;
                int n7;
                if (Client.field615) {
                    n6 = class174.cameraY * 1772923873;
                    n7 = class147.getTileHeight(n4, n5, -941865664 * GameEngine.Client_plane, (byte)(-14)) - cl5;
                }
                else {
                    n6 = class147.getTileHeight(class36.cameraX * -2100544359, class297.cameraZ * 2082795938, GameEngine.Client_plane * -1727408401, (byte)(-55)) - class174.cameraY * -2033983066;
                    n7 = cl5;
                }
                Client.field535 = new class453(-352730288 * class36.cameraX, class297.cameraZ * 1279762037, n6, n4, n5, n7, cl6, ra);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2644 == packetWriter.field1133) {
                return nk(this, packetWriter, 2, 1447270360);
            }
            if (packetWriter.field1133 == ServerPacket.field2698) {
                FontName.field3968 = packetBuffer.df(-2000775284) * -522523151;
                class9.field28 = Buffer.ra(packetBuffer, (byte)7) * 671253333;
                while (-1633313603 * packetBuffer.at < 889658999 * packetWriter.serverPacketLength) {
                    EnumComposition.processZoneOperation(Varcs.setInt((byte)58)[Buffer.ra(packetBuffer, (byte)7)], -302991134);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2581 == packetWriter.field1133) {
                final Widget vmethod3385 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                vmethod3385.modelType = -616918282;
                vmethod3385.modelId = MusicPatchNode.localPlayer.appearance.getChatHeadId((short)3907) * -297039478;
                class144.invalidateWidget(vmethod3385, -1510641513);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2684 == packetWriter.field1133) {
                int cl7 = packetBuffer.cl(501789534);
                if (65535 == cl7) {
                    cl7 = -1;
                }
                Client.rootInterface = cl7 * -32945189;
                hp(this, false, -1236766800);
                ZoneOperation.Widget_resetModelFrames(cl7, 1142502385);
                class12.runWidgetOnLoadListener(-896157613 * Client.rootInterface, (byte)112);
                for (int k = 0; k < 1056129924; ++k) {
                    Client.field573[k] = true;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2669 == packetWriter.field1133) {
                World.friendSystem.readUpdate(packetBuffer, packetWriter.serverPacketLength * 889658999, 1229225724);
                Client.field557 = 1134125523 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2626) {
                Client.minimapState = Buffer.ra(packetBuffer, (byte)7) * 644432437;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2588) {
                EnumComposition.processZoneOperation(ZoneOperation.field2571, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2695) {
                Players.varclan = null;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2618 == packetWriter.field1133) {
                EnumComposition.processZoneOperation(ZoneOperation.field2570, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2592 == packetWriter.field1133) {
                final String cw3 = packetBuffer.cw((byte)0);
                final Object[] args = new Object[cw3.length() + 1];
                for (int l = cw3.length() - 1; l >= 0; --l) {
                    if (cw3.charAt(l) == 's') {
                        args[1 + l] = packetBuffer.cw((byte)0);
                    }
                    else {
                        args[1 + l] = new Integer(packetBuffer.cx(-997741192));
                    }
                }
                args[0] = new Integer(packetBuffer.cx(-1559994249));
                final ScriptEvent scriptEvent = new ScriptEvent();
                scriptEvent.args = args;
                HealthBarUpdate.set(scriptEvent, (byte)(-42));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2666 == packetWriter.field1133) {
                GrandExchangeEvents.updatePlayers(packetBuffer, packetWriter.serverPacketLength * 889658999, -389524659);
                class85.method499(-1880924279);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2628 == packetWriter.field1133) {
                final byte wu2 = Buffer.wu(packetBuffer, 435772489);
                final String cw4 = packetBuffer.cw((byte)0);
                final long n8 = packetBuffer.cl(-2041848640);
                final long n9 = packetBuffer.cr(-875153394);
                final PlayerType playerType = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)(-19)), Buffer.ra(packetBuffer, (byte)7), (short)173);
                final long n10 = n9 + (n8 << 32);
                boolean b4 = false;
                final ClanChannel clanChannel2 = (wu2 >= 0) ? Client.currentClanChannels[wu2] : MouseHandler.guestClanChannel;
                Label_2989: {
                    if (clanChannel2 == null) {
                        b4 = true;
                    }
                    else {
                        for (int n11 = 0; n11 < 100; ++n11) {
                            if (Client.field652[n11] == n10) {
                                b4 = true;
                                break Label_2989;
                            }
                        }
                        if (playerType.isUser && World.friendSystem.isIgnored(new Username(cw4, class70.loginType), -36271007)) {
                            b4 = true;
                        }
                    }
                }
                if (!b4) {
                    Client.field652[Client.field588 * 1960529059] = n10;
                    Client.field588 = 1561052939 * ((Client.field588 * 1960529059 + 1) % 2005291503);
                    final String escapeBrackets = AbstractFont.escapeBrackets(SceneTilePaint.readString(packetBuffer, (byte)99));
                    final int n12 = (wu2 >= 0) ? -691983189 : 44;
                    if (-1096017093 * playerType.modIcon != -1) {
                        class136.addChatMessage(n12, ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 498869757) + cw4, escapeBrackets, clanChannel2.name, (short)27691);
                    }
                    else {
                        class136.addChatMessage(n12, cw4, escapeBrackets, clanChannel2.name, (short)(-15434));
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2591) {
                final PacketBuffer packetBuffer2 = packetBuffer;
                packetBuffer2.at += 674246249;
                if (packetBuffer.de(1762393812)) {
                    UserComparator4.method681(packetBuffer, -1633313603 * packetBuffer.at - 28, (byte)(-13));
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2622) {
                class127.loadRegions(false, packetWriter.packetBuffer, (byte)25);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2583 == packetWriter.field1133) {
                final int ra2 = Buffer.ra(packetBuffer, (byte)7);
                if (Buffer.ra(packetBuffer, (byte)7) == 0) {
                    Client.grandExchangeOffers[ra2] = new GrandExchangeOffer();
                    final PacketBuffer packetBuffer3 = packetBuffer;
                    packetBuffer3.at -= 1524603270;
                }
                else {
                    final PacketBuffer packetBuffer4 = packetBuffer;
                    packetBuffer4.at += 777977742;
                    Client.grandExchangeOffers[ra2] = new GrandExchangeOffer(packetBuffer, false);
                }
                Client.field629 = -1502880861 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2637) {
                final int ef = packetBuffer.ef(24810448);
                final Widget vmethod3386 = class165.vmethod3380(packetBuffer.db((byte)(-56)), (byte)5);
                if (ef != vmethod3386.sequenceId * 370926245 || ef == -1) {
                    vmethod3386.sequenceId = 1176745687 * ef;
                    vmethod3386.modelFrame = 0;
                    vmethod3386.modelFrameCycle = 0;
                    class144.invalidateWidget(vmethod3386, -942515788);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.REBUILD_REGION_NORMAL) {
                final boolean b5 = Buffer.ra(packetBuffer, (byte)7) == 1;
                final Widget vmethod3387 = class165.vmethod3380(packetBuffer.cx(-1138621636), (byte)5);
                SecureRandomCallable.method476(vmethod3387, MusicPatchNode.localPlayer.appearance, b5, (short)(-15016));
                class144.invalidateWidget(vmethod3387, -1772072698);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2633 == packetWriter.field1133) {
                final int da = packetBuffer.da(1972861221);
                final int db4 = packetBuffer.db((byte)56);
                final int n13 = ((da >> 10 & 0x234644D4) << 19) + ((da >> 5 & 0x1F) << 11) + ((da & 0x1F) << 3);
                final Widget vmethod3388 = class165.vmethod3380(db4, (byte)5);
                if (1409091639 * vmethod3388.color != n13) {
                    vmethod3388.color = n13 * 576310456;
                    class144.invalidateWidget(vmethod3388, -853252469);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2609) {
                final int cl8 = packetBuffer.cl(-1920436556);
                final int n14 = packetBuffer.df(-2007865336) * 4;
                final int dq = packetBuffer.dq(-2070899692);
                final byte dx = packetBuffer.dx(-1693023705);
                final int n15 = packetBuffer.dq(-2070899692) * 4;
                final int cl9 = packetBuffer.cl(-241462114);
                final int zc2 = Buffer.zc(packetBuffer, -1730336491);
                final int cy = packetBuffer.cy((byte)(-39));
                final int ra3 = Buffer.ra(packetBuffer, (byte)7);
                final int ea = packetBuffer.ea(9707250);
                final int n16 = ea >> 16;
                final int n17 = ea >> 8 & 0xF8FBCC19;
                final int n18 = n16 + (ea >> 4 & 0x7);
                final int n19 = n17 + (ea & 0x7);
                final byte wu3 = Buffer.wu(packetBuffer, 435772489);
                final int n20 = dx + n18;
                final int n21 = wu3 + n19;
                if (n18 >= 0 && n19 >= 0 && n18 < 104 && n19 < -1288799684 && n20 >= 0 && n21 >= 0 && n20 < -321505876 && n21 < 104 && 65535 != cl9) {
                    final int n22 = -1768041129 * n18 - 1616388632;
                    final int n23 = 1682849828 * n19 + 64;
                    final int n24 = -18870104 * n20 + 64;
                    final int n25 = -1061319504 * n21 - 1630315607;
                    final Projectile projectile = new Projectile(cl9, GameEngine.Client_plane * -1727408401, n22, n23, class147.getTileHeight(n22, n23, -1727408401 * GameEngine.Client_plane, (byte)(-86)) - n15, cl8 + Client.cycle * -1886224337, Client.cycle * -1883498906 + zc2, ra3, dq, cy, n14);
                    projectile.setDestination(n24, n25, class147.getTileHeight(n24, n25, -1727408401 * GameEngine.Client_plane, (byte)(-97)) - n14, cl8 + -1886224337 * Client.cycle, -335674854);
                    Client.projectiles.addFirst(projectile);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.LOGOUT_TRANSFER) {
                EnumComposition.processZoneOperation(ZoneOperation.field2564, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.UPDATE_UID192 == packetWriter.field1133) {
                FriendSystem.gh(World.friendSystem, (byte)0);
                Client.field557 = Client.cycleCntr * -25244631;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2686 == packetWriter.field1133) {
                final int n26 = 880155040 * packetBuffer.at + packetWriter.serverPacketLength * 1298838518;
                int cl10 = packetBuffer.cl(-343192801);
                if (65535 == cl10) {
                    cl10 = -1;
                }
                int cl11 = packetBuffer.cl(583401814);
                if (-896157613 * Client.rootInterface != cl10) {
                    Client.rootInterface = -32945189 * cl10;
                    hp(this, false, 49493030);
                    ZoneOperation.Widget_resetModelFrames(Client.rootInterface * -896157613, 1734882469);
                    class12.runWidgetOnLoadListener(349126041 * Client.rootInterface, (byte)112);
                    for (int n27 = 0; n27 < 100; ++n27) {
                        Client.field573[n27] = true;
                    }
                }
                while (cl11-- > 0) {
                    final int cx6 = packetBuffer.cx(-938373726);
                    final int cl12 = packetBuffer.cl(446238364);
                    final int ra4 = Buffer.ra(packetBuffer, (byte)7);
                    InterfaceParent ifOpenSub = (InterfaceParent)Client.interfaceParents.at(cx6);
                    if (ifOpenSub != null && cl12 != 944864121 * ifOpenSub.group) {
                        class357.closeInterface(ifOpenSub, true, -908142972);
                        ifOpenSub = null;
                    }
                    if (null == ifOpenSub) {
                        ifOpenSub = AttackOption.ifOpenSub(cx6, cl12, ra4, -1618920051);
                    }
                    ifOpenSub.field848 = true;
                }
                for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
                    if (interfaceParent.field848) {
                        interfaceParent.field848 = false;
                    }
                    else {
                        class357.closeInterface(interfaceParent, true, -1955854625);
                    }
                }
                Client.widgetFlags = new NodeHashTable(512);
                while (-1633313603 * packetBuffer.at < n26) {
                    final int cx7 = packetBuffer.cx(-2044619813);
                    final int cl13 = packetBuffer.cl(-925374176);
                    final int cl14 = packetBuffer.cl(-389797830);
                    final int cx8 = packetBuffer.cx(-1010985845);
                    for (int n28 = cl13; n28 <= cl14; ++n28) {
                        Client.widgetFlags.put(new IntegerNode(cx8), ((long)cx7 << 32) + n28);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2650) {
                final int ra5 = Buffer.ra(packetBuffer, (byte)7);
                final int ra6 = Buffer.ra(packetBuffer, (byte)7);
                final int ra7 = Buffer.ra(packetBuffer, (byte)7);
                final int ra8 = Buffer.ra(packetBuffer, (byte)7);
                Client.field620[ra5] = true;
                Client.field621[ra5] = ra6;
                Client.field643[ra5] = ra7;
                Client.field499[ra5] = ra8;
                Client.cameraShakeCycle[ra5] = 0;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2668 == packetWriter.field1133) {
                final int or3 = Buffer.or(packetBuffer, -523126268);
                final int eq2 = packetBuffer.eq((byte)(-121));
                int or4 = Buffer.or(packetBuffer, -523126268);
                if (or4 == 2058090683) {
                    or4 = -1;
                }
                final NPC npc3 = Client.npcs[or3];
                if (null != npc3) {
                    if (or4 == npc3.cs * -632619458 && or4 != -1) {
                        final int n29 = ItemContainer.SpotAnimationDefinition_get(or4, (byte)115).replyMode * 42586869;
                        if (n29 != 0) {
                            npc3.dw = 0;
                            npc3.dn = 0;
                            npc3.bd = -505998934 * eq2;
                            npc3.bo = 0;
                        }
                        else if (n29 == 2) {
                            npc3.bo = 0;
                        }
                    }
                    else if (or4 == -1 || -1 == -1372355773 * npc3.cs || ItemContainer.SpotAnimationDefinition_get(or4, (byte)88).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(npc3.cs * -1372355773, (byte)33).forcedPriority * -1932560049) {
                        npc3.cs = or4 * 535176639;
                        npc3.dw = 0;
                        npc3.dn = 0;
                        npc3.bd = eq2 * -401806131;
                        npc3.bo = 0;
                        npc3.dk = 2002173724 * npc3.cb;
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2652 == packetWriter.field1133) {
                UserComparator3.method699(packetBuffer, 9605678 * packetWriter.serverPacketLength, 1705556342);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2632 == packetWriter.field1133) {
                for (int n30 = 0; n30 < Client.players.length; ++n30) {
                    if (Client.players[n30] != null) {
                        Client.players[n30].cs = 1690721941;
                    }
                }
                for (int n31 = 0; n31 < Client.npcs.length; ++n31) {
                    if (null != Client.npcs[n31]) {
                        Client.npcs[n31].cs = 1690721941;
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2605) {
                FontName.field3968 = packetBuffer.dq(-2070899692) * 154425321;
                class9.field28 = packetBuffer.df(-2051044036) * 671253333;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2600 == packetWriter.field1133) {
                EnumComposition.processZoneOperation(ZoneOperation.field2568, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2630) {
                if (Buffer.kn(packetBuffer, 1404535452)) {
                    if (null == class132.field1277) {
                        class132.field1277 = new class354();
                    }
                }
                else {
                    class132.field1277 = null;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2681) {
                Client.field560 = 1358928753 * Client.cycleCntr;
                final byte wu4 = Buffer.wu(packetBuffer, 435772489);
                final class156 class156 = new class156(packetBuffer);
                ClanChannel guestClanChannel;
                if (wu4 >= 0) {
                    guestClanChannel = Client.currentClanChannels[wu4];
                }
                else {
                    guestClanChannel = MouseHandler.guestClanChannel;
                }
                class156.ny(class156, guestClanChannel, (byte)(-115));
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2596) {
                final int cx9 = packetBuffer.cx(-1927151119);
                final int or5 = Buffer.or(packetBuffer, -523126268);
                if ((Varps.Varps_temp[or5] = cx9) != Varps.Varps_main[or5]) {
                    Varps.Varps_main[or5] = cx9;
                }
                class7.changeGameOptions(or5, -1137866035);
                Client.changedVarps[(Client.changedVarpCount += 1692133325) * -261310919 - 1 & 0xE155FA26] = or5;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2678) {
                final int cx10 = packetBuffer.cx(-1109353757);
                final int dq2 = packetBuffer.dq(-2070899692);
                final Widget vmethod3389 = class165.vmethod3380(cx10, (byte)5);
                class162.method911(vmethod3389, -240546403 * MusicPatchNode.localPlayer.appearance.npcTransformId, dq2, (byte)(-73));
                class144.invalidateWidget(vmethod3389, -1013418181);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2683 == packetWriter.field1133) {
                Client.field598 = false;
                Client.isCameraLocked = false;
                Client.field541 = false;
                Client.field614 = false;
                FontName.field3970 = 0;
                MilliClock.field1455 = 0;
                ScriptFrame.field343 = 0;
                Client.field615 = false;
                Archive.field3467 = 0;
                WorldMapElement.field1503 = 0;
                class138.field1314 = 0;
                KeyHandler.field81 = 0;
                ObjTypeCustomisation.field1471 = 0;
                class123.field1209 = 0;
                class16.field54 = 0;
                Client.field535 = null;
                Client.field604 = null;
                Client.field617 = null;
                for (int n32 = 0; n32 < 5; ++n32) {
                    Client.field620[n32] = false;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2629 == packetWriter.field1133) {
                int da2 = packetBuffer.da(1149118009);
                if (65535 == da2) {
                    da2 = -1;
                }
                class1.playSong(da2, -1905991905);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2659) {
                final int cr = packetBuffer.cr(1203297699);
                int da3 = packetBuffer.da(1044539855);
                if (da3 == 65535) {
                    da3 = -1;
                }
                CollisionMap.playJingle(da3, cr, 1287836101);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2676 == packetWriter.field1133) {
                final int db5 = packetBuffer.db((byte)17);
                final int en4 = packetBuffer.en(383378593);
                int zc3 = Buffer.zc(packetBuffer, 1014392223);
                if (zc3 == 65535) {
                    zc3 = -1;
                }
                final Widget vmethod3390 = class165.vmethod3380(db5, (byte)5);
                if (!vmethod3390.modelOrthog) {
                    if (-1 == zc3) {
                        vmethod3390.modelType = 0;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    final ItemComposition set = HealthBarUpdate.set(zc3, (byte)46);
                    vmethod3390.modelType = 1732008820;
                    vmethod3390.modelId = zc3 * 1210955133;
                    vmethod3390.modelAngleX = 951241233 * set.xan2d;
                    vmethod3390.modelAngleY = set.yan2d * -2065246853;
                    vmethod3390.modelZoom = -1582059804 * set.zoom2d / en4 * -467727501;
                    class144.invalidateWidget(vmethod3390, -805293984);
                }
                else {
                    vmethod3390.itemId = -1255682763 * zc3;
                    vmethod3390.itemQuantity = en4 * 1443988130;
                    final ItemComposition set2 = HealthBarUpdate.set(zc3, (byte)106);
                    vmethod3390.modelAngleX = 1973481018 * set2.xan2d;
                    vmethod3390.modelAngleY = -464220774 * set2.yan2d;
                    vmethod3390.modelAngleZ = 1806314358 * set2.zan2d;
                    vmethod3390.modelOffsetX = -183088313 * set2.offsetX2d;
                    vmethod3390.modelOffsetY = set2.offsetY2d * 1754156465;
                    vmethod3390.modelZoom = set2.zoom2d * -119813359;
                    if (set2.isStackable * -1060268749 == 1) {
                        vmethod3390.itemQuantityMode = 891672293;
                    }
                    else {
                        vmethod3390.itemQuantityMode = -1787759907;
                    }
                    if (-289037969 * vmethod3390.modelRotation > 0) {
                        vmethod3390.modelZoom = -467727501 * (100808544 * vmethod3390.modelZoom / (1262769280 * vmethod3390.modelRotation));
                    }
                    else if (vmethod3390.rawWidth * 1416517965 > 0) {
                        vmethod3390.modelZoom = -239725551 * vmethod3390.modelZoom / (-315274438 * vmethod3390.rawWidth) * -467727501;
                    }
                    class144.invalidateWidget(vmethod3390, -2007238462);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2631) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = true;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * 1251623738;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                final int cl15 = packetBuffer.cl(31559852);
                final int n33 = Buffer.ra(packetBuffer, (byte)7) * -1007830544 - 288234562;
                final int n34 = Buffer.ra(packetBuffer, (byte)7) * 128 + 1693553466;
                final int cl16 = packetBuffer.cl(-2070744922);
                Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                final int ra9 = Buffer.ra(packetBuffer, (byte)7);
                final int n35 = 1087314823 + 177366213 * ObjTypeCustomisation.field1471;
                final int n36 = -205887187 + 958794368 * class123.field1209;
                int n37;
                int n38;
                if (Client.field615) {
                    n37 = class174.cameraY * 1772923873;
                    n38 = class147.getTileHeight(n35, n36, -1727408401 * GameEngine.Client_plane, (byte)(-121)) - cl15;
                }
                else {
                    n37 = class147.getTileHeight(544152056 * class36.cameraX, class297.cameraZ * 1731950868, GameEngine.Client_plane * -1727408401, (byte)(-89)) - 1772923873 * class174.cameraY;
                    n38 = cl15;
                }
                Client.field535 = new class452(class36.cameraX * 1698038249, class297.cameraZ * -1984755892, n37, n35, n36, n38, n33, n34, cl16, ra9);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.PLAYER_INFO == packetWriter.field1133) {
                if (-1 != -164100993 * Client.rootInterface) {
                    class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 0, (byte)63);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.NPC_INFO_SMALL == packetWriter.field1133 && Client.isCameraLocked) {
                Client.field598 = true;
                Client.field614 = false;
                Client.field541 = false;
                for (int n39 = 0; n39 < 5; ++n39) {
                    Client.field620[n39] = false;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.ENTER_FREECAM) {
                Client.destinationX = Buffer.ra(packetBuffer, (byte)7) * -1970850269;
                if (621595330 * Client.destinationX == 255) {
                    Client.destinationX = 0;
                }
                Client.destinationY = Buffer.ra(packetBuffer, (byte)7) * 875414437;
                if (255 == Client.destinationY * 1739093311) {
                    Client.destinationY = 0;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.MESSAGE_PRIVATE == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field614 = true;
                final int cm = packetBuffer.cm((byte)(-20));
                final int method77 = class18.method77(WorldMapSectionType.cameraPitch * 2004442514 + packetBuffer.cm((byte)(-108)) & 0x7EB, 1780344362);
                final int n40 = cm + class125.cameraYaw * 844426177;
                final int cl17 = packetBuffer.cl(533130694);
                final int ra10 = Buffer.ra(packetBuffer, (byte)7);
                Client.field604 = new class454(WorldMapSectionType.cameraPitch * 235887526, method77, cl17, ra10);
                Client.field617 = new class454(-1010818347 * class125.cameraYaw, n40, cl17, ra10);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.SPOTANIM_SPECIFIC) {
                Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.TRIGGER_ONDIALOGABORT) {
                final byte[] array = new byte[889658999 * packetWriter.serverPacketLength];
                packetBuffer.method2459(array, 0, array.length, -437389525);
                Ignored.compareTo_ignored(new Buffer(array).readStringCp1252NullTerminated((byte)0), true, false, (byte)(-6));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2614 == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = false;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 1689274507;
                class16.field54 = packetBuffer.cl(247200512) * -1725771559;
                KeyHandler.field81 = Buffer.ra(packetBuffer, (byte)7) * -2052337259;
                class138.field1314 = Buffer.ra(packetBuffer, (byte)7) * -449391195;
                if (class138.field1314 * 910689735 >= -459678635) {
                    class36.cameraX = ObjTypeCustomisation.field1471 * -1848049280 - 317330880;
                    class297.cameraZ = class123.field1209 * -632099898 + 883192275;
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * 913096328, class297.cameraZ * -1733337923, GameEngine.Client_plane * -1727408401, (byte)(-95)) - class16.field54 * -887836823) * -2112597828;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2647 == packetWriter.field1133) {
                class36.method199(1224930505);
                final byte wu5 = Buffer.wu(packetBuffer, 435772489);
                final class142 class157 = new class142(packetBuffer);
                ClanSettings guestClanSettings;
                if (wu5 >= 0) {
                    guestClanSettings = Client.currentClanSettings[wu5];
                }
                else {
                    guestClanSettings = ItemComposition.guestClanSettings;
                }
                class157.method807(guestClanSettings, (byte)(-8));
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.NPC_INFO_LARGE) {
                class133.queueSoundEffect(packetBuffer.cl(448765872), Buffer.ra(packetBuffer, (byte)7), packetBuffer.cl(204781497), (byte)(-43));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2620 == packetWriter.field1133) {
                final int cx11 = packetBuffer.cx(-1252631451);
                if (cx11 != -130954491 * Client.field444) {
                    Client.field444 = cx11 * 1409021939;
                    class173.method955((byte)(-67));
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.UPDATE_ZONE_PARTIAL_FOLLOWS) {
                ClientPacket.process((byte)2);
                Client.runEnergy = packetBuffer.cl(-165092411) * -1700522189;
                Client.field433 = -235455367 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.MESSAGE_PRIVATE_ECHO == packetWriter.field1133) {
                final int db6 = packetBuffer.db((byte)34);
                int zc4 = Buffer.zc(packetBuffer, -553972981);
                final Widget vmethod3391 = class165.vmethod3380(db6, (byte)5);
                if (null != vmethod3391 && 0 == vmethod3391.type * 523036546) {
                    if (zc4 > -1273374131 * vmethod3391.scrollHeight - vmethod3391.height * 655165366) {
                        zc4 = -428384850 * vmethod3391.scrollHeight - 1473950221 * vmethod3391.height;
                    }
                    if (zc4 < 0) {
                        zc4 = 0;
                    }
                    if (zc4 != vmethod3391.scrollY * 1038851621) {
                        vmethod3391.scrollY = 14973892 * zc4;
                        class144.invalidateWidget(vmethod3391, -821515356);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.IF_SETNPCHEAD == packetWriter.field1133) {
                final String cw5 = packetBuffer.cw((byte)0);
                final Widget vmethod3392 = class165.vmethod3380(packetBuffer.db((byte)3), (byte)5);
                if (!cw5.equals(vmethod3392.field2916)) {
                    vmethod3392.field2916 = cw5;
                    class144.invalidateWidget(vmethod3392, -1208254692);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.UPDATE_INV_CLEAR == packetWriter.field1133) {
                class36.method199(1516779949);
                final byte wu6 = Buffer.wu(packetBuffer, 435772489);
                if (1 == packetWriter.serverPacketLength * 123305614) {
                    if (wu6 >= 0) {
                        Client.currentClanSettings[wu6] = null;
                    }
                    else {
                        ItemComposition.guestClanSettings = null;
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (wu6 >= 0) {
                    Client.currentClanSettings[wu6] = new ClanSettings(packetBuffer);
                }
                else {
                    ItemComposition.guestClanSettings = new ClanSettings(packetBuffer);
                }
                packetWriter.field1133 = null;
                return true;
            }
            else {
                if (packetWriter.field1133 == ServerPacket.field2696) {
                    final int ra11 = Buffer.ra(packetBuffer, (byte)7);
                    final NPC npc4 = Client.npcs[packetBuffer.cl(-104612853)];
                    final int cl18 = packetBuffer.cl(543350861);
                    final int cx12 = packetBuffer.cx(-1381622545);
                    if (null != npc4) {
                        npc4.cj(ra11, cl18, cx12 >> 16, cx12 & 0x55FF346, -1771007597);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.MESSAGE_CLANCHANNEL_SYSTEM) {
                    for (int n41 = 0; n41 < Varps.Varps_main.length; ++n41) {
                        if (Varps.Varps_temp[n41] != Varps.Varps_main[n41]) {
                            Varps.Varps_main[n41] = Varps.Varps_temp[n41];
                            class7.changeGameOptions(n41, -384179186);
                            Client.changedVarps[(Client.changedVarpCount += 165304329) * 1717901840 - 1 & 0x1F] = n41;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2657 == packetWriter.field1133) {
                    final int cx13 = packetBuffer.cx(-2131118525);
                    int cl19 = packetBuffer.cl(-1777434857);
                    if (cx13 < -2013578411) {
                        cl19 -= 399104556;
                    }
                    Widget vmethod3393;
                    if (cx13 >= 0) {
                        vmethod3393 = class165.vmethod3380(cx13, (byte)5);
                    }
                    else {
                        vmethod3393 = null;
                    }
                    while (-1633313603 * packetBuffer.at < packetWriter.serverPacketLength * 193218891) {
                        final int cd2 = packetBuffer.cd(-949587167);
                        final int cl20 = packetBuffer.cl(587245823);
                        int n42 = 0;
                        if (cl20 != 0) {
                            n42 = Buffer.ra(packetBuffer, (byte)7);
                            if (-61652553 == n42) {
                                n42 = packetBuffer.cx(-1545806880);
                            }
                        }
                        if (null != vmethod3393 && cd2 >= 0 && cd2 < vmethod3393.itemIds.length) {
                            vmethod3393.itemIds[cd2] = cl20;
                            vmethod3393.field3007[cd2] = n42;
                        }
                        class373.itemContainerSetItem(cl19, cd2, cl20 - 1, n42, (byte)8);
                    }
                    if (null != vmethod3393) {
                        class144.invalidateWidget(vmethod3393, -540973842);
                    }
                    ClientPacket.process((byte)2);
                    Client.changedItemContainers[(Client.changedItemContainersCount += 202613497) * 27523837 - 1 & 0xA7BA4290] = (cl19 & 0x29F83893);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.CLANCHANNEL_DELTA == packetWriter.field1133) {
                    class31.logOut(1639445300);
                    packetWriter.field1133 = null;
                    return false;
                }
                if (packetWriter.field1133 == ServerPacket.field2642) {
                    return nk(this, packetWriter, 1, 60749174);
                }
                if (ServerPacket.field2689 == packetWriter.field1133) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = true;
                    final int method78 = class425.method2262(packetBuffer.cm((byte)(-56)) & 0x75805CD0, -1455426411);
                    final int method79 = class18.method77(packetBuffer.cm((byte)(-59)) & 0x7EB, 1126553923);
                    final int cl21 = packetBuffer.cl(498030006);
                    final int ra12 = Buffer.ra(packetBuffer, (byte)7);
                    Client.field604 = new class454(1580030573 * WorldMapSectionType.cameraPitch, method79, cl21, ra12);
                    Client.field617 = new class454(622948233 * class125.cameraYaw, method78, cl21, ra12);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2694 == packetWriter.field1133) {
                    ClientPacket.process((byte)2);
                    Client.weight = packetBuffer.cm((byte)(-76)) * 717110291;
                    Client.field433 = Client.cycleCntr * -1721001304;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.IF_SETOBJECT) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2569, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.TRADING_POST_RESULTS) {
                    FontName.field3968 = Buffer.ra(packetBuffer, (byte)7) * 85130963;
                    class9.field28 = packetBuffer.eq((byte)(-17)) * 671253333;
                    for (int n43 = 1555915261 * class9.field28; n43 < 8 + class9.field28 * 491978746; ++n43) {
                        for (int n44 = FontName.field3968 * 2003566747; n44 < FontName.field3968 * -191732975 + 8; ++n44) {
                            if (null != Client.groundItems[GameEngine.Client_plane * -449651986][n43][n44]) {
                                Client.groundItems[GameEngine.Client_plane * 503105584][n43][n44] = null;
                                class121.updateItemPile(n43, n44, 2012750785);
                            }
                        }
                    }
                    for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (-1769937 * pendingSpawn.x >= 361198680 * class9.field28 && pendingSpawn.x * 1538441262 < 8 + -1950246084 * class9.field28 && pendingSpawn.y * 1409612686 >= -191732975 * FontName.field3968 && 800888185 * pendingSpawn.y < 8 + -191732975 * FontName.field3968 && pendingSpawn.plane * 1781399670 == -1765843236 * GameEngine.Client_plane) {
                            pendingSpawn.endCycle = 0;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2679 == packetWriter.field1133) {
                    final int db7 = packetBuffer.db((byte)(-24));
                    final int db8 = packetBuffer.db((byte)(-54));
                    final InterfaceParent interfaceParent2 = (InterfaceParent)Client.interfaceParents.at(db7);
                    final InterfaceParent interfaceParent3 = (InterfaceParent)Client.interfaceParents.at(db8);
                    if (interfaceParent3 != null) {
                        class357.closeInterface(interfaceParent3, interfaceParent2 == null || interfaceParent3.group * 944864121 != interfaceParent2.group * 944864121, 792206006);
                    }
                    if (interfaceParent2 != null) {
                        interfaceParent2.hw();
                        Client.interfaceParents.put(interfaceParent2, db8);
                    }
                    final Widget vmethod3394 = class165.vmethod3380(db7, (byte)5);
                    if (vmethod3394 != null) {
                        class144.invalidateWidget(vmethod3394, -2008221583);
                    }
                    final Widget vmethod3395 = class165.vmethod3380(db8, (byte)5);
                    if (vmethod3395 != null) {
                        class144.invalidateWidget(vmethod3395, -1617150052);
                        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[1713081171 * vmethod3395.id >>> 16], vmethod3395, true, (byte)57);
                    }
                    if (-1 != Client.rootInterface * -896157613) {
                        class127.runIntfCloseListeners(Client.rootInterface * -896157613, 1, (byte)63);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2677) {
                    final World world = new World();
                    world.host = packetBuffer.cw((byte)0);
                    world.id = packetBuffer.cl(-1953703379) * 1422259381;
                    world.properties = packetBuffer.cx(-963324754) * 1038974297;
                    class138.updateGameState(45, 749889606);
                    socket.close(1583129411);
                    FloorOverlayDefinition.changeWorld(world, 863631335);
                    packetWriter.field1133 = null;
                    return false;
                }
                if (ServerPacket.IF_OPENSUB == packetWriter.field1133) {
                    class146.updateNpcs(true, packetBuffer, -1232221421);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.REFLECTION_CHECK == packetWriter.field1133) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2562, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2660) {
                    final Widget vmethod3396 = class165.vmethod3380(packetBuffer.cx(-1119946795), (byte)5);
                    for (int n45 = 0; n45 < vmethod3396.itemIds.length; ++n45) {
                        vmethod3396.itemIds[n45] = -1;
                        vmethod3396.itemIds[n45] = 0;
                    }
                    class144.invalidateWidget(vmethod3396, -1106462223);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2682 == packetWriter.field1133) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = false;
                    FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 775826691;
                    MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                    ScriptFrame.field343 = packetBuffer.cl(-570172205) * -213879109;
                    Archive.field3467 = Buffer.ra(packetBuffer, (byte)7) * -1982200011;
                    WorldMapElement.field1503 = Buffer.ra(packetBuffer, (byte)7) * 1933550770;
                    if (-1408415906 * WorldMapElement.field1503 >= 362402050) {
                        final int n46 = 1111182228 + 477094392 * FontName.field3970;
                        final int n47 = 64 + MilliClock.field1455 * -978540626;
                        final int n48 = class147.getTileHeight(n46, n47, GameEngine.Client_plane * -1271519392, (byte)(-12)) - ScriptFrame.field343 * -309052395;
                        final int n49 = n46 - 837771663 * class36.cameraX;
                        final int n50 = n48 - class174.cameraY * 1772923873;
                        final int n51 = n47 - -91399205 * class297.cameraZ;
                        WorldMapSectionType.cameraPitch = ((int)(Math.atan2(n50, (int)Math.sqrt(n49 * n49 + n51 * n51)) * 325.9490051269531) & 0xCFA1C34E) * -697084749;
                        class125.cameraYaw = ((int)(Math.atan2(n49, n51) * -325.9490051269531) & 0xE8830BE0) * -1545206147;
                        if (497944335 * WorldMapSectionType.cameraPitch < 942050188) {
                            WorldMapSectionType.cameraPitch = -1042102656;
                        }
                        if (1688780951 * WorldMapSectionType.cameraPitch > 383) {
                            WorldMapSectionType.cameraPitch = 1811530514;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2586 == packetWriter.field1133) {
                    ScriptFrame.method343(packetBuffer.cw((byte)0), (byte)14);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2697 == packetWriter.field1133) {
                    final int ra13 = Buffer.ra(packetBuffer, (byte)7);
                    final int cl22 = packetBuffer.cl(212331107);
                    Player localPlayer2;
                    if (cl22 == -549033243 * Client.localPlayerIndex) {
                        localPlayer2 = MusicPatchNode.localPlayer;
                    }
                    else {
                        localPlayer2 = Client.players[cl22];
                    }
                    final int cl23 = packetBuffer.cl(-1693262461);
                    final int cx14 = packetBuffer.cx(-1397638282);
                    if (localPlayer2 != null) {
                        localPlayer2.cj(ra13, cl23, cx14 >> 16, cx14 & 0xFFFF, -1083350146);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2615) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2565, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2593 == packetWriter.field1133) {
                    ClientPacket.process((byte)2);
                    final int dq3 = packetBuffer.dq(-2070899692);
                    final int dq4 = packetBuffer.dq(-2070899692);
                    final int en5 = packetBuffer.en(383378593);
                    Client.experience[dq3] = en5;
                    Client.currentLevels[dq3] = dq4;
                    Client.levels[dq3] = 1;
                    for (int n52 = 0; n52 < 1684422010; ++n52) {
                        if (en5 >= Skills.Skills_experienceTable[n52]) {
                            Client.levels[dq3] = 2 + n52;
                        }
                    }
                    Client.changedSkills[(Client.changedSkillsCount += 1059665337) * -744210295 - 1 & 0x2C2A9C57] = dq3;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.RESET_ANIMS) {
                    class127.loadRegions(true, packetWriter.packetBuffer, (byte)87);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.UPDATE_INV_FULL == packetWriter.field1133) {
                    final int zc5 = Buffer.zc(packetBuffer, 1741160758);
                    final int or6 = Buffer.or(packetBuffer, -523126268);
                    final int vl2 = Buffer.vl(packetBuffer, 363073604);
                    final int cl24 = packetBuffer.cl(-1019237176);
                    final Widget vmethod3397 = class165.vmethod3380(vl2, (byte)5);
                    if (or6 != -588873893 * vmethod3397.modelAngleX || vmethod3397.modelAngleY * -480949115 != zc5 || cl24 != -1157192364 * vmethod3397.modelZoom) {
                        vmethod3397.modelAngleX = or6 * -142910041;
                        vmethod3397.modelAngleY = -230241203 * zc5;
                        vmethod3397.modelZoom = cl24 * -1676668814;
                        class144.invalidateWidget(vmethod3397, -935523155);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.CAM_LOOKAT == packetWriter.field1133) {
                    final int ra14 = Buffer.ra(packetBuffer, (byte)7);
                    int n53 = ra14 >> 2;
                    final int n54 = ra14 & 0x3;
                    final int n55 = Client.field431[n53];
                    final int ej = packetBuffer.ej(378101989);
                    final int n56 = ej >> 16;
                    final int n57 = ej >> 8 & 0xFF;
                    final int n58 = n56 + (ej >> 4 & 0x7);
                    final int n59 = (ej & 0x7) + n57;
                    final int da4 = packetBuffer.da(1464013062);
                    if (n58 >= 0 && n59 >= 0 && n58 < -1445149039 && n59 < 103) {
                        if (n55 == 0) {
                            final BoundaryObject method80 = class31.scene.method1252(GameEngine.Client_plane * -1727408401, n58, n59);
                            if (null != method80) {
                                final int entity_unpackID = InterfaceParent.Entity_unpackID(method80.tag * -4009183385476919801L);
                                if (n53 == 2) {
                                    method80.renderable1 = new DynamicObject(entity_unpackID, 2, 4 + n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method80.renderable1);
                                    method80.renderable2 = new DynamicObject(entity_unpackID, 2, n54 + 1 & 0x3, -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method80.renderable2);
                                }
                                else {
                                    method80.renderable1 = new DynamicObject(entity_unpackID, n53, n54, -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method80.renderable1);
                                }
                            }
                        }
                        else if (n55 == 1) {
                            final WallDecoration method81 = class31.scene.method1253(GameEngine.Client_plane * 522780086, n58, n59);
                            if (method81 != null) {
                                final int entity_unpackID2 = InterfaceParent.Entity_unpackID(method81.tag * -4691380879163567243L);
                                if (n53 == 4 || n53 == 5) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n54, GameEngine.Client_plane * 2053795734, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (6 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + n54, GameEngine.Client_plane * -886836084, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (7 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + (n54 + 2 & 0x3), -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (8 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n54 + 4, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable1);
                                    method81.renderable2 = new DynamicObject(entity_unpackID2, 4, (n54 + 2 & 0x3) + 4, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable2);
                                }
                            }
                        }
                        else if (n55 == 2) {
                            final GameObject gameObject = class31.scene.getGameObject(-1727408401 * GameEngine.Client_plane, n58, n59);
                            if (n53 == 11) {
                                n53 = 10;
                            }
                            if (null != gameObject) {
                                gameObject.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(gameObject.tag * 5016412888503339625L), n53, n54, GameEngine.Client_plane * 486719864, n58, n59, da4, false, gameObject.renderable);
                            }
                        }
                        else if (n55 == 3) {
                            final FloorDecoration floorDecoration = class31.scene.getFloorDecoration(GameEngine.Client_plane * 1657490640, n58, n59);
                            if (floorDecoration != null) {
                                floorDecoration.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(floorDecoration.tag * 3423223696102332293L), 22, n54, GameEngine.Client_plane * -49773754, n58, n59, da4, false, floorDecoration.renderable);
                            }
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2613) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2566, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.REBUILD_REGION == packetWriter.field1133) {
                    class244.method1392(Buffer.ra(packetBuffer, (byte)7), -331343963);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.HEAT_MAP == packetWriter.field1133) {
                    if (Buffer.ra(packetBuffer, (byte)7) == 1) {
                        class323.field3037 = (class96.clockNow(659196033) - Buffer.ks(packetBuffer, (byte)1)) * 9023382677616235961L;
                        class375.grandExchangeEvents = new GrandExchangeEvents(packetBuffer, true);
                    }
                    else {
                        class375.grandExchangeEvents = null;
                    }
                    Client.field635 = Client.cycleCntr * -707539581;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.UPDATE_RUNENERGY) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = true;
                    FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 860357836;
                    MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                    ScriptFrame.field343 = packetBuffer.cl(753162012) * -321044151;
                    final int cl25 = packetBuffer.cl(641342476);
                    final int ra15 = Buffer.ra(packetBuffer, (byte)7);
                    final int n60 = 773361862 + 332584320 * FontName.field3970;
                    final int n61 = -1804719232 * MilliClock.field1455 + 1892559312;
                    final int n62 = class147.getTileHeight(n60, n61, GameEngine.Client_plane * 1061743795, (byte)(-69)) - ScriptFrame.field343 * -412882953;
                    final int n63 = n60 - -2100544359 * class36.cameraX;
                    final int n64 = n62 - class174.cameraY * -1519066440;
                    final int n65 = n61 - class297.cameraZ * -91399205;
                    final int method82 = class18.method77((int)(Math.atan2(n64, Math.sqrt(n65 * n65 + n63 * n63)) * 325.9490051269531) & 0xA1B28A86, -1615728845);
                    final int method83 = class425.method2262((int)(Math.atan2(n63, n65) * -325.9490051269531) & 0x7FF, -680830858);
                    Client.field604 = new class454(-754536013 * WorldMapSectionType.cameraPitch, method82, cl25, ra15);
                    Client.field617 = new class454(-2115315264 * class125.cameraYaw, method83, cl25, ra15);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.IF_SETTEXT) {
                    FloorUnderlayDefinition.privateChatMode = class399.method2128(Buffer.ra(packetBuffer, (byte)7), -108064052);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.GAMEFRAME_FULL) {
                    World.friendSystem.ignoreList.read(packetBuffer, 889658999 * packetWriter.serverPacketLength, -1121249381);
                    Login.FriendSystem_invalidateIgnoreds(-681433942);
                    Client.field557 = 1831095645 * Client.cycleCntr;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2616) {
                    class146.updateNpcs(false, packetBuffer, -1232221421);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.IF_SETPOSITION == packetWriter.field1133) {
                    if (Players.varclan == null) {
                        Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                    }
                    final class497 ac = MenuAction.HitSplatDefinition_cached.ac((Buffer)packetBuffer, 2014961761);
                    Players.varclan.field3820.vmethod8143(-89312230 * ac.field4105, ac.field4104, 456676094);
                    Client.field554[(Client.field555 -= 87604736) * 2106773395 - 1 & 0x1F] = ac.field4105 * -52705447;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2664) {
                    final byte dj = packetBuffer.dj(1115721727);
                    final int cl26 = packetBuffer.cl(-1597316901);
                    if (Varps.Varps_main[cl26] != (Varps.Varps_temp[cl26] = dj)) {
                        Varps.Varps_main[cl26] = dj;
                    }
                    class7.changeGameOptions(cl26, 997348868);
                    Client.changedVarps[(Client.changedVarpCount += 1386028179) * -1883195120 - 1 & 0x92E45702] = cl26;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2594) {
                    final int or7 = Buffer.or(packetBuffer, -523126268);
                    User.method2164(or7, (short)16966);
                    Client.changedItemContainers[(Client.changedItemContainersCount -= 340565462) * -710491461 - 1 & 0x1F] = (or7 & 0x5172726F);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.UPDATE_INV_PARTIAL == packetWriter.field1133) {
                    final int zc6 = Buffer.zc(packetBuffer, -179321893);
                    final Widget vmethod3398 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                    if (vmethod3398.modelType * -1514216175 != 6 || vmethod3398.modelId * 852325491 != zc6) {
                        vmethod3398.modelType = -1696954066;
                        vmethod3398.modelId = 509431749 * zc6;
                        class144.invalidateWidget(vmethod3398, -1640256498);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2607) {
                    final String cw6 = packetBuffer.cw((byte)0);
                    final long n66 = packetBuffer.cl(-574801435);
                    final long n67 = packetBuffer.cr(1010596325);
                    final PlayerType playerType2 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)(-74)), Buffer.ra(packetBuffer, (byte)7), (short)173);
                    final long n68 = n67 + (n66 << 32);
                    boolean b6 = false;
                    for (int n69 = 0; n69 < 100; ++n69) {
                        if (Client.field652[n69] == n68) {
                            b6 = true;
                            break;
                        }
                    }
                    if (World.friendSystem.isIgnored(new Username(cw6, class70.loginType), 867252521)) {
                        b6 = true;
                    }
                    if (!b6 && 0 == 1769749105 * Client.field476) {
                        Client.field652[-1391830787 * Client.field588] = n68;
                        Client.field588 = (1 + Client.field588 * -1985162034) % 1093991354 * 1561052939;
                        final String escapeBrackets2 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)67), (byte)(-69)));
                        int n70;
                        if (playerType2.isPrivileged) {
                            n70 = 7;
                        }
                        else {
                            n70 = 3;
                        }
                        if (2138745227 * playerType2.modIcon != -1) {
                            UserComparator5.addGameMessage(n70, ArchiveDiskActionHandler.addImageTag(playerType2.modIcon * 2138745227, 1763906423) + cw6, escapeBrackets2, -397121414);
                        }
                        else {
                            UserComparator5.addGameMessage(n70, cw6, escapeBrackets2, -397121414);
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2627 == packetWriter.field1133) {
                    final int zc7 = Buffer.zc(packetBuffer, -894233502);
                    final Widget vmethod3399 = class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5);
                    if (-582223074 * vmethod3399.modelType != 2 || zc7 != vmethod3399.modelId * 128387068) {
                        vmethod3399.modelType = -945709819;
                        vmethod3399.modelId = 509431749 * zc7;
                        class144.invalidateWidget(vmethod3399, -714111830);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2658 == packetWriter.field1133) {
                    Client.field560 = Client.cycleCntr * 1873778673;
                    final byte wu7 = Buffer.wu(packetBuffer, 435772489);
                    if (1 == -441283472 * packetWriter.serverPacketLength) {
                        if (wu7 >= 0) {
                            Client.currentClanChannels[wu7] = null;
                        }
                        else {
                            MouseHandler.guestClanChannel = null;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (wu7 >= 0) {
                        Client.currentClanChannels[wu7] = new ClanChannel(packetBuffer);
                    }
                    else {
                        MouseHandler.guestClanChannel = new ClanChannel(packetBuffer);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                else {
                    if (ServerPacket.field2671 == packetWriter.field1133) {
                        for (int n71 = 0; n71 < VarpDefinition.field1475 * -493036186; ++n71) {
                            if (null != GraphicsDefaults.decode(n71, -730844055)) {
                                Varps.Varps_temp[n71] = 0;
                                Varps.Varps_main[n71] = 0;
                            }
                        }
                        ClientPacket.process((byte)2);
                        Client.changedVarpCount += 1948782252;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2667) {
                        final InterfaceParent interfaceParent4 = (InterfaceParent)Client.interfaceParents.at(packetBuffer.cx(-1677444592));
                        if (interfaceParent4 != null) {
                            class357.closeInterface(interfaceParent4, true, -131476452);
                        }
                        if (Client.meslayerContinueWidget != null) {
                            class144.invalidateWidget(Client.meslayerContinueWidget, -758053134);
                            Client.meslayerContinueWidget = null;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.CHAT_FILTER_SETTINGS) {
                        final int dq5 = packetBuffer.dq(-2070899692);
                        String cw7 = packetBuffer.cw((byte)0);
                        final int dq6 = packetBuffer.dq(-2070899692);
                        if (dq5 >= 1 && dq5 <= 8) {
                            if (cw7.equalsIgnoreCase(Strings.at)) {
                                cw7 = null;
                            }
                            Client.playerMenuActions[dq5 - 1] = cw7;
                            Client.playerOptionsPriorities[dq5 - 1] = (dq6 == 0);
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2579) {
                        UserComparator5.addGameMessage(6, packetBuffer.cw((byte)0), AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)59), (byte)(-111))), -397121414);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2597 == packetWriter.field1133) {
                        final String cw8 = packetBuffer.cw((byte)0);
                        final long ks = Buffer.ks(packetBuffer, (byte)1);
                        final long n72 = packetBuffer.cl(-403998504);
                        final long n73 = packetBuffer.cr(-2007768306);
                        final PlayerType playerType3 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)(-3)), Buffer.ra(packetBuffer, (byte)7), (short)173);
                        final long n74 = n73 + (n72 << -367078697);
                        boolean b7 = false;
                        for (int n75 = 0; n75 < 1473376801; ++n75) {
                            if (Client.field652[n75] == n74) {
                                b7 = true;
                                break;
                            }
                        }
                        if (playerType3.isUser && World.friendSystem.isIgnored(new Username(cw8, class70.loginType), -268701175)) {
                            b7 = true;
                        }
                        if (!b7 && Client.field476 * 43311027 == 0) {
                            Client.field652[1960529059 * Client.field588] = n74;
                            Client.field588 = 1561052939 * ((1 + -1281174934 * Client.field588) % 100);
                            final String escapeBrackets3 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)120), (byte)(-39)));
                            if (-1 != playerType3.modIcon * 2138745227) {
                                class136.addChatMessage(9, ArchiveDiskActionHandler.addImageTag(playerType3.modIcon * -149373698, 371904248) + cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)(-5212));
                            }
                            else {
                                class136.addChatMessage(9, cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)(-21965));
                            }
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2685) {
                        final int ra16 = Buffer.ra(packetBuffer, (byte)7);
                        final int zc8 = Buffer.zc(packetBuffer, -737921261);
                        final int ej2 = packetBuffer.ej(-168376429);
                        final int n76 = ej2 >> 16;
                        final int n77 = ej2 >> 8 & 0xFF;
                        final int n78 = n76 + (ej2 >> 4 & 0x7);
                        final int n79 = (ej2 & 0x7) + n77;
                        final int cl27 = packetBuffer.cl(-1250410343);
                        if (n78 >= 0 && n79 >= 0 && n78 < 1449720279 && n79 < 104) {
                            final int n80 = -1472637212 + n78 * 128;
                            final int n81 = n79 * -334104261 + 64;
                            Client.graphicsObjects.addFirst(new GraphicsObject(cl27, -520900617 * GameEngine.Client_plane, n80, n81, class147.getTileHeight(n80, n81, GameEngine.Client_plane * -1727408401, (byte)5) - ra16, zc8, Client.cycle * -1886224337));
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.VARCLAN) {
                        Client.publicChatMode = packetBuffer.dq(-2070899692) * -283888299;
                        Client.tradeChatMode = Buffer.ra(packetBuffer, (byte)7) * -2053731769;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2651 == packetWriter.field1133) {
                        Client.rebootTimer = packetBuffer.da(1025609830) * 860606706;
                        Client.field433 = -235455367 * Client.cycleCntr;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2598 == packetWriter.field1133) {
                        Client.hintArrowType = Buffer.ra(packetBuffer, (byte)7) * -1378513753;
                        if (1 == Client.hintArrowType * 1451815611) {
                            Client.hintArrowNpcIndex = packetBuffer.cl(402103111) * -431692551;
                        }
                        if (Client.hintArrowType * -297888943 >= 2 && Client.hintArrowType * 1477246760 <= 6) {
                            if (633821975 * Client.hintArrowType == 2) {
                                Client.hintArrowSubX = 1419107008;
                                Client.hintArrowSubY = 1250546649;
                            }
                            if (3 == Client.hintArrowType * 804085430) {
                                Client.hintArrowSubX = 0;
                                Client.hintArrowSubY = 111743973;
                            }
                            if (Client.hintArrowType * 633821975 == 4) {
                                Client.hintArrowSubX = 2001039958;
                                Client.hintArrowSubY = -165586837;
                            }
                            if (5 == -1193742838 * Client.hintArrowType) {
                                Client.hintArrowSubX = 2045745472;
                                Client.hintArrowSubY = 0;
                            }
                            if (6 == -883753449 * Client.hintArrowType) {
                                Client.hintArrowSubX = 987526942;
                                Client.hintArrowSubY = -170258849;
                            }
                            Client.hintArrowType = 1537939790;
                            Client.hintArrowX = packetBuffer.cl(-2059908072) * -501846925;
                            Client.hintArrowY = packetBuffer.cl(451380097) * -1668879999;
                            Client.hintArrowHeight = Buffer.ra(packetBuffer, (byte)7) * 233713123;
                        }
                        if (10 == Client.hintArrowType * 1461146203) {
                            Client.hintArrowPlayerIndex = packetBuffer.cl(-822474465) * -1644726207;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2610 == packetWriter.field1133) {
                        final int df3 = packetBuffer.df(-2146742748);
                        final int da5 = packetBuffer.da(1869296766);
                        final int vl3 = Buffer.vl(packetBuffer, 363073604);
                        final InterfaceParent interfaceParent5 = (InterfaceParent)Client.interfaceParents.at(vl3);
                        if (null != interfaceParent5) {
                            class357.closeInterface(interfaceParent5, da5 != -1823214397 * interfaceParent5.group, -1973779758);
                        }
                        AttackOption.ifOpenSub(vl3, da5, df3, -1618920051);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2611 == packetWriter.field1133) {
                        final int cx15 = packetBuffer.cx(-1388067193);
                        int cl28 = packetBuffer.cl(272367286);
                        if (cx15 < 1415643764) {
                            cl28 -= 157005061;
                        }
                        Widget vmethod3400;
                        if (cx15 >= 0) {
                            vmethod3400 = class165.vmethod3380(cx15, (byte)5);
                        }
                        else {
                            vmethod3400 = null;
                        }
                        if (vmethod3400 != null) {
                            for (int n82 = 0; n82 < vmethod3400.itemIds.length; ++n82) {
                                vmethod3400.itemIds[n82] = 0;
                                vmethod3400.field3007[n82] = 0;
                            }
                        }
                        WorldMapRegion.initWorldMapData0(cl28, -28927295);
                        for (int cl29 = packetBuffer.cl(495925454), n83 = 0; n83 < cl29; ++n83) {
                            final int da6 = packetBuffer.da(952737082);
                            int n84 = packetBuffer.dq(-2070899692);
                            if (n84 == 255) {
                                n84 = Buffer.vl(packetBuffer, 363073604);
                            }
                            if (null != vmethod3400 && n83 < vmethod3400.itemIds.length) {
                                vmethod3400.itemIds[n83] = da6;
                                vmethod3400.field3007[n83] = n84;
                            }
                            class373.itemContainerSetItem(cl28, n83, da6 - 1, n84, (byte)47);
                        }
                        if (vmethod3400 != null) {
                            class144.invalidateWidget(vmethod3400, -1420923886);
                        }
                        ClientPacket.process((byte)2);
                        Client.changedItemContainers[(Client.changedItemContainersCount += 2123506001) * -710491461 - 1 & 0xA3C675C7] = (cl28 & 0x1022F9A7);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2674 == packetWriter.field1133) {
                        EnumComposition.processZoneOperation(ZoneOperation.field2563, -302991134);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    class387.RunException_sendStackTrace("" + ((null != packetWriter.field1133) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((null != packetWriter.field1138) ? (2085233456 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (-1670068474 * packetWriter.field1139.length) : -1) + class96.an + packetWriter.serverPacketLength * -1258455531, null, (byte)8);
                    class31.logOut(-338009315);
                }
            }
        }
        catch (IOException ex2) {
            class349.method1918(709882847);
        }
        catch (Exception ex) {
            String str = "" + ((packetWriter.field1133 != null) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((packetWriter.field1138 != null) ? (-105958660 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (1287795301 * packetWriter.field1139.length) : -1) + class96.an + 213088236 * packetWriter.serverPacketLength + class96.an + (MusicPatchNode.localPlayer.cf[0] + -1232093375 * WorldMapData_0.baseX) + class96.an + (GameObject.baseY * 827352769 + MusicPatchNode.localPlayer.dy[0]) + class96.an;
            for (int n85 = 0; n85 < -504019189 * packetWriter.serverPacketLength && n85 < 50; ++n85) {
                str = str + packetBuffer.al[n85] + class96.an;
            }
            class387.RunException_sendStackTrace(str, ex, (byte)8);
            class31.logOut(34930488);
        }
        return true;
    }
    
    static final void act(int max) {
        max = Math.max(Math.min(max, 783200540), 0);
        max = 100 - max;
        ScriptFrame.method341(0.5f + max / 200.0f);
    }
    
    public static void fa(final int n) {
        final boolean resized = ScriptFrame.client.isResized();
        if (Client.wv != resized) {
            final ResizeableChanged resizeableChanged = new ResizeableChanged();
            resizeableChanged.setResized(resized);
            ScriptFrame.client.getCallbacks().post((Object)resizeableChanged);
            Client.wv = resized;
        }
    }
    
    @Override
    protected final void fa() {
    }
    
    static final String za(final int i) {
        String str = Integer.toString(i);
        for (int j = str.length() - 3; j > 0; j -= 3) {
            str = str.substring(0, j) + class96.an + str.substring(j);
        }
        if (str.length() > 9) {
            return " " + class383.method2081(690907311, 116076353) + str.substring(0, str.length() - 8) + Strings.gb + " " + class96.ac + str + class96.au + class96.al;
        }
        if (str.length() > 6) {
            return " " + class383.method2081(16777215, -191940856) + str.substring(0, str.length() - 4) + Strings.gn + " " + class96.ac + str + class96.au + class96.al;
        }
        return " " + class383.method2081(16776960, -1243867544) + str + class96.al;
    }
    
    public static void za(final Widget[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        for (final Widget widget : array) {
            if (widget != null && widget.ev() == n) {
                if (!widget.isSelfHidden()) {
                    final int n9 = n6 + widget.getRelativeX();
                    final int n10 = n7 + widget.getRelativeY();
                    if (widget.getType() == 3 && n9 == ScriptFrame.client.getViewportXOffset() && n10 == ScriptFrame.client.getViewportYOffset() && widget.getWidth() == ScriptFrame.client.getViewportWidth() && widget.getHeight() == ScriptFrame.client.getViewportHeight() && widget.getOpacity() > 0 && widget.isFilled() && widget.zq().od() == 0 && ScriptFrame.client.isGpu()) {
                        final int textColor = widget.getTextColor();
                        final int n11 = widget.getOpacity() & 0xFF;
                        final int n12 = 256 - n11;
                        final int uh = Client.uh;
                        Client.uh = (n12 + ((uh >>> 24) * (255 - n12) * 32897 >>> 23) << 24 | (n12 * (textColor & 0xFF00FF) >> 8 & 0xFF00FF) + (n12 * (textColor & 0xFF00) >> 8 & 0xFF00) + (((uh & 0xFF00FF) * n11 >> 8 & 0xFF00FF) + (n11 * (uh & 0xFF00) >> 8 & 0xFF00)));
                        widget.vx(true);
                        Client.yj.add(widget);
                    }
                }
            }
        }
    }
    
    public static SceneTileModel za(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10, final int n11, final int n12, final int n13, final int n14, final int n15, final int n16, final int n17, final int n18, final int n19) {
        return new SceneTileModel(n, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19);
    }
    
    static final void sk() {
        final int n = -1350520944 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (player != null) {
                ReflectionCheck.updateActorSequence(player, 1, (byte)(-124));
            }
        }
    }
    
    static final void sv(final Actor actor) {
        actor.isWalking = false;
        if (-1 != actor.npcCycle * -1302441815) {
            final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(-1302441815 * actor.npcCycle, (byte)75);
            if (spotAnimationDefinition_get != null) {
                if (!spotAnimationDefinition_get.isCachedModelIdSet(-2130767871) && null != spotAnimationDefinition_get.frameIds) {
                    actor.field975 -= 105665867;
                    if (424813829 * actor.crawlBackSequence < spotAnimationDefinition_get.frameIds.length && actor.field975 * -767724643 > spotAnimationDefinition_get.frameLengths[actor.crawlBackSequence * 424813829]) {
                        actor.field975 = -105665867;
                        actor.crawlBackSequence += 1348853709;
                        ZoneOperation.method1599(spotAnimationDefinition_get, actor.crawlBackSequence * 424813829, 1144428983 * actor.walkBackSequence, actor.field1005 * -411750205, -1566363123);
                    }
                    if (actor.crawlBackSequence * 424813829 >= spotAnimationDefinition_get.frameIds.length) {
                        if (1363943497 * spotAnimationDefinition_get.frameCount > 0) {
                            actor.crawlBackSequence -= spotAnimationDefinition_get.frameCount * -152931979;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange += 1404488991;
                            }
                            if (424813829 * actor.crawlBackSequence < 0 || 424813829 * actor.crawlBackSequence >= spotAnimationDefinition_get.frameIds.length || (spotAnimationDefinition_get.field1823 && -463442209 * actor.combatLevelChange >= spotAnimationDefinition_get.iterations * 1786137655)) {
                                actor.field975 = 0;
                                actor.crawlBackSequence = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        ZoneOperation.method1599(spotAnimationDefinition_get, 424813829 * actor.crawlBackSequence, actor.walkBackSequence * 1144428983, actor.field1005 * -411750205, -1566363123);
                    }
                }
                else if (spotAnimationDefinition_get.isCachedModelIdSet(1876312663)) {
                    actor.crawlBackSequence += 1348853709;
                    final int method1128 = spotAnimationDefinition_get.method1128(954573237);
                    if (424813829 * actor.crawlBackSequence < method1128) {
                        KeyHandler.method108(spotAnimationDefinition_get, actor.crawlBackSequence * 424813829, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -267174679);
                    }
                    else {
                        if (spotAnimationDefinition_get.frameCount * 1363943497 > 0) {
                            actor.crawlBackSequence -= -152931979 * spotAnimationDefinition_get.frameCount;
                            if (spotAnimationDefinition_get.field1823) {
                                actor.combatLevelChange += 1404488991;
                            }
                            if (424813829 * actor.crawlBackSequence < 0 || 424813829 * actor.crawlBackSequence >= method1128 || (spotAnimationDefinition_get.field1823 && -463442209 * actor.combatLevelChange >= 1786137655 * spotAnimationDefinition_get.iterations)) {
                                actor.crawlBackSequence = 0;
                                actor.field975 = 0;
                                actor.combatLevelChange = 0;
                            }
                        }
                        else {
                            actor.field975 = 0;
                            actor.crawlBackSequence = 0;
                        }
                        KeyHandler.method108(spotAnimationDefinition_get, 424813829 * actor.crawlBackSequence, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -948179837);
                    }
                }
                else {
                    actor.npcCycle = -327373721;
                }
            }
            else {
                actor.npcCycle = -327373721;
            }
        }
        final IterableNodeHashTableIterator iterableNodeHashTableIterator = new IterableNodeHashTableIterator(Actor.qq(actor, (byte)10));
        for (Graphic graphic = (Graphic)iterableNodeHashTableIterator.method2390(); graphic != null; graphic = (Graphic)iterableNodeHashTableIterator.next()) {
            if (-1171575623 * graphic.field4170 != -1) {
                if (-1886224337 * Client.cycle >= -1415749665 * graphic.field4171) {
                    final int n = ItemContainer.SpotAnimationDefinition_get(graphic.field4170 * -1171575623, 652039275).sequence * 374130911;
                    if (n == -1) {
                        graphic.hw();
                        actor.runRightSequence += 1822461181;
                    }
                    else {
                        graphic.field4169 = Math.max(971664459 * graphic.field4169, 0) * -793313949;
                        final SequenceDefinition spotAnimationDefinition_get2 = ItemContainer.SpotAnimationDefinition_get(n, (byte)89);
                        if (null != spotAnimationDefinition_get2.frameIds && !spotAnimationDefinition_get2.isCachedModelIdSet(-701383737)) {
                            final Graphic graphic2 = graphic;
                            graphic2.field4168 += 1417617079;
                            if (971664459 * graphic.field4169 < spotAnimationDefinition_get2.frameIds.length && graphic.field4168 * 77733639 > spotAnimationDefinition_get2.frameLengths[graphic.field4169 * 971664459]) {
                                graphic.field4168 = 1417617079;
                                final Graphic graphic3 = graphic;
                                graphic3.field4169 -= 793313949;
                                ZoneOperation.method1599(spotAnimationDefinition_get2, graphic.field4169 * 971664459, 1144428983 * actor.walkBackSequence, actor.field1005 * -411750205, -1566363123);
                            }
                            if (971664459 * graphic.field4169 >= spotAnimationDefinition_get2.frameIds.length) {
                                graphic.hw();
                                actor.runRightSequence += 1822461181;
                            }
                        }
                        else if (spotAnimationDefinition_get2.isCachedModelIdSet(513105913)) {
                            final Graphic graphic4 = graphic;
                            graphic4.field4169 -= 793313949;
                            if (graphic.field4169 * 971664459 < spotAnimationDefinition_get2.method1128(-1275254238)) {
                                KeyHandler.method108(spotAnimationDefinition_get2, graphic.field4169 * 971664459, actor.walkBackSequence * 1144428983, actor.field1005 * -411750205, -581434570);
                            }
                            else {
                                graphic.hw();
                                actor.runRightSequence += 1822461181;
                            }
                        }
                        else {
                            graphic.hw();
                            actor.runRightSequence += 1822461181;
                        }
                    }
                }
            }
        }
        if (actor.overheadTextCyclesRemaining * -1372355773 != -1 && 1253892101 * actor.playerCycle <= 1 && ItemContainer.SpotAnimationDefinition_get(actor.overheadTextCyclesRemaining * -1372355773, (byte)8).precedenceAnimating * 1069382699 == 1 && -1181739279 * actor.field1003 > 0 && -435598119 * actor.exactMoveArrive1Cycle <= Client.cycle * -1886224337 && -1274841313 * actor.movementFrame < Client.cycle * -1886224337) {
            actor.playerCycle = -401806131;
            return;
        }
        if (-1372355773 * actor.overheadTextCyclesRemaining != -1 && 1253892101 * actor.playerCycle == 0) {
            final SequenceDefinition spotAnimationDefinition_get3 = ItemContainer.SpotAnimationDefinition_get(-1372355773 * actor.overheadTextCyclesRemaining, (byte)114);
            if (null != spotAnimationDefinition_get3) {
                if (!spotAnimationDefinition_get3.isCachedModelIdSet(1873467496) && spotAnimationDefinition_get3.frameIds != null) {
                    actor.pathLength += 672779449;
                    if (actor.currentSequenceFrameIndex * -41215169 < spotAnimationDefinition_get3.frameIds.length && actor.pathLength * 1356757385 > spotAnimationDefinition_get3.frameLengths[-41215169 * actor.currentSequenceFrameIndex]) {
                        actor.pathLength = 672779449;
                        actor.currentSequenceFrameIndex -= 63286081;
                        ZoneOperation.method1599(spotAnimationDefinition_get3, -41215169 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, -1566363123);
                    }
                    if (actor.currentSequenceFrameIndex * -41215169 >= spotAnimationDefinition_get3.frameIds.length) {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * -823260553;
                        actor.y -= 823959909;
                        if (-92383341 * actor.y >= 1786137655 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                        else if (actor.currentSequenceFrameIndex * -41215169 >= 0 && -41215169 * actor.currentSequenceFrameIndex < spotAnimationDefinition_get3.frameIds.length) {
                            ZoneOperation.method1599(spotAnimationDefinition_get3, actor.currentSequenceFrameIndex * -41215169, 1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, -1566363123);
                        }
                        else {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                    }
                    actor.isWalking = spotAnimationDefinition_get3.stretches;
                }
                else if (spotAnimationDefinition_get3.isCachedModelIdSet(-1291700080)) {
                    actor.currentSequenceFrameIndex -= 63286081;
                    final int method1129 = spotAnimationDefinition_get3.method1128(1237805328);
                    if (actor.currentSequenceFrameIndex * -41215169 < method1129) {
                        KeyHandler.method108(spotAnimationDefinition_get3, -41215169 * actor.currentSequenceFrameIndex, 1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, 1052436298);
                    }
                    else {
                        actor.currentSequenceFrameIndex -= spotAnimationDefinition_get3.frameCount * -823260553;
                        actor.y -= 823959909;
                        if (actor.y * -92383341 >= 1786137655 * spotAnimationDefinition_get3.iterations) {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                        else if (-41215169 * actor.currentSequenceFrameIndex < 0 || actor.currentSequenceFrameIndex * -41215169 >= method1129) {
                            actor.overheadTextCyclesRemaining = 1690721941;
                        }
                        else {
                            KeyHandler.method108(spotAnimationDefinition_get3, -41215169 * actor.currentSequenceFrameIndex, actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -14835723);
                        }
                    }
                }
                else {
                    actor.overheadTextCyclesRemaining = 1690721941;
                }
            }
            else {
                actor.overheadTextCyclesRemaining = 1690721941;
            }
        }
        if (actor.playerCycle * 1253892101 > 0) {
            actor.playerCycle += 401806131;
        }
    }
    
    public void sv(final boolean clearLoginScreen) {
        class12.clearLoginScreen = clearLoginScreen;
    }
    
    public int sv() {
        return Rasterizer2D.Rasterizer2D_xClipStart;
    }
    
    public boolean isInInstancedRegion() {
        return Client.isInInstance;
    }
    
    void tf() {
        final int n = -1687260435 * Client.aj;
        final int n2 = class262.canvasHeight * 1945246967;
        if (-237671171 * this.av < n) {
            final int n3 = this.av * -1714375761;
        }
        if (this.ar * 1277164374 < n2) {
            final int n4 = this.ar * -342119920;
        }
        if (class20.clientPreferences != null) {
            try {
                class26.method113(ScriptFrame.client, "resize", new Object[] { GrandExchangeOfferNameComparator.getWindowedMode(983221346) }, -574201687);
            }
            catch (Throwable t) {}
        }
    }
    
    static WorldMap ot() {
        return class126.worldMap;
    }
    
    public SpritePixels[] ea() {
        return class173.crossSprites;
    }
    
    static final boolean xc() {
        return Client.isMenuOpen;
    }
    
    public boolean isInterpolatePlayerAnimations() {
        return Client.jj;
    }
    
    public void setInterpolatePlayerAnimations(final boolean jj) {
        Client.jj = jj;
    }
    
    public void fe(final int scene_cameraXTile) {
        Scene.Scene_cameraXTile = scene_cameraXTile;
    }
    
    static void tx() {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2480, Client.packetWriter.isaacCipher, (short)(-30227));
        packetBufferNode.packetBuffer.bf(GrandExchangeOfferNameComparator.getWindowedMode(1122052109), (byte)78);
        packetBufferNode.packetBuffer.cq(Client.aj * 256030542, (byte)17);
        packetBufferNode.packetBuffer.cq(class262.canvasHeight * -706986033, (byte)(-14));
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    public int getWeight() {
        return Client.weight * -1940722149;
    }
    
    void method371(final String s, final int n) {
        try {
            final URL url = new URL(ViewportMouse.field2213 + "public/v1/games/YCfdbvr2pM1zUYMxJRexZY/play");
            final class394 class394 = new class394();
            class394.method2108(s, -807271819);
            final class9 field24 = class9.field24;
            final OtlTokenRequester field25 = this.field399;
            if (null == field25) {
                this.field390 = class14.ni(this.field529, new class10(url, field24, class394, this.field401), (byte)1);
                return;
            }
            if (n == -19427563) {
                return;
            }
            this.field400 = field25.request(field24.method30((byte)(-89)), url, class394.method2105(1466216773), "");
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gz(" + ')');
        }
    }
    
    boolean method369(final byte b) {
        try {
            if (null != SpriteMask.field2808) {
                if (b <= 1) {
                    throw new IllegalStateException();
                }
                if (!SpriteMask.field2808.trim().isEmpty()) {
                    if (b <= 1) {
                        throw new IllegalStateException();
                    }
                    if (null != class121.field1185) {
                        if (b <= 1) {
                            throw new IllegalStateException();
                        }
                        if (!class121.field1185.trim().isEmpty()) {
                            if (b <= 1) {
                                throw new IllegalStateException();
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gv(" + ')');
        }
    }
    
    public static void method369(final int n) {
        final NPC[] pb = ScriptFrame.client.pb();
        if (n < 0 || n >= pb.length) {
            return;
        }
        final NPC npc = pb[n];
        if (npc != null) {
            npc.rq(n);
            ScriptFrame.client.getCallbacks().postDeferred((Object)new NpcSpawned((net.runelite.api.NPC)npc));
        }
    }
    
    static void ty(final Player player, final int n, final int n2) {
        if (-1372355773 * player.cs == n && n != -1) {
            final int n3 = ItemContainer.SpotAnimationDefinition_get(n, (byte)113).replyMode * 789159225;
            if (n3 != 0) {
                player.dw = 0;
                player.dn = 0;
                player.bd = n2 * -401806131;
                player.bo = 0;
            }
            if (2 == n3) {
                player.bo = 0;
            }
        }
        else if (-1 == n || player.cs * -1372355773 == -1 || ItemContainer.SpotAnimationDefinition_get(n, (byte)92).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(-1372355773 * player.cs, (byte)101).forcedPriority * -1932560049) {
            player.cs = n * -1690721941;
            player.dw = 0;
            player.dn = 0;
            player.bd = n2 * -401806131;
            player.bo = 0;
            player.dk = player.cb * -1718989897;
        }
    }
    
    static final int sy(final int n) {
        if (Math.abs(n - -1010818347 * class125.cameraYaw) > 1024) {
            return ((n < -1010818347 * class125.cameraYaw) ? 1 : -1) * 2048 + n;
        }
        return n;
    }
    
    public void kf(final int scene_drawnCount) {
        Scene.Scene_drawnCount = scene_drawnCount;
    }
    
    public int kf() {
        return MouseHandler.MouseHandler_yVolatile * -386183297;
    }
    
    public boolean kf() {
        return Client.isLowDetail;
    }
    
    boolean method394(final int n) {
        try {
            if (null != ModeWhere.field3571) {
                if (n == 1574717316) {
                    throw new IllegalStateException();
                }
                if (!ModeWhere.field3571.trim().isEmpty()) {
                    if (n == 1574717316) {
                        throw new IllegalStateException();
                    }
                    if (TileItem.field1079 != null) {
                        if (n == 1574717316) {
                            throw new IllegalStateException();
                        }
                        if (!TileItem.field1079.trim().isEmpty()) {
                            if (n == 1574717316) {
                                throw new IllegalStateException();
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gn(" + ')');
        }
    }
    
    public CollisionMap[] method394() {
        return Client.collisionMaps;
    }
    
    public SpritePixels[] method394(final IndexDataBase indexDataBase, final int n, final int n2) {
        final byte[] loadData = ((AbstractArchive)indexDataBase).loadData(n, n2);
        if (loadData == null) {
            return null;
        }
        this.np(loadData);
        final int mg = this.mg();
        final int xl = this.xl();
        final int kj = this.kj();
        final int[] tb = this.tb();
        final int[] un = this.un();
        final int[] hd = this.hd();
        final int[] oa = this.oa();
        final byte[][] bv = this.bv();
        final int[] oq = this.oq();
        final SpritePixels[] array = new SpritePixels[mg];
        for (int i = 0; i < mg; ++i) {
            final int n3 = hd[i];
            final int n4 = oa[i];
            final byte[] array2 = bv[i];
            final int[] array3 = new int[n3 * n4];
            final SpritePixels cs = this.cs(array3, n3, n4);
            cs.setMaxHeight(kj);
            cs.setMaxWidth(xl);
            cs.setOffsetX(tb[i]);
            cs.setOffsetY(un[i]);
            for (int j = 0; j < n3 * n4; ++j) {
                array3[j] = oq[array2[j] & 0xFF];
            }
            array[i] = cs;
        }
        this.xv(null);
        this.gf(null);
        this.ef(null);
        this.dx(null);
        this.ol((int[])null);
        this.ia(null);
        return array;
    }
    
    static final void vd() {
        Language.method1946(false, -955445427);
        Client.field427 = 0;
        int n = 1;
        for (int i = 0; i < class4.regionLandArchives.length; ++i) {
            if (FontName.regionMapArchiveIds[i] != -1 && null == class4.regionLandArchives[i]) {
                class4.regionLandArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bh(FontName.regionMapArchiveIds[i], 0, (byte)(-77));
                if (null == class4.regionLandArchives[i]) {
                    n = 0;
                    Client.field427 += 533870195;
                }
            }
            if (-1 != Archive.regionLandArchiveIds[i] && ObjectSound.regionMapArchives[i] == null) {
                ObjectSound.regionMapArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bw(Archive.regionLandArchiveIds[i], 0, GameObject.xteaKeys[i], 429840983);
                if (null == ObjectSound.regionMapArchives[i]) {
                    n = 0;
                    Client.field427 += 1047178289;
                }
            }
        }
        if (n == 0) {
            Client.field489 = -1672521981;
            return;
        }
        Client.field425 = 0;
        boolean b = true;
        for (int j = 0; j < class4.regionLandArchives.length; ++j) {
            final byte[] array = ObjectSound.regionMapArchives[j];
            if (null != array) {
                int n2 = -368845744 * (WorldMapAreaData.regions[j] >> 8) - -1232093375 * WorldMapData_0.baseX;
                int n3 = (WorldMapAreaData.regions[j] & 0xFF) * -1436036596 - GameObject.baseY * 827352769;
                if (Client.isInInstance) {
                    n2 = 10;
                    n3 = 10;
                }
                b &= KitDefinition.getKitDefinitionModels(array, n2, n3, 1283823109);
            }
        }
        if (!b) {
            Client.field489 = -1399789041;
            return;
        }
        if (Client.field489 * -1795120256 != 0) {
            WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + 100 + "%" + class96.au, true, -812535641);
        }
        class323.playPcmPlayers(-746912259);
        class31.scene.clear();
        for (int k = 0; k < 4; ++k) {
            Client.collisionMaps[k].clear(2146596925);
        }
        for (int l = 0; l < 4; ++l) {
            for (int n4 = 0; n4 < 869159695; ++n4) {
                for (int n5 = 0; n5 < 104; ++n5) {
                    Tiles.Tiles_renderFlags[l][n4][n5] = 0;
                }
            }
        }
        class323.playPcmPlayers(-1230057042);
        class137.vmethod3254(-2054687213);
        final int length = class4.regionLandArchives.length;
        StructComposition.findEnumerated((byte)1);
        Language.method1946(true, -104007514);
        if (!Client.isInInstance) {
            for (int n6 = 0; n6 < length; ++n6) {
                final int n7 = (WorldMapAreaData.regions[n6] >> 8) * 64 - 1185694878 * WorldMapData_0.baseX;
                final int n8 = (WorldMapAreaData.regions[n6] & 0xFF) * 64 - GameObject.baseY * -582334475;
                final byte[] array2 = class4.regionLandArchives[n6];
                if (array2 != null) {
                    class323.playPcmPlayers(-308346317);
                    WallDecoration.method1385(array2, n7, n8, class28.timeOfPreviousKeyPress * 856658440 - 1248870872, class425.field3798 * 370541272 + 1638227842, Client.collisionMaps, 960745047);
                }
            }
            for (int n9 = 0; n9 < length; ++n9) {
                final int n10 = (WorldMapAreaData.regions[n9] >> 8) * 64 - WorldMapData_0.baseX * -1232093375;
                final int n11 = (WorldMapAreaData.regions[n9] & 0xA3AF25E7) * 64 - 827352769 * GameObject.baseY;
                if (null == class4.regionLandArchives[n9] && class425.field3798 * 1148315520 < 800) {
                    class323.playPcmPlayers(-202510046);
                    class122.method727(n10, n11, 510149350, -115613243, -260584194);
                }
            }
            Language.method1946(true, 55645587);
            for (int n12 = 0; n12 < length; ++n12) {
                final byte[] array3 = ObjectSound.regionMapArchives[n12];
                if (null != array3) {
                    final int n13 = 64 * (WorldMapAreaData.regions[n12] >> 8) - WorldMapData_0.baseX * -1232093375;
                    final int n14 = 64 * (WorldMapAreaData.regions[n12] & 0x842503E) - GameObject.baseY * 827352769;
                    class323.playPcmPlayers(-2054517618);
                    class147.method837(array3, n13, n14, class31.scene, Client.collisionMaps, 2075619422);
                }
            }
        }
        if (Client.isInInstance) {
            for (int n15 = 0; n15 < 4; ++n15) {
                class323.playPcmPlayers(-613274024);
                for (int n16 = 0; n16 < 13; ++n16) {
                    for (int n17 = 0; n17 < 13; ++n17) {
                        int n18 = 0;
                        final int n19 = Client.instanceChunkTemplates[n15][n16][n17];
                        if (-1 != n19) {
                            final int n20 = n19 >> 24 & 0x3;
                            final int n21 = n19 >> 1 & 0x3;
                            final int n22 = n19 >> 14 & 0xC7A31519;
                            final int n23 = n19 >> 3 & 0x7FF;
                            final int n24 = (n22 / 8 << 8) + n23 / 8;
                            for (int n25 = 0; n25 < WorldMapAreaData.regions.length; ++n25) {
                                if (n24 == WorldMapAreaData.regions[n25] && null != class4.regionLandArchives[n25]) {
                                    class19.method78(class4.regionLandArchives[n25], n15, n16 * 8, n17 * 8, n20, 8 * (n22 & 0x7), 8 * (n23 & 0x7), n21, 8 * (n22 - n16), 8 * (n23 - n17), Client.collisionMaps, 113463514);
                                    n18 = 1;
                                    break;
                                }
                            }
                        }
                        if (n18 == 0) {
                            TextureProvider.isLowDetail(n15, 8 * n16, 8 * n17, 1296372648);
                        }
                    }
                }
            }
            for (int n26 = 0; n26 < 13; ++n26) {
                for (int n27 = 0; n27 < 13; ++n27) {
                    if (-1 == Client.instanceChunkTemplates[0][n26][n27]) {
                        class122.method727(8 * n26, 8 * n27, 8, 8, 1219406652);
                    }
                }
            }
            Language.method1946(true, -1509765266);
            for (int n28 = 0; n28 < 4; ++n28) {
                class323.playPcmPlayers(-1593440317);
                for (int n29 = 0; n29 < 13; ++n29) {
                    for (int n30 = 0; n30 < 13; ++n30) {
                        final int n31 = Client.instanceChunkTemplates[n28][n29][n30];
                        if (-1 != n31) {
                            final int n32 = n31 >> 24 & 0x3;
                            final int n33 = n31 >> 1 & 0x3;
                            final int n34 = n31 >> 14 & 0xE1680FCE;
                            final int n35 = n31 >> 3 & 0xB3A351DB;
                            final int n36 = (n34 / 8 << 8) + n35 / 8;
                            for (int n37 = 0; n37 < WorldMapAreaData.regions.length; ++n37) {
                                if (WorldMapAreaData.regions[n37] == n36 && null != ObjectSound.regionMapArchives[n37]) {
                                    Tiles.method473(ObjectSound.regionMapArchives[n37], n28, 8 * n29, n30 * 8, n32, 8 * (n34 & 0x7), (n35 & 0x7) * 8, n33, class31.scene, Client.collisionMaps);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        Language.method1946(true, 79923842);
        class323.playPcmPlayers(-1297485190);
        class10.method39(class31.scene, Client.collisionMaps, 1670427112);
        Language.method1946(true, -1044466052);
        int n38 = Tiles.Tiles_minPlane * -42304060;
        if (n38 > -1727408401 * GameEngine.Client_plane) {
            n38 = 1236074429 * GameEngine.Client_plane;
        }
        if (n38 < GameEngine.Client_plane * 480970618 - 1) {
            final int n39 = GameEngine.Client_plane * -1727408401 - 1;
        }
        if (Client.isLowDetail) {
            class31.scene.init(1401144457 * Tiles.Tiles_minPlane);
        }
        else {
            class31.scene.init(0);
        }
        for (int n40 = 0; n40 < -758522166; ++n40) {
            for (int n41 = 0; n41 < -1010538713; ++n41) {
                class121.updateItemPile(n40, n41, 2050913204);
            }
        }
        class323.playPcmPlayers(-1475286918);
        KeyHandler.method107((byte)7);
        ObjectComposition.ObjectDefinition_cachedModelData.clear();
        if (ScriptFrame.client.bf(1663110836)) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2500, Client.packetWriter.isaacCipher, (short)(-7010));
            packetBufferNode.packetBuffer.ba(-1372548202, -2081835031);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (!Client.isInInstance) {
            final int n42 = (1717695041 * class28.timeOfPreviousKeyPress - 6) / 8;
            final int n43 = (6 + class28.timeOfPreviousKeyPress * 1717695041) / 8;
            final int n44 = (class425.field3798 * 765854273 - 6) / 8;
            final int n45 = (class425.field3798 * 1773977049 + 6) / 8;
            for (int n46 = n42 - 1; n46 <= n43 + 1; ++n46) {
                for (int n47 = n44 - 1; n47 <= 1 + n45; ++n47) {
                    if (n46 < n42 || n46 > n43 || n47 < n44 || n47 > n45) {
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("m" + n46 + "_" + n47, 373655859);
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("l" + n46 + "_" + n47, -290105874);
                    }
                }
            }
        }
        class138.updateGameState(30, 1629418245);
        class323.playPcmPlayers(-1614715670);
        Renderable.getModel(1039348761);
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2538, Client.packetWriter.isaacCipher, (short)(-25769)), 414135591);
        NPC.method611(599275396);
    }
    
    public int ai() {
        return class28.timeOfPreviousKeyPress * 1717695041;
    }
    
    public ClientPreferences fi() {
        return class20.clientPreferences;
    }
    
    @Override
    public final void fi() {
        if (!this.ae(468423129)) {
            return;
        }
        for (int i = 0; i <= 28; ++i) {
            final String parameter = this.getParameter(Integer.toString(i));
            if (null != parameter) {
                switch (i) {
                    case 7: {
                        AABB.field2070 = class146.vmethod3254(Integer.parseInt(parameter), 620445208);
                        break;
                    }
                    case 17: {
                        GrandExchangeOffer.field3530 = parameter;
                        break;
                    }
                    case 21: {
                        Client.param21 = Integer.parseInt(parameter) * -1581503853;
                        break;
                    }
                    case 6: {
                        ClanSettings.clientLanguage = Language.method1943(Integer.parseInt(parameter), (byte)(-1));
                        break;
                    }
                    case 14: {
                        TriBool.field3738 = Integer.parseInt(parameter) * -447901147;
                        break;
                    }
                    case 4: {
                        if (Client.clientType * -749752677 == -1) {
                            Client.clientType = Integer.parseInt(parameter) * -240023661;
                            break;
                        }
                        break;
                    }
                    case 9: {
                        class108.param9 = parameter;
                        break;
                    }
                    case 12: {
                        Client.worldId = Integer.parseInt(parameter) * -1381008117;
                        break;
                    }
                    case 15: {
                        Client.gameBuild = Integer.parseInt(parameter) * -261185633;
                        break;
                    }
                    case 11: {
                        ViewportMouse.field2213 = parameter;
                        break;
                    }
                    case 3: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            Client.isMembersWorld = true;
                            break;
                        }
                        Client.isMembersWorld = false;
                        break;
                    }
                    case 10: {
                        Client.field358 = (StudioGame)StructComposition.findEnumerated(TaskHandler.getClipMidX(1735128305), Integer.parseInt(parameter), (short)173);
                        if (Client.field358 == StudioGame.oldscape) {
                            class70.loginType = LoginType.oldscape;
                            break;
                        }
                        class70.loginType = LoginType.field3998;
                        break;
                    }
                    case 8: {
                        if (parameter.equalsIgnoreCase(class96.af)) {
                            break;
                        }
                        break;
                    }
                    case 25: {
                        final int index = parameter.indexOf(".");
                        if (index == -1) {
                            Client.param25 = Integer.parseInt(parameter) * -1712441187;
                            break;
                        }
                        Client.param25 = Integer.parseInt(parameter.substring(0, index)) * -1712441187;
                        Integer.parseInt(parameter.substring(1 + index));
                        break;
                    }
                    case 5: {
                        Client.worldProperties = Integer.parseInt(parameter) * 1294598713;
                        break;
                    }
                }
            }
        }
        Scene.Scene_isLowDetail = false;
        Client.isLowDetail = false;
        UserComparator8.worldHost = this.getCodeBase().getHost();
        final String name = AABB.field2070.name;
        final int n = 0;
        try {
            JagexCache.idxCount = -327637298;
            JagexCache.cacheGamebuild = n * 261077081;
            try {
                ModeWhere.operatingSystemName = System.getProperty("os.name");
            }
            catch (Exception ex2) {
                ModeWhere.operatingSystemName = "Unknown";
            }
            WorldMapSectionType.formattedOperatingSystemName = ModeWhere.operatingSystemName.toLowerCase();
            try {
                HorizontalAlignment.userHomeDirectory = System.getProperty("user.home");
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex3) {}
            try {
                if (WorldMapSectionType.formattedOperatingSystemName.startsWith("win")) {
                    if (HorizontalAlignment.userHomeDirectory == null) {
                        HorizontalAlignment.userHomeDirectory = ni("USERPROFILE");
                    }
                }
                else if (HorizontalAlignment.userHomeDirectory == null) {
                    HorizontalAlignment.userHomeDirectory = ni("HOME");
                }
                if (null != HorizontalAlignment.userHomeDirectory) {
                    HorizontalAlignment.userHomeDirectory += "/";
                }
            }
            catch (Exception ex4) {}
            if (HorizontalAlignment.userHomeDirectory == null) {
                HorizontalAlignment.userHomeDirectory = "~/";
            }
            class130.cacheParentPaths = new String[] { "c:/rscache/", "/rscache/", "c:/windows/", "c:/winnt/", "c:/", HorizontalAlignment.userHomeDirectory, "/tmp/", "" };
            class96.cacheSubPaths = new String[] { ".jagex_cache_" + -1325133847 * JagexCache.cacheGamebuild, ".file_store_" + -1325133847 * JagexCache.cacheGamebuild };
            int j = 0;
        Label_0764:
            while (j < 4) {
                class335.cacheDir = ClanSettings.method867("oldschool", name, j, -2006186602);
                if (!class335.cacheDir.exists()) {
                    class335.cacheDir.mkdirs();
                }
                final File[] listFiles = class335.cacheDir.listFiles();
                if (null != listFiles) {
                    final File[] array = listFiles;
                    for (int k = 0; k < array.length; ++k) {
                        final File file = array[k];
                        boolean b;
                        try {
                            final RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
                            final int read = randomAccessFile.read();
                            randomAccessFile.seek(0L);
                            randomAccessFile.write(read);
                            randomAccessFile.seek(0L);
                            randomAccessFile.close();
                            b = true;
                        }
                        catch (Exception ex5) {
                            b = false;
                        }
                        if (!b) {
                            ++j;
                            continue Label_0764;
                        }
                    }
                    break;
                }
                break;
            }
            class513.FileSystem_cacheDir = class335.cacheDir;
            if (!class513.FileSystem_cacheDir.exists()) {
                throw new RuntimeException("");
            }
            FileSystem.FileSystem_hasPermissions = true;
            Tiles.method475((byte)1);
            JagexCache.JagexCache_dat2File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.dat2", -1419476810), "rw", 1048576000L), 5200, 0);
            JagexCache.JagexCache_idx255File = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx255", -1620065241), "rw", 1048576L), 6000, 0);
            class370.JagexCache_idxFiles = new BufferedFile[JagexCache.idxCount * 1064766397];
            for (int l = 0; l < 1064766397 * JagexCache.idxCount; ++l) {
                class370.JagexCache_idxFiles[l] = new BufferedFile(new AccessFile(class138.vmethod3254("main_file_cache.idx" + l, -1966279206), "rw", 1048576L), 6000, 0);
            }
        }
        catch (Exception ex) {
            class387.RunException_sendStackTrace(null, ex, (byte)8);
        }
        ScriptFrame.client = this;
        RunException.field4178 = Client.clientType * 1056936977;
        ModeWhere.field3571 = ni("JX_ACCESS_TOKEN");
        TileItem.field1079 = ni("JX_REFRESH_TOKEN");
        SpriteMask.field2808 = ni("JX_SESSION_ID");
        class121.field1185 = ni("JX_CHARACTER_ID");
        Login.field749 = class31.method133(ni("JX_DISPLAY_NAME"), -337411232);
        if (Boolean.parseBoolean(System.getProperty("jagex.disableBouncyCastle"))) {
            this.field401 = true;
        }
        if (-1 == 838232771 * Client.field363) {
            if (ay(this, 1928819991) || this.method369((byte)39)) {
                Client.field363 = 2078698903;
            }
            else {
                Client.field363 = 0;
            }
        }
        this.ak(765, 503, 213, 1, (byte)(-89));
    }
    
    public Player[] ic() {
        return Client.players;
    }
    
    public int[] jc() {
        return Players.Players_indices;
    }
    
    public int jc() {
        return Clips.selectedSpellWidget * 96656415;
    }
    
    public void setPassword(final String login_password) {
        Login.Login_password = login_password;
    }
    
    public void dx(final int[] spriteBuffer_spriteHeights) {
        class138.SpriteBuffer_spriteHeights = spriteBuffer_spriteHeights;
    }
    
    public void dx(final int n) {
        Client.changedSkillsCount = n * 1059665337;
    }
    
    public NodeDeque dy() {
        return Scene.Scene_tilesDeque;
    }
    
    public SpritePixels[] gg() {
        return class477.mapDotSprites;
    }
    
    public static boolean lp() {
        final BeforeMenuRender beforeMenuRender = new BeforeMenuRender();
        ScriptFrame.client.getCallbacks().post((Object)beforeMenuRender);
        if (beforeMenuRender.isConsumed()) {
            return true;
        }
        ScriptFrame.client.drawOriginalMenu(255);
        return true;
    }
    
    static final boolean wx(final int n, final int n2, final int n3, final int n4, final int n5) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (n == -1670825199 * pendingSpawn2.plane && n2 == 1839568580 * pendingSpawn2.x && n3 == 24664035 * pendingSpawn2.y && pendingSpawn2.type * -1586499579 == n4) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn != null) {
            pendingSpawn.field931 = n5 * -54417519;
            return true;
        }
        return false;
    }
    
    static void wy(final NPC npc) {
        npc.bt = 1763542591 * npc.definition.size;
        npc.cv = npc.definition.rotation * -1952936367;
        npc.cr = npc.definition.walkSequence * -196154505;
        npc.bf = -526926691 * npc.definition.walkBackSequence;
        npc.dl = -1070890906 * npc.definition.walkLeftSequence;
        npc.dp = npc.definition.walkRightSequence * 2010418861;
        npc.cd = npc.definition.idleSequence * -1511561873;
        npc.bh = npc.definition.turnLeftSequence * 931572434;
        npc.dz = npc.definition.turnRightSequence * -1686059033;
        npc.dr = -1410045475 * npc.definition.runSequence;
        npc.bx = npc.definition.runBackSequence * -2020975041;
        npc.bg = npc.definition.runLeftSequence * -1291979252;
        npc.eo = 354543078 * npc.definition.runRightSequence;
        npc.ba = -2121315781 * npc.definition.crawlSequence;
        npc.bm = npc.definition.crawlBackSequence * -605946035;
        npc.bs = npc.definition.crawlLeftSequence * -76847983;
        npc.bu = npc.definition.crawlRightSequence * -2141324113;
    }
    
    public static ClanRank wy(final int n) {
        switch (n) {
            case -1: {
                return ClanRank.GUEST;
            }
            default: {
                return ClanRank.CLAN_RANK_1;
            }
            case 10: {
                return ClanRank.CLAN_RANK_2;
            }
            case 20: {
                return ClanRank.CLAN_RANK_3;
            }
            case 30: {
                return ClanRank.CLAN_RANK_4;
            }
            case 40: {
                return ClanRank.CLAN_RANK_5;
            }
            case 50: {
                return ClanRank.CLAN_RANK_6;
            }
            case 60: {
                return ClanRank.CLAN_RANK_7;
            }
            case 70: {
                return ClanRank.CLAN_RANK_8;
            }
            case 80: {
                return ClanRank.CLAN_RANK_9;
            }
            case 90: {
                return ClanRank.CLAN_RANK_10;
            }
            case 100: {
                return ClanRank.ADMINISTRATOR;
            }
            case 105: {
                return ClanRank.CLAN_RANK_11;
            }
            case 110: {
                return ClanRank.CLAN_RANK_12;
            }
            case 115: {
                return ClanRank.CLAN_RANK_13;
            }
            case 120: {
                return ClanRank.CLAN_RANK_14;
            }
            case 125: {
                return ClanRank.DEPUTY_OWNER;
            }
            case 126: {
                return ClanRank.OWNER;
            }
            case 127: {
                return ClanRank.JMOD;
            }
        }
    }
    
    public int iv() {
        return Client.currentTrackGroupId * 1976903761;
    }
    
    public static boolean iv(final Client client) {
        if (client == null) {
            client.createWorld();
        }
        return null != ModeWhere.field3571 && !ModeWhere.field3571.trim().isEmpty() && TileItem.field1079 != null && !TileItem.field1079.trim().isEmpty();
    }
    
    public Projectile ve(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10, final int n11) {
        return new Projectile(n, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11);
    }
    
    static final void ve(final boolean isInInstance, final PacketBuffer packetBuffer) {
        if (!(Client.isInInstance = isInInstance)) {
            final int da = packetBuffer.da(748740056);
            final int da2 = packetBuffer.da(495511897);
            final int cl = packetBuffer.cl(110685518);
            GameObject.xteaKeys = new int[cl][4];
            for (int i = 0; i < cl; ++i) {
                for (int j = 0; j < 4; ++j) {
                    GameObject.xteaKeys[i][j] = packetBuffer.cx(-1000780366);
                }
            }
            WorldMapAreaData.regions = new int[cl];
            FontName.regionMapArchiveIds = new int[cl];
            Archive.regionLandArchiveIds = new int[cl];
            class4.regionLandArchives = new byte[cl][];
            ObjectSound.regionMapArchives = new byte[cl][];
            int n = 0;
            for (int k = (da2 - 6) / 8; k <= (da2 + 6) / 8; ++k) {
                for (int l = (da - 6) / 8; l <= (6 + da) / 8; ++l) {
                    WorldMapAreaData.regions[n] = (k << 8) + l;
                    FontName.regionMapArchiveIds[n] = AbstractArchive.getFileFlat(GrandExchangeOfferTotalQuantityComparator.archive9, "m" + k + "_" + l, 333693375);
                    Archive.regionLandArchiveIds[n] = AbstractArchive.getFileFlat(GrandExchangeOfferTotalQuantityComparator.archive9, "l" + k + "_" + l, -2007228405);
                    ++n;
                }
            }
            Decimator.method331(da2, da, true, (byte)97);
        }
        else {
            final int da3 = packetBuffer.da(1910346629);
            final boolean b = Buffer.ra(packetBuffer, (byte)7) == 1;
            final int zc = Buffer.zc(packetBuffer, -865599662);
            final int cl2 = packetBuffer.cl(287851278);
            PacketBuffer.jb(packetBuffer, (byte)90);
            for (int n2 = 0; n2 < 4; ++n2) {
                for (int n3 = 0; n3 < 13; ++n3) {
                    for (int n4 = 0; n4 < 13; ++n4) {
                        if (packetBuffer.bitsRemaining(1, -1464732430) == 1) {
                            Client.instanceChunkTemplates[n2][n3][n4] = packetBuffer.bitsRemaining(26, -130196954);
                        }
                        else {
                            Client.instanceChunkTemplates[n2][n3][n4] = -1;
                        }
                    }
                }
            }
            packetBuffer.exportIndex((byte)(-124));
            GameObject.xteaKeys = new int[cl2][4];
            for (int n5 = 0; n5 < cl2; ++n5) {
                for (int n6 = 0; n6 < 4; ++n6) {
                    GameObject.xteaKeys[n5][n6] = packetBuffer.cx(-873579974);
                }
            }
            WorldMapAreaData.regions = new int[cl2];
            FontName.regionMapArchiveIds = new int[cl2];
            Archive.regionLandArchiveIds = new int[cl2];
            class4.regionLandArchives = new byte[cl2][];
            ObjectSound.regionMapArchives = new byte[cl2][];
            int n7 = 0;
            for (int n8 = 0; n8 < 4; ++n8) {
                for (int n9 = 0; n9 < 13; ++n9) {
                    for (int n10 = 0; n10 < 13; ++n10) {
                        final int n11 = Client.instanceChunkTemplates[n8][n9][n10];
                        if (-1 != n11) {
                            int n12 = ((n11 >> 14 & 0x3FF) / 8 << 8) + (n11 >> 3 & 0x7FF) / 8;
                            for (int n13 = 0; n13 < n7; ++n13) {
                                if (WorldMapAreaData.regions[n13] == n12) {
                                    n12 = -1;
                                    break;
                                }
                            }
                            if (n12 != -1) {
                                WorldMapAreaData.regions[n7] = n12;
                                final int n14 = n12 >> 8 & 0xA69A7D2F;
                                final int n15 = n12 & 0xF1EEF3FC;
                                FontName.regionMapArchiveIds[n7] = AbstractArchive.getFileFlat(GrandExchangeOfferTotalQuantityComparator.archive9, "m" + n14 + "_" + n15, 1576604338);
                                Archive.regionLandArchiveIds[n7] = AbstractArchive.getFileFlat(GrandExchangeOfferTotalQuantityComparator.archive9, "l" + n14 + "_" + n15, 1292095151);
                                ++n7;
                            }
                        }
                    }
                }
            }
            Decimator.method331(da3, zc, !b, (byte)105);
        }
    }
    
    public static void js(final int groupId) {
        final Widget[][] oh = ScriptFrame.client.oh();
        if (oh != null && oh[groupId] != null) {
            final WidgetLoaded widgetLoaded = new WidgetLoaded();
            widgetLoaded.setGroupId(groupId);
            ScriptFrame.client.getCallbacks().post((Object)widgetLoaded);
        }
    }
    
    final boolean shouldLeftClickOpenMenu(final int n) {
        final int n2 = -1679837219;
        boolean b2;
        try {
            final int method461 = DynamicObject.method461((short)3069);
            int n3 = (Client.isLoading && 730065501 * Client.field559 > 2) ? 1 : 0;
            if (n3 == 0) {
                if (n2 != -1679837219) {
                    throw new IllegalStateException();
                }
                int n4;
                if (method461 < 0) {
                    if (n2 != -1679837219) {
                        throw new IllegalStateException();
                    }
                    n4 = 0;
                }
                else {
                    int n5 = Client.soundEffectIds[method461];
                    if (n5 >= 2000) {
                        if (n2 != -1679837219) {
                            throw new IllegalStateException();
                        }
                        n5 -= 2000;
                    }
                    if (1007 == n5) {
                        n4 = 1;
                    }
                    else {
                        n4 = 0;
                    }
                }
                n3 = n4;
            }
            boolean b = false;
            Label_0228: {
                if (n3 != 0) {
                    if (n2 != -1679837219) {
                        throw new IllegalStateException();
                    }
                    if (!Client.field573[method461]) {
                        if (n2 != -1679837219) {
                            throw new IllegalStateException();
                        }
                        b = true;
                        break Label_0228;
                    }
                }
                b = false;
            }
            b2 = b;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.kr(" + ')');
        }
        if (b2) {
            return true;
        }
        final MenuShouldLeftClick menuShouldLeftClick = new MenuShouldLeftClick();
        ScriptFrame.client.getCallbacks().post((Object)menuShouldLeftClick);
        if (menuShouldLeftClick.isForceRightClick()) {
            return true;
        }
        final int in = this.in();
        if (in > 0) {
            final int n6 = Client.field561[in - 1];
            return n6 == MenuAction.RUNELITE_OVERLAY.getId() || n6 == MenuAction.RUNELITE_OVERLAY_CONFIG.getId() || n6 == MenuAction.RUNELITE_INFOBOX.getId();
        }
        return false;
    }
    
    public static void shouldLeftClickOpenMenu(final InterfaceParent interfaceParent, final boolean b) {
        ScriptFrame.client.getCallbacks().post((Object)new WidgetClosed(interfaceParent.getId(), interfaceParent.getModalMode(), b));
        if (b) {
            final int id = interfaceParent.getId();
            yo(id, ScriptFrame.client.wj());
            yo(id, ScriptFrame.client.dc());
            yo(id, ScriptFrame.client.io());
        }
    }
    
    static void aad(final Widget widget, final int n, final int n2) {
        if (-1596536121 * widget.xAlignment == 0) {
            widget.x = -1121131665 * widget.rawX;
        }
        else if (-1300658550 * widget.xAlignment == 1) {
            widget.x = ((n - -794961409 * widget.width) / 2 + -115015413 * widget.rawX) * 750411281;
        }
        else if (-1596536121 * widget.xAlignment == 2) {
            widget.x = 452186024 * (n - -1804225638 * widget.width - -824465240 * widget.rawX);
        }
        else if (widget.xAlignment * -1596536121 == 3) {
            widget.x = (widget.rawX * -115015413 * n >> 14) * 750411281;
        }
        else if (4 == -1596536121 * widget.xAlignment) {
            widget.x = ((n * (widget.rawX * -115015413) >> 14) + (n - -794961409 * widget.width) / 2) * 750411281;
        }
        else {
            widget.x = (n - -1924105166 * widget.width - (-119170361 * widget.rawX * n >> 14)) * -1529607068;
        }
        if (widget.yAlignment * 1484444061 == 0) {
            widget.y = -756368271 * widget.rawY;
        }
        else if (1 == 1334854629 * widget.yAlignment) {
            widget.y = ((n2 - 1473950221 * widget.height) / 2 + widget.rawY * 1714244565) * -1520068583;
        }
        else if (1484444061 * widget.yAlignment == 2) {
            widget.y = -1520068583 * (n2 - widget.height * 1336646 - 1651158159 * widget.rawY);
        }
        else if (3 == widget.yAlignment * 1484444061) {
            widget.y = 1160603267 * (widget.rawY * 1651158159 * n2 >> 14);
        }
        else if (4 == widget.yAlignment * -890330784) {
            widget.y = ((n2 - widget.height * -1497025978) / 2 + (n2 * (widget.rawY * 1651158159) >> 14)) * -1520068583;
        }
        else {
            widget.y = (n2 - widget.height * 1473950221 - (widget.rawY * 635764719 * n2 >> 14)) * 989787188;
        }
    }
    
    public EnumComposition ke(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return class148.vmethod3248(n, (byte)15);
    }
    
    public static void lv(final int n) {
        ScriptFrame.client.getCallbacks().post((Object)new FriendsChatChanged(ScriptFrame.client.vz() != null));
    }
    
    public static void lv(final Actor jd, final int n) {
        Client.jd = jd;
    }
    
    @Override
    protected final void fx() {
        if (class373.varcs.hasUnwrittenChanges(-1302793492)) {
            class373.varcs.tryWrite(1825232683);
        }
        if (null != UserComparator6.mouseRecorder) {
            UserComparator6.mouseRecorder.isRunning = false;
        }
        UserComparator6.mouseRecorder = null;
        Client.packetWriter.close(-2035521581);
        GraphicsObject.getModel((short)152);
        class123.mouseWheel = null;
        if (class28.pcmPlayer0 != null) {
            class28.pcmPlayer0.shutdown((byte)(-1));
        }
        if (HorizontalAlignment.pcmPlayer1 != null) {
            HorizontalAlignment.pcmPlayer1.shutdown((byte)(-1));
        }
        class295.method1608((byte)0);
        class144.method822(309734299);
        if (class14.urlRequester != null) {
            class14.urlRequester.close(-1816821055);
            class14.urlRequester = null;
        }
        try {
            JagexCache.JagexCache_dat2File.close(1953890996);
            for (int i = 0; i < JagexCache.idxCount * 1064766397; ++i) {
                class370.JagexCache_idxFiles[i].close(-578139440);
            }
            JagexCache.JagexCache_idx255File.close(1213727529);
            JagexCache.JagexCache_randomDat.close(-1466188503);
        }
        catch (Exception ex) {}
        this.field529.method54(1350001410);
    }
    
    @Override
    protected final void fy() {
        Client.cycle -= 310720817;
        gh(this, (byte)(-9));
        while (true) {
            final ArchiveDiskAction archiveDiskAction;
            synchronized (ArchiveDiskActionHandler.ArchiveDiskActionHandler_requestQueue) {
                archiveDiskAction = (ArchiveDiskAction)ArchiveDiskActionHandler.ArchiveDiskActionHandler_responseQueue.removeLast();
            }
            if (null == archiveDiskAction) {
                break;
            }
            Archive.bd(archiveDiskAction.archive, archiveDiskAction.archiveDisk, (int)archiveDiskAction.hr, archiveDiskAction.data, false, (byte)93);
        }
        try {
            if (1 == class297.musicPlayerStatus * 926096579) {
                final int method1644 = class475.midiPcmStream.method1644((byte)88);
                if (method1644 > 0 && class475.midiPcmStream.isReady(565209249)) {
                    int n = method1644 - -1128553755 * class162.pcmSampleLength;
                    if (n < 0) {
                        n = 0;
                    }
                    class475.midiPcmStream.setPcmStreamVolume(n, (byte)19);
                }
                else {
                    class475.midiPcmStream.clear((byte)4);
                    class475.midiPcmStream.clearAll(1147989798);
                    if (class297.musicTrackArchive != null) {
                        class297.musicPlayerStatus = -1253644330;
                    }
                    else {
                        class297.musicPlayerStatus = 0;
                    }
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
            class475.midiPcmStream.clear((byte)(-51));
            class297.musicPlayerStatus = 0;
            RouteStrategy.musicTrack = null;
            class297.soundCache = null;
            class297.musicTrackArchive = null;
        }
        class323.playPcmPlayers(-689906947);
        class207.dv(Client.keyHandlerInstance, (byte)(-44));
        GameEngine.jk(this, (byte)63);
        synchronized (MouseHandler.MouseHandler_instance) {
            MouseHandler.MouseHandler_currentButton = MouseHandler.MouseHandler_currentButtonVolatile * 908499211;
            MouseHandler.MouseHandler_x = 1068258211 * MouseHandler.MouseHandler_xVolatile;
            MouseHandler.MouseHandler_y = -1918688485 * MouseHandler.MouseHandler_yVolatile;
            MouseHandler.MouseHandler_millis = MouseHandler.MouseHandler_lastMovedVolatile * -4029881570118555541L;
            MouseHandler.MouseHandler_lastButton = MouseHandler.MouseHandler_lastButtonVolatile * 199219569;
            MouseHandler.MouseHandler_lastPressedX = MouseHandler.MouseHandler_lastPressedXVolatile * -1850432819;
            MouseHandler.MouseHandler_lastPressedY = MouseHandler.MouseHandler_lastPressedYVolatile * -1699120075;
            MouseHandler.MouseHandler_lastPressedTimeMillis = 3548908311918388543L * MouseHandler.MouseHandler_lastPressedTimeMillisVolatile;
            MouseHandler.MouseHandler_lastButtonVolatile = 0;
        }
        if (class123.mouseWheel != null) {
            Client.mouseWheelRotation = class123.mouseWheel.useRotation(1631381944) * 1644925127;
        }
        if (Client.gameState * -1275976559 == 0) {
            DevicePcmPlayerProvider.load(1351687603);
            NPC.method611(599275396);
        }
        else if (Client.gameState * -1275976559 == 5) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1165618270);
            DevicePcmPlayerProvider.load(1271397816);
            NPC.method611(599275396);
        }
        else if (10 == -1275976559 * Client.gameState || 11 == -1275976559 * Client.gameState) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 907691683);
        }
        else if (-1275976559 * Client.gameState == 20) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 492709651);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 50) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1619970588);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 25) {
            class27.method122((byte)(-54));
        }
        if (-1275976559 * Client.gameState == 30) {
            hv(this, (byte)(-46));
        }
        else if (40 == Client.gameState * -1275976559 || -1275976559 * Client.gameState == 45) {
            this.doCycleLoggedOut(-564344594);
        }
    }
    
    public void bh(final IndexedSprite[] abstractFont_modIconSprites) {
        AbstractFont.AbstractFont_modIconSprites = abstractFont_modIconSprites;
    }
    
    public void bh(final AbstractArchive musicTrackArchive) {
        class297.musicTrackArchive = musicTrackArchive;
    }
    
    static int px() {
        if (null != Client.archiveLoaders && Client.archiveLoadersDone * -397497277 < Client.archiveLoaders.size()) {
            int n = 0;
            for (int i = 0; i <= Client.archiveLoadersDone * -397497277; ++i) {
                n += ((ArchiveLoader)Client.archiveLoaders.get(i)).loadedCount * -1464399353;
            }
            return n * 10000 / (Client.field397 * 1240602605);
        }
        return 10000;
    }
    
    void py(final String s) throws IOException {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("grant_type", "refresh_token");
        hashMap.put("scope", "gamesso.token.create");
        hashMap.put("refresh_token", s);
        final URL url = new URL(ViewportMouse.field2213 + "shield/oauth/token" + new class438(hashMap).method2298(-759167743));
        final class394 class394 = new class394();
        class394.method2114(Client.field405, (byte)(-22));
        class394.method2106("Host", new URL(ViewportMouse.field2213).getHost(), -61020435);
        class394.method2111(class435.field3823, (byte)10);
        final class9 field30 = class9.field30;
        final com$jagex$oldscape$pub$RefreshAccessTokenRequester field31 = this.field419;
        if (null != field31) {
            this.field404 = field31.request(field30.method30((byte)(-18)), url, class394.method2105(1768636083), "");
            return;
        }
        this.field390 = class14.ni(this.field529, new class10(url, field30, class394, this.field401), (byte)1);
    }
    
    public static void vk(final int n) {
        ScriptFrame.client.getCallbacks().post((Object)new CanvasSizeChanged());
    }
    
    static final void vk(final boolean b) {
        class323.playPcmPlayers(-333672645);
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.pendingWrites -= 1313905755;
        if (170606735 * Client.packetWriter.pendingWrites < 50 && !b) {
            return;
        }
        Client.packetWriter.pendingWrites = 0;
        if (!Client.hadNetworkError && Client.packetWriter.getSocket((byte)7) != null) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-6596)), 414135591);
            try {
                PacketWriter.ok(Client.packetWriter, 421941662);
            }
            catch (IOException ex) {
                Client.hadNetworkError = true;
            }
        }
    }
    
    public int by() {
        return ViewportMouse.ViewportMouse_y * 148198745;
    }
    
    static final void wp(final Player player, final int n, final int n2, final MoveSpeed moveSpeed) {
        final int n3 = player.cf[0];
        final int n4 = player.dy[0];
        final int transformedSize = player.transformedSize((byte)(-45));
        if (n3 < transformedSize || n3 >= 104 - transformedSize || n4 < transformedSize || n4 >= 104 - transformedSize) {
            return;
        }
        if (n < transformedSize || n >= 104 - transformedSize || n2 < transformedSize || n2 >= 104 - transformedSize) {
            return;
        }
        final int n5 = n3;
        final int n6 = n4;
        final int transformedSize2 = player.transformedSize((byte)(-106));
        Client.field653.af = -1369677151 * n;
        Client.field653.an = -2066887785 * n2;
        Client.field653.aw = -2134236799;
        Client.field653.ac = -1188140267;
        final int vmethod3254 = class144.vmethod3254(n5, n6, transformedSize2, Client.field653, Client.collisionMaps[-1900490645 * player.plane], true, Client.field654, Client.field655, -2003793007);
        if (vmethod3254 < 1) {
            return;
        }
        for (int i = 0; i < vmethod3254 - 1; ++i) {
            player.method513(Client.field654[i], Client.field655[i], moveSpeed, 475560620);
        }
    }
    
    static final void vi(final int n, final int n2, final int n3, final int n4, final int n5) {
        final long boundaryObjectTag = class31.scene.getBoundaryObjectTag(n, n2, n3);
        if (boundaryObjectTag != 0L) {
            final int objectFlags = class31.scene.getObjectFlags(n, n2, n3, boundaryObjectTag);
            final int n6 = objectFlags >> 6 & 0x3;
            final int n7 = objectFlags & 0x1F;
            int n8 = n4;
            if (class173.method957(boundaryObjectTag)) {
                n8 = n5;
            }
            final int[] pixels = UrlRequester.sceneMinimapSprite.pixels;
            final int n9 = (103 - n3) * 2048 + (n2 * 4 + 24624);
            final ObjectComposition vmethod3248 = class144.vmethod3248(InterfaceParent.Entity_unpackID(boundaryObjectTag), (short)17548);
            if (-1 != vmethod3248.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite = class333.mapSceneSprites[vmethod3248.mapSceneId * 771086195];
                if (indexedSprite != null) {
                    indexedSprite.ax((vmethod3248.sizeX * -1064754148 - indexedSprite.yOffset) / 2 + (48 + n2 * 4), (vmethod3248.sizeY * 1952358772 - indexedSprite.subWidth) / 2 + ((104 - n3 - -1659393955 * vmethod3248.sizeY) * 4 + 48));
                }
            }
            else {
                if (n7 == 0 || n7 == 2) {
                    if (n6 == 0) {
                        pixels[512 + n9] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[1 + n9] = (pixels[n9] = n8);
                        pixels[3 + n9] = (pixels[n9 + 2] = n8);
                    }
                    else if (2 == n6) {
                        pixels[512 + (n9 + 3)] = (pixels[n9 + 3] = n8);
                        pixels[1536 + (3 + n9)] = (pixels[3 + n9 + 1024] = n8);
                    }
                    else if (n6 == 3) {
                        pixels[1 + (n9 + 1536)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[1536 + n9 + 2] = n8);
                    }
                }
                if (3 == n7) {
                    if (n6 == 0) {
                        pixels[n9] = n8;
                    }
                    else if (n6 == 1) {
                        pixels[3 + n9] = n8;
                    }
                    else if (2 == n6) {
                        pixels[n9 + 3 + 1536] = n8;
                    }
                    else if (3 == n6) {
                        pixels[1536 + n9] = n8;
                    }
                }
                if (n7 == 2) {
                    if (3 == n6) {
                        pixels[n9 + 512] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 0) {
                        pixels[n9 + 1] = (pixels[n9] = n8);
                        pixels[n9 + 3] = (pixels[n9 + 2] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[512 + (3 + n9)] = (pixels[3 + n9] = n8);
                        pixels[n9 + 3 + 1536] = (pixels[n9 + 3 + 1024] = n8);
                    }
                    else if (2 == n6) {
                        pixels[1 + (1536 + n9)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[2 + (1536 + n9)] = n8);
                    }
                }
            }
        }
        final long gameObjectTag = class31.scene.getGameObjectTag(n, n2, n3);
        if (gameObjectTag != 0L) {
            final int objectFlags2 = class31.scene.getObjectFlags(n, n2, n3, gameObjectTag);
            final int n10 = objectFlags2 >> 6 & 0x3;
            final int n11 = objectFlags2 & 0x1F;
            final ObjectComposition vmethod3249 = class144.vmethod3248(InterfaceParent.Entity_unpackID(gameObjectTag), (short)23342);
            if (-1 != vmethod3249.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite2 = class333.mapSceneSprites[771086195 * vmethod3249.mapSceneId];
                if (indexedSprite2 != null) {
                    indexedSprite2.ax(48 + n2 * 4 + (-1064754148 * vmethod3249.sizeX - indexedSprite2.yOffset) / 2, (1952358772 * vmethod3249.sizeY - indexedSprite2.subWidth) / 2 + (4 * (104 - n3 - vmethod3249.sizeY * -1659393955) + 48));
                }
            }
            else if (n11 == 9) {
                int n12 = 15658734;
                if (class173.method957(gameObjectTag)) {
                    n12 = 15597568;
                }
                final int[] pixels2 = UrlRequester.sceneMinimapSprite.pixels;
                final int n13 = 24624 + n2 * 4 + (103 - n3) * 2048;
                if (n10 == 0 || n10 == 2) {
                    pixels2[1 + (n13 + 1024)] = (pixels2[1536 + n13] = n12);
                    pixels2[3 + n13] = (pixels2[2 + (n13 + 512)] = n12);
                }
                else {
                    pixels2[1 + (512 + n13)] = (pixels2[n13] = n12);
                    pixels2[n13 + 1536 + 3] = (pixels2[2 + (n13 + 1024)] = n12);
                }
            }
        }
        final long floorDecorationTag = class31.scene.getFloorDecorationTag(n, n2, n3);
        if (0L != floorDecorationTag) {
            final ObjectComposition vmethod3250 = class144.vmethod3248(InterfaceParent.Entity_unpackID(floorDecorationTag), (short)15110);
            if (vmethod3250.mapSceneId * 771086195 != -1) {
                final IndexedSprite indexedSprite3 = class333.mapSceneSprites[771086195 * vmethod3250.mapSceneId];
                if (null != indexedSprite3) {
                    indexedSprite3.ax(n2 * 4 + 48 + (vmethod3250.sizeX * -1064754148 - indexedSprite3.yOffset) / 2, 48 + (104 - n3 - -1659393955 * vmethod3250.sizeY) * 4 + (vmethod3250.sizeY * 1952358772 - indexedSprite3.subWidth) / 2);
                }
            }
        }
    }
    
    public int getCenterX() {
        return Rasterizer3D.clips.kh();
    }
    
    public int getCenterY() {
        return Rasterizer3D.clips.ma();
    }
    
    static final int ub() {
        if (class20.clientPreferences.getRoofsHidden(-2024612423)) {
            return -1727408401 * GameEngine.Client_plane;
        }
        int n = 3;
        if (WorldMapSectionType.cameraPitch * 1897923909 < 310) {
            int i;
            int n2;
            if (986256295 * Client.oculusOrbState == 1) {
                i = -1958669353 * class33.oculusOrbFocalPointX >> 7;
                n2 = -365969735 * class144.oculusOrbFocalPointY >> 7;
            }
            else {
                i = 1144428983 * MusicPatchNode.localPlayer.br >> 7;
                n2 = MusicPatchNode.localPlayer.ep * -411750205 >> 7;
            }
            int n3 = -2100544359 * class36.cameraX >> 7;
            int j = class297.cameraZ * -91399205 >> 7;
            if (n3 < 0 || (j < 0 || n3 >= 104) || j >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (i < 0 || n2 < 0 || i >= 104 || n2 >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            int n4;
            if (i > n3) {
                n4 = i - n3;
            }
            else {
                n4 = n3 - i;
            }
            int n5;
            if (n2 > j) {
                n5 = n2 - j;
            }
            else {
                n5 = j - n2;
            }
            if (n4 > n5) {
                final int n6 = 65536 * n5 / n4;
                int n7 = 32768;
                while (i != n3) {
                    if (n3 < i) {
                        ++n3;
                    }
                    else if (n3 > i) {
                        --n3;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                        n = GameEngine.Client_plane * -1727408401;
                    }
                    n7 += n6;
                    if (n7 >= 65536) {
                        n7 -= 65536;
                        if (j < n2) {
                            ++j;
                        }
                        else if (j > n2) {
                            --j;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
            else if (n5 > 0) {
                final int n8 = n4 * 65536 / n5;
                int n9 = 32768;
                while (j != n2) {
                    if (j < n2) {
                        ++j;
                    }
                    else if (j > n2) {
                        --j;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[-1727408401 * GameEngine.Client_plane][n3][j] & 0x4)) {
                        n = -1727408401 * GameEngine.Client_plane;
                    }
                    n9 += n8;
                    if (n9 >= 65536) {
                        n9 -= 65536;
                        if (n3 < i) {
                            ++n3;
                        }
                        else if (n3 > i) {
                            --n3;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
        }
        if (MusicPatchNode.localPlayer.br * 1144428983 >= 0 && MusicPatchNode.localPlayer.ep * -411750205 >= 0 && 1144428983 * MusicPatchNode.localPlayer.br < 13312 && -411750205 * MusicPatchNode.localPlayer.ep < 13312) {
            if ((Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][1144428983 * MusicPatchNode.localPlayer.br >> 7][-411750205 * MusicPatchNode.localPlayer.ep >> 7] & 0x4) != 0x0) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            return n;
        }
        return -1727408401 * GameEngine.Client_plane;
    }
    
    public static void hp(final Client client, final boolean b, final int n) {
        if (client == null) {
            client.resizeRoot(b, n);
        }
        try {
            SequenceDefinition.method1129(Client.rootInterface * -896157613, Client.aj * -1687260435, class262.canvasHeight * 1658005443, b, -726165376);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.ln(" + ')');
        }
    }
    
    public static void hp() {
        if (Client.uy != null) {
            return;
        }
        final Archive archive = Client.az[2];
        final int cz = archive.cz(14);
        final int[] fileIds = archive.getFileIds(14);
        Client.uy = new int[fileIds.length];
        Client.gi = new int[cz];
        int n = 0;
        for (final int n2 : fileIds) {
            final net.runelite.api.VarbitComposition varbit = ScriptFrame.client.getVarbit(n2);
            Client.uy[n++] = (varbit.getIndex() << 16 | n2);
            Client.gi[n2] = (varbit.getIndex() << 16 | varbit.getMostSignificantBit() << 8 | varbit.getLeastSignificantBit());
        }
        Arrays.sort(Client.uy);
    }
    
    static void xb(final int n, final String str) {
        final int n2 = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        boolean b = false;
        final Username username = new Username(str, class70.loginType);
        for (int i = 0; i < n2; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (null != player && player != MusicPatchNode.localPlayer && null != player.username && player.username.equals(username)) {
                if (n == 1) {
                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-13476));
                    packetBufferNode.packetBuffer.du(0, 1291356220);
                    packetBufferNode.packetBuffer.cq(players_indices[i], (byte)32);
                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                }
                else if (4 == n) {
                    final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-15013));
                    packetBufferNode2.packetBuffer.dp(0, -421152875);
                    Buffer.ap(packetBufferNode2.packetBuffer, players_indices[i], (byte)110);
                    Client.packetWriter.addNode(packetBufferNode2, 414135591);
                }
                else if (n == 6) {
                    final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-1168));
                    packetBufferNode3.packetBuffer.bu(players_indices[i], (byte)124);
                    packetBufferNode3.packetBuffer.dp(0, 1269497714);
                    Client.packetWriter.addNode(packetBufferNode3, 414135591);
                }
                else if (n == 7) {
                    final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)(-14883));
                    packetBufferNode4.packetBuffer.ds(players_indices[i], -1554911765);
                    packetBufferNode4.packetBuffer.eb(0, (byte)(-68));
                    Client.packetWriter.addNode(packetBufferNode4, 414135591);
                }
                b = true;
                break;
            }
        }
        if (!b) {
            UserComparator5.addGameMessage(4, "", Strings.gt + str, -397121414);
        }
    }
    
    static void yb() {
        if (!Client.isSpellSelected) {
            return;
        }
        final Widget widgetChild = SoundSystem.getWidgetChild(96656415 * Clips.selectedSpellWidget, 145251849 * Client.selectedSpellChildIndex, -331385982);
        if (widgetChild != null && null != widgetChild.onTargetLeave) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetLeave;
            HealthBarUpdate.set(scriptEvent, (byte)(-56));
        }
        Client.selectedSpellItemId = -35668549;
        Client.isSpellSelected = false;
        class144.invalidateWidget(widgetChild, -2095580667);
    }
    
    public void yb(final int n) {
        Client.camAngleDX = n * -1181252605;
    }
    
    void pq() {
        if (-995772835 * NetCache.NetCache_crcMismatches >= 4) {
            this.br("js5crc", 2147473697);
            class138.updateGameState(1000, 958913765);
            return;
        }
        if (-1386597723 * NetCache.NetCache_ioExceptions >= 4) {
            if (Client.gameState * -1275976559 <= 5) {
                this.br("js5io", -1055526653);
                class138.updateGameState(-848143226, 1951209914);
                return;
            }
            Client.js5Cycles = -1862921855;
            NetCache.NetCache_ioExceptions = -483971193;
        }
        if ((Client.js5Cycles += 185484651) * 382210200 + 1 > 0) {
            return;
        }
        try {
            if (Client.js5ConnectState * -1369696625 == 0) {
                WorldMapSection0.js5SocketTask = Client.af.newSocketTask(UserComparator8.worldHost, ItemContainer.currentPort * 1632365579, -1731609371);
                Client.js5ConnectState += 1300738209;
            }
            if (-652501089 * Client.js5ConnectState == 1) {
                if (2 == WorldMapSection0.js5SocketTask.status) {
                    this.js5Error(-1, (byte)(-101));
                    return;
                }
                if (WorldMapSection0.js5SocketTask.status == 1) {
                    Client.js5ConnectState -= 1282174933;
                }
            }
            if (2 == -907668871 * Client.js5ConnectState) {
                KitDefinition.js5Socket = class186.method1008((Socket)WorldMapSection0.js5SocketTask.result, 40000, -671329938, 885466231);
                final Buffer buffer = new Buffer(5);
                buffer.writeShort(15, (byte)41);
                buffer.writeInt(213, -2081835031);
                KitDefinition.js5Socket.write(buffer.array, 0, 5, -2115422184);
                Client.js5ConnectState += 25348158;
                class132.field1276 = class96.clockNow(1359084586) * -51531514477814883L;
            }
            if (Client.js5ConnectState * -1348062367 == 3) {
                if (KitDefinition.js5Socket.available(1151976564) > 0) {
                    final int unsignedByte = KitDefinition.js5Socket.readUnsignedByte(-591957582);
                    if (unsignedByte != 0) {
                        this.js5Error(unsignedByte, (byte)(-117));
                        return;
                    }
                    Client.js5ConnectState += 1300738209;
                }
                else if (class96.clockNow(298186676) - class132.field1276 * 4041510135797154485L > 30000L) {
                    this.js5Error(-2, (byte)(-69));
                    return;
                }
            }
            if (-1348062367 * Client.js5ConnectState == 4) {
                final AbstractSocket js5Socket = KitDefinition.js5Socket;
                final boolean b = Client.gameState * -2053564911 > 20;
                if (NetCache.NetCache_socket != null) {
                    try {
                        NetCache.NetCache_socket.close(1255144185);
                    }
                    catch (Exception ex) {}
                    NetCache.NetCache_socket = null;
                }
                NetCache.NetCache_socket = js5Socket;
                class177.vmethod3380(b, 1513483242);
                NetCache.NetCache_responseHeaderBuffer.offset = 0;
                Script.NetCache_currentResponse = null;
                NetCache.NetCache_responseArchiveBuffer = null;
                NetCache.field3504 = 0;
                while (true) {
                    final NetFileRequest netFileRequest = (NetFileRequest)NetCache.NetCache_pendingPriorityResponses.first();
                    if (netFileRequest == null) {
                        break;
                    }
                    NetCache.NetCache_pendingPriorityWrites.put(netFileRequest, netFileRequest.hr);
                    NetCache.NetCache_pendingPriorityWritesCount += 826158912;
                    NetCache.NetCache_pendingPriorityResponsesCount += 1677618233;
                }
                while (true) {
                    final NetFileRequest netFileRequest2 = (NetFileRequest)NetCache.NetCache_pendingResponses.first();
                    if (netFileRequest2 == null) {
                        break;
                    }
                    NetCache.NetCache_pendingWritesQueue.addLast(netFileRequest2);
                    NetCache.NetCache_pendingWrites.put(netFileRequest2, netFileRequest2.hr);
                    NetCache.NetCache_pendingWritesCount -= 2069940741;
                    NetCache.NetCache_pendingResponsesCount -= 1197659610;
                }
                if (NetCache.field3506 != 0) {
                    try {
                        final Buffer buffer2 = new Buffer(4);
                        buffer2.writeShort(4, (byte)124);
                        buffer2.writeShort(NetCache.field3506, (byte)40);
                        buffer2.writeVarInt(0, (byte)40);
                        NetCache.NetCache_socket.write(buffer2.array, 0, 4, -2115422184);
                    }
                    catch (IOException ex2) {
                        try {
                            NetCache.NetCache_socket.close(-1773380124);
                        }
                        catch (Exception ex3) {}
                        NetCache.NetCache_ioExceptions -= 1648399345;
                        NetCache.NetCache_socket = null;
                    }
                }
                NetCache.NetCache_loadTime = 0;
                NetCache.field3509 = class96.clockNow(1378772720) * -6047020038529116697L;
                WorldMapSection0.js5SocketTask = null;
                KitDefinition.js5Socket = null;
                Client.js5ConnectState = 0;
                Client.js5Errors = 0;
            }
        }
        catch (IOException ex4) {
            this.js5Error(-3, (byte)(-67));
        }
    }
    
    static final void ads(final InterfaceParent interfaceParent, final boolean b) {
        final int n = -1870417354 * interfaceParent.group;
        final int n2 = (int)interfaceParent.hr;
        interfaceParent.hw();
        if (b) {
            if (-1 != n) {
                if (class264.Widget_loadedInterfaces[n]) {
                    UserComparator3.Widget_archive.clearFilesGroup(n, (byte)0);
                    if (VerticalAlignment.Widget_interfaceComponents[n] != null) {
                        for (int i = 0; i < VerticalAlignment.Widget_interfaceComponents[n].length; ++i) {
                            if (VerticalAlignment.Widget_interfaceComponents[n][i] != null) {
                                VerticalAlignment.Widget_interfaceComponents[n][i] = null;
                            }
                        }
                        VerticalAlignment.Widget_interfaceComponents[n] = null;
                        class264.Widget_loadedInterfaces[n] = false;
                    }
                }
            }
        }
        for (IntegerNode integerNode = (IntegerNode)Client.widgetFlags.first(); integerNode != null; integerNode = (IntegerNode)Client.widgetFlags.next()) {
            if ((integerNode.hr >> -223072086 & 0xFFFFL) == n) {
                integerNode.hw();
            }
        }
        final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
        if (null != vmethod3380) {
            class144.invalidateWidget(vmethod3380, -906383465);
        }
        if (-896157613 * Client.rootInterface != -1) {
            class127.runIntfCloseListeners(1873639154 * Client.rootInterface, 1, (byte)63);
        }
    }
    
    public void kd(final int scene_selectedX) {
        Scene.Scene_selectedX = scene_selectedX;
    }
    
    static void xs() {
        if (!Client.isSpellSelected) {
            return;
        }
        final Widget widgetChild = SoundSystem.getWidgetChild(96656415 * Clips.selectedSpellWidget, 145251849 * Client.selectedSpellChildIndex, 1307066404);
        if (widgetChild != null && null != widgetChild.onTargetLeave) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetLeave;
            HealthBarUpdate.set(scriptEvent, (byte)(-30));
        }
        Client.selectedSpellItemId = -35668549;
        Client.isSpellSelected = false;
        class144.invalidateWidget(widgetChild, -2007484050);
    }
    
    static void ys() {
        if (!Client.isSpellSelected) {
            return;
        }
        final Widget widgetChild = SoundSystem.getWidgetChild(96656415 * Clips.selectedSpellWidget, -584356039 * Client.selectedSpellChildIndex, -55342705);
        if (widgetChild != null && null != widgetChild.onTargetLeave) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetLeave;
            HealthBarUpdate.set(scriptEvent, (byte)83);
        }
        Client.selectedSpellItemId = -35668549;
        Client.isSpellSelected = false;
        class144.invalidateWidget(widgetChild, -632675814);
    }
    
    @Override
    protected final void doCycle(final int n) {
        this.oc();
        try {
            Client.cycle -= 310720817;
            gh(this, (byte)(-53));
            while (true) {
                final ArchiveDiskAction archiveDiskAction;
                synchronized (ArchiveDiskActionHandler.ArchiveDiskActionHandler_requestQueue) {
                    archiveDiskAction = (ArchiveDiskAction)ArchiveDiskActionHandler.ArchiveDiskActionHandler_responseQueue.removeLast();
                }
                if (null == archiveDiskAction) {
                    break;
                }
                Archive.bd(archiveDiskAction.archive, archiveDiskAction.archiveDisk, (int)archiveDiskAction.hr, archiveDiskAction.data, false, (byte)101);
            }
            Label_0278: {
                try {
                    if (1 == class297.musicPlayerStatus * 926096579) {
                        if (n >= -2037994616) {
                            throw new IllegalStateException();
                        }
                        final int method1644 = class475.midiPcmStream.method1644((byte)29);
                        if (method1644 > 0) {
                            if (n >= -2037994616) {
                                throw new IllegalStateException();
                            }
                            if (class475.midiPcmStream.isReady(1577692860)) {
                                int n2 = method1644 - -1128553755 * class162.pcmSampleLength;
                                if (n2 < 0) {
                                    if (n >= -2037994616) {
                                        this.vu();
                                        return;
                                    }
                                    n2 = 0;
                                }
                                class475.midiPcmStream.setPcmStreamVolume(n2, (byte)19);
                                break Label_0278;
                            }
                        }
                        class475.midiPcmStream.clear((byte)(-5));
                        class475.midiPcmStream.clearAll(34803635);
                        if (class297.musicTrackArchive != null) {
                            if (n >= -2037994616) {
                                throw new IllegalStateException();
                            }
                            class297.musicPlayerStatus = -1253644330;
                        }
                        else {
                            class297.musicPlayerStatus = 0;
                        }
                        RouteStrategy.musicTrack = null;
                        class297.soundCache = null;
                    }
                }
                catch (Exception ex) {
                    ex.printStackTrace();
                    class475.midiPcmStream.clear((byte)4);
                    class297.musicPlayerStatus = 0;
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                    class297.musicTrackArchive = null;
                }
            }
            class323.playPcmPlayers(-411015869);
            class207.dv(Client.keyHandlerInstance, (byte)1);
            GameEngine.jk(this, (byte)95);
            synchronized (MouseHandler.MouseHandler_instance) {
                MouseHandler.MouseHandler_currentButton = MouseHandler.MouseHandler_currentButtonVolatile * 908499211;
                MouseHandler.MouseHandler_x = 1068258211 * MouseHandler.MouseHandler_xVolatile;
                MouseHandler.MouseHandler_y = -1918688485 * MouseHandler.MouseHandler_yVolatile;
                MouseHandler.MouseHandler_millis = MouseHandler.MouseHandler_lastMovedVolatile * -4029881570118555541L;
                MouseHandler.MouseHandler_lastButton = MouseHandler.MouseHandler_lastButtonVolatile * 199219569;
                MouseHandler.MouseHandler_lastPressedX = MouseHandler.MouseHandler_lastPressedXVolatile * -1850432819;
                MouseHandler.MouseHandler_lastPressedY = MouseHandler.MouseHandler_lastPressedYVolatile * -1699120075;
                MouseHandler.MouseHandler_lastPressedTimeMillis = 3548908311918388543L * MouseHandler.MouseHandler_lastPressedTimeMillisVolatile;
                MouseHandler.MouseHandler_lastButtonVolatile = 0;
            }
            if (class123.mouseWheel != null) {
                Client.mouseWheelRotation = class123.mouseWheel.useRotation(1765986428) * 1644925127;
            }
            Label_0676: {
                if (Client.gameState * -1275976559 == 0) {
                    if (n >= -2037994616) {
                        throw new IllegalStateException();
                    }
                    DevicePcmPlayerProvider.load(1827465123);
                    NPC.method611(599275396);
                }
                else if (Client.gameState * -1275976559 == 5) {
                    if (n >= -2037994616) {
                        throw new IllegalStateException();
                    }
                    EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1210826213);
                    DevicePcmPlayerProvider.load(1601113641);
                    NPC.method611(599275396);
                }
                else {
                    if (10 != -1275976559 * Client.gameState) {
                        if (n >= -2037994616) {
                            throw new IllegalStateException();
                        }
                        if (11 != -1275976559 * Client.gameState) {
                            if (-1275976559 * Client.gameState == 20) {
                                EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 810057985);
                                this.doCycleLoggedOut(-564344594);
                                break Label_0676;
                            }
                            if (Client.gameState * -1275976559 == 50) {
                                EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 838916526);
                                this.doCycleLoggedOut(-564344594);
                                break Label_0676;
                            }
                            if (Client.gameState * -1275976559 != 25) {
                                break Label_0676;
                            }
                            if (n >= -2037994616) {
                                throw new IllegalStateException();
                            }
                            class27.method122((byte)(-52));
                            break Label_0676;
                        }
                    }
                    EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1387079526);
                }
            }
            Label_0758: {
                if (-1275976559 * Client.gameState == 30) {
                    if (n >= -2037994616) {
                        throw new IllegalStateException();
                    }
                    hv(this, (byte)(-67));
                }
                else {
                    if (40 != Client.gameState * -1275976559) {
                        if (n >= -2037994616) {
                            throw new IllegalStateException();
                        }
                        if (-1275976559 * Client.gameState != 45) {
                            break Label_0758;
                        }
                    }
                    this.doCycleLoggedOut(-564344594);
                }
            }
            this.vu();
        }
        catch (RuntimeException ex2) {
            throw HealthBar.get(ex2, "client.bd(" + ')');
        }
    }
    
    static final void qr() {
        Client.packetWriter.close(974398993);
        FloorOverlayDefinition.FloorOverlayDefinition_cached.clear();
        class294.method1607((byte)(-6));
        class4.method9(-518646489);
        class14.method56(-1977195516);
        class173.method958((byte)(-64));
        class379.method2015((byte)(-6));
        SequenceDefinition.SequenceDefinition_cached.clear();
        SequenceDefinition.SequenceDefinition_cachedFrames.clear();
        SequenceDefinition.SequenceDefinition_cachedModel.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cached.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cachedModels.clear();
        VarbitComposition.VarbitDefinition_cached.clear();
        VarpDefinition.VarpDefinition_cached.clear();
        class160.HitSplatDefinition_cachedSprites.method2418((byte)(-91));
        MenuAction.HitSplatDefinition_cached.method2418((byte)(-114));
        class432.method2285(1210764048);
        GrandExchangeEvent.method1922(-715046845);
        InterfaceParent.method488(-1065340633);
        class165.method921(1106633274);
        Strings.method1854(761444847);
        class383.method2084(822513986);
        DbRowType.DBRowType_cache.clear();
        Client.Widget_cachedModels.clear();
        Client.Widget_cachedFonts.clear();
        GrandExchangeOfferTotalQuantityComparator.method1913(1614056611);
        class18.method75(984286364);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).clear(-254274474);
        Script.Script_cached.clear();
        Client.archive5.method2127(1808434338);
        DevicePcmPlayerProvider.field67.ua(1903798827);
        GameBuild.archive7.ua(1903798827);
        class85.archive4.ua(1903798827);
        class426.field3811.ua(1903798827);
        GrandExchangeOfferTotalQuantityComparator.archive9.ua(1903798827);
        class399.archive6.ua(1903798827);
        FloorUnderlayDefinition.archive11.ua(1903798827);
        class452.archive8.ua(1903798827);
        WorldMapLabelSize.field2285.ua(1903798827);
        NetFileRequest.archive10.ua(1903798827);
        class195.field1645.ua(1903798827);
        class126.archive12.ua(1903798827);
        PcmPlayer.field211.ua(1903798827);
        class31.scene.clear();
        for (int i = 0; i < 4; ++i) {
            Client.collisionMaps[i].clear(2111175147);
        }
        Client.field590.method1138((byte)4);
        System.gc();
        class297.musicPlayerStatus = -626822165;
        class297.musicTrackArchive = null;
        class379.musicTrackGroupId = 1643562499;
        VarpDefinition.musicTrackFileId = -1945466722;
        class100.musicTrackVolume = 0;
        class120.musicTrackBoolean = false;
        class162.pcmSampleLength = -322372919;
        Client.currentTrackGroupId = -986222316;
        Client.playingJingle = false;
        StructComposition.findEnumerated((byte)1);
        class138.updateGameState(10, 1017429595);
    }
    
    public SpritePixels rq(final int n) {
        final SpritePixels cs = this.cs(new int[262144], 512, 512);
        try {
            cz(cs, 4.0, n, 0, 0, 48, 48);
        }
        catch (Exception ex) {
            Client.nw.debug("instance map", (Throwable)ex);
        }
        return cs;
    }
    
    static void rq(final SequenceDefinition sequenceDefinition, final int n, final int n2, final int n3) {
        if (-297150195 * Client.soundEffectCount >= 50 || class20.clientPreferences.method573(-1753443415) == 0) {
            return;
        }
        if (null != sequenceDefinition.soundEffects && n < sequenceDefinition.soundEffects.length) {
            class161.method908(sequenceDefinition.soundEffects[n], n2, n3, 408562925);
        }
    }
    
    final void oe() {
    }
    
    public EvictingDualNodeHashTable cm() {
        return ObjectComposition.ObjectDefinition_cached;
    }
    
    public int bg() {
        return Client.worldProperties * -205173751;
    }
    
    public GameObject ry() {
        return new GameObject();
    }
    
    static final void ry() {
        if (1437162422 * GameEngine.Client_plane != Client.field596 * -520727581) {
            Client.field596 = -1813500035 * GameEngine.Client_plane;
            final int n = -1727408401 * GameEngine.Client_plane;
            final int[] pixels = UrlRequester.sceneMinimapSprite.pixels;
            for (int length = pixels.length, i = 0; i < length; ++i) {
                pixels[i] = 0;
            }
            for (int j = 1; j < -1737281914; ++j) {
                int n2 = 1452312854 * (708919243 - j) - 436244326;
                for (int k = 1; k < 1849828241; ++k) {
                    if ((Tiles.Tiles_renderFlags[n][k][j] & 0x18) == 0x0) {
                        Scene.qb(class31.scene, pixels, n2, 765515311, n, k, j);
                    }
                    if (n < 3 && (Tiles.Tiles_renderFlags[n + 1][k][j] & 0x8) != 0x0) {
                        Scene.qb(class31.scene, pixels, n2, 1964196082, n + 1, k, j);
                    }
                    n2 += 4;
                }
            }
            final int n3 = (238 + (int)(Math.random() * 20.0) - 10 << 16) + (238 + (int)(Math.random() * 20.0) - 10 << 8) + (238 + (int)(Math.random() * 20.0) - 10);
            final int n4 = -1124616969 + (int)(Math.random() * 20.0) - 10 << 16;
            SpritePixels.bg(UrlRequester.sceneMinimapSprite);
            for (int l = 1; l < -763512049; ++l) {
                for (int n5 = 1; n5 < 1007770709; ++n5) {
                    if (0x0 == (Tiles.Tiles_renderFlags[n][n5][l] & 0x18)) {
                        class149.drawObject(n, n5, l, n3, n4, -1464233707);
                    }
                    if (n < 3 && (Tiles.Tiles_renderFlags[1 + n][n5][l] & 0x8) != 0x0) {
                        class149.drawObject(n + 1, n5, l, n3, n4, -1733678567);
                    }
                }
            }
            Client.mapIconCount = 0;
            for (int n6 = 0; n6 < 104; ++n6) {
                for (int n7 = 0; n7 < 1286783776; ++n7) {
                    final long floorDecorationTag = class31.scene.getFloorDecorationTag(GameEngine.Client_plane * -755527312, n6, n7);
                    if (floorDecorationTag != 0L) {
                        final int n8 = class144.vmethod3248(InterfaceParent.Entity_unpackID(floorDecorationTag), (short)8903).mapIconId * -1074634067;
                        if (n8 >= 0) {
                            if (class354.method1935(n8, 2036982238).field1491) {
                                Client.mapIcons[-2124617054 * Client.mapIconCount] = class354.method1935(n8, 2024292455).getSpriteBool(false, -16711936);
                                Client.mapIconXs[Client.mapIconCount * 25070674] = n6;
                                Client.mapIconYs[Client.mapIconCount * -871587052] = n7;
                                Client.mapIconCount += 868833571;
                            }
                        }
                    }
                }
            }
            RouteStrategy.rasterProvider.apply((byte)0);
        }
    }
    
    static void rh(final int n) {
        if (n == -1 && !Client.playingJingle) {
            FloorUnderlayDefinition.setHsl(-852125385);
        }
        else if (-1 != n && 1950443231 * Client.currentTrackGroupId != n && ClientPreferences.xp(class20.clientPreferences, 2100782022) != 0 && !Client.playingJingle) {
            Actor.method538(2, class399.archive6, n, 0, ClientPreferences.xp(class20.clientPreferences, 899350574), false, -605836560);
        }
        Client.currentTrackGroupId = -675419304 * n;
    }
    
    static void ra(final int n, final int n2) {
        if (ClientPreferences.xp(class20.clientPreferences, -893179490) != 0 && -1 != n) {
            Message.isFromFriend(class195.field1645, n, 0, ClientPreferences.xp(class20.clientPreferences, -1690179573), false, -1670360788);
            Client.playingJingle = true;
        }
    }
    
    public StructComposition ra(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return class195.StructDefinition_getStructDefinition(n, -680528429);
    }
    
    static Archive qe(final int n, final boolean b, final boolean b2, final boolean b3, final boolean b4) {
        ArchiveDisk archiveDisk = null;
        if (null != JagexCache.JagexCache_dat2File) {
            archiveDisk = new ArchiveDisk(n, JagexCache.JagexCache_dat2File, class370.JagexCache_idxFiles[n], 1000000);
        }
        return new Archive(archiveDisk, WorldMapID.masterDisk, n, b, b2, b3, b4);
    }
    
    public int qe() {
        return Client.npcCount * 265474485;
    }
    
    public AbstractArchive qe() {
        return Client.az[2];
    }
    
    public EvictingDualNodeHashTable kt() {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        return StructComposition.StructDefinition_cached;
    }
    
    public EvictingDualNodeHashTable drawLoggedIn() {
        return HealthBarDefinition.HealthBarDefinition_cachedSprites;
    }
    
    final void drawLoggedIn(final int n) {
        try {
            if (-1 != Client.rootInterface * -896157613) {
                if (n == 659480625) {
                    throw new IllegalStateException();
                }
                final int n2 = Client.rootInterface * -896157613;
                if (!SoundSystem.loadInterface(n2, 1376777516)) {
                    if (n == 659480625) {
                        throw new IllegalStateException();
                    }
                }
                else {
                    TileItem.drawModelComponents(VerticalAlignment.Widget_interfaceComponents[n2], -1, (byte)21);
                }
            }
            for (int i = 0; i < Client.rootWidgetCount * -356793645; ++i) {
                if (n == 659480625) {
                    return;
                }
                if (Client.field573[i]) {
                    if (n == 659480625) {
                        throw new IllegalStateException();
                    }
                    Client.field574[i] = true;
                }
                Client.field519[i] = Client.field573[i];
                Client.field573[i] = false;
            }
            Client.field527 = Client.cycle * -1146781383;
            Client.viewportX = -563689483;
            Client.viewportY = -2111961447;
            if (-1 != Client.rootInterface * -896157613) {
                if (n == 659480625) {
                    throw new IllegalStateException();
                }
                Client.rootWidgetCount = 0;
                class13.drawWidgets(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, class262.canvasHeight * 1658005443, 0, 0, -1, (byte)(-119));
            }
            Rasterizer2D.Rasterizer2D_resetClip();
            if (Client.showMouseCross) {
                if (n == 659480625) {
                    throw new IllegalStateException();
                }
                if (-1306273505 * Client.mouseCrossColor == 1) {
                    if (n == 659480625) {
                        return;
                    }
                    class173.crossSprites[1513573489 * Client.mouseCrossState / 100].drawAt(-902574261 * Client.mouseCrossX - 8, 682495699 * Client.mouseCrossY - 8);
                }
                if (-1306273505 * Client.mouseCrossColor == 2) {
                    class173.crossSprites[4 + 1513573489 * Client.mouseCrossState / 100].drawAt(-902574261 * Client.mouseCrossX - 8, 682495699 * Client.mouseCrossY - 8);
                }
            }
            if (!Client.isMenuOpen) {
                if (n == 659480625) {
                    throw new IllegalStateException();
                }
                if (-1 != Client.viewportX * -2086038621) {
                    if (n == 659480625) {
                        throw new IllegalStateException();
                    }
                    class85.method498(-2086038621 * Client.viewportX, Client.viewportY * -870509993, (byte)(-128));
                }
            }
            else if (!lp()) {
                final int n3 = -1141903185 * class192.menuX;
                final int n4 = ArchiveLoader.menuY * -115281635;
                final int n5 = -960964385 * DesktopPlatformInfoProvider.menuWidth;
                final int n6 = 245252327 * class147.menuHeight;
                final int n7 = 6116423;
                Rasterizer2D.Rasterizer2D_fillRectangle(n3, n4, n5, n6, n7);
                Rasterizer2D.Rasterizer2D_fillRectangle(1 + n3, 1 + n4, n5 - 2, 16, 0);
                Rasterizer2D.Rasterizer2D_drawRectangle(1 + n3, n4 + 18, n5 - 2, n6 - 19, 0);
                class492.xb(class137.fontBold12, Strings.gd, 3 + n3, 14 + n4, n7, -1);
                final int n8 = -2063363905 * MouseHandler.MouseHandler_x;
                final int n9 = MouseHandler.MouseHandler_y * -1224153235;
                for (int j = 0; j < 730065501 * Client.menuOptionsCount; ++j) {
                    if (n == 659480625) {
                        return;
                    }
                    final int n10 = n4 + 31 + 15 * (Client.menuOptionsCount * 730065501 - 1 - j);
                    int n11 = 16777215;
                    if (n8 > n3) {
                        if (n == 659480625) {
                            throw new IllegalStateException();
                        }
                        if (n8 < n3 + n5) {
                            if (n == 659480625) {
                                throw new IllegalStateException();
                            }
                            if (n9 > n10 - 13) {
                                if (n == 659480625) {
                                    throw new IllegalStateException();
                                }
                                if (n9 < n10 + 3) {
                                    if (n == 659480625) {
                                        throw new IllegalStateException();
                                    }
                                    n11 = 16776960;
                                }
                            }
                        }
                    }
                    class492.xb(class137.fontBold12, Friend.method2152(j, (short)(-635)), 3 + n3, n10, n11, 0);
                }
                FriendsChat.method2139(-1141903185 * class192.menuX, -115281635 * ArchiveLoader.menuY, -960964385 * DesktopPlatformInfoProvider.menuWidth, class147.menuHeight * 245252327, -1848509736);
            }
            if (3 == -1928160607 * Client.gameDrawingMode) {
                if (n == 659480625) {
                    throw new IllegalStateException();
                }
                for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                    if (n == 659480625) {
                        throw new IllegalStateException();
                    }
                    if (Client.field519[k]) {
                        if (n == 659480625) {
                            throw new IllegalStateException();
                        }
                        Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], 16711935, 128);
                    }
                    else if (Client.field574[k]) {
                        if (n == 659480625) {
                            return;
                        }
                        Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], 16711680, 128);
                    }
                }
            }
            class324.method1839(GameEngine.Client_plane * -1727408401, MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, Client.field432 * -1795081153, (short)(-14431));
            Client.field432 = 0;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.im(" + ')');
        }
    }
    
    final void doCycleLoggedOut(final int n) {
        try {
            AbstractSocket abstractSocket = Client.packetWriter.getSocket((byte)2);
            final PacketBuffer packetBuffer = Client.packetWriter.packetBuffer;
            try {
                Label_0324: {
                    if (0 == Client.loginState * 572310033) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        Label_0103: {
                            if (class174.secureRandom == null) {
                                if (!Client.secureRandomFuture.isDone((byte)85)) {
                                    if (n != -564344594) {
                                        return;
                                    }
                                    if (-1687986373 * Client.field391 <= 250) {
                                        break Label_0103;
                                    }
                                }
                                class174.secureRandom = Client.secureRandomFuture.get((byte)14);
                                Client.secureRandomFuture.shutdown(1244424155);
                                Client.secureRandomFuture = null;
                            }
                        }
                        if (class174.secureRandom != null) {
                            if (abstractSocket != null) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                abstractSocket.close(1038680783);
                                abstractSocket = null;
                            }
                            class1.socketTask = null;
                            Client.hadNetworkError = false;
                            Client.field391 = 0;
                            if (Client.field395.method2558(-228540689)) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                if (ay(this, 1953333263)) {
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                    try {
                                        this.method397(TileItem.field1079, -1706352658);
                                        class284.method1595(21, -871294200);
                                        break Label_0324;
                                    }
                                    catch (Throwable t) {
                                        class387.RunException_sendStackTrace(null, t, (byte)8);
                                        class315.getLoginError(65, 1004858522);
                                        return;
                                    }
                                }
                                if (this.method369((byte)93)) {
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                    try {
                                        this.method372(SpriteMask.field2808, class121.field1185, 1474733588);
                                        class284.method1595(20, 409250027);
                                        break Label_0324;
                                    }
                                    catch (Exception ex) {
                                        class387.RunException_sendStackTrace(null, ex, (byte)8);
                                        class315.getLoginError(65, -120530343);
                                        return;
                                    }
                                }
                                class315.getLoginError(65, 846785002);
                                return;
                            }
                            else {
                                class284.method1595(1, -708512013);
                            }
                        }
                    }
                }
                if (Client.loginState * 572310033 == 21) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    Label_0807: {
                        if (this.field404 != null) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            if (!this.field404.isDone()) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                return;
                            }
                            else if (this.field404.isCancelled()) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                class315.getLoginError(65, 1367150836);
                                this.field404 = null;
                                return;
                            }
                            else {
                                try {
                                    final com$jagex$oldscape$pub$RefreshAccessTokenResponse com$jagex$oldscape$pub$RefreshAccessTokenResponse = this.field404.get();
                                    if (com$jagex$oldscape$pub$RefreshAccessTokenResponse.isSuccess()) {
                                        ModeWhere.field3571 = com$jagex$oldscape$pub$RefreshAccessTokenResponse.getAccessToken();
                                        TileItem.field1079 = com$jagex$oldscape$pub$RefreshAccessTokenResponse.getRefreshToken();
                                        oc(-1);
                                        this.field404 = null;
                                        break Label_0807;
                                    }
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                    class315.getLoginError(65, -203984769);
                                    this.field404 = null;
                                    return;
                                }
                                catch (Exception ex2) {
                                    class387.RunException_sendStackTrace(null, ex2, (byte)8);
                                    class315.getLoginError(65, 1508711887);
                                    this.field404 = null;
                                    return;
                                }
                            }
                        }
                        if (this.field390 == null) {
                            class315.getLoginError(65, 1158368571);
                            return;
                        }
                        if (n != -564344594) {
                            return;
                        }
                        if (!this.field390.method66(-2018049174)) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            return;
                        }
                        else if (class18.jm(this.field390, (byte)82)) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            class387.RunException_sendStackTrace(this.field390.method65(-1876642692), null, (byte)8);
                            class315.getLoginError(65, 2131593982);
                            this.field390 = null;
                            return;
                        }
                        else {
                            final class20 ck = class18.ck(this.field390, -2049891010);
                            if (ck.method79(-869061222) != 200) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                class315.getLoginError(65, 1531750138);
                                this.field390 = null;
                                return;
                            }
                            else {
                                Client.field391 = 0;
                                final class437 class437 = new class437(ck.method81(490234131));
                                try {
                                    ModeWhere.field3571 = class437.hj(class437, -288365426).getString("access_token");
                                    TileItem.field1079 = class437.hj(class437, -288365426).getString("refresh_token");
                                    oc(-1);
                                }
                                catch (Exception ex3) {
                                    class387.RunException_sendStackTrace("Error parsing tokens", ex3, (byte)8);
                                    class315.getLoginError(65, 651584964);
                                    this.field390 = null;
                                    return;
                                }
                            }
                        }
                    }
                    yv(this, ModeWhere.field3571, 1446006608);
                    class284.method1595(20, 1710303007);
                }
                if (20 == Client.loginState * 572310033) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    Label_1393: {
                        if (null != this.field400) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            if (!this.field400.isDone()) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                return;
                            }
                            else if (this.field400.isCancelled()) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                class315.getLoginError(65, 1564313775);
                                this.field400 = null;
                                return;
                            }
                            else {
                                try {
                                    final OtlTokenResponse otlTokenResponse = this.field400.get();
                                    if (otlTokenResponse.isSuccess()) {
                                        this.field396 = otlTokenResponse.getToken();
                                        this.field400 = null;
                                        break Label_1393;
                                    }
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                    class315.getLoginError(65, 176484993);
                                    this.field400 = null;
                                    return;
                                }
                                catch (Exception ex4) {
                                    class387.RunException_sendStackTrace(null, ex4, (byte)8);
                                    class315.getLoginError(65, -360120256);
                                    this.field400 = null;
                                    return;
                                }
                            }
                        }
                        if (null == this.field410) {
                            class315.getLoginError(65, 116697924);
                            return;
                        }
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        if (!this.field410.method66(-2084770197)) {
                            return;
                        }
                        if (class18.jm(this.field410, (byte)58)) {
                            if (n != -564344594) {
                                return;
                            }
                            class387.RunException_sendStackTrace(this.field410.method65(751676448), null, (byte)8);
                            class315.getLoginError(65, 592414220);
                            this.field410 = null;
                            return;
                        }
                        else {
                            final class20 ck2 = class18.ck(this.field410, -1834092679);
                            if (ck2.method79(-724528966) != 200) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                class387.RunException_sendStackTrace("Response code: " + ck2.method79(-1826524093) + "Response body: " + ck2.method81(1415778501), null, (byte)8);
                                class315.getLoginError(65, 755139976);
                                this.field410 = null;
                                return;
                            }
                            else {
                                final List list = class20.cz(ck2, -1956902698).get("Content-Type");
                                Label_1376: {
                                    if (null != list) {
                                        if (n != -564344594) {
                                            throw new IllegalStateException();
                                        }
                                        if (list.contains(class435.mo(class435.field3823, 797480377))) {
                                            if (n != -564344594) {
                                                throw new IllegalStateException();
                                            }
                                            try {
                                                this.field396 = new JSONObject(ck2.method81(182168434)).getString("token");
                                                break Label_1376;
                                            }
                                            catch (JSONException ex5) {
                                                class387.RunException_sendStackTrace(null, (Throwable)ex5, (byte)8);
                                                class315.getLoginError(65, 504072277);
                                                this.field410 = null;
                                                return;
                                            }
                                        }
                                    }
                                    this.field396 = ck2.method81(294592141);
                                }
                                this.field410 = null;
                            }
                        }
                    }
                    Client.field391 = 0;
                    class284.method1595(1, -2115518072);
                }
                if (572310033 * Client.loginState == 1) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (null == class1.socketTask) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        class1.socketTask = Client.af.newSocketTask(UserComparator8.worldHost, ItemContainer.currentPort * -1275160227, -1731609371);
                    }
                    if (class1.socketTask.status == 2) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        throw new IOException();
                    }
                    else if (1 == class1.socketTask.status) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        abstractSocket = class186.method1008((Socket)class1.socketTask.result, 40000, 5000, -1524300276);
                        PacketWriter.ir(Client.packetWriter, abstractSocket, (byte)1);
                        class1.socketTask = null;
                        class284.method1595(2, 192643507);
                    }
                }
                if (Client.loginState * 572310033 == 2) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    PacketWriter.kg(Client.packetWriter, 1845394626);
                    final PacketBufferNode method2430 = class478.method2430((short)(-11844));
                    method2430.packetBuffer.bf(537668749 * LoginPacket.field2705.id, (byte)10);
                    Client.packetWriter.addNode(method2430, 414135591);
                    PacketWriter.ok(Client.packetWriter, 421941662);
                    packetBuffer.at = 0;
                    class284.method1595(3, -1907351604);
                }
                if (3 == Client.loginState * 572310033) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (null != class28.pcmPlayer0) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        class28.pcmPlayer0.method228(-1976746918);
                    }
                    if (null != HorizontalAlignment.pcmPlayer1) {
                        if (n != -564344594) {
                            return;
                        }
                        HorizontalAlignment.pcmPlayer1.method228(-1976746918);
                    }
                    if (abstractSocket.isAvailable(1, 1063469226)) {
                        if (n != -564344594) {
                            return;
                        }
                        final int unsignedByte = abstractSocket.readUnsignedByte(-591957582);
                        if (null != class28.pcmPlayer0) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            class28.pcmPlayer0.method228(-1976746918);
                        }
                        if (null != HorizontalAlignment.pcmPlayer1) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            HorizontalAlignment.pcmPlayer1.method228(-1976746918);
                        }
                        if (unsignedByte != 0) {
                            if (n != -564344594) {
                                return;
                            }
                            class315.getLoginError(unsignedByte, 937025921);
                            return;
                        }
                        else {
                            packetBuffer.at = 0;
                            class284.method1595(4, 332767121);
                        }
                    }
                }
                if (572310033 * Client.loginState == 4) {
                    if (n != -564344594) {
                        return;
                    }
                    if (packetBuffer.at * -1633313603 < 8) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        int available = abstractSocket.available(-1612671788);
                        if (available > 8 - packetBuffer.at * -1633313603) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            available = 8 - packetBuffer.at * -1633313603;
                        }
                        if (available > 0) {
                            if (n != -564344594) {
                                return;
                            }
                            abstractSocket.read(packetBuffer.al, -1633313603 * packetBuffer.at, available, -2106093590);
                            final PacketBuffer packetBuffer2 = packetBuffer;
                            packetBuffer2.at += available * -1516355947;
                        }
                    }
                    if (8 == packetBuffer.at * -1633313603) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        packetBuffer.at = 0;
                        GrandExchangeEvent.field3524 = Buffer.ks(packetBuffer, (byte)1) * 6538327643922962445L;
                        class284.method1595(5, 1616959372);
                    }
                }
                if (5 == 572310033 * Client.loginState) {
                    if (n != -564344594) {
                        return;
                    }
                    Client.packetWriter.packetBuffer.at = 0;
                    PacketWriter.kg(Client.packetWriter, 1721773043);
                    final PacketBuffer packetBuffer3 = new PacketBuffer(500);
                    final int[] field3027 = { class174.secureRandom.nextInt(), class174.secureRandom.nextInt(), class174.secureRandom.nextInt(), class174.secureRandom.nextInt() };
                    packetBuffer3.at = 0;
                    packetBuffer3.bf(1, (byte)80);
                    packetBuffer3.ba(field3027[0], -2081835031);
                    packetBuffer3.ba(field3027[1], -2081835031);
                    packetBuffer3.ba(field3027[2], -2081835031);
                    packetBuffer3.ba(field3027[3], -2081835031);
                    packetBuffer3.bl(7290179413469624005L * GrandExchangeEvent.field3524);
                    if (Client.gameState * -1275976559 == 40) {
                        packetBuffer3.ba(Huffman.field3027[0], -2081835031);
                        packetBuffer3.ba(Huffman.field3027[1], -2081835031);
                        packetBuffer3.ba(Huffman.field3027[2], -2081835031);
                        packetBuffer3.ba(Huffman.field3027[3], -2081835031);
                    }
                    else {
                        if (50 == Client.gameState * -1275976559) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            packetBuffer3.bf(class135.field1303.rsOrdinal(1871861176), (byte)14);
                            packetBuffer3.ba(ByteArrayPool.field3668 * -431815809, -2081835031);
                        }
                        else {
                            packetBuffer3.bf(Client.field394.rsOrdinal(441636341), (byte)91);
                            switch (Client.field394.field1304 * 1915854149) {
                                case 1:
                                case 3: {
                                    Buffer.gi(packetBuffer3, 1750214827 * class204.field1846, -968749381);
                                    final PacketBuffer packetBuffer4 = packetBuffer3;
                                    packetBuffer4.at -= 1516355947;
                                    break;
                                }
                                case 0: {
                                    final PacketBuffer packetBuffer5 = packetBuffer3;
                                    packetBuffer5.at -= 1770456492;
                                    break;
                                }
                                case 2: {
                                    packetBuffer3.ba(class20.clientPreferences.method579(Login.Login_username, (byte)4), -2081835031);
                                    break;
                                }
                            }
                        }
                        if (Client.field395.method2558(1048533652)) {
                            if (n != -564344594) {
                                return;
                            }
                            packetBuffer3.bf(class493.field4094.rsOrdinal(204054974), (byte)6);
                            packetBuffer3.ce(this.field396, -1606861733);
                        }
                        else {
                            packetBuffer3.bf(class493.field4098.rsOrdinal(1803853368), (byte)44);
                            packetBuffer3.ce(Login.Login_password, -1489200247);
                        }
                    }
                    packetBuffer3.dz(class70.field726, class70.field727, 1968042618);
                    Huffman.field3027 = field3027;
                    final PacketBufferNode method2431 = class478.method2430((short)(-8688));
                    method2431.packetBuffer.at = 0;
                    if (40 == Client.gameState * -1275976559) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        method2431.packetBuffer.bf(537668749 * LoginPacket.RECONNECT_LOGIN_CONNECTION.id, (byte)94);
                    }
                    else {
                        method2431.packetBuffer.bf(537668749 * LoginPacket.NEW_LOGIN_CONNECTION.id, (byte)25);
                    }
                    method2431.packetBuffer.cq(0, (byte)38);
                    final int n2 = method2431.packetBuffer.at * -1633313603;
                    method2431.packetBuffer.ba(213, -2081835031);
                    method2431.packetBuffer.ba(1, -2081835031);
                    method2431.packetBuffer.bf(Client.clientType * -749752677, (byte)63);
                    method2431.packetBuffer.bf(Client.field363 * 838232771, (byte)7);
                    method2431.packetBuffer.bf(0, (byte)29);
                    method2431.packetBuffer.cs(packetBuffer3.al, 0, packetBuffer3.at * -1633313603, (byte)127);
                    final int n3 = method2431.packetBuffer.at * -1633313603;
                    method2431.packetBuffer.ce(Login.Login_username, -1621485570);
                    final PacketBuffer packetBuffer6 = method2431.packetBuffer;
                    final boolean b = (Client.isResizable ? 1 : 0) << 1 != 0;
                    boolean b2;
                    if (Client.isLowDetail) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        b2 = true;
                    }
                    else {
                        b2 = false;
                    }
                    packetBuffer6.bf((int)((b | b2) ? 1 : 0), (byte)38);
                    method2431.packetBuffer.cq(Client.aj * -1687260435, (byte)(-9));
                    method2431.packetBuffer.cq(1658005443 * class262.canvasHeight, (byte)(-45));
                    class383.method2086(method2431.packetBuffer, (byte)57);
                    method2431.packetBuffer.ce(class108.param9, -2035653877);
                    method2431.packetBuffer.ba(1640118701 * TriBool.field3738, -2081835031);
                    final Buffer buffer = new Buffer(PlatformInfo.il(UserComparator10.platformInfo, (byte)70));
                    UserComparator10.platformInfo.write(buffer, (byte)15);
                    method2431.packetBuffer.cs(buffer.array, 0, buffer.array.length, (byte)114);
                    method2431.packetBuffer.bf(Client.clientType * -749752677, (byte)28);
                    method2431.packetBuffer.ba(0, -2081835031);
                    method2431.packetBuffer.el(DevicePcmPlayerProvider.field67.bk * -159523507, -437883978);
                    method2431.packetBuffer.el(-159523507 * GrandExchangeOfferUnitPriceComparator.archive18.bk, -437883978);
                    method2431.packetBuffer.dy(GrandExchangeOfferTotalQuantityComparator.archive9.bk * -159523507, (byte)34);
                    method2431.packetBuffer.es(class452.archive8.bk * -159523507, -604065252);
                    method2431.packetBuffer.dy(-159523507 * class126.archive15.bk, (byte)46);
                    method2431.packetBuffer.es(-159523507 * NetFileRequest.archive10.bk, -604065252);
                    method2431.packetBuffer.ba(class399.archive6.bk * -159523507, -2081835031);
                    method2431.packetBuffer.es(class85.archive2.bk * -159523507, -604065252);
                    method2431.packetBuffer.es(class85.archive4.bk * -159523507, -604065252);
                    method2431.packetBuffer.dy(-159523507 * class28.archive19.bk, (byte)(-48));
                    method2431.packetBuffer.es(-159523507 * class230.archive14.bk, -604065252);
                    method2431.packetBuffer.el(class128.archive13.bk * -159523507, -437883978);
                    method2431.packetBuffer.el(WorldMapLabelSize.field2285.bk * -159523507, -437883978);
                    method2431.packetBuffer.es(-159523507 * FloorUnderlayDefinition.archive11.bk, -604065252);
                    method2431.packetBuffer.dy(-159523507 * class168.archive17.bk, (byte)(-96));
                    method2431.packetBuffer.es(-159523507 * class195.field1645.bk, -604065252);
                    method2431.packetBuffer.es(-159523507 * GameBuild.archive7.bk, -604065252);
                    method2431.packetBuffer.el(-159523507 * class205.archive20.bk, -437883978);
                    method2431.packetBuffer.el(0, -437883978);
                    method2431.packetBuffer.dy(-159523507 * class426.field3811.bk, (byte)57);
                    method2431.packetBuffer.el(class126.archive12.bk * -159523507, -437883978);
                    method2431.packetBuffer.dt(field3027, n3, -1633313603 * method2431.packetBuffer.at, 383031129);
                    method2431.packetBuffer.ca(method2431.packetBuffer.at * -1633313603 - n2, -1085915697);
                    Client.packetWriter.addNode(method2431, 414135591);
                    PacketWriter.ok(Client.packetWriter, 421941662);
                    Client.packetWriter.isaacCipher = new IsaacCipher(field3027);
                    final int[] array = new int[4];
                    for (int i = 0; i < 4; ++i) {
                        array[i] = 50 + field3027[i];
                    }
                    packetBuffer.newIsaacCipher(array, (byte)(-32));
                    class284.method1595(6, 1525855251);
                }
                Label_4031: {
                    if (6 == Client.loginState * 572310033) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        if (abstractSocket.available(320257611) > 0) {
                            final int unsignedByte2 = abstractSocket.readUnsignedByte(-591957582);
                            if (unsignedByte2 == 61) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                boolean field3028 = false;
                                Label_3727: {
                                    if (1 == abstractSocket.available(-999313941)) {
                                        if (n != -564344594) {
                                            throw new IllegalStateException();
                                        }
                                        if (abstractSocket.readUnsignedByte(-591957582) == 1) {
                                            if (n != -564344594) {
                                                throw new IllegalStateException();
                                            }
                                            field3028 = true;
                                            break Label_3727;
                                        }
                                    }
                                    field3028 = false;
                                }
                                WorldMapSectionType.field2384 = field3028;
                                class284.method1595(5, -1887341840);
                            }
                            if (unsignedByte2 == 21) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                if (20 == -1275976559 * Client.gameState) {
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                    class284.method1595(12, -1513753327);
                                    break Label_4031;
                                }
                            }
                            if (unsignedByte2 == 2) {
                                if (n != -564344594) {
                                    return;
                                }
                                class284.method1595(14, -392983286);
                            }
                            else {
                                if (15 == unsignedByte2) {
                                    if (n != -564344594) {
                                        return;
                                    }
                                    if (Client.gameState * -1275976559 == 40) {
                                        if (n != -564344594) {
                                            throw new IllegalStateException();
                                        }
                                        Client.packetWriter.serverPacketLength = -1873812295;
                                        class284.method1595(19, -1738759689);
                                        break Label_4031;
                                    }
                                }
                                if (64 == unsignedByte2) {
                                    class284.method1595(10, 1223055203);
                                }
                                else {
                                    if (23 == unsignedByte2) {
                                        if (n != -564344594) {
                                            throw new IllegalStateException();
                                        }
                                        if (Client.field392 * -858790111 < 1) {
                                            if (n != -564344594) {
                                                throw new IllegalStateException();
                                            }
                                            Client.field392 += 494296289;
                                            class284.method1595(0, 1559718865);
                                            break Label_4031;
                                        }
                                    }
                                    if (29 == unsignedByte2) {
                                        if (n != -564344594) {
                                            return;
                                        }
                                        class284.method1595(17, 1806887053);
                                    }
                                    else {
                                        if (69 != unsignedByte2) {
                                            class315.getLoginError(unsignedByte2, 618284248);
                                            return;
                                        }
                                        if (n != -564344594) {
                                            return;
                                        }
                                        class284.method1595(7, 2098744923);
                                    }
                                }
                            }
                        }
                    }
                }
                if (572310033 * Client.loginState == 7 && abstractSocket.available(336462119) >= 2) {
                    if (n != -564344594) {
                        return;
                    }
                    abstractSocket.read(packetBuffer.al, 0, 2, -2106093590);
                    packetBuffer.at = 0;
                    class13.field43 = packetBuffer.cl(-261880295) * -1251228575;
                    class284.method1595(8, 558162867);
                }
                if (572310033 * Client.loginState == 8) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(46886299) >= 935976865 * class13.field43) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        packetBuffer.at = 0;
                        abstractSocket.read(packetBuffer.al, packetBuffer.at * -1633313603, class13.field43 * 935976865, -2106093590);
                        final class6 class438 = (new class6[] { class6.field9 })[Buffer.ra(packetBuffer, (byte)7)];
                        try {
                            this.field421 = new class7(packetBuffer, UserComparator4.compare_bridged(class438, 502312663));
                            class284.method1595(9, 767224341);
                        }
                        catch (Exception ex7) {
                            class315.getLoginError(22, 905296514);
                            return;
                        }
                    }
                }
                if (Client.loginState * 572310033 == 9 && this.field421.method25(-571674084)) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    this.field409 = this.field421.method22(1213555586);
                    this.field421.method21((byte)47);
                    this.field421 = null;
                    if (null == this.field409) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        class315.getLoginError(22, 172217791);
                        return;
                    }
                    else {
                        PacketWriter.kg(Client.packetWriter, 244138903);
                        final PacketBufferNode method2432 = class478.method2430((short)(-8686));
                        method2432.packetBuffer.bf(LoginPacket.field2700.id * 537668749, (byte)9);
                        method2432.packetBuffer.cq(-1633313603 * this.field409.offset, (byte)(-32));
                        method2432.packetBuffer.cc(this.field409, 1254495951);
                        Client.packetWriter.addNode(method2432, 414135591);
                        PacketWriter.ok(Client.packetWriter, 421941662);
                        this.field409 = null;
                        class284.method1595(6, -878966485);
                    }
                }
                if (10 == 572310033 * Client.loginState) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(-1621465029) > 0) {
                        DevicePcmPlayerProvider.field68 = abstractSocket.readUnsignedByte(-591957582) * 1844861787;
                        class284.method1595(11, 859729740);
                    }
                }
                if (Client.loginState * 572310033 == 11) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(1900748870) >= 1874484435 * DevicePcmPlayerProvider.field68) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        abstractSocket.read(packetBuffer.al, 0, DevicePcmPlayerProvider.field68 * 1874484435, -2106093590);
                        packetBuffer.at = 0;
                        class284.method1595(6, 1653358594);
                    }
                }
                if (12 == Client.loginState * 572310033) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(1729373232) > 0) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        Client.field393 = (abstractSocket.readUnsignedByte(-591957582) + 3) * -956596276;
                        class284.method1595(13, -1461114317);
                    }
                }
                if (Client.loginState * 572310033 == 13) {
                    Client.field391 = 0;
                    class205.method1137(Strings.bf, Strings.bq, Client.field393 * 1922908789 / 60 + Strings.ba, 406540757);
                    if ((Client.field393 += 2091844131) * 1922908789 <= 0) {
                        if (n != -564344594) {
                            return;
                        }
                        class284.method1595(0, 841656463);
                    }
                    return;
                }
                if (Client.loginState * 572310033 == 14) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(-255900758) >= 1) {
                        if (n != -564344594) {
                            return;
                        }
                        class7.playerUUIDLength = abstractSocket.readUnsignedByte(-591957582) * 296961217;
                        class284.method1595(15, -1805729817);
                    }
                }
                Label_5504: {
                    if (15 == 572310033 * Client.loginState) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        if (abstractSocket.available(-875149616) >= class7.playerUUIDLength * -1894298815) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            boolean b3;
                            if (abstractSocket.readUnsignedByte(-591957582) == 1) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                b3 = true;
                            }
                            else {
                                b3 = false;
                            }
                            final boolean b4 = b3;
                            abstractSocket.read(packetBuffer.al, 0, 4, -2106093590);
                            packetBuffer.at = 0;
                            if (b4) {
                                if (n != -564344594) {
                                    return;
                                }
                                ClientPreferences.cz(class20.clientPreferences, Login.Login_username, packetBuffer.readByteIsaac(-2032717653) << 24 | packetBuffer.readByteIsaac(-2131392998) << 16 | packetBuffer.readByteIsaac(-2058542015) << 8 | packetBuffer.readByteIsaac(-2070759650), (byte)66);
                            }
                            if (Client.Login_isUsernameRemembered) {
                                if (n != -564344594) {
                                    return;
                                }
                                class20.clientPreferences.setUsernameToRemember(Login.Login_username, -472730554);
                            }
                            else {
                                class20.clientPreferences.setUsernameToRemember((String)null, -472730554);
                            }
                            class100.savePreferences((byte)(-16));
                            Client.staffModLevel = abstractSocket.readUnsignedByte(-591957582) * -345023019;
                            boolean playerMod;
                            if (abstractSocket.readUnsignedByte(-591957582) == 1) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                playerMod = true;
                            }
                            else {
                                playerMod = false;
                            }
                            Client.playerMod = playerMod;
                            Client.localPlayerIndex = abstractSocket.readUnsignedByte(-591957582) * 255869677;
                            Client.localPlayerIndex = 255869677 * (Client.localPlayerIndex * -549033243 << 8);
                            Client.localPlayerIndex += abstractSocket.readUnsignedByte(-591957582) * 255869677;
                            Client.isMembers = abstractSocket.readUnsignedByte(-591957582) * 361347949;
                            abstractSocket.read(packetBuffer.al, 0, 8, -2106093590);
                            packetBuffer.at = 0;
                            this.accountHash = Buffer.ks(packetBuffer, (byte)1) * 714003291813872507L;
                            this.wc(-1);
                            if (-1894298815 * class7.playerUUIDLength >= 29) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                abstractSocket.read(packetBuffer.al, 0, 8, -2106093590);
                                packetBuffer.at = 0;
                                Client.playerUUID = Buffer.ks(packetBuffer, (byte)1) * 1369385558963036297L;
                            }
                            abstractSocket.read(packetBuffer.al, 0, 1, -2106093590);
                            packetBuffer.at = 0;
                            final ServerPacket[] serverPacket_values = PacketBufferNode.ServerPacket_values(-1731859764);
                            final int ws = PacketBuffer.ws(packetBuffer, 697946111);
                            if (ws >= 0) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                if (ws < serverPacket_values.length) {
                                    Client.packetWriter.field1133 = serverPacket_values[ws];
                                    Client.packetWriter.serverPacketLength = Client.packetWriter.field1133.id * -1975731211;
                                    abstractSocket.read(packetBuffer.al, 0, 2, -2106093590);
                                    packetBuffer.at = 0;
                                    Client.packetWriter.serverPacketLength = packetBuffer.cl(389166797) * 1873812295;
                                    try {
                                        class26.method112(ScriptFrame.client, "zap", (byte)(-43));
                                    }
                                    catch (Throwable t2) {}
                                    class284.method1595(16, 447694848);
                                    break Label_5504;
                                }
                                if (n != -564344594) {
                                    return;
                                }
                            }
                            throw new IOException(ws + " " + packetBuffer.at * -1633313603);
                        }
                    }
                }
                if (572310033 * Client.loginState == 16) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    if (abstractSocket.available(-2074992714) >= 889658999 * Client.packetWriter.serverPacketLength) {
                        if (n != -564344594) {
                            return;
                        }
                        packetBuffer.at = 0;
                        abstractSocket.read(packetBuffer.al, 0, 889658999 * Client.packetWriter.serverPacketLength, -2106093590);
                        Client.timer.method2097(1585437622);
                        Client.mouseLastLastPressedTimeMillis = 3648848592458615261L;
                        UserComparator6.mouseRecorder.index = 0;
                        AbstractByteArrayCopier.hasFocus = true;
                        Client.hadFocus = true;
                        Client.timeOfPreviousKeyPress = -4061967902176514943L;
                        class36.reflectionChecks = new IterableNodeDeque();
                        PacketWriter.kg(Client.packetWriter, 1170137923);
                        Client.packetWriter.packetBuffer.at = 0;
                        Client.packetWriter.field1133 = null;
                        Client.packetWriter.serverPacket = null;
                        Client.packetWriter.field1138 = null;
                        Client.packetWriter.field1139 = null;
                        Client.packetWriter.serverPacketLength = 0;
                        Client.packetWriter.field1136 = 0;
                        Client.rebootTimer = 0;
                        Client.logoutTimer = 0;
                        Client.hintArrowType = 0;
                        Client.menuOptionsCount = 0;
                        un(-1);
                        Client.isMenuOpen = false;
                        MouseHandler.MouseHandler_idleCycles = 0;
                        ww(-1);
                        class162.method912((byte)68);
                        Client.isItemSelected = 0;
                        Client.isSpellSelected = false;
                        Client.soundEffectCount = 0;
                        ua(-1);
                        Client.camAngleY = 0;
                        Client.oculusOrbState = 0;
                        class132.field1277 = null;
                        Client.minimapState = 0;
                        Client.field596 = 1715437485;
                        Client.destinationX = 0;
                        Client.destinationY = 0;
                        Client.playerAttackOption = AttackOption.AttackOption_hidden;
                        Client.npcAttackOption = AttackOption.AttackOption_hidden;
                        Client.npcCount = 0;
                        Players.Players_count = 0;
                        for (int j = 0; j < 2048; ++j) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            Players.cachedAppearanceBuffer[j] = null;
                            Players.playerMovementSpeeds[j] = MoveSpeed.WALK;
                        }
                        for (int k = 0; k < 2048; ++k) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            Client.players[k] = null;
                            js5Error(k);
                        }
                        for (int l = 0; l < 65536; ++l) {
                            if (n != -564344594) {
                                return;
                            }
                            Client.npcs[l] = null;
                            method369(l);
                        }
                        Client.combatTargetPlayerIndex = -1035820595;
                        NodeDeque.la(Client.projectiles);
                        NodeDeque.la(Client.graphicsObjects);
                        for (int n4 = 0; n4 < 4; ++n4) {
                            for (int n5 = 0; n5 < 104; ++n5) {
                                for (int n6 = 0; n6 < 104; ++n6) {
                                    if (n != -564344594) {
                                        return;
                                    }
                                    Client.groundItems[n4][n5][n6] = null;
                                }
                            }
                        }
                        Client.pendingSpawns = new NodeDeque();
                        World.friendSystem.clear((byte)108);
                        for (int n7 = 0; n7 < VarpDefinition.field1475 * -774485467; ++n7) {
                            if (n != -564344594) {
                                return;
                            }
                            if (GraphicsDefaults.decode(n7, -1565571529) != null) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                Varps.Varps_temp[n7] = 0;
                                Varps.Varps_main[n7] = 0;
                                ye(n7);
                            }
                        }
                        class373.varcs.write(-39979061);
                        Client.followerIndex = 1296642255;
                        if (Client.rootInterface * -896157613 != -1) {
                            if (n != -564344594) {
                                return;
                            }
                            final int n8 = Client.rootInterface * -896157613;
                            if (n8 == -1) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                            }
                            else if (!class264.Widget_loadedInterfaces[n8]) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                            }
                            else {
                                UserComparator3.Widget_archive.clearFilesGroup(n8, (byte)(-8));
                                if (VerticalAlignment.Widget_interfaceComponents[n8] == null) {
                                    if (n != -564344594) {
                                        throw new IllegalStateException();
                                    }
                                }
                                else {
                                    for (int n9 = 0; n9 < VerticalAlignment.Widget_interfaceComponents[n8].length; ++n9) {
                                        if (n != -564344594) {
                                            throw new IllegalStateException();
                                        }
                                        if (VerticalAlignment.Widget_interfaceComponents[n8][n9] != null) {
                                            if (n != -564344594) {
                                                throw new IllegalStateException();
                                            }
                                            VerticalAlignment.Widget_interfaceComponents[n8][n9] = null;
                                        }
                                    }
                                    VerticalAlignment.Widget_interfaceComponents[n8] = null;
                                    class264.Widget_loadedInterfaces[n8] = false;
                                }
                            }
                        }
                        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); null != interfaceParent; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            class357.closeInterface(interfaceParent, true, 1366698381);
                        }
                        Client.rootInterface = 32945189;
                        Client.interfaceParents = new NodeHashTable(8);
                        Client.meslayerContinueWidget = null;
                        Client.menuOptionsCount = 0;
                        un(-1);
                        Client.isMenuOpen = false;
                        Client.playerAppearance.method1693(null, null, new int[] { 0, 0, 0, 0, 0 }, 0, -1, 1564496359);
                        for (int n10 = 0; n10 < 8; ++n10) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            Client.playerMenuActions[n10] = null;
                            lg(n10);
                            Client.playerOptionsPriorities[n10] = false;
                        }
                        ItemContainer.itemContainers = new NodeHashTable(32);
                        Client.isLoading = true;
                        for (int n11 = 0; n11 < 100; ++n11) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            Client.field573[n11] = true;
                        }
                        class1.method4(-1303226610);
                        UserComparator5.friendsChat = null;
                        lv(-1);
                        ItemComposition.guestClanSettings = null;
                        Arrays.fill(Client.currentClanSettings, null);
                        MouseHandler.guestClanChannel = null;
                        ne(-1);
                        Arrays.fill(Client.currentClanChannels, null);
                        for (int n12 = 0; n12 < 8; ++n12) {
                            if (n != -564344594) {
                                return;
                            }
                            Client.grandExchangeOffers[n12] = new GrandExchangeOffer();
                            ms(n12);
                        }
                        class375.grandExchangeEvents = null;
                        class422.updatePlayer(packetBuffer, (byte)(-29));
                        class28.timeOfPreviousKeyPress = -1006050753;
                        class127.loadRegions(false, packetBuffer, (byte)24);
                        Client.packetWriter.field1133 = null;
                    }
                }
                else {
                    if (572310033 * Client.loginState == 17) {
                        if (n != -564344594) {
                            return;
                        }
                        if (abstractSocket.available(1003851872) >= 2) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            packetBuffer.at = 0;
                            abstractSocket.read(packetBuffer.al, 0, 2, -2106093590);
                            packetBuffer.at = 0;
                            class4.field6 = packetBuffer.cl(-945349318) * -76488733;
                            class284.method1595(18, 2145594510);
                        }
                    }
                    if (572310033 * Client.loginState == 18) {
                        if (n != -564344594) {
                            return;
                        }
                        if (abstractSocket.available(1944525908) >= class4.field6 * -1182573109) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            packetBuffer.at = 0;
                            abstractSocket.read(packetBuffer.al, 0, class4.field6 * -1182573109, -2106093590);
                            packetBuffer.at = 0;
                            class205.method1137(packetBuffer.cw((byte)0), packetBuffer.cw((byte)0), packetBuffer.cw((byte)0), -230338766);
                            class138.updateGameState(10, 1638143142);
                            if (Client.field395.method2558(873657375)) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                class129.method763(9, (byte)54);
                            }
                        }
                    }
                    if (19 == Client.loginState * 572310033) {
                        if (n != -564344594) {
                            throw new IllegalStateException();
                        }
                        if (889658999 * Client.packetWriter.serverPacketLength == -1) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            if (abstractSocket.available(1934934498) < 2) {
                                if (n != -564344594) {
                                    return;
                                }
                                return;
                            }
                            else {
                                abstractSocket.read(packetBuffer.al, 0, 2, -2106093590);
                                packetBuffer.at = 0;
                                Client.packetWriter.serverPacketLength = packetBuffer.cl(-2102235653) * 1873812295;
                            }
                        }
                        if (abstractSocket.available(1694999609) < Client.packetWriter.serverPacketLength * 889658999) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                        }
                        else {
                            abstractSocket.read(packetBuffer.al, 0, 889658999 * Client.packetWriter.serverPacketLength, -2106093590);
                            packetBuffer.at = 0;
                            final int n13 = Client.packetWriter.serverPacketLength * 889658999;
                            Client.timer.method2099(2129657232);
                            class121.method724((byte)15);
                            class422.updatePlayer(packetBuffer, (byte)(-98));
                            if (packetBuffer.at * -1633313603 == n13) {
                                return;
                            }
                            if (n != -564344594) {
                                return;
                            }
                            throw new RuntimeException();
                        }
                    }
                    else {
                        Client.field391 -= 1982717453;
                        if (Client.field391 * -1687986373 > 2000) {
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            if (-858790111 * Client.field392 >= 1) {
                                class315.getLoginError(-3, 1976026860);
                                return;
                            }
                            if (n != -564344594) {
                                throw new IllegalStateException();
                            }
                            if (FriendsChat.worldPort * 1119961125 == ItemContainer.currentPort * -1275160227) {
                                if (n != -564344594) {
                                    throw new IllegalStateException();
                                }
                                ItemContainer.currentPort = class127.js5Port * 293228307;
                            }
                            else {
                                ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
                            }
                            Client.field392 += 494296289;
                            class284.method1595(0, -103031568);
                        }
                    }
                }
            }
            catch (IOException ex8) {
                if (Client.field392 * -858790111 >= 1) {
                    class315.getLoginError(-2, 104097029);
                    return;
                }
                if (n != -564344594) {
                    throw new IllegalStateException();
                }
                if (1119961125 * FriendsChat.worldPort == ItemContainer.currentPort * -1275160227) {
                    if (n != -564344594) {
                        throw new IllegalStateException();
                    }
                    ItemContainer.currentPort = 293228307 * class127.js5Port;
                }
                else {
                    ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
                }
                Client.field392 += 494296289;
                class284.method1595(0, -1344957864);
            }
        }
        catch (RuntimeException ex6) {
            throw HealthBar.get(ex6, "client.hl(" + ')');
        }
    }
    
    public int[] mb() {
        return Client.changedVarps;
    }
    
    static final void sg(final Actor actor, final int n) {
        Label_2200: {
            if (actor.exactMoveArrive1Cycle * -435598119 >= -1886224337 * Client.cycle) {
                final int max = Math.max(1, -435598119 * actor.exactMoveArrive1Cycle - -1886224337 * Client.cycle);
                final int n2 = -1883924352 * actor.field957 + actor.idleSequence * 1119756096;
                final int n3 = actor.idleSequence * 1119756096 + actor.movementSequence * -161749632;
                actor.walkBackSequence += (n2 - 1144428983 * actor.walkBackSequence) / max * -881028089;
                actor.field1005 += (n3 - -411750205 * actor.field1005) / max * 1193213931;
                actor.crawlLeftSequence = 0;
                actor.turnLeftSequence = -1369167919 * actor.sequence;
            }
            else if (actor.movementFrame * -1274841313 >= -1886224337 * Client.cycle) {
                boolean b = -1274841313 * actor.movementFrame == -1886224337 * Client.cycle || -1 == -1372355773 * actor.overheadTextCyclesRemaining || 1253892101 * actor.playerCycle != 0;
                if (!b) {
                    final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(actor.overheadTextCyclesRemaining * -1372355773, (byte)107);
                    b = (null == spotAnimationDefinition_get || spotAnimationDefinition_get.isCachedModelIdSet(1920748549) || 1 + 1356757385 * actor.pathLength > spotAnimationDefinition_get.frameLengths[actor.currentSequenceFrameIndex * -41215169]);
                }
                if (b) {
                    final int n4 = actor.movementFrame * -1274841313 - actor.exactMoveArrive1Cycle * -435598119;
                    final int n5 = Client.cycle * -1886224337 - actor.exactMoveArrive1Cycle * -435598119;
                    final int n6 = -1883924352 * actor.field957 + 1119756096 * actor.idleSequence;
                    final int n7 = -161749632 * actor.movementSequence + actor.idleSequence * 1119756096;
                    final int n8 = actor.idleSequence * 1119756096 + actor.orientation * 69929344;
                    final int n9 = actor.idleSequence * 1119756096 + -106117248 * actor.crawlSequence;
                    actor.walkBackSequence = -881028089 * ((n6 * (n4 - n5) + n8 * n5) / n4);
                    actor.field1005 = 1193213931 * ((n5 * n9 + (n4 - n5) * n7) / n4);
                }
                actor.crawlLeftSequence = 0;
                actor.turnLeftSequence = -1369167919 * actor.sequence;
                actor.field986 = actor.turnLeftSequence * 841550147;
            }
            else {
                actor.npcCycle = actor.sequenceFrameCycle * 1603478597;
                if (1134756167 * actor.field970 == 0) {
                    actor.crawlLeftSequence = 0;
                }
                else {
                    if (-1372355773 * actor.overheadTextCyclesRemaining != -1 && actor.playerCycle * 1253892101 == 0) {
                        final SequenceDefinition spotAnimationDefinition_get2 = ItemContainer.SpotAnimationDefinition_get(-1372355773 * actor.overheadTextCyclesRemaining, (byte)20);
                        if (actor.field1003 * -1181739279 > 0 && spotAnimationDefinition_get2.precedenceAnimating * 1069382699 == 0) {
                            actor.crawlLeftSequence -= 1610286357;
                            break Label_2200;
                        }
                        if (actor.field1003 * -1181739279 <= 0 && 0 == 1957040329 * spotAnimationDefinition_get2.priority) {
                            actor.crawlLeftSequence -= 1610286357;
                            break Label_2200;
                        }
                    }
                    final int n10 = actor.walkBackSequence * 1144428983;
                    final int n11 = actor.field1005 * -411750205;
                    final int n12 = 1119756096 * actor.idleSequence + 128 * actor.hitSplatTypes2[actor.field970 * 1134756167 - 1];
                    final int n13 = actor.pathX[actor.field970 * 1134756167 - 1] * 128 + 1119756096 * actor.idleSequence;
                    if (n10 < n12) {
                        if (n11 < n13) {
                            actor.turnLeftSequence = -398716160;
                        }
                        else if (n11 > n13) {
                            actor.turnLeftSequence = -558202624;
                        }
                        else {
                            actor.turnLeftSequence = -478459392;
                        }
                    }
                    else if (n10 > n12) {
                        if (n11 < n13) {
                            actor.turnLeftSequence = -239229696;
                        }
                        else if (n11 > n13) {
                            actor.turnLeftSequence = -79743232;
                        }
                        else {
                            actor.turnLeftSequence = -159486464;
                        }
                    }
                    else if (n11 < n13) {
                        actor.turnLeftSequence = -318972928;
                    }
                    else if (n11 > n13) {
                        actor.turnLeftSequence = 0;
                    }
                    final MoveSpeed moveSpeed = actor.pathTraversed[actor.field970 * 1134756167 - 1];
                    if (n12 - n10 > 256 || n12 - n10 < -256 || n13 - n11 > 256 || n13 - n11 < -256) {
                        actor.walkBackSequence = -881028089 * n12;
                        actor.field1005 = n13 * 1193213931;
                        actor.field970 -= 400971895;
                        if (actor.field1003 * -1181739279 > 0) {
                            actor.field1003 -= 1622809105;
                        }
                    }
                    else {
                        int n14 = -1751341433 * actor.turnLeftSequence - actor.field986 * -1703696531 & 0x7FF;
                        if (n14 > 1024) {
                            n14 -= 2048;
                        }
                        int n15 = actor.runSequence * 1648569641;
                        if (n14 >= -256 && n14 <= 256) {
                            n15 = 736907545 * actor.targetIndex;
                        }
                        else if (n14 >= 256 && n14 < 768) {
                            n15 = actor.recolourEndCycle * -1059657777;
                        }
                        else if (n14 >= -768 && n14 <= -256) {
                            n15 = -127994241 * actor.field985;
                        }
                        if (n15 == -1) {
                            n15 = 736907545 * actor.targetIndex;
                        }
                        actor.npcCycle = 327373721 * n15;
                        int n16 = 4;
                        int isClickable = 1;
                        if (actor instanceof NPC) {
                            isClickable = (((NPC)actor).definition.isClickable ? 1 : 0);
                        }
                        if (isClickable != 0) {
                            if (actor.field986 * -1703696531 != actor.turnLeftSequence * -1751341433 && actor.rotation * 1005900761 == -1 && 0 != 351748387 * actor.field993) {
                                n16 = 2;
                            }
                            if (actor.field970 * 1134756167 > 2) {
                                n16 = 6;
                            }
                            if (actor.field970 * 1134756167 > 3) {
                                n16 = 8;
                            }
                            if (actor.crawlLeftSequence * 1489558979 > 0 && 1134756167 * actor.field970 > 1) {
                                n16 = 8;
                                actor.crawlLeftSequence += 1610286357;
                            }
                        }
                        else {
                            if (1134756167 * actor.field970 > 1) {
                                n16 = 6;
                            }
                            if (actor.field970 * 1134756167 > 2) {
                                n16 = 8;
                            }
                            if (actor.crawlLeftSequence * 1489558979 > 0 && actor.field970 * 1134756167 > 1) {
                                n16 = 8;
                                actor.crawlLeftSequence += 1610286357;
                            }
                        }
                        if (moveSpeed == MoveSpeed.RUN) {
                            n16 <<= 1;
                        }
                        else if (moveSpeed == MoveSpeed.CRAWL) {
                            n16 >>= 1;
                        }
                        if (n16 >= 8) {
                            if (actor.npcCycle * -1302441815 == 736907545 * actor.targetIndex && actor.field984 * 1939789287 != -1) {
                                actor.npcCycle = actor.field984 * 863812623;
                            }
                            else if (-1302441815 * actor.npcCycle == 1648569641 * actor.runSequence && -1 != 793978951 * actor.x) {
                                actor.npcCycle = 538384239 * actor.x;
                            }
                            else if (-127994241 * actor.field985 == actor.npcCycle * -1302441815 && actor.walkLeftSequence * 1755337849 != -1) {
                                actor.npcCycle = actor.walkLeftSequence * -1205815471;
                            }
                            else if (actor.recolourEndCycle * -1059657777 == actor.npcCycle * -1302441815 && actor.field1006 * 802247051 != -1) {
                                actor.npcCycle = 2091568403 * actor.field1006;
                            }
                        }
                        else if (n16 <= 1) {
                            if (actor.targetIndex * 736907545 == actor.npcCycle * -1302441815 && -1254675467 * actor.runLeftSequence != -1) {
                                actor.npcCycle = actor.runLeftSequence * -560417683;
                            }
                            else if (actor.runSequence * 1648569641 == -1302441815 * actor.npcCycle && actor.field936 * 572220041 != -1) {
                                actor.npcCycle = actor.field936 * -630501663;
                            }
                            else if (-127994241 * actor.field985 == -1302441815 * actor.npcCycle && actor.walkSequence * -1312118043 != -1) {
                                actor.npcCycle = actor.walkSequence * 1773625821;
                            }
                            else if (-1302441815 * actor.npcCycle == actor.recolourEndCycle * -1059657777 && actor.walkRightSequence * -428343529 != -1) {
                                actor.npcCycle = -483333697 * actor.walkRightSequence;
                            }
                        }
                        if (n12 != n10 || n11 != n13) {
                            if (n10 < n12) {
                                actor.walkBackSequence += -881028089 * n16;
                                if (actor.walkBackSequence * 1144428983 > n12) {
                                    actor.walkBackSequence = -881028089 * n12;
                                }
                            }
                            else if (n10 > n12) {
                                actor.walkBackSequence -= -881028089 * n16;
                                if (1144428983 * actor.walkBackSequence < n12) {
                                    actor.walkBackSequence = n12 * -881028089;
                                }
                            }
                            if (n11 < n13) {
                                actor.field1005 += 1193213931 * n16;
                                if (-411750205 * actor.field1005 > n13) {
                                    actor.field1005 = 1193213931 * n13;
                                }
                            }
                            else if (n11 > n13) {
                                actor.field1005 -= 1193213931 * n16;
                                if (-411750205 * actor.field1005 < n13) {
                                    actor.field1005 = 1193213931 * n13;
                                }
                            }
                        }
                        if (actor.walkBackSequence * 1144428983 == n12 && actor.field1005 * -411750205 == n13) {
                            actor.field970 -= 400971895;
                            if (actor.field1003 * -1181739279 > 0) {
                                actor.field1003 -= 1622809105;
                            }
                        }
                    }
                }
            }
        }
        if (actor.walkBackSequence * 1144428983 < 128 || actor.field1005 * -411750205 < 128 || 1144428983 * actor.walkBackSequence >= 13184 || actor.field1005 * -411750205 >= 13184) {
            actor.overheadTextCyclesRemaining = 1690721941;
            actor.exactMoveArrive1Cycle = 0;
            actor.movementFrame = 0;
            actor.method533(-2004954088);
            actor.walkBackSequence = -1102445696 * actor.hitSplatTypes2[0] + -1606165824 * actor.idleSequence;
            actor.field1005 = actor.idleSequence * 254242752 + -1887439488 * actor.pathX[0];
            actor.method536((byte)57);
        }
        if (actor == MusicPatchNode.localPlayer && (1144428983 * actor.walkBackSequence < 1536 || -411750205 * actor.field1005 < 1536 || actor.walkBackSequence * 1144428983 >= 11776 || -411750205 * actor.field1005 >= 11776)) {
            actor.overheadTextCyclesRemaining = 1690721941;
            actor.exactMoveArrive1Cycle = 0;
            actor.movementFrame = 0;
            actor.method533(-2106017864);
            actor.walkBackSequence = -1102445696 * actor.hitSplatTypes2[0] + actor.idleSequence * -1606165824;
            actor.field1005 = actor.idleSequence * 254242752 + -1887439488 * actor.pathX[0];
            actor.method536((byte)108);
        }
        if (-1 != 1005900761 * actor.rotation) {
            final int n17 = 65536;
            Actor actor2;
            if (1005900761 * actor.rotation < n17) {
                actor2 = Client.npcs[actor.rotation * 1005900761];
            }
            else {
                actor2 = Client.players[actor.rotation * 1005900761 - n17];
            }
            if (null != actor2) {
                final int n18 = 1144428983 * actor.walkBackSequence - actor2.walkBackSequence * 1144428983;
                final int n19 = actor.field1005 * -411750205 - -411750205 * actor2.field1005;
                if (n18 != 0 || n19 != 0) {
                    actor.turnLeftSequence = ((int)(Math.atan2(n18, n19) * 325.94932345220167) & 0x7FF) * 385564471;
                }
            }
            else if (actor.false0) {
                actor.rotation = -1052277865;
                actor.false0 = false;
            }
        }
        if (0 == 1134756167 * actor.field970 || 1489558979 * actor.crawlLeftSequence > 0) {
            int n20 = -1;
            if (-714961113 * actor.runBackSequence != -1 && -1282076959 * actor.movementFrameCycle != -1) {
                final int n21 = actor.runBackSequence * -1320709248 - 1205837952 * WorldMapData_0.baseX + 64;
                final int n22 = -897093504 * actor.movementFrameCycle - -1473027968 * GameObject.baseY + 64;
                final int n23 = actor.walkBackSequence * 1144428983 - n21;
                final int n24 = -411750205 * actor.field1005 - n22;
                if (n23 != 0 || n24) {
                    n20 = ((int)(Math.atan2(n23, n24) * 325.94932345220167) & 0x7FF);
                }
            }
            else if (actor.field983 * -283165269 != -1) {
                n20 = -283165269 * actor.field983;
            }
            if (n20 != -1) {
                actor.turnLeftSequence = n20 * 385564471;
                if (actor.field938) {
                    actor.field986 = 841550147 * actor.turnLeftSequence;
                }
            }
            actor.method527(-2123302833);
        }
        final int n25 = -1751341433 * actor.turnLeftSequence - actor.field986 * -1703696531 & 0x7FF;
        if (n25 != 0) {
            actor.graphicsCount += 531854385;
            final int n26 = (n25 > 1024) ? -1 : 1;
            actor.field986 += n26 * (actor.field993 * 351748387) * -1228309915;
            boolean b2 = true;
            if (n25 < actor.field993 * 351748387 || n25 > 2048 - actor.field993 * 351748387) {
                actor.field986 = 841550147 * actor.turnLeftSequence;
                b2 = false;
            }
            if (actor.field993 * 351748387 > 0 && actor.npcCycle * -1302441815 == 1590591885 * actor.sequenceFrameCycle && (-1223990063 * actor.graphicsCount > 25 || b2)) {
                if (n26 == -1 && 1319769839 * actor.crawlRightSequence != -1) {
                    actor.npcCycle = actor.crawlRightSequence * -1570491945;
                }
                else if (n26 == 1 && 1796560353 * actor.exactMoveDirection != -1) {
                    actor.npcCycle = -1883552135 * actor.exactMoveDirection;
                }
                else {
                    actor.npcCycle = actor.targetIndex * 961712881;
                }
            }
            actor.field986 = -1228309915 * (actor.field986 * -1703696531 & 0x7FF);
        }
        else {
            if (actor.false0) {
                actor.rotation = -1052277865;
                actor.false0 = false;
            }
            actor.graphicsCount = 0;
        }
        NetFileRequest.method1876(actor, (byte)(-60));
    }
    
    @Override
    protected final void co() {
        class134.rsOrdinal(new int[] { 20, 260, 358075119 }, new int[] { 1119514837, -170892066, 500 }, -464061605);
        FriendsChat.worldPort = ((0 == -1274626977 * Client.gameBuild) ? 43594 : (40000 + -1329388315 * Client.worldId)) * -2080499100;
        class127.js5Port = 1637645999 * ((0 == Client.gameBuild * 1580506693) ? 443 : (50000 + -453810525 * Client.worldId));
        ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
        PlayerComposition.field2837 = class315.field2864;
        PlayerComposition.field2828 = class315.field2863;
        WorldMapIcon_0.field2359 = class315.field2865;
        class437.field3825 = class315.field2866;
        class14.urlRequester = new class108(this.field401, 213);
        this.ai((byte)(-65));
        this.av((byte)88);
        class123.mouseWheel = this.aa(1952762650);
        this.ah((class29)Client.field590, 0, (byte)1);
        this.ah((class29)Client.keyHandlerInstance, 1, (byte)(-10));
        WorldMapID.masterDisk = new ArchiveDisk(255, JagexCache.JagexCache_dat2File, JagexCache.JagexCache_idx255File, 500000);
        class20.clientPreferences = class205.vmethod3951(-1711886597);
        this.ay(1971547147);
        final String field167 = ReflectionCheck.field167;
        class31.field90 = this;
        if (field167 != null) {
            class31.field91 = field167;
        }
        Decimator.setWindowedMode(class20.clientPreferences.method577((byte)106), (byte)(-31));
        World.friendSystem = new FriendSystem(class70.loginType);
        this.field529 = new class14("tokenRequest", 1, 1);
    }
    
    public int co() {
        return Client.cycleCntr * -1583613347;
    }
    
    public Scene la() {
        return class31.scene;
    }
    
    static final void aea() {
        class124.method742((byte)30);
        if (null != UserComparator5.friendsChat) {
            UserComparator5.friendsChat.invalidateIgnoreds((byte)89);
        }
    }
    
    static final void adj() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2532, Client.packetWriter.isaacCipher, (short)(-2311)), 414135591);
        Interpreter.field704 = true;
        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
            if (0 == 614170186 * interfaceParent.type || interfaceParent.type * -1702664641 == 3) {
                class357.closeInterface(interfaceParent, true, -243035423);
            }
        }
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -1563959975);
            Client.meslayerContinueWidget = null;
        }
        Interpreter.field704 = false;
    }
    
    public FriendsList my() {
        final FriendSystem kp = this.kp();
        if (kp == null) {
            return null;
        }
        return kp.kb();
    }
    
    static void re(final SequenceDefinition sequenceDefinition, final int n, final int n2, final int n3) {
        if (-297150195 * Client.soundEffectCount >= 50 || class20.clientPreferences.method573(-1752434774) == 0) {
            return;
        }
        if (sequenceDefinition.animMayaFrameSounds != null && sequenceDefinition.animMayaFrameSounds.containsKey(n)) {
            class161.method908(sequenceDefinition.animMayaFrameSounds.get(n), n2, n3, 1864469872);
        }
    }
    
    public int[] qi() {
        return Client.soundEffectIds;
    }
    
    static final void qi() {
        Client.packetWriter.close(-765158817);
        FloorOverlayDefinition.FloorOverlayDefinition_cached.clear();
        class294.method1607((byte)66);
        class4.method9(-518646489);
        class14.method56(-189376924);
        class173.method958((byte)(-102));
        class379.method2015((byte)(-69));
        SequenceDefinition.SequenceDefinition_cached.clear();
        SequenceDefinition.SequenceDefinition_cachedFrames.clear();
        SequenceDefinition.SequenceDefinition_cachedModel.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cached.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cachedModels.clear();
        VarbitComposition.VarbitDefinition_cached.clear();
        VarpDefinition.VarpDefinition_cached.clear();
        class160.HitSplatDefinition_cachedSprites.method2418((byte)(-53));
        MenuAction.HitSplatDefinition_cached.method2418((byte)(-5));
        class432.method2285(1049497494);
        GrandExchangeEvent.method1922(-1704603076);
        InterfaceParent.method488(1345548322);
        class165.method921(1518700627);
        Strings.method1854(496185327);
        class383.method2084(-27936636);
        DbRowType.DBRowType_cache.clear();
        Client.Widget_cachedModels.clear();
        Client.Widget_cachedFonts.clear();
        GrandExchangeOfferTotalQuantityComparator.method1913(985760282);
        class18.method75(-396022991);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).clear(1161960208);
        Script.Script_cached.clear();
        Client.archive5.method2127(1512389225);
        DevicePcmPlayerProvider.field67.ua(1903798827);
        GameBuild.archive7.ua(1903798827);
        class85.archive4.ua(1903798827);
        class426.field3811.ua(1903798827);
        GrandExchangeOfferTotalQuantityComparator.archive9.ua(1903798827);
        class399.archive6.ua(1903798827);
        FloorUnderlayDefinition.archive11.ua(1903798827);
        class452.archive8.ua(1903798827);
        WorldMapLabelSize.field2285.ua(1903798827);
        NetFileRequest.archive10.ua(1903798827);
        class195.field1645.ua(1903798827);
        class126.archive12.ua(1903798827);
        PcmPlayer.field211.ua(1903798827);
        class31.scene.clear();
        for (int i = 0; i < 4; ++i) {
            Client.collisionMaps[i].clear(1617481889);
        }
        Client.field590.method1138((byte)(-82));
        System.gc();
        class297.musicPlayerStatus = 347568159;
        class297.musicTrackArchive = null;
        class379.musicTrackGroupId = 1643562499;
        VarpDefinition.musicTrackFileId = -1862070196;
        class100.musicTrackVolume = 0;
        class120.musicTrackBoolean = false;
        class162.pcmSampleLength = 440964570;
        Client.currentTrackGroupId = 913916277;
        Client.playingJingle = false;
        StructComposition.findEnumerated((byte)1);
        class138.updateGameState(10, 1588107629);
    }
    
    static void xk(final int n, final int n2) {
        int bf = class137.fontBold12.bf(Strings.gd);
        for (int i = 0; i < Client.menuOptionsCount * 730065501; ++i) {
            final int bf2 = class137.fontBold12.bf(Friend.method2152(i, (short)(-5975)));
            if (bf2 > bf) {
                bf = bf2;
            }
        }
        bf += 8;
        final int n3 = Client.menuOptionsCount * -1933919373 + 22;
        int n4 = n - bf / 2;
        if (bf + n4 > Client.aj * -1687260435) {
            n4 = -1687260435 * Client.aj - bf;
        }
        if (n4 < 0) {
            n4 = 0;
        }
        int n5 = n2;
        if (n3 + n5 > 1658005443 * class262.canvasHeight) {
            n5 = class262.canvasHeight * 1658005443 - n3;
        }
        if (n5 < 0) {
            n5 = 0;
        }
        class192.menuX = n4 * -945723825;
        ArchiveLoader.menuY = 232216885 * n5;
        DesktopPlatformInfoProvider.menuWidth = -760159457 * bf;
        class147.menuHeight = 1585038229 * Client.menuOptionsCount + 167124602;
    }
    
    public TileItem ka() {
        return Client.bl;
    }
    
    public int ka() {
        return Client.followerIndex * 2050107857;
    }
    
    public static ModelData ka(final AbstractArchive abstractArchive, final int n, final int n2) {
        return ModelData.ModelData_get(abstractArchive, n, n2);
    }
    
    public static void ka(final PendingSpawn pendingSpawn) {
        Messages.method656(pendingSpawn, -1336825850);
    }
    
    void method372(final String s, final String s2, final int n) throws IOException, JSONException {
        try {
            final class10 class10 = new class10(new URL(ViewportMouse.field2213 + "/game-session/v1/tokens"), class9.field30, this.field401);
            class10.method34(1901364413).method2108(s, -596088088);
            class10.method34(1825423901).method2111(class435.field3823, (byte)3);
            final JSONObject jsonObject = new JSONObject();
            jsonObject.method2652("accountId", (Object)s2);
            class10.km(class10, new class437(jsonObject), (byte)1);
            this.field410 = class14.ni(this.field529, class10, (byte)1);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.hw(" + ')');
        }
    }
    
    static final void we(final boolean b, final PacketBuffer packetBuffer) {
        while (true) {
            final int n = 16;
            final int n2 = 1 << n;
            if (packetBuffer.readBits(889658999 * Client.packetWriter.serverPacketLength, 1751384746) < 12 + n) {
                break;
            }
            final int bitsRemaining = packetBuffer.bitsRemaining(n, -2144113506);
            if (n2 - 1 == bitsRemaining) {
                break;
            }
            boolean b2 = false;
            if (null == Client.npcs[bitsRemaining]) {
                Client.npcs[bitsRemaining] = new NPC();
                b2 = true;
            }
            final NPC npc = Client.npcs[bitsRemaining];
            Client.npcIndices[(Client.npcCount += 1796101277) * -591548997 - 1] = bitsRemaining;
            npc.de = Client.cycle * -1857327343;
            int n3;
            if (b) {
                n3 = packetBuffer.bitsRemaining(8, -334759502);
                if (n3 > 127) {
                    n3 -= 256;
                }
            }
            else {
                n3 = packetBuffer.bitsRemaining(5, -1496443873);
                if (n3 > 15) {
                    n3 -= 32;
                }
            }
            if (packetBuffer.bitsRemaining(1, -1147915299) == 1) {
                packetBuffer.bitsRemaining(-205947064, -547364330);
            }
            if (1 == packetBuffer.bitsRemaining(1, -2009875781)) {
                Client.field417[(Client.field416 += 1487412345) * 1714783508 - 1] = bitsRemaining;
            }
            final int bitsRemaining2 = packetBuffer.bitsRemaining(1, -738515843);
            npc.definition = AbstractArchive.getNpcDefinition(packetBuffer.bitsRemaining(14, -1281946513), (byte)(-22));
            int n4;
            if (b) {
                n4 = packetBuffer.bitsRemaining(8, -1937078662);
                if (n4 > 127) {
                    n4 -= 256;
                }
            }
            else {
                n4 = packetBuffer.bitsRemaining(5, 167677721);
                if (n4 > 15) {
                    n4 -= 32;
                }
            }
            final int n5 = Client.field561[packetBuffer.bitsRemaining(3, -2079910933)];
            if (b2) {
                final NPC npc2 = npc;
                final NPC npc3 = npc;
                final int dx = -1309183566 * n5;
                npc3.dx = dx;
                npc2.bj = dx * -270336884;
            }
            class142.method811(npc, (byte)72);
            if (npc.cv * 351748387 == 0) {
                npc.dx = 0;
            }
            npc.method594(n4 + MusicPatchNode.localPlayer.cf[0], n3 + MusicPatchNode.localPlayer.dy[0], bitsRemaining2, 2049907349);
        }
        packetBuffer.exportIndex((byte)(-114));
    }
    
    public void we(final int n) {
        Client.camAngleX = n * -637026513;
    }
    
    static final void vx() {
        Language.method1946(false, -421035940);
        Client.field427 = 0;
        boolean b = true;
        for (int i = 0; i < class4.regionLandArchives.length; ++i) {
            if (FontName.regionMapArchiveIds[i] != -1 && null == class4.regionLandArchives[i]) {
                class4.regionLandArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bh(FontName.regionMapArchiveIds[i], 0, (byte)(-73));
                if (null == class4.regionLandArchives[i]) {
                    b = false;
                    Client.field427 += 1047178289;
                }
            }
            if (-1 != Archive.regionLandArchiveIds[i] && ObjectSound.regionMapArchives[i] == null) {
                ObjectSound.regionMapArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bw(Archive.regionLandArchiveIds[i], 0, GameObject.xteaKeys[i], -1397321175);
                if (null == ObjectSound.regionMapArchives[i]) {
                    b = false;
                    Client.field427 += 1047178289;
                }
            }
        }
        if (!b) {
            Client.field489 = 1439174634;
            return;
        }
        Client.field425 = 0;
        boolean b2 = true;
        for (int j = 0; j < class4.regionLandArchives.length; ++j) {
            final byte[] array = ObjectSound.regionMapArchives[j];
            if (null != array) {
                int n = 492258064 * (WorldMapAreaData.regions[j] >> 8) - -1232093375 * WorldMapData_0.baseX;
                int n2 = (WorldMapAreaData.regions[j] & 0xACBE625F) * 1922755139 - GameObject.baseY * 827352769;
                if (Client.isInInstance) {
                    n = 10;
                    n2 = 10;
                }
                b2 &= KitDefinition.getKitDefinitionModels(array, n, n2, 1098261081);
            }
        }
        if (!b2) {
            Client.field489 = 949923334;
            return;
        }
        if (Client.field489 * -2139010133 != 0) {
            WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + 100 + "%" + class96.au, true, -1404561452);
        }
        class323.playPcmPlayers(-280644379);
        class31.scene.clear();
        for (int k = 0; k < 4; ++k) {
            Client.collisionMaps[k].clear(1629056013);
        }
        for (int l = 0; l < 4; ++l) {
            for (int n3 = 0; n3 < 1127097285; ++n3) {
                for (int n4 = 0; n4 < 104; ++n4) {
                    Tiles.Tiles_renderFlags[l][n3][n4] = 0;
                }
            }
        }
        class323.playPcmPlayers(-1788192496);
        class137.vmethod3254(-55156010);
        final int length = class4.regionLandArchives.length;
        StructComposition.findEnumerated((byte)1);
        Language.method1946(true, -834043200);
        if (!Client.isInInstance) {
            for (int n5 = 0; n5 < length; ++n5) {
                final int n6 = (WorldMapAreaData.regions[n5] >> 8) * 522190866 - -1232093375 * WorldMapData_0.baseX;
                final int n7 = (WorldMapAreaData.regions[n5] & 0xFF) * 64 - GameObject.baseY * -1759248891;
                final byte[] array2 = class4.regionLandArchives[n5];
                if (array2 != null) {
                    class323.playPcmPlayers(-397170042);
                    WallDecoration.method1385(array2, n6, n7, class28.timeOfPreviousKeyPress * 2030552144 - 48, class425.field3798 * 370541272 - 48, Client.collisionMaps, 960745047);
                }
            }
            for (int n8 = 0; n8 < length; ++n8) {
                final int n9 = (WorldMapAreaData.regions[n8] >> 8) * 197249856 - WorldMapData_0.baseX * -1888301285;
                final int n10 = (WorldMapAreaData.regions[n8] & 0xFF) * -1561082186 - 1201961564 * GameObject.baseY;
                if (null == class4.regionLandArchives[n8] && class425.field3798 * 583188571 < 800) {
                    class323.playPcmPlayers(-34969714);
                    class122.method727(n9, n10, -567253959, 1836001738, 1078566160);
                }
            }
            Language.method1946(true, -2020520249);
            for (int n11 = 0; n11 < length; ++n11) {
                final byte[] array3 = ObjectSound.regionMapArchives[n11];
                if (null != array3) {
                    final int n12 = 160250306 * (WorldMapAreaData.regions[n11] >> 8) - WorldMapData_0.baseX * 2036032390;
                    final int n13 = 1457233364 * (WorldMapAreaData.regions[n11] & 0xFF) - GameObject.baseY * 827352769;
                    class323.playPcmPlayers(-212276282);
                    class147.method837(array3, n12, n13, class31.scene, Client.collisionMaps, 2048891146);
                }
            }
        }
        if (Client.isInInstance) {
            for (int n14 = 0; n14 < 4; ++n14) {
                class323.playPcmPlayers(-1178232964);
                for (int n15 = 0; n15 < 13; ++n15) {
                    for (int n16 = 0; n16 < 13; ++n16) {
                        int n17 = 0;
                        final int n18 = Client.instanceChunkTemplates[n14][n15][n16];
                        if (-1 != n18) {
                            final int n19 = n18 >> 24 & 0x3;
                            final int n20 = n18 >> 1 & 0x3;
                            final int n21 = n18 >> 14 & 0x580FDF12;
                            final int n22 = n18 >> 3 & 0xC283F867;
                            final int n23 = (n21 / 8 << 8) + n22 / 8;
                            for (int n24 = 0; n24 < WorldMapAreaData.regions.length; ++n24) {
                                if (n23 == WorldMapAreaData.regions[n24] && null != class4.regionLandArchives[n24]) {
                                    class19.method78(class4.regionLandArchives[n24], n14, n15 * 8, n16 * 8, n19, 8 * (n21 & 0x7), 8 * (n22 & 0x7), n20, 8 * (n21 - n15), 8 * (n22 - n16), Client.collisionMaps, 1880631061);
                                    n17 = 1;
                                    break;
                                }
                            }
                        }
                        if (n17 == 0) {
                            TextureProvider.isLowDetail(n14, 8 * n15, 8 * n16, 1037001984);
                        }
                    }
                }
            }
            for (int n25 = 0; n25 < 13; ++n25) {
                for (int n26 = 0; n26 < 13; ++n26) {
                    if (-1 == Client.instanceChunkTemplates[0][n25][n26]) {
                        class122.method727(8 * n25, 8 * n26, 8, 8, 498450587);
                    }
                }
            }
            Language.method1946(true, -1763005048);
            for (int n27 = 0; n27 < 4; ++n27) {
                class323.playPcmPlayers(-744597792);
                for (int n28 = 0; n28 < 13; ++n28) {
                    for (int n29 = 0; n29 < 13; ++n29) {
                        final int n30 = Client.instanceChunkTemplates[n27][n28][n29];
                        if (-1 != n30) {
                            final int n31 = n30 >> 24 & 0x3;
                            final int n32 = n30 >> 1 & 0x3;
                            final int n33 = n30 >> 14 & 0x3FF;
                            final int n34 = n30 >> 3 & 0x7FF;
                            final int n35 = (n33 / 8 << 8) + n34 / 8;
                            for (int n36 = 0; n36 < WorldMapAreaData.regions.length; ++n36) {
                                if (WorldMapAreaData.regions[n36] == n35 && null != ObjectSound.regionMapArchives[n36]) {
                                    Tiles.method473(ObjectSound.regionMapArchives[n36], n27, 8 * n28, n29 * 8, n31, 8 * (n33 & 0x7), (n34 & 0x7) * 8, n32, class31.scene, Client.collisionMaps);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        Language.method1946(true, -558776079);
        class323.playPcmPlayers(-1435204918);
        class10.method39(class31.scene, Client.collisionMaps, 1670427112);
        Language.method1946(true, -1287381540);
        int n37 = Tiles.Tiles_minPlane * 1401144457;
        if (n37 > 1615569639 * GameEngine.Client_plane) {
            n37 = -1202123613 * GameEngine.Client_plane;
        }
        if (n37 < GameEngine.Client_plane * -1727408401 - 1) {
            final int n38 = GameEngine.Client_plane * 1662256957 - 1;
        }
        if (Client.isLowDetail) {
            class31.scene.init(1401144457 * Tiles.Tiles_minPlane);
        }
        else {
            class31.scene.init(0);
        }
        for (int n39 = 0; n39 < 396129800; ++n39) {
            for (int n40 = 0; n40 < 104; ++n40) {
                class121.updateItemPile(n39, n40, 1975085703);
            }
        }
        class323.playPcmPlayers(-1030151534);
        KeyHandler.method107((byte)92);
        ObjectComposition.ObjectDefinition_cachedModelData.clear();
        if (ScriptFrame.client.bf(482973278)) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2500, Client.packetWriter.isaacCipher, (short)(-23287));
            packetBufferNode.packetBuffer.ba(1057001181, -2081835031);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (!Client.isInInstance) {
            final int n41 = (690123712 * class28.timeOfPreviousKeyPress - 6) / 8;
            final int n42 = (6 + class28.timeOfPreviousKeyPress * 202002092) / 8;
            final int n43 = (class425.field3798 * 583188571 - 6) / 8;
            final int n44 = (class425.field3798 * 583188571 + 6) / 8;
            for (int n45 = n41 - 1; n45 <= n42 + 1; ++n45) {
                for (int n46 = n43 - 1; n46 <= 1 + n44; ++n46) {
                    if (n45 < n41 || n45 > n42 || n46 < n43 || n46 > n44) {
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("m" + n45 + "_" + n46, 624270864);
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("l" + n45 + "_" + n46, -997817693);
                    }
                }
            }
        }
        class138.updateGameState(30, 649291815);
        class323.playPcmPlayers(-732094244);
        Renderable.getModel(279967595);
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2538, Client.packetWriter.isaacCipher, (short)(-25823)), 414135591);
        NPC.method611(599275396);
    }
    
    static final void vy() {
        Language.method1946(false, -679023642);
        Client.field427 = 0;
        int n = 1;
        for (int i = 0; i < class4.regionLandArchives.length; ++i) {
            if (FontName.regionMapArchiveIds[i] != -1 && null == class4.regionLandArchives[i]) {
                class4.regionLandArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bh(FontName.regionMapArchiveIds[i], 0, (byte)(-71));
                if (null == class4.regionLandArchives[i]) {
                    n = 0;
                    Client.field427 += 1047178289;
                }
            }
            if (-1 != Archive.regionLandArchiveIds[i] && ObjectSound.regionMapArchives[i] == null) {
                ObjectSound.regionMapArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bw(Archive.regionLandArchiveIds[i], 0, GameObject.xteaKeys[i], 804777599);
                if (null == ObjectSound.regionMapArchives[i]) {
                    n = 0;
                    Client.field427 += 1047178289;
                }
            }
        }
        if (n == 0) {
            Client.field489 = -1672521981;
            return;
        }
        Client.field425 = 0;
        boolean b = true;
        for (int j = 0; j < class4.regionLandArchives.length; ++j) {
            final byte[] array = ObjectSound.regionMapArchives[j];
            if (null != array) {
                int n2 = 64 * (WorldMapAreaData.regions[j] >> 8) - -1232093375 * WorldMapData_0.baseX;
                int n3 = (WorldMapAreaData.regions[j] & 0xFF) * 64 - GameObject.baseY * 827352769;
                if (Client.isInInstance) {
                    n2 = 10;
                    n3 = 10;
                }
                b &= KitDefinition.getKitDefinitionModels(array, n2, n3, 2086345947);
            }
        }
        if (!b) {
            Client.field489 = 949923334;
            return;
        }
        if (Client.field489 * -2139010133 != 0) {
            WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + 100 + "%" + class96.au, true, 1963145085);
        }
        class323.playPcmPlayers(-806834769);
        class31.scene.clear();
        for (int k = 0; k < 4; ++k) {
            Client.collisionMaps[k].clear(2035067603);
        }
        for (int l = 0; l < 4; ++l) {
            for (int n4 = 0; n4 < 104; ++n4) {
                for (int n5 = 0; n5 < 104; ++n5) {
                    Tiles.Tiles_renderFlags[l][n4][n5] = 0;
                }
            }
        }
        class323.playPcmPlayers(-846960649);
        class137.vmethod3254(-1346878092);
        final int length = class4.regionLandArchives.length;
        StructComposition.findEnumerated((byte)1);
        Language.method1946(true, -529156316);
        if (!Client.isInInstance) {
            for (int n6 = 0; n6 < length; ++n6) {
                final int n7 = (WorldMapAreaData.regions[n6] >> 8) * 64 - -1232093375 * WorldMapData_0.baseX;
                final int n8 = (WorldMapAreaData.regions[n6] & 0xFF) * 64 - GameObject.baseY * 827352769;
                final byte[] array2 = class4.regionLandArchives[n6];
                if (array2 != null) {
                    class323.playPcmPlayers(-1560312505);
                    WallDecoration.method1385(array2, n7, n8, class28.timeOfPreviousKeyPress * 856658440 - 48, class425.field3798 * 370541272 - 48, Client.collisionMaps, 960745047);
                }
            }
            for (int n9 = 0; n9 < length; ++n9) {
                final int n10 = (WorldMapAreaData.regions[n9] >> 8) * 64 - WorldMapData_0.baseX * -1232093375;
                final int n11 = (WorldMapAreaData.regions[n9] & 0xFF) * 64 - 827352769 * GameObject.baseY;
                if (null == class4.regionLandArchives[n9] && class425.field3798 * 583188571 < 800) {
                    class323.playPcmPlayers(-1996751094);
                    class122.method727(n10, n11, 64, 64, -650844925);
                }
            }
            Language.method1946(true, -689292496);
            for (int n12 = 0; n12 < length; ++n12) {
                final byte[] array3 = ObjectSound.regionMapArchives[n12];
                if (null != array3) {
                    final int n13 = 64 * (WorldMapAreaData.regions[n12] >> 8) - WorldMapData_0.baseX * -1232093375;
                    final int n14 = 64 * (WorldMapAreaData.regions[n12] & 0xFF) - GameObject.baseY * 827352769;
                    class323.playPcmPlayers(-269119422);
                    class147.method837(array3, n13, n14, class31.scene, Client.collisionMaps, 1251575684);
                }
            }
        }
        if (Client.isInInstance) {
            for (int n15 = 0; n15 < 4; ++n15) {
                class323.playPcmPlayers(-2059920454);
                for (int n16 = 0; n16 < 13; ++n16) {
                    for (int n17 = 0; n17 < 13; ++n17) {
                        boolean b2 = false;
                        final int n18 = Client.instanceChunkTemplates[n15][n16][n17];
                        if (-1 != n18) {
                            final int n19 = n18 >> 24 & 0x3;
                            final int n20 = n18 >> 1 & 0x3;
                            final int n21 = n18 >> 14 & 0x3FF;
                            final int n22 = n18 >> 3 & 0x7FF;
                            final int n23 = (n21 / 8 << 8) + n22 / 8;
                            for (int n24 = 0; n24 < WorldMapAreaData.regions.length; ++n24) {
                                if (n23 == WorldMapAreaData.regions[n24] && null != class4.regionLandArchives[n24]) {
                                    class19.method78(class4.regionLandArchives[n24], n15, n16 * 8, n17 * 8, n19, 8 * (n21 & 0x7), 8 * (n22 & 0x7), n20, 8 * (n21 - n16), 8 * (n22 - n17), Client.collisionMaps, -235807351);
                                    b2 = true;
                                    break;
                                }
                            }
                        }
                        if (!b2) {
                            TextureProvider.isLowDetail(n15, 8 * n16, 8 * n17, 2049752193);
                        }
                    }
                }
            }
            for (int n25 = 0; n25 < 13; ++n25) {
                for (int n26 = 0; n26 < 13; ++n26) {
                    if (-1 == Client.instanceChunkTemplates[0][n25][n26]) {
                        class122.method727(8 * n25, 8 * n26, 8, 8, 657124752);
                    }
                }
            }
            Language.method1946(true, -1297690085);
            for (int n27 = 0; n27 < 4; ++n27) {
                class323.playPcmPlayers(-559343628);
                for (int n28 = 0; n28 < 13; ++n28) {
                    for (int n29 = 0; n29 < 13; ++n29) {
                        final int n30 = Client.instanceChunkTemplates[n27][n28][n29];
                        if (-1 != n30) {
                            final int n31 = n30 >> 24 & 0x3;
                            final int n32 = n30 >> 1 & 0x3;
                            final int n33 = n30 >> 14 & 0x3FF;
                            final int n34 = n30 >> 3 & 0x7FF;
                            final int n35 = (n33 / 8 << 8) + n34 / 8;
                            for (int n36 = 0; n36 < WorldMapAreaData.regions.length; ++n36) {
                                if (WorldMapAreaData.regions[n36] == n35 && null != ObjectSound.regionMapArchives[n36]) {
                                    Tiles.method473(ObjectSound.regionMapArchives[n36], n27, 8 * n28, n29 * 8, n31, 8 * (n33 & 0x7), (n34 & 0x7) * 8, n32, class31.scene, Client.collisionMaps);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        Language.method1946(true, -282141869);
        class323.playPcmPlayers(-1935420751);
        class10.method39(class31.scene, Client.collisionMaps, 1670427112);
        Language.method1946(true, -478975054);
        int n37 = Tiles.Tiles_minPlane * 1401144457;
        if (n37 > -1727408401 * GameEngine.Client_plane) {
            n37 = -1727408401 * GameEngine.Client_plane;
        }
        if (n37 < GameEngine.Client_plane * -1727408401 - 1) {
            final int n38 = GameEngine.Client_plane * -1727408401 - 1;
        }
        if (Client.isLowDetail) {
            class31.scene.init(1401144457 * Tiles.Tiles_minPlane);
        }
        else {
            class31.scene.init(0);
        }
        for (int n39 = 0; n39 < 104; ++n39) {
            for (int n40 = 0; n40 < 104; ++n40) {
                class121.updateItemPile(n39, n40, 2100143595);
            }
        }
        class323.playPcmPlayers(-1718002011);
        KeyHandler.method107((byte)89);
        ObjectComposition.ObjectDefinition_cachedModelData.clear();
        if (ScriptFrame.client.bf(986695553)) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2500, Client.packetWriter.isaacCipher, (short)(-12250));
            packetBufferNode.packetBuffer.ba(1057001181, -2081835031);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (!Client.isInInstance) {
            final int n41 = (1717695041 * class28.timeOfPreviousKeyPress - 6) / 8;
            final int n42 = (6 + class28.timeOfPreviousKeyPress * 1717695041) / 8;
            final int n43 = (class425.field3798 * 583188571 - 6) / 8;
            final int n44 = (class425.field3798 * 583188571 + 6) / 8;
            for (int n45 = n41 - 1; n45 <= n42 + 1; ++n45) {
                for (int n46 = n43 - 1; n46 <= 1 + n44; ++n46) {
                    if (n45 < n41 || n45 > n42 || n46 < n43 || n46 > n44) {
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("m" + n45 + "_" + n46, -1189045910);
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("l" + n45 + "_" + n46, 1281989038);
                    }
                }
            }
        }
        class138.updateGameState(30, 1096589550);
        class323.playPcmPlayers(-547783198);
        Renderable.getModel(-234639971);
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2538, Client.packetWriter.isaacCipher, (short)(-791)), 414135591);
        NPC.method611(599275396);
    }
    
    public int vy() {
        return Scene.tileUpdateCount;
    }
    
    public static void xe(final Client client, final String s) throws IOException {
        if (client == null) {
            client.sl();
        }
        final URL url = new URL(ViewportMouse.field2213 + "public/v1/games/YCfdbvr2pM1zUYMxJRexZY/play");
        final class394 class394 = new class394();
        class394.method2108(s, -1817186023);
        final class9 field24 = class9.field24;
        final OtlTokenRequester field25 = client.field399;
        if (null != field25) {
            client.field400 = field25.request(field24.method30((byte)(-34)), url, class394.method2105(1935357044), "");
            return;
        }
        client.field410 = class14.ni(client.field529, new class10(url, field24, class394, client.field401), (byte)1);
    }
    
    final void xe() {
        class425.method2264((byte)32);
        if (Client.clickedWidget != null) {
            return;
        }
        int n = 936535053 * MouseHandler.MouseHandler_lastButton;
        if (Client.isMenuOpen) {
            if (n != 1 && (class473.mouseCam || 4 != n)) {
                final int n2 = MouseHandler.MouseHandler_x * -2063363905;
                final int n3 = MouseHandler.MouseHandler_y * -1627340285;
                if (n2 < -1141903185 * class192.menuX - 10 || n2 > -960964385 * DesktopPlatformInfoProvider.menuWidth + -1141903185 * class192.menuX + 10 || n3 < ArchiveLoader.menuY * -115281635 - 10 || n3 > ArchiveLoader.menuY * 1992333189 + class147.menuHeight * 1248578040 + 10) {
                    Client.isMenuOpen = false;
                    final int n4 = class192.menuX * -1141903185;
                    final int n5 = ArchiveLoader.menuY * -115281635;
                    final int n6 = DesktopPlatformInfoProvider.menuWidth * -212674745;
                    final int n7 = 1691534525 * class147.menuHeight;
                    for (int i = 0; i < -356793645 * Client.rootWidgetCount; ++i) {
                        if (Client.rootWidgetWidths[i] + Client.rootWidgetXs[i] > n4 && Client.rootWidgetXs[i] < n4 + n6 && Client.rootWidgetHeights[i] + Client.rootWidgetYs[i] > n5 && Client.rootWidgetYs[i] < n7 + n5) {
                            Client.field573[i] = true;
                        }
                    }
                }
            }
            if (n == 1 || (!class473.mouseCam && n == 4)) {
                final int n8 = -1141903185 * class192.menuX;
                final int n9 = ArchiveLoader.menuY * -115281635;
                final int n10 = -1764185582 * DesktopPlatformInfoProvider.menuWidth;
                final int n11 = 442898084 * MouseHandler.MouseHandler_lastPressedX;
                final int n12 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
                int n13 = -1;
                for (int j = 0; j < Client.menuOptionsCount * 730065501; ++j) {
                    final int n14 = (Client.menuOptionsCount * 730065501 - 1 - j) * 15 + (31 + n9);
                    if (n11 > n8 && n11 < n8 + n10 && n12 > n14 - 13 && n12 < 3 + n14) {
                        n13 = j;
                    }
                }
                if (n13 != -1) {
                    if (n13 >= 0) {
                        class17.menuAction(Client.menuArguments1[n13], Client.menuArguments2[n13], Client.menuOpcodes[n13], Client.menuIdentifiers[n13], Client.menuItemIds[n13], Client.menuActions[n13], Client.menuTargets[n13], -1726850908 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * -1108005938, 1516769888);
                    }
                }
                Client.isMenuOpen = false;
                final int n15 = class192.menuX * -1141903185;
                final int n16 = -115281635 * ArchiveLoader.menuY;
                final int n17 = DesktopPlatformInfoProvider.menuWidth * -960964385;
                final int n18 = class147.menuHeight * 245252327;
                for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                    if (Client.rootWidgetWidths[k] + Client.rootWidgetXs[k] > n15 && Client.rootWidgetXs[k] < n17 + n15 && Client.rootWidgetYs[k] + Client.rootWidgetHeights[k] > n16 && Client.rootWidgetYs[k] < n16 + n18) {
                        Client.field573[k] = true;
                    }
                }
            }
        }
        else {
            final int method461 = DynamicObject.method461((short)(-3151));
            if ((n || (!class473.mouseCam && 4 == n)) && fk(this, -1679837219)) {
                n = 2;
            }
            if ((n == 1 || (!class473.mouseCam && n == 4)) && Client.menuOptionsCount * -589821113 > 0) {
                if (method461 >= 0) {
                    class17.menuAction(Client.menuArguments1[method461], Client.menuArguments2[method461], Client.menuOpcodes[method461], Client.menuIdentifiers[method461], Client.menuItemIds[method461], Client.menuActions[method461], Client.menuTargets[method461], 2020601481 * MouseHandler.MouseHandler_lastPressedX, MouseHandler.MouseHandler_lastPressedY * 1163896205, -1351045997);
                }
            }
            if (2 == n && Client.menuOptionsCount * 730065501 > 0) {
                dz(this, 2020601481 * MouseHandler.MouseHandler_lastPressedX, 1163896205 * MouseHandler.MouseHandler_lastPressedY, 1018516557);
            }
        }
    }
    
    static final int ye() {
        return Client.menuOptionsCount * 730065501 - 1;
    }
    
    public static void ye(final int n) {
        final int n2 = Client.yq[n];
        final int value = Varps.Varps_main[n];
        int n3 = n2 ^ value;
        int binarySearch = Arrays.binarySearch(Client.uy, n << 16);
        if (binarySearch < 0) {
            binarySearch = -binarySearch - 1;
        }
        while (binarySearch < Client.uy.length && Client.uy[binarySearch] >> 16 == n) {
            final int varbitId = Client.uy[binarySearch] & 0xFFFF;
            final int n4 = Client.gi[varbitId] >> 8 & 0xFF;
            final int n5 = Client.gi[varbitId] & 0xFF;
            final int n6 = Varps.Varps_masks[n4 - n5] << n5;
            if (((n2 ^ value) & n6) != 0x0) {
                n3 &= ~n6;
                final int value2 = (value & n6) >>> n5;
                final VarbitChanged varbitChanged = new VarbitChanged();
                varbitChanged.setVarpId(n);
                varbitChanged.setVarbitId(varbitId);
                varbitChanged.setValue(value2);
                ScriptFrame.client.getCallbacks().post((Object)varbitChanged);
            }
            ++binarySearch;
        }
        if (n3 != 0) {
            final VarbitChanged varbitChanged2 = new VarbitChanged();
            varbitChanged2.setVarpId(n);
            varbitChanged2.setValue(value);
            ScriptFrame.client.getCallbacks().post((Object)varbitChanged2);
        }
        Client.yq[n] = value;
    }
    
    public AbstractArchive ye(final int n) {
        return Client.az[n];
    }
    
    void pg(final String s) throws IOException {
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("grant_type", "refresh_token");
        hashMap.put("scope", "gamesso.token.create");
        hashMap.put("refresh_token", s);
        final URL url = new URL(ViewportMouse.field2213 + "shield/oauth/token" + new class438(hashMap).method2298(-759167743));
        final class394 class394 = new class394();
        class394.method2114(Client.field405, (byte)(-58));
        class394.method2106("Host", new URL(ViewportMouse.field2213).getHost(), 1144670754);
        class394.method2111(class435.field3823, (byte)35);
        final class9 field30 = class9.field30;
        final com$jagex$oldscape$pub$RefreshAccessTokenRequester field31 = this.field419;
        if (null != field31) {
            this.field404 = field31.request(field30.method30((byte)(-1)), url, class394.method2105(1456986004), "");
            return;
        }
        this.field390 = class14.ni(this.field529, new class10(url, field30, class394, this.field401), (byte)1);
    }
    
    public static void il(final Widget[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        final Callbacks callbacks = ScriptFrame.client.getCallbacks();
        final int size = Client.sq.size();
        for (final Widget widget : array) {
            if (widget != null && widget.ev() == n) {
                if (!widget.isSelfHidden()) {
                    if (widget.getType() == 5 && widget.getItemId() != -1) {
                        if (widget.getItemId() != 6512) {
                            Rectangle rectangle = null;
                            if (widget == ScriptFrame.client.ht() && Client.isDraggingWidget && Client.field540) {
                                final int n9 = MouseHandler.MouseHandler_x * -2063363905;
                                final int n10 = MouseHandler.MouseHandler_y * -1224153235;
                                int x = n9 - Client.widgetClickX * -1789924433;
                                int y = n10 - Client.widgetClickY * 1902621241;
                                if (x < Client.field495 * 1084046795) {
                                    x = Client.field495 * 1084046795;
                                }
                                if (x + widget.getWidth() > Client.field495 * 1084046795 + Client.clickedWidgetParent.getWidth()) {
                                    x = Client.field495 * 1084046795 + Client.clickedWidgetParent.getWidth() - widget.getWidth();
                                }
                                if (y < Client.field542 * -746723443) {
                                    y = Client.field542 * -746723443;
                                }
                                if (y + widget.getHeight() > Client.field542 * -746723443 + Client.clickedWidgetParent.getHeight()) {
                                    y = Client.field542 * -746723443 + Client.clickedWidgetParent.getHeight() - widget.getHeight();
                                }
                                rectangle = new Rectangle(x, y, widget.getWidth(), widget.getHeight());
                            }
                            final int n11 = n6 + widget.getRelativeX();
                            final int n12 = n7 + widget.getRelativeY();
                            widget.yf(n11);
                            widget.ic(n12);
                            if (n11 >= n2 && n11 <= n4 && n12 >= n3 && n12 <= n5) {
                                Client.sq.add(new WidgetItem(widget.getItemId(), widget.getItemQuantity(), widget.getBounds(), (net.runelite.api.widgets.Widget)widget, rectangle));
                            }
                        }
                    }
                }
            }
        }
        List<Object> list = Collections.emptyList();
        if (size < Client.sq.size()) {
            if (size > 0) {
                list = Client.sq.subList(size, Client.sq.size());
            }
            else {
                list = (List<Object>)Client.sq;
            }
        }
        if (n == -1412584499) {
            assert WorldMapSection2.field2292 == array;
            int to_GROUP = -1;
            for (int j = 0; j < array.length; ++j) {
                final Widget widget2 = array[j];
                if (widget2 != null) {
                    to_GROUP = WidgetInfo.TO_GROUP(widget2.getId());
                    break;
                }
            }
            if (to_GROUP == -1) {
                return;
            }
            callbacks.drawInterface(to_GROUP, Client.sq);
            Client.sq.clear();
        }
        else if (n != -1) {
            final Widget ex = ScriptFrame.client.ex(n);
            final net.runelite.api.widgets.Widget[] children = ((net.runelite.api.widgets.Widget)ex).getChildren();
            if (children == null || children == array) {
                callbacks.drawLayer((net.runelite.api.widgets.Widget)ex, (List)list);
            }
        }
        else {
            int to_GROUP2 = -1;
            for (int k = 0; k < array.length; ++k) {
                final Widget widget3 = array[k];
                if (widget3 != null) {
                    to_GROUP2 = WidgetInfo.TO_GROUP(widget3.getId());
                    break;
                }
            }
            if (to_GROUP2 == -1) {
                return;
            }
            if (WorldMapSection2.field2292 == null) {
                callbacks.drawInterface(to_GROUP2, Client.sq);
                Client.sq.clear();
            }
            for (int l = Client.yj.size() - 1; l >= 0; --l) {
                final net.runelite.api.widgets.Widget widget4 = Client.yj.get(l);
                if (WidgetInfo.TO_GROUP(widget4.getId()) == to_GROUP2) {
                    widget4.setHidden(false);
                    Client.yj.remove(l);
                }
            }
        }
    }
    
    public void ow(final com$jagex$oldscape$pub$RefreshAccessTokenRequester field419) {
        if (field419 == null) {
            return;
        }
        this.field419 = field419;
    }
    
    public static void ly(final int n) {
        final ClanChannel[] st = ScriptFrame.client.st();
        if (n < 0 || n >= st.length) {
            return;
        }
        ScriptFrame.client.getCallbacks().post((Object)new ClanChannelChanged((net.runelite.api.clan.ClanChannel)st[n], n, false));
    }
    
    public int ly(final int n) {
        return class252.expandBounds(n, 1949946238);
    }
    
    static class482 agc(final int n) {
        class482 class482 = (class482)Client.Widget_cachedModels.wr(n);
        if (class482 == null) {
            class482 = new class482(PcmPlayer.field211, class373.method1992(n, (byte)116), BufferedSink.write(n, (byte)107));
            Client.Widget_cachedModels.put(class482, n);
        }
        return class482;
    }
    
    boolean method370(final byte b) {
        try {
            boolean b2;
            if (null != this.field399) {
                if (b == 16) {
                    throw new IllegalStateException();
                }
                b2 = true;
            }
            else {
                b2 = false;
            }
            return b2;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gx(" + ')');
        }
    }
    
    @Override
    protected final void gw() {
        if (class373.varcs.hasUnwrittenChanges(-1302793492)) {
            class373.varcs.tryWrite(2081452465);
        }
        if (null != UserComparator6.mouseRecorder) {
            UserComparator6.mouseRecorder.isRunning = false;
        }
        UserComparator6.mouseRecorder = null;
        Client.packetWriter.close(963107911);
        GraphicsObject.getModel((short)152);
        class123.mouseWheel = null;
        if (class28.pcmPlayer0 != null) {
            class28.pcmPlayer0.shutdown((byte)(-1));
        }
        if (HorizontalAlignment.pcmPlayer1 != null) {
            HorizontalAlignment.pcmPlayer1.shutdown((byte)(-1));
        }
        class295.method1608((byte)0);
        class144.method822(-1690259063);
        if (class14.urlRequester != null) {
            class14.urlRequester.close(-417229772);
            class14.urlRequester = null;
        }
        try {
            JagexCache.JagexCache_dat2File.close(-1649419380);
            for (int i = 0; i < JagexCache.idxCount * 1064766397; ++i) {
                class370.JagexCache_idxFiles[i].close(839806416);
            }
            JagexCache.JagexCache_idx255File.close(233348446);
            JagexCache.JagexCache_randomDat.close(-1234587462);
        }
        catch (Exception ex) {}
        this.field529.method54(634865167);
    }
    
    public static void gh(final Client client, final byte b) {
        if (client == null) {
            client.doCycleJs5(b);
        }
        synchronized (Client.fz) {
            final int n = -53;
            try {
                if (1000 == -1275976559 * Client.gameState) {
                    if (n >= 57) {
                        throw new IllegalStateException();
                    }
                }
                else if (!Tile.method1214((byte)(-5))) {
                    if (n < 57) {
                        client.doCycleJs5Connect(-121494842);
                    }
                }
            }
            catch (RuntimeException ex) {
                throw HealthBar.get(ex, "client.hj(" + ')');
            }
        }
    }
    
    @Override
    protected final void gh() {
        Client.cycle -= 310720817;
        gh(this, (byte)(-98));
        while (true) {
            final ArchiveDiskAction archiveDiskAction;
            synchronized (ArchiveDiskActionHandler.ArchiveDiskActionHandler_requestQueue) {
                archiveDiskAction = (ArchiveDiskAction)ArchiveDiskActionHandler.ArchiveDiskActionHandler_responseQueue.removeLast();
            }
            if (null == archiveDiskAction) {
                break;
            }
            Archive.bd(archiveDiskAction.archive, archiveDiskAction.archiveDisk, (int)archiveDiskAction.hr, archiveDiskAction.data, false, (byte)127);
        }
        try {
            if (1 == class297.musicPlayerStatus * 926096579) {
                final int method1644 = class475.midiPcmStream.method1644((byte)7);
                if (method1644 > 0 && class475.midiPcmStream.isReady(1995465822)) {
                    int n = method1644 - -1128553755 * class162.pcmSampleLength;
                    if (n < 0) {
                        n = 0;
                    }
                    class475.midiPcmStream.setPcmStreamVolume(n, (byte)19);
                }
                else {
                    class475.midiPcmStream.clear((byte)27);
                    class475.midiPcmStream.clearAll(345049999);
                    if (class297.musicTrackArchive != null) {
                        class297.musicPlayerStatus = -1253644330;
                    }
                    else {
                        class297.musicPlayerStatus = 0;
                    }
                    RouteStrategy.musicTrack = null;
                    class297.soundCache = null;
                }
            }
        }
        catch (Exception ex) {
            ex.printStackTrace();
            class475.midiPcmStream.clear((byte)52);
            class297.musicPlayerStatus = 0;
            RouteStrategy.musicTrack = null;
            class297.soundCache = null;
            class297.musicTrackArchive = null;
        }
        class323.playPcmPlayers(-1064909255);
        class207.dv(Client.keyHandlerInstance, (byte)(-118));
        GameEngine.jk(this, (byte)91);
        synchronized (MouseHandler.MouseHandler_instance) {
            MouseHandler.MouseHandler_currentButton = MouseHandler.MouseHandler_currentButtonVolatile * 908499211;
            MouseHandler.MouseHandler_x = 1068258211 * MouseHandler.MouseHandler_xVolatile;
            MouseHandler.MouseHandler_y = -1918688485 * MouseHandler.MouseHandler_yVolatile;
            MouseHandler.MouseHandler_millis = MouseHandler.MouseHandler_lastMovedVolatile * -4029881570118555541L;
            MouseHandler.MouseHandler_lastButton = MouseHandler.MouseHandler_lastButtonVolatile * 199219569;
            MouseHandler.MouseHandler_lastPressedX = MouseHandler.MouseHandler_lastPressedXVolatile * -1850432819;
            MouseHandler.MouseHandler_lastPressedY = MouseHandler.MouseHandler_lastPressedYVolatile * -1699120075;
            MouseHandler.MouseHandler_lastPressedTimeMillis = 3548908311918388543L * MouseHandler.MouseHandler_lastPressedTimeMillisVolatile;
            MouseHandler.MouseHandler_lastButtonVolatile = 0;
        }
        if (class123.mouseWheel != null) {
            Client.mouseWheelRotation = class123.mouseWheel.useRotation(1717151329) * 1644925127;
        }
        if (Client.gameState * -1275976559 == 0) {
            DevicePcmPlayerProvider.load(1398855010);
            NPC.method611(599275396);
        }
        else if (Client.gameState * -1275976559 == 5) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 797442779);
            DevicePcmPlayerProvider.load(1589365914);
            NPC.method611(599275396);
        }
        else if (10 == -1275976559 * Client.gameState || 11 == -1275976559 * Client.gameState) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1564859780);
        }
        else if (-1275976559 * Client.gameState == 20) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 877287564);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 50) {
            EnumComposition.method1016(this, Language.fontPlain11, WallDecoration.fontPlain12, 1602212366);
            this.doCycleLoggedOut(-564344594);
        }
        else if (Client.gameState * -1275976559 == 25) {
            class27.method122((byte)(-68));
        }
        if (-1275976559 * Client.gameState == 30) {
            hv(this, (byte)(-127));
        }
        else if (40 == Client.gameState * -1275976559 || -1275976559 * Client.gameState == 45) {
            this.doCycleLoggedOut(-564344594);
        }
    }
    
    public void jj(final int n) {
        Client.gameDrawingMode = n * 1202440545;
    }
    
    public int jj() {
        return Rasterizer2D.Rasterizer2D_height;
    }
    
    void js5Error(final int n, final byte b) {
        try {
            WorldMapSection0.js5SocketTask = null;
            KitDefinition.js5Socket = null;
            Client.js5ConnectState = 0;
            if (1119961125 * FriendsChat.worldPort == -1275160227 * ItemContainer.currentPort) {
                if (b >= 0) {
                    return;
                }
                ItemContainer.currentPort = 293228307 * class127.js5Port;
            }
            else {
                ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
            }
            Client.js5Errors += 1159129441;
            Label_0184: {
                if (-1027638623 * Client.js5Errors >= 2) {
                    if (b >= 0) {
                        throw new IllegalStateException();
                    }
                    if (7 != n) {
                        if (b >= 0) {
                            throw new IllegalStateException();
                        }
                        if (n != 9) {
                            break Label_0184;
                        }
                        if (b >= 0) {
                            return;
                        }
                    }
                    if (-1275976559 * Client.gameState > 5) {
                        Client.js5Cycles = 1891795480;
                        return;
                    }
                    if (b >= 0) {
                        throw new IllegalStateException();
                    }
                    this.br("js5connect_full", -750847783);
                    class138.updateGameState(1000, 1060545663);
                    return;
                }
            }
            if (Client.js5Errors * -1027638623 >= 2 && 6 == n) {
                if (b >= 0) {
                    throw new IllegalStateException();
                }
                this.br("js5connect_outofdate", 392210185);
                class138.updateGameState(1000, 667712522);
            }
            else if (-1027638623 * Client.js5Errors >= 4) {
                if (b >= 0) {
                    throw new IllegalStateException();
                }
                if (Client.gameState * -1275976559 <= 5) {
                    if (b >= 0) {
                        return;
                    }
                    this.br("js5connect", -1665208180);
                    class138.updateGameState(1000, 472227447);
                }
                else {
                    Client.js5Cycles = 1891795480;
                }
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.hu(" + ')');
        }
    }
    
    public static void js5Error(final int n) {
        final Player[] ic = ScriptFrame.client.ic();
        if (n < 0 || n >= ic.length) {
            return;
        }
        final Player player = ic[n];
        final Player player2 = Client.jn[n];
        Client.jn[n] = player;
        if (player2 != null) {
            ScriptFrame.client.getCallbacks().post((Object)new PlayerDespawned((net.runelite.api.Player)player2));
        }
        if (player != null) {
            ScriptFrame.client.getCallbacks().postDeferred((Object)new PlayerSpawned((net.runelite.api.Player)player));
        }
    }
    
    static boolean uk(final Player player) {
        if (0 == -1387790283 * Client.drawPlayerNames) {
            return false;
        }
        if (player != MusicPatchNode.localPlayer) {
            boolean b = (-1387790283 * Client.drawPlayerNames & 0x4) != 0x0;
            if (!b) {
                b = (0x0 != (Client.drawPlayerNames * -1387790283 & 0x1) && Player.yc(player, -1119018921));
            }
            boolean b2 = b;
            if (!b2) {
                b2 = (0x0 != (Client.drawPlayerNames * -1387790283 & 0x2) && Player.zk(player, (byte)(-20)));
            }
            return b2;
        }
        return 0x0 != (-1387790283 * Client.drawPlayerNames & 0x8);
    }
    
    public void hy(final long n) {
        final long[] pm = ScriptFrame.client.pm();
        final int ok = ScriptFrame.client.ok();
        if (ok < 1000) {
            pm[ok] = n;
            ScriptFrame.client.qp(ok + 1);
        }
    }
    
    public ClanSettings eu() {
        return ItemComposition.guestClanSettings;
    }
    
    public void zu(final int n, final int n2, final int n3, final int n4, final int n5) {
        Rasterizer2D.Rasterizer2D_drawRectangle(n, n2, n3, n4, n5);
    }
    
    static final void zu(int n, int n2, final int n3, final int n4, final int n5, final int n6) {
        final int n7 = n3 - n;
        final int n8 = n4 - n2;
        final int n9 = (n7 >= 0) ? n7 : (-n7);
        final int n10 = (n8 >= 0) ? n8 : (-n8);
        int n11 = n9;
        if (n11 < n10) {
            n11 = n10;
        }
        if (n11 == 0) {
            return;
        }
        int n12 = (n7 << 16) / n11;
        int n13 = (n8 << 16) / n11;
        if (n13 <= n12) {
            n12 = -n12;
        }
        else {
            n13 = -n13;
        }
        final int n14 = n6 * n13 >> 17;
        final int n15 = 1 + n13 * n6 >> 17;
        final int n16 = n12 * n6 >> 17;
        final int n17 = n6 * n12 + 1 >> 17;
        n -= Rasterizer2D.Rasterizer2D_xClipStart;
        n2 -= Rasterizer2D.Rasterizer2D_yClipStart;
        final int n18 = n + n14;
        final int n19 = n - n15;
        final int n20 = n7 + n - n15;
        final int n21 = n + n7 + n14;
        final int n22 = n16 + n2;
        final int n23 = n2 - n17;
        final int n24 = n2 + n8 - n17;
        final int n25 = n2 + n8 + n16;
        VarpDefinition.method981(n18, n19, n20, -1740756415);
        class144.method825(n22, n23, n24, n18, n19, n20, 0.0f, 0.0f, 0.0f, n5, -588335843);
        VarpDefinition.method981(n18, n20, n21, -1740756415);
        class144.method825(n22, n24, n25, n18, n20, n21, 0.0f, 0.0f, 0.0f, n5, -1059723713);
    }
    
    public static void method398(final AbstractArchive kitDefinition_archive, final AbstractArchive kitDefinition_modelsArchive, final byte b) {
        try {
            KitDefinition.KitDefinition_archive = kitDefinition_archive;
            KitDefinition.KitDefinition_modelsArchive = kitDefinition_modelsArchive;
            KitDefinition.KitDefinition_fileCount = KitDefinition.KitDefinition_archive.getGroupFileCount(3, (byte)72) * 1501460151;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.af(" + ')');
        }
    }
    
    static int method368(final int n, final Script script, final boolean b, final int n2) {
        try {
            if (n != 5630) {
                return 2;
            }
            if (n2 == 816169878) {
                throw new IllegalStateException();
            }
            Client.logoutTimer = 719725026;
            return 1;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.bn(" + ')');
        }
    }
    
    static void te(final Player player, final int n, final int n2) {
        if (-1372355773 * player.cs == n && n != -1) {
            final int n3 = ItemContainer.SpotAnimationDefinition_get(n, (byte)19).replyMode * 789159225;
            if (n3 != 0) {
                player.dw = 0;
                player.dn = 0;
                player.bd = n2 * -401806131;
                player.bo = 0;
            }
            if (2 == n3) {
                player.bo = 0;
            }
        }
        else if (-1 == n || player.cs * -1372355773 == -1 || ItemContainer.SpotAnimationDefinition_get(n, (byte)62).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(-1372355773 * player.cs, (byte)56).forcedPriority * -1932560049) {
            player.cs = n * -1690721941;
            player.dw = 0;
            player.dn = 0;
            player.bd = n2 * -401806131;
            player.bo = 0;
            player.dk = player.cb * -1718989897;
        }
    }
    
    static void qu(final int n) {
        final int method1846 = class330.method1846((byte)(-20));
        if (1944244994 == n) {
            class205.method1137(Strings.bv, Strings.bl, Strings.bp, 532744842);
        }
        else if (-2 == n) {
            class205.method1137(Strings.bc, Strings.bh, Strings.bw, 1924644165);
        }
        else if (-1 == n) {
            class205.method1137(Strings.ce, Strings.ci, Strings.cs, -1742088611);
        }
        else if (n == 3) {
            class129.method763(3, (byte)50);
            Login.field752 = -1552230487;
        }
        else if (4 == n) {
            class14.method55(0, 2141229596);
        }
        else if (5 == n) {
            Login.field752 = -2006363982;
            class205.method1137(Strings.cu, Strings.ck, Strings.cq, -468679965);
        }
        else if (n != 68 && (Client.onMobile || 6 != n)) {
            if (7 == n) {
                class205.method1137(Strings.cg, Strings.cr, Strings.cy, 1765055902);
            }
            else if (8 == n) {
                class205.method1137(Strings.cx, Strings.cv, Strings.cb, -1794608081);
            }
            else if (9 == n) {
                class205.method1137(Strings.co, Strings.cz, Strings.cw, -607652452);
            }
            else if (n == 10) {
                class205.method1137(Strings.cj, Strings.ch, Strings.ct, -268382580);
            }
            else if (11 == n) {
                class205.method1137(Strings.cp, Strings.cd, Strings.dm, -1170198795);
            }
            else if (12 == n) {
                class205.method1137(Strings.dw, Strings.dc, Strings.do, -1071708317);
            }
            else if (13 == n) {
                class205.method1137(Strings.di, Strings.dr, Strings.dl, 2061259782);
            }
            else if (14 == n) {
                class205.method1137(Strings.dk, Strings.dt, Strings.dv, 792989315);
            }
            else if (16 == n) {
                class205.method1137(Strings.dz, Strings.dg, Strings.de, 1812649157);
                class129.method763(815572060, (byte)56);
            }
            else if (n == 17) {
                class205.method1137(Strings.dh, Strings.dp, Strings.du, -929476646);
            }
            else if (n == 18) {
                class14.method55(1, 1793772732);
            }
            else if (19 == n) {
                class205.method1137(Strings.dd, Strings.dj, Strings.dx, -2035406071);
            }
            else if (n == 20) {
                class205.method1137(Strings.dn, Strings.dy, Strings.ds, 1126381630);
            }
            else if (n == 22) {
                class205.method1137(Strings.da, Strings.ep, Strings.eo, 1264940000);
            }
            else if (n == 23) {
                class205.method1137(Strings.eq, Strings.et, Strings.ef, -662358202);
            }
            else if (24 == n) {
                class205.method1137(Strings.ez, Strings.ej, Strings.ea, -284996133);
            }
            else if (n == 25) {
                class205.method1137(Strings.eu, Strings.es, Strings.eb, -999158251);
            }
            else if (26 == n) {
                class205.method1137(Strings.el, Strings.en, Strings.er, -793621406);
            }
            else if (n == 27) {
                class205.method1137(Strings.eg, Strings.ed, Strings.ev, -1541391574);
            }
            else if (1234443936 == n) {
                class205.method1137(Strings.ec, Strings.ei, Strings.ee, -622112766);
            }
            else if (32 == n) {
                class14.method55(2, 2102472774);
            }
            else if (-1424493584 == n) {
                class205.method1137(Strings.fh, Strings.fl, Strings.fp, 952587060);
            }
            else if (n == 38) {
                class205.method1137(Strings.fo, Strings.fx, Strings.fd, -1135144005);
            }
            else if (1148334110 == n) {
                class129.method763(8, (byte)50);
            }
            else {
                if (n == 1000414088) {
                    class205.method1137(Strings.fy, Strings.fw, Strings.fr, -911730982);
                    class138.updateGameState(11, 1961876396);
                    return;
                }
                if (n == 57) {
                    class205.method1137(Strings.fv, Strings.fq, Strings.fc, -604422314);
                    class138.updateGameState(11, 938239389);
                    return;
                }
                if (-1633671109 == n) {
                    class205.method1137("", "Please enter your date of birth (DD/MM/YYYY)", "", 376313236);
                    class129.method763(7, (byte)29);
                }
                else {
                    if (n == 62) {
                        class138.updateGameState(10, 846178276);
                        class129.method763(9, (byte)8);
                        class205.method1137(Strings.ff, Strings.fj, Strings.fg, -510112086);
                        return;
                    }
                    if (n == 63) {
                        class138.updateGameState(10, 1142007521);
                        class129.method763(9, (byte)46);
                        class205.method1137(Strings.fk, Strings.fm, Strings.ft, 1456909686);
                        return;
                    }
                    if (n == 65 || n == 67) {
                        class138.updateGameState(10, 546935223);
                        class129.method763(9, (byte)115);
                        class205.method1137(Strings.fu, Strings.gr, Strings.go, 1161469435);
                        return;
                    }
                    if (n == 71) {
                        class138.updateGameState(10, 1485242742);
                        class129.method763(7, (byte)47);
                        class205.method1137("There was a problem updating your DOB.", "Please try again later. If the problem ", "persists, please contact Jagex Support.", -713672702);
                    }
                    else if (73 == n) {
                        class138.updateGameState(10, 519529621);
                        class129.method763(6, (byte)72);
                        class205.method1137(Strings.mm, Strings.me, Strings.mv, -1949963461);
                    }
                    else if (72 == n) {
                        class138.updateGameState(10, 484517813);
                        class129.method763(-363460906, (byte)77);
                    }
                    else {
                        class205.method1137(Strings.gs, Strings.gj, Strings.gg, -969853966);
                    }
                }
            }
        }
        else {
            class205.method1137(Strings.cm, Strings.cf, Strings.cl, -489771827);
        }
        class138.updateGameState(10, 996185785);
        if (method1846 == class330.method1846((byte)(-82)) && Client.field395.method2558(1773093551)) {
            class129.method763(9, (byte)105);
        }
    }
    
    public static void cz(final SpritePixels nv, final double gg, final int n, final int dn, final int kx, final int rz, final int hc) {
        Arrays.fill(nv.getPixels(), 0);
        nv.xs();
        class220.xd();
        Rasterizer3D.clips.pa(true);
        Rasterizer3D.clips.kg(0);
        Client.nv = nv;
        Client.gg = gg;
        Client.dn = dn;
        Client.kx = kx;
        Client.rz = rz;
        Client.hc = hc;
        try {
            vf(n, dn, kx, rz, hc, Client.jc);
            vf(n, dn, kx, rz, hc, Client::zg);
        }
        finally {
            class220.cp();
            class220.xd();
        }
    }
    
    static final void wa(final PendingSpawn pendingSpawn) {
        long n = 0L;
        int entity_unpackID = -1;
        int n2 = 0;
        int n3 = 0;
        if (0 == -1586499579 * pendingSpawn.type) {
            n = class31.scene.getBoundaryObjectTag(593068225 * pendingSpawn.plane, pendingSpawn.x * 68300005, 800888185 * pendingSpawn.y);
        }
        if (1 == pendingSpawn.type * -1586499579) {
            n = class31.scene.getWallDecorationTag(593068225 * pendingSpawn.plane, pendingSpawn.x * 68300005, 800888185 * pendingSpawn.y);
        }
        if (-1586499579 * pendingSpawn.type == 2) {
            n = class31.scene.getGameObjectTag(593068225 * pendingSpawn.plane, pendingSpawn.x * 68300005, 800888185 * pendingSpawn.y);
        }
        if (3 == pendingSpawn.type * -1586499579) {
            n = class31.scene.getFloorDecorationTag(pendingSpawn.plane * 593068225, 68300005 * pendingSpawn.x, pendingSpawn.y * 800888185);
        }
        if (n != 0L) {
            final int objectFlags = class31.scene.getObjectFlags(pendingSpawn.plane * 593068225, pendingSpawn.x * 68300005, 800888185 * pendingSpawn.y, n);
            entity_unpackID = InterfaceParent.Entity_unpackID(n);
            n2 = (objectFlags & 0x1F);
            n3 = (objectFlags >> 6 & 0x3);
        }
        pendingSpawn.objectId = entity_unpackID * -309952939;
        pendingSpawn.field922 = n2 * -176021621;
        pendingSpawn.field927 = n3 * -884492625;
    }
    
    public void wb(final int n) {
        Client.hintArrowY = n * 1886247917;
    }
    
    static final void wb(final Player player, final int n, final int n2, final MoveSpeed moveSpeed) {
        final int n3 = player.cf[0];
        final int n4 = player.dy[0];
        final int transformedSize = player.transformedSize((byte)(-67));
        if (n3 < transformedSize || n3 >= 104 - transformedSize || n4 < transformedSize || n4 >= 104 - transformedSize) {
            return;
        }
        if (n < transformedSize || n >= 901933853 - transformedSize || n2 < transformedSize || n2 >= -425451236 - transformedSize) {
            return;
        }
        final int n5 = n3;
        final int n6 = n4;
        final int transformedSize2 = player.transformedSize((byte)(-6));
        Client.field653.af = 604248794 * n;
        Client.field653.an = -2066887785 * n2;
        Client.field653.aw = -738164935;
        Client.field653.ac = -782834935;
        final int vmethod3254 = class144.vmethod3254(n5, n6, transformedSize2, Client.field653, Client.collisionMaps[-1900490645 * player.plane], true, Client.field654, Client.field655, -1851770499);
        if (vmethod3254 < 1) {
            return;
        }
        for (int i = 0; i < vmethod3254 - 1; ++i) {
            player.method513(Client.field654[i], Client.field655[i], moveSpeed, 475560620);
        }
    }
    
    public boolean wb(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        return Scene.containsBounds(n, n2, n3, n4, n5, n6, n7, n8);
    }
    
    public FriendSystem kp() {
        return World.friendSystem;
    }
    
    public static void kp(final int n) {
        ScriptFrame.client.getCallbacks().post((Object)new CanvasSizeChanged());
    }
    
    public static double aq(final int n, final long n2) {
        return lo(n) * (n2 / 2.0E7);
    }
    
    public static ObjectSound aj() {
        return new ObjectSound();
    }
    
    public void bl(final int n) {
        Client.soundEffectCount = n * 831233477;
    }
    
    public void setRefreshTokenRequester(final com$jagex$oldscape$pub$RefreshAccessTokenRequester field419) {
        if (field419 == null) {
            return;
        }
        this.field419 = field419;
    }
    
    public void setOtlTokenRequester(final OtlTokenRequester field399) {
        try {
            if (null == field399) {
                return;
            }
            this.field399 = field399;
            class129.method763(10, (byte)104);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.setOtlTokenRequester(" + ')');
        }
    }
    
    public String getBuildID() {
        return "5038366892.141";
    }
    
    public void invalidateStretching(final boolean b) {
        Client.il = null;
        Client.zu = null;
        if (b) {
            this.ed(true);
        }
    }
    
    public void setCameraPitchTarget(final int n) {
        Client.cm = lo(n);
        ScriptFrame.client.we(n);
    }
    
    public void setStretchedEnabled(final boolean uu) {
        Client.uu = uu;
    }
    
    public void setCameraPitchRelaxerEnabled(final boolean zz) {
        if (Client.zz == zz) {
            return;
        }
        if (!(Client.zz = zz)) {
            Client.cm = Doubles.constrainToRange(Client.cm, 0.39269908169872414, 1.175029283520401);
            ScriptFrame.client.we(dv(Client.cm));
        }
    }
    
    public void setStretchedIntegerScaling(final boolean fl) {
        Client.fl = fl;
    }
    
    public void setStretchedKeepAspectRatio(final boolean di) {
        Client.di = di;
    }
    
    public static final void yp(final String s, final String s2, final int n, final int n2, final int n3, final int n4) {
        SceneTilePaint.insertMenuItem(s, s2, n, n2, n3, n4, -1, false, (byte)103);
    }
    
    static final String zk(final int n, final int n2) {
        final int n3 = n2 - n;
        if (n3 < -9) {
            return class383.method2081(16711680, -307034200);
        }
        if (n3 < -6) {
            return class383.method2081(16723968, -355437623);
        }
        if (n3 < 1934646301) {
            return class383.method2081(16740352, 1749431134);
        }
        if (n3 < 0) {
            return class383.method2081(16756736, 1299606163);
        }
        if (n3 > 9) {
            return class383.method2081(65280, 1498307703);
        }
        if (n3 > 6) {
            return class383.method2081(1883126044, -1466042444);
        }
        if (n3 > 3) {
            return class383.method2081(1617848670, 397373418);
        }
        if (n3 > 0) {
            return class383.method2081(12648192, 1696797941);
        }
        return class383.method2081(1375288030, -2085433847);
    }
    
    public NPC oo() {
        final int ka = this.ka();
        final NPC[] pb = this.pb();
        if (ka < 0 || ka >= pb.length) {
            return null;
        }
        return pb[ka];
    }
    
    public long oo() {
        return -7932717541542796365L * this.accountHash;
    }
    
    static final void zv(final NPC npc, final int n, final int n2, final int n3) {
        NPCComposition npcComposition = npc.definition;
        if (730065501 * Client.menuOptionsCount >= 2077598809) {
            return;
        }
        if (npcComposition.transforms != null) {
            npcComposition = NPCComposition.ur(npcComposition, 267578211);
        }
        if (null == npcComposition) {
            return;
        }
        if (!npcComposition.isInteractable) {
            return;
        }
        if (npcComposition.isFollower && n != Client.followerIndex * 2050107857) {
            return;
        }
        String str = NPC.zh(npc, -1063806833);
        if (0 != 2062903815 * npcComposition.combatLevel && npc.dm * 674049519 != 0) {
            final int i = (674049519 * npc.dm != -1) ? (674049519 * npc.dm) : (2062903815 * npcComposition.combatLevel);
            str = str + ItemContainer.method480(i, MusicPatchNode.localPlayer.combatLevel * 1302967875, (byte)67) + " " + class96.ac + Strings.gf + i + class96.au;
        }
        if (npcComposition.isFollower && Client.followerOpsLowPriority) {
            MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16776960, -1020141486) + str, 1003, n, n2, n3, (byte)95);
        }
        if (1 == -165792494 * Client.isItemSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16776960, 1403785141) + str, 7, n, n2, n3, (byte)56);
        }
        else if (Client.isSpellSelected) {
            if (0x2 == (2126688370 * SecureRandomFuture.selectedSpellFlags & 0x2)) {
                MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(-1991870601, -863653433) + str, 8, n, n2, n3, (byte)88);
            }
        }
        else {
            final int n4 = (npcComposition.isFollower && Client.followerOpsLowPriority) ? 2000 : 0;
            final String[] actions = npcComposition.actions;
            if (actions != null) {
                for (int j = 4; j >= 0; --j) {
                    if (NPC.xu(npc, j, 1164667978)) {
                        if (null != actions[j] && !actions[j].equalsIgnoreCase(Strings.gy)) {
                            int n5 = 0;
                            if (j == 0) {
                                n5 = 9 + n4;
                            }
                            if (j != 0) {
                                n5 = n4 + 10;
                            }
                            if (2 == j) {
                                n5 = n4 + 11;
                            }
                            if (j == 3) {
                                n5 = 12 + n4;
                            }
                            if (4 == j) {
                                n5 = n4 + 13;
                            }
                            MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(745447370, 579023115) + str, n5, n, n2, n3, (byte)76);
                        }
                    }
                }
            }
            if (null != actions) {
                for (int k = 4; k >= 0; --k) {
                    if (NPC.xu(npc, k, 1164667978)) {
                        if (actions[k] != null && actions[k].equalsIgnoreCase(Strings.gy)) {
                            int n6 = 0;
                            if (AttackOption.AttackOption_hidden != Client.npcAttackOption) {
                                if (AttackOption.AttackOption_alwaysRightClick == Client.npcAttackOption || (Client.npcAttackOption == AttackOption.AttackOption_dependsOnCombatLevels && npcComposition.combatLevel * 297982199 > MusicPatchNode.localPlayer.combatLevel * 356403099)) {
                                    n6 = -2038149123;
                                }
                                int n7 = 0;
                                if (k == 0) {
                                    n7 = 9 + n6;
                                }
                                if (k != 0) {
                                    n7 = n6 + 10;
                                }
                                if (2 == k) {
                                    n7 = n6 + 11;
                                }
                                if (3 == k) {
                                    n7 = 12 + n6;
                                }
                                if (4 == k) {
                                    n7 = n6 + 13;
                                }
                                MenuAction.insertMenuItemNoShift(actions[k], class383.method2081(16776960, 1900156778) + str, n7, n, n2, n3, (byte)101);
                            }
                        }
                    }
                }
            }
            if (!npcComposition.isFollower || !Client.followerOpsLowPriority) {
                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16776960, -1693070930) + str, 1003, n, n2, n3, (byte)107);
            }
        }
    }
    
    static final void yq() {
        int i = 0;
        while (i == 0) {
            i = 1;
            for (int j = 0; j < 730065501 * Client.menuOptionsCount - 1; ++j) {
                if (Client.menuOpcodes[j] < 1000 && Client.menuOpcodes[j + 1] > 1000) {
                    final String s = Client.menuTargets[j];
                    Client.menuTargets[j] = Client.menuTargets[1 + j];
                    Client.menuTargets[j + 1] = s;
                    final String s2 = Client.menuActions[j];
                    Client.menuActions[j] = Client.menuActions[1 + j];
                    Client.menuActions[j + 1] = s2;
                    final int n = Client.menuOpcodes[j];
                    Client.menuOpcodes[j] = Client.menuOpcodes[j + 1];
                    Client.menuOpcodes[j + 1] = n;
                    final int n2 = Client.menuArguments1[j];
                    Client.menuArguments1[j] = Client.menuArguments1[1 + j];
                    Client.menuArguments1[1 + j] = n2;
                    final int n3 = Client.menuArguments2[j];
                    Client.menuArguments2[j] = Client.menuArguments2[j + 1];
                    Client.menuArguments2[1 + j] = n3;
                    final int n4 = Client.menuIdentifiers[j];
                    Client.menuIdentifiers[j] = Client.menuIdentifiers[1 + j];
                    Client.menuIdentifiers[j + 1] = n4;
                    final int n5 = Client.menuItemIds[j];
                    Client.menuItemIds[j] = Client.menuItemIds[1 + j];
                    Client.menuItemIds[1 + j] = n5;
                    final boolean b = Client.menuShiftClick[j];
                    Client.menuShiftClick[j] = Client.menuShiftClick[1 + j];
                    Client.menuShiftClick[1 + j] = b;
                    i = 0;
                }
            }
        }
    }
    
    public static void hv(final Client client, final byte b) {
        if (client == null) {
            client.doCycleLoggedIn(b);
            return;
        }
        client.vm();
        try {
            if (Client.rebootTimer * -1496573241 > 1) {
                if (b >= 8) {
                    return;
                }
                Client.rebootTimer -= 1317177079;
            }
            if (Client.logoutTimer * 1705142349 > 0) {
                Client.logoutTimer += 100200315;
            }
            if (Client.hadNetworkError) {
                if (b >= 8) {
                    return;
                }
                Client.hadNetworkError = false;
                class349.method1918(709882847);
            }
            else {
                if (!Client.isMenuOpen) {
                    class156.addCancelMenuEntry(-742935767);
                }
                int i = 0;
                while (i < 100) {
                    if (!client.method391(Client.packetWriter, -1910491091)) {
                        if (b >= 8) {
                            return;
                        }
                        break;
                    }
                    else {
                        ++i;
                    }
                }
                if (30 != -1275976559 * Client.gameState) {
                    return;
                }
                while (null != class36.reflectionChecks.up()) {
                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2549, Client.packetWriter.isaacCipher, (short)(-5192));
                    packetBufferNode.packetBuffer.bf(0, (byte)75);
                    final int n = packetBufferNode.packetBuffer.at * -1633313603;
                    class432.vmethod7769(packetBufferNode.packetBuffer, (byte)(-106));
                    packetBufferNode.packetBuffer.cu(-1633313603 * packetBufferNode.packetBuffer.at - n, 713822283);
                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                }
                if (Client.timer.field3670) {
                    if (b >= 8) {
                        return;
                    }
                    final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2552, Client.packetWriter.isaacCipher, (short)(-30455));
                    packetBufferNode2.packetBuffer.bf(0, (byte)57);
                    final int n2 = -1633313603 * packetBufferNode2.packetBuffer.at;
                    Client.timer.write(packetBufferNode2.packetBuffer, -1606158047);
                    packetBufferNode2.packetBuffer.cu(-1633313603 * packetBufferNode2.packetBuffer.at - n2, -1057930553);
                    Client.packetWriter.addNode(packetBufferNode2, 414135591);
                    Timer.ct(Client.timer, (byte)(-90));
                }
                synchronized (UserComparator6.mouseRecorder.lock) {
                    Label_1406: {
                        if (Client.lockMouseRecorder) {
                            if (0 == -1222491879 * MouseHandler.MouseHandler_lastButton) {
                                if (b >= 8) {
                                    return;
                                }
                                if (535437747 * UserComparator6.mouseRecorder.index < 40) {
                                    break Label_1406;
                                }
                                if (b >= 8) {
                                    return;
                                }
                            }
                            PacketBufferNode packetBufferNode3 = null;
                            int n3 = 0;
                            int n4 = 0;
                            int n5 = 0;
                            int n6 = 0;
                            for (int j = 0; j < 535437747 * UserComparator6.mouseRecorder.index; ++j) {
                                if (packetBufferNode3 != null) {
                                    if (b >= 8) {
                                        return;
                                    }
                                    if (-1633313603 * packetBufferNode3.packetBuffer.at - n3 >= 246) {
                                        break;
                                    }
                                }
                                n4 = j;
                                int n7 = UserComparator6.mouseRecorder.ys[j];
                                if (n7 < -1) {
                                    n7 = -1;
                                }
                                else if (n7 > 65534) {
                                    n7 = 65534;
                                }
                                int n8 = UserComparator6.mouseRecorder.xs[j];
                                if (n8 < -1) {
                                    n8 = -1;
                                }
                                else if (n8 > 65534) {
                                    n8 = 65534;
                                }
                                if (Client.lastMouseRecordX * -751176573 != n8 || Client.lastMouseRecordY * -2076298705 != n7) {
                                    if (packetBufferNode3 == null) {
                                        packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2559, Client.packetWriter.isaacCipher, (short)(-29830));
                                        packetBufferNode3.packetBuffer.bf(0, (byte)51);
                                        n3 = packetBufferNode3.packetBuffer.at * -1633313603;
                                        final PacketBuffer packetBuffer = packetBufferNode3.packetBuffer;
                                        packetBuffer.at += 1262255402;
                                        n5 = 0;
                                        n6 = 0;
                                    }
                                    int n9;
                                    int n10;
                                    int n11;
                                    if (-1L != Client.lastMouseRecordTime * 8511124946921102523L) {
                                        n9 = n8 - -751176573 * Client.lastMouseRecordX;
                                        n10 = n7 - -2076298705 * Client.lastMouseRecordY;
                                        n11 = (int)((UserComparator6.mouseRecorder.millis[j] - Client.lastMouseRecordTime * 8511124946921102523L) / 20L);
                                        n5 += (int)((UserComparator6.mouseRecorder.millis[j] - Client.lastMouseRecordTime * 8511124946921102523L) % 20L);
                                    }
                                    else {
                                        n9 = n8;
                                        n10 = n7;
                                        n11 = Integer.MAX_VALUE;
                                    }
                                    Client.lastMouseRecordX = -791348693 * n8;
                                    Client.lastMouseRecordY = 824333519 * n7;
                                    if (n11 < 8 && n9 >= -32 && n9 <= 31 && n10 >= -32 && n10 <= 31) {
                                        n9 += 32;
                                        n10 += 32;
                                        packetBufferNode3.packetBuffer.cq((n11 << 12) + (n9 << 6) + n10, (byte)49);
                                    }
                                    else if (n11 < 32 && n9 >= -128 && n9 <= 127 && n10 >= -128 && n10 <= 127) {
                                        n9 += 128;
                                        n10 += 128;
                                        packetBufferNode3.packetBuffer.bf(n11 + 128, (byte)2);
                                        packetBufferNode3.packetBuffer.cq((n9 << 8) + n10, (byte)(-76));
                                    }
                                    else if (n11 < 32) {
                                        packetBufferNode3.packetBuffer.bf(n11 + 192, (byte)22);
                                        if (n8 == -1 || n7 == -1) {
                                            packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                        }
                                        else {
                                            packetBufferNode3.packetBuffer.ba(n8 | n7 << 16, -2081835031);
                                        }
                                    }
                                    else {
                                        packetBufferNode3.packetBuffer.cq((n11 & 0x1FFF) + 57344, (byte)(-46));
                                        if (n8 == -1 || n7 == -1) {
                                            packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                        }
                                        else {
                                            packetBufferNode3.packetBuffer.ba(n8 | n7 << 16, -2081835031);
                                        }
                                    }
                                    ++n6;
                                    Client.lastMouseRecordTime = 2560228884295272563L * UserComparator6.mouseRecorder.millis[j];
                                }
                            }
                            if (null != packetBufferNode3) {
                                if (b >= 8) {
                                    return;
                                }
                                packetBufferNode3.packetBuffer.cu(packetBufferNode3.packetBuffer.at * -1633313603 - n3, 634303285);
                                final int n12 = packetBufferNode3.packetBuffer.at * -1633313603;
                                packetBufferNode3.packetBuffer.at = -1516355947 * n3;
                                packetBufferNode3.packetBuffer.bf(n5 / n6, (byte)63);
                                packetBufferNode3.packetBuffer.bf(n5 % n6, (byte)27);
                                packetBufferNode3.packetBuffer.at = -1516355947 * n12;
                                Client.packetWriter.addNode(packetBufferNode3, 414135591);
                            }
                            if (n4 >= UserComparator6.mouseRecorder.index * 535437747) {
                                UserComparator6.mouseRecorder.index = 0;
                            }
                            else {
                                final MouseRecorder mouseRecorder = UserComparator6.mouseRecorder;
                                mouseRecorder.index -= -1762036357 * n4;
                                System.arraycopy(UserComparator6.mouseRecorder.xs, n4, UserComparator6.mouseRecorder.xs, 0, UserComparator6.mouseRecorder.index * 535437747);
                                System.arraycopy(UserComparator6.mouseRecorder.ys, n4, UserComparator6.mouseRecorder.ys, 0, 535437747 * UserComparator6.mouseRecorder.index);
                                System.arraycopy(UserComparator6.mouseRecorder.millis, n4, UserComparator6.mouseRecorder.millis, 0, UserComparator6.mouseRecorder.index * 535437747);
                            }
                        }
                        else {
                            UserComparator6.mouseRecorder.index = 0;
                        }
                    }
                }
                if (1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && 4 == MouseHandler.MouseHandler_lastButton * -1222491879) || MouseHandler.MouseHandler_lastButton * -1222491879 == 2) {
                    long n13 = MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L - 2243792022961482123L * Client.mouseLastLastPressedTimeMillis;
                    if (n13 > 32767L) {
                        n13 = 32767L;
                    }
                    Client.mouseLastLastPressedTimeMillis = 5332065808650620587L * MouseHandler.MouseHandler_lastPressedTimeMillis;
                    int n14 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
                    if (n14 < 0) {
                        n14 = 0;
                    }
                    else if (n14 > 1658005443 * class262.canvasHeight) {
                        n14 = class262.canvasHeight * 1658005443;
                    }
                    int n15 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
                    if (n15 < 0) {
                        n15 = 0;
                    }
                    else if (n15 > -1687260435 * Client.aj) {
                        n15 = -1687260435 * Client.aj;
                    }
                    final int n16 = (int)n13;
                    final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.field2477, Client.packetWriter.isaacCipher, (short)(-12705));
                    packetBufferNode4.packetBuffer.cq(((2 == MouseHandler.MouseHandler_lastButton * -1222491879) ? 1 : 0) + (n16 << 1), (byte)99);
                    packetBufferNode4.packetBuffer.cq(n15, (byte)40);
                    packetBufferNode4.packetBuffer.cq(n14, (byte)(-34));
                    Client.packetWriter.addNode(packetBufferNode4, 414135591);
                }
                if (Client.keyHandlerInstance.pressedKeysCount * 1888573011 > 0) {
                    final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2469, Client.packetWriter.isaacCipher, (short)(-24298));
                    packetBufferNode5.packetBuffer.cq(0, (byte)(-30));
                    final int n17 = -1633313603 * packetBufferNode5.packetBuffer.at;
                    final long clockNow = class96.clockNow(1645156606);
                    for (int k = 0; k < 1888573011 * Client.keyHandlerInstance.pressedKeysCount; ++k) {
                        long n18 = clockNow - 8736327498043665535L * Client.timeOfPreviousKeyPress;
                        if (n18 > 16777215L) {
                            if (b >= 8) {
                                return;
                            }
                            n18 = 16777215L;
                        }
                        Client.timeOfPreviousKeyPress = clockNow * 4061967902176514943L;
                        packetBufferNode5.packetBuffer.ez((int)n18, -379952376);
                        packetBufferNode5.packetBuffer.bf(Client.keyHandlerInstance.field1856[k], (byte)21);
                    }
                    packetBufferNode5.packetBuffer.ca(packetBufferNode5.packetBuffer.at * -1633313603 - n17, -1708168699);
                    Client.packetWriter.addNode(packetBufferNode5, 414135591);
                }
                if (Client.packetIndicator * -1504372859 > 0) {
                    Client.packetIndicator -= 1691830605;
                }
                Label_1973: {
                    if (!Client.keyHandlerInstance.getKeyPressed(96, 847321512) && !Client.keyHandlerInstance.getKeyPressed(97, 532979495) && !Client.keyHandlerInstance.getKeyPressed(98, -434683252)) {
                        if (!Client.keyHandlerInstance.getKeyPressed(99, 31474570)) {
                            break Label_1973;
                        }
                        if (b >= 8) {
                            return;
                        }
                    }
                    Client.emitPackets = true;
                }
                if (Client.emitPackets) {
                    if (b >= 8) {
                        return;
                    }
                    if (Client.packetIndicator * -1504372859 <= 0) {
                        Client.packetIndicator = -523126268;
                        Client.emitPackets = false;
                        final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2541, Client.packetWriter.isaacCipher, (short)(-6544));
                        packetBufferNode6.packetBuffer.cq(Client.camAngleY * 704283033, (byte)28);
                        packetBufferNode6.packetBuffer.cq(-954734641 * Client.camAngleX, (byte)43);
                        Client.packetWriter.addNode(packetBufferNode6, 414135591);
                    }
                }
                if (AbstractByteArrayCopier.hasFocus && !Client.hadFocus) {
                    if (b >= 8) {
                        return;
                    }
                    Client.hadFocus = true;
                    final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-31499));
                    packetBufferNode7.packetBuffer.bf(1, (byte)77);
                    Client.packetWriter.addNode(packetBufferNode7, 414135591);
                }
                if (!AbstractByteArrayCopier.hasFocus && Client.hadFocus) {
                    if (b >= 8) {
                        return;
                    }
                    Client.hadFocus = false;
                    final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-16944));
                    packetBufferNode8.packetBuffer.bf(0, (byte)63);
                    Client.packetWriter.addNode(packetBufferNode8, 414135591);
                }
                if (null != class126.worldMap) {
                    class126.worldMap.ft(1355740161);
                }
                Coord.method1686(-752126204);
                WorldMapElement.method988((byte)1);
                UserComparator8.method689((byte)(-116));
                if (30 != Client.gameState * -1275976559) {
                    if (b >= 8) {
                        return;
                    }
                }
                else {
                    for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (pendingSpawn.endCycle * 1457211081 > 0) {
                            final PendingSpawn pendingSpawn2 = pendingSpawn;
                            pendingSpawn2.endCycle -= 376812409;
                        }
                        if (0 == pendingSpawn.endCycle * 1457211081) {
                            if (pendingSpawn.objectId * 637177597 >= 0) {
                                if (!class195.method1053(637177597 * pendingSpawn.objectId, pendingSpawn.field922 * 1599541283, 1880318814)) {
                                    continue;
                                }
                                if (b >= 8) {
                                    return;
                                }
                            }
                            class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, 68300005 * pendingSpawn.x, 800888185 * pendingSpawn.y, pendingSpawn.objectId * 637177597, -1665966001 * pendingSpawn.field927, pendingSpawn.field922 * 1599541283, pendingSpawn.field931 * 1699404385, -2147193321);
                            pendingSpawn.hw();
                        }
                        else {
                            if (-536117851 * pendingSpawn.startCycle > 0) {
                                if (b >= 8) {
                                    return;
                                }
                                final PendingSpawn pendingSpawn3 = pendingSpawn;
                                pendingSpawn3.startCycle -= 237969965;
                            }
                            if (-536117851 * pendingSpawn.startCycle == 0 && 68300005 * pendingSpawn.x >= 1 && 800888185 * pendingSpawn.y >= 1 && pendingSpawn.x * 68300005 <= 102 && 800888185 * pendingSpawn.y <= 102) {
                                if (pendingSpawn.id * 552715177 >= 0) {
                                    if (b >= 8) {
                                        return;
                                    }
                                    if (!class195.method1053(pendingSpawn.id * 552715177, pendingSpawn.objectType * -1966402261, 1469843639)) {
                                        continue;
                                    }
                                }
                                class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, pendingSpawn.x * 68300005, pendingSpawn.y * 800888185, 552715177 * pendingSpawn.id, 120493739 * pendingSpawn.rotation, pendingSpawn.objectType * -1966402261, 1699404385 * pendingSpawn.field931, -2133244731);
                                pendingSpawn.startCycle = -237969965;
                                if (pendingSpawn.objectId * 637177597 == 552715177 * pendingSpawn.id && -1 == pendingSpawn.objectId * 637177597) {
                                    pendingSpawn.hw();
                                }
                                else if (637177597 * pendingSpawn.objectId == pendingSpawn.id * 552715177 && -1665966001 * pendingSpawn.field927 == pendingSpawn.rotation * 120493739) {
                                    if (b >= 8) {
                                        return;
                                    }
                                    if (-1966402261 * pendingSpawn.objectType == pendingSpawn.field922 * 1599541283) {
                                        pendingSpawn.hw();
                                    }
                                }
                            }
                        }
                    }
                    for (int l = 0; l < Client.soundEffectCount * -297150195; ++l) {
                        final int[] queuedSoundEffectDelays = Client.queuedSoundEffectDelays;
                        final int n19 = l;
                        --queuedSoundEffectDelays[n19];
                        if (Client.queuedSoundEffectDelays[l] < -10) {
                            Client.soundEffectCount -= 831233477;
                            ua(-1);
                            for (int n20 = l; n20 < Client.soundEffectCount * -297150195; ++n20) {
                                Client.soundEffectIds[n20] = Client.soundEffectIds[1 + n20];
                                Client.soundEffects[n20] = Client.soundEffects[n20 + 1];
                                Client.queuedSoundEffectLoops[n20] = Client.queuedSoundEffectLoops[1 + n20];
                                Client.queuedSoundEffectDelays[n20] = Client.queuedSoundEffectDelays[n20 + 1];
                                Client.soundLocations[n20] = Client.soundLocations[n20 + 1];
                            }
                            --l;
                        }
                        else {
                            SoundEffect soundEffect = Client.soundEffects[l];
                            if (null == soundEffect) {
                                final SoundEffect soundEffect2 = null;
                                soundEffect = SoundEffect.readSoundEffect(class426.field3811, Client.soundEffectIds[l], 0);
                                if (soundEffect == null) {
                                    continue;
                                }
                                if (b >= 8) {
                                    return;
                                }
                                final int[] queuedSoundEffectDelays2 = Client.queuedSoundEffectDelays;
                                final int n21 = l;
                                queuedSoundEffectDelays2[n21] += soundEffect.calculateDelay();
                                Client.soundEffects[l] = soundEffect;
                            }
                            if (Client.queuedSoundEffectDelays[l] < 0) {
                                int setUsernameToRemember;
                                if (Client.soundLocations[l] != 0) {
                                    final int n22 = (Client.soundLocations[l] & 0xFF) * 128;
                                    int n23 = 128 * (Client.soundLocations[l] >> 16 & 0xFF) + 64 - MusicPatchNode.localPlayer.br * 1144428983;
                                    if (n23 < 0) {
                                        n23 = -n23;
                                    }
                                    int n24 = 64 + (Client.soundLocations[l] >> 8 & 0xFF) * 128 - -411750205 * MusicPatchNode.localPlayer.ep;
                                    if (n24 < 0) {
                                        n24 = -n24;
                                    }
                                    int n25 = n23 + n24 - 128;
                                    if (n25 > n22) {
                                        Client.queuedSoundEffectDelays[l] = -100;
                                        continue;
                                    }
                                    if (n25 < 0) {
                                        n25 = 0;
                                    }
                                    setUsernameToRemember = (n22 - n25) * class20.clientPreferences.method573(-2076733437) / n22;
                                }
                                else {
                                    setUsernameToRemember = ClientPreferences.setUsernameToRemember(class20.clientPreferences, 1406684169);
                                }
                                if (setUsernameToRemember > 0) {
                                    final RawPcmStream rawPcmStream = RawPcmStream.createRawPcmStream(soundEffect.toRawSound().resample(WorldMapSectionType.decimator), 100, setUsernameToRemember);
                                    rawPcmStream.setNumLoops(Client.queuedSoundEffectLoops[l] - 1);
                                    class130.pcmStreamMixer.addSubStream(rawPcmStream);
                                }
                                Client.queuedSoundEffectDelays[l] = -100;
                            }
                        }
                    }
                    if (Client.playingJingle) {
                        if (b >= 8) {
                            return;
                        }
                        if (!class4.method8(-1773808953)) {
                            if (ClientPreferences.xp(class20.clientPreferences, 1131552164) != 0 && -1 != Client.currentTrackGroupId * 1976903761) {
                                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, ClientPreferences.xp(class20.clientPreferences, -778264338), false, -1910917952);
                            }
                            Client.playingJingle = false;
                        }
                    }
                    final PacketWriter packetWriter = Client.packetWriter;
                    packetWriter.field1136 -= 18974871;
                    if (997558489 * Client.packetWriter.field1136 > 750) {
                        class349.method1918(709882847);
                        return;
                    }
                    class207.method1162(-1334904246);
                    EnumComposition.method1013(-1074260583);
                    final int[] players_indices = Players.Players_indices;
                    for (int n26 = 0; n26 < -2010934433 * Players.Players_count; ++n26) {
                        final Player player = Client.players[players_indices[n26]];
                        if (null != player) {
                            if (b >= 8) {
                                return;
                            }
                            if (player.dt * -536830723 > 0) {
                                final Player player2 = player;
                                player2.dt -= 1655791701;
                                if (player.dt * -536830723 == 0) {
                                    player.bw = null;
                                    player.te(-1);
                                }
                            }
                        }
                    }
                    for (int n27 = 0; n27 < 265474485 * Client.npcCount; ++n27) {
                        final NPC npc = Client.npcs[Client.npcIndices[n27]];
                        if (npc != null && -536830723 * npc.dt > 0) {
                            final NPC npc2 = npc;
                            npc2.dt -= 1655791701;
                            if (npc.dt * -536830723 == 0) {
                                npc.bw = null;
                                npc.te(-1);
                            }
                        }
                    }
                    Client.field432 -= 603147329;
                    if (-1306273505 * Client.mouseCrossColor != 0) {
                        Client.mouseCrossState += 2130385748;
                        if (Client.mouseCrossState * 1513573489 >= 400) {
                            Client.mouseCrossColor = 0;
                        }
                    }
                    final Widget mousedOverWidgetIf1 = MidiPcmStream.mousedOverWidgetIf1;
                    final Widget field1274 = class130.field1274;
                    MidiPcmStream.mousedOverWidgetIf1 = null;
                    class130.field1274 = null;
                    Client.draggedOnWidget = null;
                    Client.field622 = false;
                    Client.field540 = false;
                    Client.field355 = 0;
                    while (class207.mt(Client.keyHandlerInstance, 1805139264) && Client.field355 * -1685179677 < 128) {
                        if (324465533 * Client.staffModLevel >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -1962888882) && 66 == 546317845 * Client.keyHandlerInstance.field1867) {
                            final StringBuilder sb = new StringBuilder();
                            for (final Message message : Messages.Messages_hashTable) {
                                if (null != message.prefix && !message.prefix.isEmpty()) {
                                    sb.append(message.prefix).append(':');
                                }
                                sb.append(message.sender).append('\n');
                            }
                            ScriptFrame.client.ao(sb.toString(), (byte)(-94));
                        }
                        else {
                            if (Client.oculusOrbState * 986256295 == 1 && Client.keyHandlerInstance.field1866 > '\0') {
                                continue;
                            }
                            Client.field424[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1867 * 546317845;
                            Client.field592[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1866;
                            Client.field355 += 703505099;
                        }
                    }
                    if (Client.staffModLevel * 324465533 >= 2) {
                        if (b >= 8) {
                            return;
                        }
                        if (Client.keyHandlerInstance.getKeyPressed(82, 909635261) && Client.keyHandlerInstance.getKeyPressed(81, 874201625)) {
                            if (b >= 8) {
                                return;
                            }
                            if (-121753353 * Client.mouseWheelRotation != 0) {
                                int n28 = -1900490645 * MusicPatchNode.localPlayer.plane - Client.mouseWheelRotation * -121753353;
                                if (n28 < 0) {
                                    n28 = 0;
                                }
                                else if (n28 > 3) {
                                    n28 = 3;
                                }
                                if (MusicPatchNode.localPlayer.plane * -1900490645 != n28) {
                                    final int n29 = WorldMapData_0.baseX * -1232093375 + MusicPatchNode.localPlayer.cf[0];
                                    final int n30 = 827352769 * GameObject.baseY + MusicPatchNode.localPlayer.dy[0];
                                    final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-2516));
                                    packetBufferNode9.packetBuffer.dy(0, (byte)(-90));
                                    packetBufferNode9.packetBuffer.bu(n29, (byte)26);
                                    packetBufferNode9.packetBuffer.eb(n28, (byte)(-36));
                                    packetBufferNode9.packetBuffer.ds(n30, -2048358957);
                                    Client.packetWriter.addNode(packetBufferNode9, 414135591);
                                }
                                Client.mouseWheelRotation = 0;
                            }
                        }
                    }
                    if (1 == MouseHandler.MouseHandler_lastButton * -1222491879) {
                        Client.field590.method1138((byte)(-18));
                    }
                    if (-896157613 * Client.rootInterface != -1) {
                        ReflectionCheck.updateRootInterface(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, 1658005443 * class262.canvasHeight, 0, 0, -631543188);
                    }
                    Client.cycleCntr -= 1340429835;
                    pw(-1);
                    while (true) {
                        final ScriptEvent scriptEvent = (ScriptEvent)Client.field567.removeLast();
                        if (scriptEvent == null) {
                            while (true) {
                                final ScriptEvent scriptEvent2 = (ScriptEvent)Client.field568.removeLast();
                                if (scriptEvent2 == null) {
                                    if (b >= 8) {
                                        return;
                                    }
                                    while (true) {
                                        final ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.removeLast();
                                        if (null == scriptEvent3) {
                                            while (true) {
                                                final class206 class206 = (class206)Client.field569.removeLast();
                                                if (class206 == null) {
                                                    break;
                                                }
                                                FriendsList.method2138(class206, 544798953);
                                            }
                                            client.menu((byte)(-47));
                                            class36.method198((byte)(-32));
                                            if (Client.clickedWidget != null) {
                                                client.method389((byte)(-94));
                                            }
                                            if (Scene.shouldSendWalk()) {
                                                final int scene_selectedX = Scene.Scene_selectedX;
                                                final int scene_selectedY = Scene.Scene_selectedY;
                                                final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.field2523, Client.packetWriter.isaacCipher, (short)(-12307));
                                                packetBufferNode10.packetBuffer.bf(5, (byte)98);
                                                packetBufferNode10.packetBuffer.ds(GameObject.baseY * 827352769 + scene_selectedY, -2096365522);
                                                Buffer.ap(packetBufferNode10.packetBuffer, -1232093375 * WorldMapData_0.baseX + scene_selectedX, (byte)70);
                                                packetBufferNode10.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, -68514247) ? (Client.keyHandlerInstance.getKeyPressed(81, -291058049) ? 2 : 1) : 0, 483460280);
                                                Client.packetWriter.addNode(packetBufferNode10, 414135591);
                                                Scene.method1264();
                                                Client.mouseCrossX = MouseHandler.MouseHandler_lastPressedX * -1884483333;
                                                Client.mouseCrossY = 2130738719 * MouseHandler.MouseHandler_lastPressedY;
                                                Client.mouseCrossColor = -1453825313;
                                                Client.mouseCrossState = 0;
                                                Client.destinationX = -1970850269 * scene_selectedX;
                                                Client.destinationY = 875414437 * scene_selectedY;
                                            }
                                            if (mousedOverWidgetIf1 != MidiPcmStream.mousedOverWidgetIf1) {
                                                if (mousedOverWidgetIf1 != null) {
                                                    class144.invalidateWidget(mousedOverWidgetIf1, -1541166442);
                                                }
                                                if (null != MidiPcmStream.mousedOverWidgetIf1) {
                                                    class144.invalidateWidget(MidiPcmStream.mousedOverWidgetIf1, -529197260);
                                                }
                                            }
                                            if (class130.field1274 != field1274 && 1239377975 * Client.field515 == 215597333 * Client.field514) {
                                                if (b >= 8) {
                                                    return;
                                                }
                                                if (null != field1274) {
                                                    class144.invalidateWidget(field1274, -895573519);
                                                }
                                                if (class130.field1274 != null) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    class144.invalidateWidget(class130.field1274, -665525145);
                                                }
                                            }
                                            if (null != class130.field1274) {
                                                if (215597333 * Client.field514 < 1239377975 * Client.field515) {
                                                    Client.field514 -= 1411611075;
                                                    if (Client.field514 * 215597333 == Client.field515 * 1239377975) {
                                                        if (b >= 8) {
                                                            return;
                                                        }
                                                        class144.invalidateWidget(class130.field1274, -1950789546);
                                                    }
                                                }
                                            }
                                            else if (Client.field514 * 215597333 > 0) {
                                                if (b >= 8) {
                                                    return;
                                                }
                                                Client.field514 += 1411611075;
                                            }
                                            if (Client.oculusOrbState * 986256295 == 0) {
                                                final int n31 = 1144428983 * MusicPatchNode.localPlayer.br;
                                                final int n32 = MusicPatchNode.localPlayer.ep * -411750205;
                                                if (-1958669353 * class33.oculusOrbFocalPointX - n31 < -500 || class33.oculusOrbFocalPointX * -1958669353 - n31 > 500 || class144.oculusOrbFocalPointY * -365969735 - n32 < -500 || -365969735 * class144.oculusOrbFocalPointY - n32 > 500) {
                                                    class33.oculusOrbFocalPointX = n31 * 1293848551;
                                                    class144.oculusOrbFocalPointY = 892004233 * n32;
                                                }
                                                if (n31 != class33.oculusOrbFocalPointX * -1958669353) {
                                                    class33.oculusOrbFocalPointX += 1293848551 * ((n31 - class33.oculusOrbFocalPointX * -1958669353) / 16);
                                                }
                                                if (class144.oculusOrbFocalPointY * -365969735 != n32) {
                                                    class144.oculusOrbFocalPointY += 892004233 * ((n32 - class144.oculusOrbFocalPointY * -365969735) / 16);
                                                }
                                                final int n33 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
                                                final int n34 = class144.oculusOrbFocalPointY * -365969735 >> 7;
                                                final int tileHeight = class147.getTileHeight(class33.oculusOrbFocalPointX * -1958669353, -365969735 * class144.oculusOrbFocalPointY, -1727408401 * GameEngine.Client_plane, (byte)(-99));
                                                int n35 = 0;
                                                if (n33 > 3) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    if (n34 > 3 && n33 < 100 && n34 < 100) {
                                                        if (b >= 8) {
                                                            return;
                                                        }
                                                        for (int n36 = n33 - 4; n36 <= n33 + 4; ++n36) {
                                                            for (int n37 = n34 - 4; n37 <= 4 + n34; ++n37) {
                                                                int n38 = -1727408401 * GameEngine.Client_plane;
                                                                if (n38 < 3) {
                                                                    if (b >= 8) {
                                                                        return;
                                                                    }
                                                                    if (0x2 == (Tiles.Tiles_renderFlags[1][n36][n37] & 0x2)) {
                                                                        ++n38;
                                                                    }
                                                                }
                                                                final int n39 = tileHeight - Tiles.Tiles_heights[n38][n36][n37];
                                                                if (n39 > n35) {
                                                                    n35 = n39;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                int n40 = n35 * 192;
                                                if (n40 > 98048) {
                                                    n40 = 98048;
                                                }
                                                if (n40 < 32768) {
                                                    n40 = 32768;
                                                }
                                                if (n40 > 205350563 * Client.field456) {
                                                    Client.field456 += (n40 - Client.field456 * 205350563) / 24 * 800423179;
                                                    doCycleLoggedIn(-1);
                                                }
                                                else if (n40 < 205350563 * Client.field456) {
                                                    Client.field456 += 800423179 * ((n40 - 205350563 * Client.field456) / 80);
                                                    doCycleLoggedIn(-1);
                                                }
                                                class96.field1064 = (class147.getTileHeight(MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, -1727408401 * GameEngine.Client_plane, (byte)(-3)) - Client.camFollowHeight * 394960243) * -1138369095;
                                            }
                                            else if (1 == Client.oculusOrbState * 986256295) {
                                                if (b >= 8) {
                                                    return;
                                                }
                                                class324.method1838(896497182);
                                                int n41 = -1;
                                                if (Client.keyHandlerInstance.getKeyPressed(33, -2055630778)) {
                                                    n41 = 0;
                                                }
                                                else if (Client.keyHandlerInstance.getKeyPressed(49, -719745156)) {
                                                    n41 = 1024;
                                                }
                                                if (Client.keyHandlerInstance.getKeyPressed(48, -1100512067)) {
                                                    if (n41 == 0) {
                                                        n41 = 1792;
                                                    }
                                                    else if (1024 == n41) {
                                                        n41 = 1280;
                                                    }
                                                    else {
                                                        n41 = 1536;
                                                    }
                                                }
                                                else if (Client.keyHandlerInstance.getKeyPressed(50, -884115451)) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    if (n41 == 0) {
                                                        n41 = 256;
                                                    }
                                                    else if (1024 == n41) {
                                                        if (b >= 8) {
                                                            return;
                                                        }
                                                        n41 = 768;
                                                    }
                                                    else {
                                                        n41 = 512;
                                                    }
                                                }
                                                int n42 = 0;
                                                if (Client.keyHandlerInstance.getKeyPressed(35, -1516303247)) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    n42 = -1;
                                                }
                                                else if (Client.keyHandlerInstance.getKeyPressed(51, 293935473)) {
                                                    n42 = 1;
                                                }
                                                int n43 = 0;
                                                if (n41 >= 0 || n42 != 0) {
                                                    int n44;
                                                    if (Client.keyHandlerInstance.getKeyPressed(81, -903414011)) {
                                                        if (b >= 8) {
                                                            return;
                                                        }
                                                        n44 = Client.oculusOrbSlowedSpeed * 519949591;
                                                    }
                                                    else {
                                                        n44 = Client.oculusOrbNormalSpeed * 1101365113;
                                                    }
                                                    n43 = n44 * 16;
                                                    Client.field595 = n41 * -1988002169;
                                                    Client.field398 = 818868517 * n42;
                                                }
                                                if (Client.field644 * -1277774705 < n43) {
                                                    Client.field644 += n43 / 8 * 1574169199;
                                                    if (Client.field644 * -1277774705 > n43) {
                                                        Client.field644 = n43 * 1574169199;
                                                    }
                                                }
                                                else if (Client.field644 * -1277774705 > n43) {
                                                    Client.field644 = 1384929543 * Client.field644 / 10 * 1574169199;
                                                }
                                                if (Client.field644 * -1277774705 > 0) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    final int n45 = Client.field644 * -1277774705 / 16;
                                                    if (1382999863 * Client.field595 >= 0) {
                                                        final int n46 = Client.field595 * 1382999863 - class125.cameraYaw * -1010818347 & 0x7FF;
                                                        final int n47 = Rasterizer3D.Rasterizer3D_sine[n46];
                                                        final int n48 = Rasterizer3D.Rasterizer3D_cosine[n46];
                                                        class33.oculusOrbFocalPointX += n45 * n47 / 65536 * 1293848551;
                                                        class144.oculusOrbFocalPointY += 892004233 * (n48 * n45 / 65536);
                                                    }
                                                    if (-168443219 * Client.field398 != 0) {
                                                        class96.field1064 += Client.field398 * -168443219 * n45 * -1138369095;
                                                        if (470489225 * class96.field1064 > 0) {
                                                            if (b >= 8) {
                                                                return;
                                                            }
                                                            class96.field1064 = 0;
                                                        }
                                                    }
                                                }
                                                else {
                                                    Client.field595 = 1988002169;
                                                    Client.field398 = -818868517;
                                                }
                                                if (Client.keyHandlerInstance.getKeyPressed(13, 1015433166)) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    Canvas.method92((byte)0);
                                                }
                                            }
                                            if (MouseHandler.MouseHandler_currentButton * 114417019 == 4 && class473.mouseCam) {
                                                final int n49 = MouseHandler.MouseHandler_y * -1224153235 - 332197605 * Client.mouseCamClickedY;
                                                Client.camAngleDX = 1932462086 * n49;
                                                uq(-1);
                                                Client.mouseCamClickedY = ((n49 == -1 || n49 == 1) ? (MouseHandler.MouseHandler_y * -1224153235) : ((332197605 * Client.mouseCamClickedY + -1224153235 * MouseHandler.MouseHandler_y) / 2)) * 1302863597;
                                                final int n50 = Client.mouseCamClickedX * -1491948821 - -2063363905 * MouseHandler.MouseHandler_x;
                                                Client.camAngleDY = n50 * -503524914;
                                                sx(-1);
                                                Client.mouseCamClickedX = ((-1 == n50 || n50 == 1) ? (MouseHandler.MouseHandler_x * -2063363905) : ((-1491948821 * Client.mouseCamClickedX + MouseHandler.MouseHandler_x * -2063363905) / 2)) * -837440061;
                                            }
                                            else {
                                                if (Client.keyHandlerInstance.getKeyPressed(96, 912844670)) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    Client.camAngleDY += 1895721191 * ((-24 - 1977625303 * Client.camAngleDY) / 2);
                                                    sx(-1);
                                                }
                                                else if (Client.keyHandlerInstance.getKeyPressed(97, 471690283)) {
                                                    Client.camAngleDY += 1895721191 * ((24 - 1977625303 * Client.camAngleDY) / 2);
                                                    sx(-1);
                                                }
                                                else {
                                                    Client.camAngleDY = 1895721191 * (1977625303 * Client.camAngleDY / 2);
                                                    sx(-1);
                                                }
                                                if (Client.keyHandlerInstance.getKeyPressed(98, 730871510)) {
                                                    Client.camAngleDX += (12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
                                                    uq(-1);
                                                }
                                                else if (Client.keyHandlerInstance.getKeyPressed(99, -1256363874)) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    Client.camAngleDX += (-12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
                                                    uq(-1);
                                                }
                                                else {
                                                    Client.camAngleDX = 1441154731 * Client.camAngleDX / 2 * -1181252605;
                                                    uq(-1);
                                                }
                                                Client.mouseCamClickedY = MouseHandler.MouseHandler_y * 652543465;
                                                Client.mouseCamClickedX = 1278432381 * MouseHandler.MouseHandler_x;
                                            }
                                            Client.camAngleY = 642728617 * (Client.camAngleDY * 1977625303 / 2 + 704283033 * Client.camAngleY & 0x7FF);
                                            Client.camAngleX += -637026513 * (Client.camAngleDX * 1441154731 / 2);
                                            ma(-1);
                                            if (Client.camAngleX * -954734641 < 128) {
                                                Client.camAngleX = 64984960;
                                                ma(-1);
                                            }
                                            if (Client.camAngleX * -954734641 > 383) {
                                                Client.camAngleX = 831981393;
                                                ma(-1);
                                            }
                                            if (Client.field598) {
                                                if (b >= 8) {
                                                    return;
                                                }
                                                class1.method5((byte)5);
                                            }
                                            else if (Client.isCameraLocked) {
                                                if (!Client.field541) {
                                                    final int n51 = 64 + ObjTypeCustomisation.field1471 * 957080960;
                                                    final int n52 = 958794368 * class123.field1209 + 64;
                                                    class133.method777(n51, class147.getTileHeight(n51, n52, GameEngine.Client_plane * -1727408401, (byte)(-52)) - class16.field54 * -887836823, n52, 1741543163);
                                                }
                                                else if (null != Client.field535) {
                                                    class36.cameraX = Client.field535.vmethod2321(2116561795) * -1682679895;
                                                    class297.cameraZ = Client.field535.vmethod2319(2107399454) * 46344275;
                                                    if (Client.field615) {
                                                        if (b >= 8) {
                                                            return;
                                                        }
                                                        class174.cameraY = Client.field535.vmethod2320((byte)0) * -424093663;
                                                    }
                                                    else {
                                                        class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, -91399205 * class297.cameraZ, GameEngine.Client_plane * -1727408401, (byte)(-73)) - Client.field535.vmethod2320((byte)0)) * -424093663;
                                                    }
                                                    Client.field535.aa(-1607949165);
                                                }
                                                if (!Client.field614) {
                                                    if (b >= 8) {
                                                        return;
                                                    }
                                                    final int n53 = FontName.field3970 * 332584320 + 64;
                                                    final int n54 = -1804719232 * MilliClock.field1455 + 64;
                                                    final int n55 = class147.getTileHeight(n53, n54, GameEngine.Client_plane * -1727408401, (byte)(-41)) - ScriptFrame.field343 * 1496735347;
                                                    final int n56 = n53 - -2100544359 * class36.cameraX;
                                                    final int n57 = n55 - 1772923873 * class174.cameraY;
                                                    final int n58 = n54 - -91399205 * class297.cameraZ;
                                                    GraphicsObject.method433((int)(Math.atan2(n57, (int)Math.sqrt(n56 * n56 + n58 * n58)) * 325.9490051269531) & 0x7FF, (int)(Math.atan2(n56, n58) * -325.9490051269531) & 0x7FF, (byte)57);
                                                }
                                                else {
                                                    if (null != Client.field604) {
                                                        WorldMapSectionType.cameraPitch = Client.field604.method2318(-1656253558) * 528729485;
                                                        bc(-1);
                                                        WorldMapSectionType.cameraPitch = Math.min(Math.max(WorldMapSectionType.cameraPitch * 1897923909, 128), 383) * 528729485;
                                                        bc(-1);
                                                        Client.field604.aa(1056608867);
                                                    }
                                                    if (Client.field617 != null) {
                                                        class125.cameraYaw = (Client.field617.method2318(303080949) & 0x7FF) * -1545206147;
                                                        Client.field617.aa(1254621305);
                                                    }
                                                }
                                            }
                                            for (int n59 = 0; n59 < 5; ++n59) {
                                                if (b >= 8) {
                                                    return;
                                                }
                                                final int[] cameraShakeCycle = Client.cameraShakeCycle;
                                                final int n60 = n59;
                                                ++cameraShakeCycle[n60];
                                            }
                                            class373.varcs.clearTransient(2118979895);
                                            final int value = SecureRandomFuture.get(-1033120927);
                                            final int idleCycles = Client.bq.getIdleCycles((byte)(-31));
                                            if (value > 15000 && idleCycles > 15000) {
                                                Client.logoutTimer = 719725026;
                                                MouseHandler.MouseHandler_idleCycles = 1393311740;
                                                ww(-1);
                                                Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.IF_BUTTON2, Client.packetWriter.isaacCipher, (short)(-7031)), 414135591);
                                            }
                                            World.friendSystem.processFriendUpdates(1673735823);
                                            for (int n61 = 0; n61 < Client.field649.size(); ++n61) {
                                                if (class20.method82((int)Client.field649.get(n61), 854271946) != 2) {
                                                    Client.field649.remove(n61);
                                                    --n61;
                                                }
                                            }
                                            final PacketWriter packetWriter2 = Client.packetWriter;
                                            packetWriter2.pendingWrites -= 1313905755;
                                            if (1383386157 * Client.packetWriter.pendingWrites > 50) {
                                                Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-16315)), 414135591);
                                            }
                                            try {
                                                PacketWriter.ok(Client.packetWriter, 421941662);
                                            }
                                            catch (IOException ex2) {
                                                class349.method1918(709882847);
                                            }
                                            return;
                                        }
                                        final Widget dragTarget = scriptEvent3.dragTarget;
                                        if (dragTarget.childIndex * 55577617 >= 0) {
                                            if (b >= 8) {
                                                return;
                                            }
                                            final Widget vmethod3380 = class165.vmethod3380(dragTarget.parentId * 913615679, (byte)5);
                                            if (vmethod3380 == null || vmethod3380.children == null || dragTarget.childIndex * 55577617 >= vmethod3380.children.length) {
                                                continue;
                                            }
                                            if (dragTarget != vmethod3380.children[dragTarget.childIndex * 55577617]) {
                                                continue;
                                            }
                                        }
                                        HealthBarUpdate.set(scriptEvent3, (byte)(-18));
                                    }
                                }
                                else {
                                    final Widget dragTarget2 = scriptEvent2.dragTarget;
                                    if (55577617 * dragTarget2.childIndex >= 0) {
                                        if (b >= 8) {
                                            return;
                                        }
                                        final Widget vmethod3381 = class165.vmethod3380(dragTarget2.parentId * 913615679, (byte)5);
                                        if (vmethod3381 == null || vmethod3381.children == null || 55577617 * dragTarget2.childIndex >= vmethod3381.children.length) {
                                            continue;
                                        }
                                        if (dragTarget2 != vmethod3381.children[dragTarget2.childIndex * 55577617]) {
                                            if (b >= 8) {
                                                return;
                                            }
                                            continue;
                                        }
                                    }
                                    HealthBarUpdate.set(scriptEvent2, (byte)(-89));
                                }
                            }
                        }
                        else {
                            final Widget dragTarget3 = scriptEvent.dragTarget;
                            if (55577617 * dragTarget3.childIndex >= 0) {
                                if (b >= 8) {
                                    return;
                                }
                                final Widget vmethod3382 = class165.vmethod3380(dragTarget3.parentId * 913615679, (byte)5);
                                if (null == vmethod3382 || null == vmethod3382.children || dragTarget3.childIndex * 55577617 >= vmethod3382.children.length) {
                                    continue;
                                }
                                if (dragTarget3 != vmethod3382.children[dragTarget3.childIndex * 55577617]) {
                                    continue;
                                }
                            }
                            HealthBarUpdate.set(scriptEvent, (byte)5);
                        }
                    }
                }
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.hq(" + ')');
        }
    }
    
    public void iu(final long n) {
        GameEngine.stopTimeMs = n * -2406892942717923893L;
    }
    
    static String yy(final int n) {
        if (n < 0) {
            return "";
        }
        if (Client.menuTargets[n].length() > 0) {
            return Client.menuActions[n] + Strings.gk + Client.menuTargets[n];
        }
        return Client.menuActions[n];
    }
    
    public EvictingDualNodeHashTable iz() {
        return ItemComposition.ItemDefinition_cachedSprites;
    }
    
    public int iz() {
        return Rasterizer2D.Rasterizer2D_xClipEnd;
    }
    
    public short[][][] oh() {
        return Tiles.Tiles_overlays;
    }
    
    static WorldMap oh() {
        return class126.worldMap;
    }
    
    public Widget[][] oh() {
        return VerticalAlignment.Widget_interfaceComponents;
    }
    
    public static void oh(final rl2 rl2) {
        Client.isInInstance = rl2.bq;
        Client.instanceChunkTemplates = rl2.ee;
        GameObject.xteaKeys = rl2.se;
        WorldMapAreaData.regions = rl2.bm;
        FontName.regionMapArchiveIds = rl2.xk;
        Archive.regionLandArchiveIds = rl2.ti;
        class4.regionLandArchives = rl2.en;
        ObjectSound.regionMapArchives = rl2.jb;
        class28.timeOfPreviousKeyPress = rl2.js * 1006050753;
        class425.field3798 = rl2.py * -193171501;
        ScriptFrame.client.qx(25);
        final int n = rl2.jk - WorldMapData_0.baseX * -1232093375;
        final int n2 = rl2.uk - GameObject.baseY * 827352769;
        WorldMapData_0.baseX = rl2.jk * -12791615;
        GameObject.baseY = rl2.uk * 1801529665;
        setUp(n, n2);
        Client.hk.clear();
        for (final NPC npc : Client.npcs) {
            if (npc != null) {
                for (int j = 0; j < 10; ++j) {
                    final int[] hitSplatTypes2 = npc.hitSplatTypes2;
                    final int n3 = j;
                    hitSplatTypes2[n3] -= n;
                    final int[] pathX = npc.pathX;
                    final int n4 = j;
                    pathX[n4] -= n2;
                }
                final NPC npc2 = npc;
                npc2.walkBackSequence = (npc2.walkBackSequence * 1144428983 - (n << 7)) * -881028089;
                final NPC npc3 = npc;
                npc3.field1005 = (npc3.field1005 * -411750205 - (n2 << 7)) * 1193213931;
            }
        }
        for (final Player player : Client.players) {
            if (player != null) {
                for (int l = 0; l < 10; ++l) {
                    final int[] hitSplatTypes3 = player.hitSplatTypes2;
                    final int n5 = l;
                    hitSplatTypes3[n5] -= n;
                    final int[] pathX2 = player.pathX;
                    final int n6 = l;
                    pathX2[n6] -= n2;
                }
                final Player player2 = player;
                player2.walkBackSequence = (player2.walkBackSequence * 1144428983 - (n << 7)) * -881028089;
                final Player player3 = player;
                player3.field1005 = (player3.field1005 * -411750205 - (n2 << 7)) * 1193213931;
            }
        }
        int n7 = 0;
        int n8 = 104;
        int n9 = 1;
        if (n < 0) {
            n7 = 103;
            n8 = -1;
            n9 = -1;
        }
        int n10 = 0;
        int n11 = 104;
        int n12 = 1;
        if (n2 < 0) {
            n10 = 103;
            n11 = -1;
            n12 = -1;
        }
        for (int n13 = n7; n13 != n8; n13 += n9) {
            for (int n14 = n10; n14 != n11; n14 += n12) {
                final int n15 = n + n13;
                final int n16 = n2 + n14;
                for (int n17 = 0; n17 < 4; ++n17) {
                    if (n15 >= 0 && n16 >= 0 && n15 < 104 && n16 < 104) {
                        Client.groundItems[n17][n13][n14] = Client.groundItems[n17][n15][n16];
                    }
                    else {
                        Client.groundItems[n17][n13][n14] = null;
                    }
                }
            }
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.dn(); pendingSpawn != null; pendingSpawn = (PendingSpawn)Client.pendingSpawns.th()) {
            final int td = pendingSpawn.td();
            final int rr = pendingSpawn.rr();
            final int n18 = td - n;
            final int n19 = rr - n2;
            pendingSpawn.yv(n18);
            pendingSpawn.lw(n19);
            if (n18 < 0 || n19 < 0 || n18 >= 104 || n19 >= 104) {
                pendingSpawn.gy();
            }
        }
        for (GraphicsObject graphicsObject = (GraphicsObject)Client.graphicsObjects.dn(); graphicsObject != null; graphicsObject = (GraphicsObject)Client.graphicsObjects.th()) {
            final int jn = graphicsObject.jn();
            final int wk = graphicsObject.wk();
            final int n20 = jn - (n << 7);
            final int n21 = wk - (n2 << 7);
            graphicsObject.hn(n20);
            graphicsObject.pi(n21);
            if (n20 < 0 || n21 < 0 || n20 >= 13376 || n21 >= 13376) {
                graphicsObject.gy();
            }
        }
        for (Projectile projectile = (Projectile)Client.projectiles.dn(); projectile != null; projectile = (Projectile)Client.projectiles.th()) {
            final int x1 = projectile.getX1();
            final int y1 = projectile.getY1();
            final double x2 = projectile.getX();
            final double y2 = projectile.getY();
            final int n22 = x1 - (n << 7);
            final int n23 = y1 - (n2 << 7);
            final double n24 = x2 - (n << 7);
            final double n25 = y2 - (n2 << 7);
            projectile.ju(n22);
            projectile.ht(n23);
            projectile.kp(n24);
            projectile.lj(n25);
            if (n24 < 0.0 || n25 < 0.0 || n24 > 13312.0 || n25 > 13312.0) {
                projectile.gy();
            }
        }
        if (Client.destinationX * 1494100363 != 0) {
            Client.destinationX = (Client.destinationX * 1494100363 - n) * -1970850269;
            Client.destinationY = (Client.destinationY * -1748014035 - n2) * 875414437;
        }
        for (int n26 = 0; n26 < Client.soundEffectCount * -297150195; ++n26) {
            final int n27 = Client.soundEffectIds[n26];
            if (n27 != 0) {
                final int n28 = n27 >> 16 & 0xFF;
                final int n29 = n27 >> 8 & 0xFF;
                final int n30 = n27 & 0xFF;
                final int n31 = n28 - n;
                final int n32 = n29 - n2;
                if (n31 < 0 || n32 < 0 || n31 >= 104 || n32 >= 104) {
                    Client.soundEffectCount = (Client.soundEffectCount * -297150195 - 1) * 831233477;
                    for (int n33 = n26; n33 < Client.soundEffectCount * -297150195; ++n33) {
                        Client.soundEffectIds[n33] = Client.soundEffectIds[n33 + 1];
                        Client.soundEffects[n33] = Client.soundEffects[n33 + 1];
                        Client.queuedSoundEffectLoops[n33] = Client.queuedSoundEffectLoops[n33 + 1];
                        Client.queuedSoundEffectDelays[n33] = Client.queuedSoundEffectDelays[n33 + 1];
                        Client.soundEffectIds[n33] = Client.soundEffectIds[n33 + 1];
                    }
                    --n26;
                }
                else {
                    Client.soundEffectIds[n26] = (n30 | n32 << 8 | n31 << 16);
                }
            }
        }
        mf();
        Client.isCameraLocked = false;
        class36.cameraX = (class36.cameraX * -2100544359 - (n << 7)) * -1682679895;
        class297.cameraZ = (class297.cameraZ * -91399205 - (n2 << 7)) * 46344275;
        class33.oculusOrbFocalPointX = (class33.oculusOrbFocalPointX * -1958669353 - (n << 7)) * 1293848551;
        class144.oculusOrbFocalPointY = (class144.oculusOrbFocalPointY * -365969735 - (n2 << 7)) * 892004233;
        Client.field596 = -1 * -1715437485;
        for (int n34 = 0; n34 < 4; ++n34) {
            final int[][] flags = Client.collisionMaps[n34].getFlags();
            for (int n35 = n7; n35 != n8; n35 += n9) {
                for (int n36 = n10; n36 != n11; n36 += n12) {
                    final int n37 = n + n35;
                    final int n38 = n2 + n36;
                    if (n35 != 0 && n36 != 0 && n35 < 99 && n36 < 99) {
                        if (n37 >= 0 && n38 >= 0 && n37 < 104 && n38 < 104) {
                            flags[n35][n36] = flags[n37][n38];
                        }
                        else {
                            flags[n35][n36] = 16777216;
                        }
                    }
                    else {
                        flags[n35][n36] = 16777215;
                    }
                }
            }
        }
    }
    
    static void qp() {
        PacketWriter.kg(Client.packetWriter, 1213589120);
        Client.packetWriter.packetBuffer.at = 0;
        Client.packetWriter.field1133 = null;
        Client.packetWriter.serverPacket = null;
        Client.packetWriter.field1138 = null;
        Client.packetWriter.field1139 = null;
        Client.packetWriter.serverPacketLength = 0;
        Client.packetWriter.field1136 = 0;
        Client.rebootTimer = 0;
        Client.menuOptionsCount = 0;
        Client.isMenuOpen = false;
        Client.minimapState = 0;
        Client.destinationX = 0;
        for (int i = 0; i < 649415870; ++i) {
            Client.players[i] = null;
        }
        MusicPatchNode.localPlayer = null;
        for (int j = 0; j < Client.npcs.length; ++j) {
            final NPC npc = Client.npcs[j];
            if (npc != null) {
                npc.rotation = -1052277865;
                npc.false0 = false;
            }
        }
        ItemContainer.itemContainers = new NodeHashTable(32);
        class138.updateGameState(30, 396584331);
        for (int k = 0; k < 100; ++k) {
            Client.field573[k] = true;
        }
        class1.method4(-795714777);
    }
    
    public void qp(final int n) {
        ViewportMouse.ViewportMouse_entityCount = n * -429048361;
    }
    
    public void qp(final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        Rasterizer2D.Rasterizer2D_fillRectangleAlpha(n, n2, n3, n4, n5, n6);
    }
    
    static void yc(final int n, final int n2, final int n3, final int n4, final String targetName) {
        final Widget widgetChild = SoundSystem.getWidgetChild(n2, n3, -18383687);
        if (null == widgetChild) {
            return;
        }
        if (widgetChild.onOp != null) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.opIndex = n * -247460251;
            scriptEvent.targetName = targetName;
            scriptEvent.args = widgetChild.onOp;
            HealthBarUpdate.set(scriptEvent, (byte)(-13));
        }
        boolean method353 = true;
        if (-1686140966 * widgetChild.contentType > 0) {
            method353 = Message.method353(widgetChild, (byte)(-120));
        }
        if (!method353) {
            return;
        }
        if ((KeyHandler.getWidgetFlags(widgetChild, 418657061) >> n - 1 + 1 & 0x1) == 0x0) {
            return;
        }
        if (n == 1) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.IF_BUTTON1, Client.packetWriter.isaacCipher, (short)(-10077));
            packetBufferNode.packetBuffer.ba(n2, -2081835031);
            packetBufferNode.packetBuffer.cq(n3, (byte)(-94));
            packetBufferNode.packetBuffer.cq(n4, (byte)(-16));
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (2 == n) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.OPLOC5, Client.packetWriter.isaacCipher, (short)(-20618));
            packetBufferNode2.packetBuffer.ba(n2, -2081835031);
            packetBufferNode2.packetBuffer.cq(n3, (byte)93);
            packetBufferNode2.packetBuffer.cq(n4, (byte)16);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
        }
        if (3 == n) {
            final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2540, Client.packetWriter.isaacCipher, (short)(-21215));
            packetBufferNode3.packetBuffer.ba(n2, -2081835031);
            packetBufferNode3.packetBuffer.cq(n3, (byte)7);
            packetBufferNode3.packetBuffer.cq(n4, (byte)(-93));
            Client.packetWriter.addNode(packetBufferNode3, 414135591);
        }
        if (4 == n) {
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPNPC5, Client.packetWriter.isaacCipher, (short)(-7320));
            packetBufferNode4.packetBuffer.ba(n2, -2081835031);
            packetBufferNode4.packetBuffer.cq(n3, (byte)28);
            packetBufferNode4.packetBuffer.cq(n4, (byte)(-18));
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (5 == n) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.OPNPC2, Client.packetWriter.isaacCipher, (short)(-11028));
            packetBufferNode5.packetBuffer.ba(n2, -2081835031);
            packetBufferNode5.packetBuffer.cq(n3, (byte)7);
            packetBufferNode5.packetBuffer.cq(n4, (byte)80);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (6 == n) {
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2535, Client.packetWriter.isaacCipher, (short)(-14892));
            packetBufferNode6.packetBuffer.ba(n2, -2081835031);
            packetBufferNode6.packetBuffer.cq(n3, (byte)31);
            packetBufferNode6.packetBuffer.cq(n4, (byte)12);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (7 == n) {
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2558, Client.packetWriter.isaacCipher, (short)(-22538));
            packetBufferNode7.packetBuffer.ba(n2, -2081835031);
            packetBufferNode7.packetBuffer.cq(n3, (byte)84);
            packetBufferNode7.packetBuffer.cq(n4, (byte)94);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (8 == n) {
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2527, Client.packetWriter.isaacCipher, (short)(-26199));
            packetBufferNode8.packetBuffer.ba(n2, -2081835031);
            packetBufferNode8.packetBuffer.cq(n3, (byte)43);
            packetBufferNode8.packetBuffer.cq(n4, (byte)67);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (n == 9) {
            final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.WALK, Client.packetWriter.isaacCipher, (short)(-25734));
            packetBufferNode9.packetBuffer.ba(n2, -2081835031);
            packetBufferNode9.packetBuffer.cq(n3, (byte)(-39));
            packetBufferNode9.packetBuffer.cq(n4, (byte)(-25));
            Client.packetWriter.addNode(packetBufferNode9, 414135591);
        }
        if (10 == n) {
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.OPPLAYERT, Client.packetWriter.isaacCipher, (short)(-5591));
            packetBufferNode10.packetBuffer.ba(n2, -2081835031);
            packetBufferNode10.packetBuffer.cq(n3, (byte)(-80));
            packetBufferNode10.packetBuffer.cq(n4, (byte)(-55));
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
        }
    }
    
    static final void yg() {
        int i = 0;
        while (i == 0) {
            i = 1;
            for (int j = 0; j < 730065501 * Client.menuOptionsCount - 1; ++j) {
                if (Client.menuOpcodes[j] < 1000 && Client.menuOpcodes[j + 1] > 1000) {
                    final String s = Client.menuTargets[j];
                    Client.menuTargets[j] = Client.menuTargets[1 + j];
                    Client.menuTargets[j + 1] = s;
                    final String s2 = Client.menuActions[j];
                    Client.menuActions[j] = Client.menuActions[1 + j];
                    Client.menuActions[j + 1] = s2;
                    final int n = Client.menuOpcodes[j];
                    Client.menuOpcodes[j] = Client.menuOpcodes[j + 1];
                    Client.menuOpcodes[j + 1] = n;
                    final int n2 = Client.menuArguments1[j];
                    Client.menuArguments1[j] = Client.menuArguments1[1 + j];
                    Client.menuArguments1[1 + j] = n2;
                    final int n3 = Client.menuArguments2[j];
                    Client.menuArguments2[j] = Client.menuArguments2[j + 1];
                    Client.menuArguments2[1 + j] = n3;
                    final int n4 = Client.menuIdentifiers[j];
                    Client.menuIdentifiers[j] = Client.menuIdentifiers[1 + j];
                    Client.menuIdentifiers[j + 1] = n4;
                    final int n5 = Client.menuItemIds[j];
                    Client.menuItemIds[j] = Client.menuItemIds[1 + j];
                    Client.menuItemIds[1 + j] = n5;
                    final boolean b = Client.menuShiftClick[j];
                    Client.menuShiftClick[j] = Client.menuShiftClick[1 + j];
                    Client.menuShiftClick[1 + j] = b;
                    i = 0;
                }
            }
        }
    }
    
    public int yg() {
        return Client.destinationY * -1748014035;
    }
    
    static final void vh(final int n, final int n2, final int n3, final int n4, final int n5) {
        final long boundaryObjectTag = class31.scene.getBoundaryObjectTag(n, n2, n3);
        if (boundaryObjectTag != 0L) {
            final int objectFlags = class31.scene.getObjectFlags(n, n2, n3, boundaryObjectTag);
            final int n6 = objectFlags >> 6 & 0x3;
            final int n7 = objectFlags & 0x1F;
            int n8 = n4;
            if (class173.method957(boundaryObjectTag)) {
                n8 = n5;
            }
            final int[] pixels = UrlRequester.sceneMinimapSprite.pixels;
            final int n9 = (103 - n3) * 2048 + (n2 * 4 + 24624);
            final ObjectComposition vmethod3248 = class144.vmethod3248(InterfaceParent.Entity_unpackID(boundaryObjectTag), (short)32057);
            if (-1 != vmethod3248.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite = class333.mapSceneSprites[vmethod3248.mapSceneId * 771086195];
                if (indexedSprite != null) {
                    indexedSprite.ax((vmethod3248.sizeX * -1064754148 - indexedSprite.yOffset) / 2 + (48 + n2 * 4), (vmethod3248.sizeY * 1952358772 - indexedSprite.subWidth) / 2 + ((104 - n3 - -1659393955 * vmethod3248.sizeY) * 4 + 48));
                }
            }
            else {
                if (n7 == 0 || n7 == 2) {
                    if (n6 == 0) {
                        pixels[512 + n9] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[1 + n9] = (pixels[n9] = n8);
                        pixels[3 + n9] = (pixels[n9 + 2] = n8);
                    }
                    else if (2 == n6) {
                        pixels[512 + (n9 + 3)] = (pixels[n9 + 3] = n8);
                        pixels[1536 + (3 + n9)] = (pixels[3 + n9 + 1024] = n8);
                    }
                    else if (n6 == 3) {
                        pixels[1 + (n9 + 1536)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[1536 + n9 + 2] = n8);
                    }
                }
                if (3 == n7) {
                    if (n6 == 0) {
                        pixels[n9] = n8;
                    }
                    else if (n6 == 1) {
                        pixels[3 + n9] = n8;
                    }
                    else if (2 == n6) {
                        pixels[n9 + 3 + 1536] = n8;
                    }
                    else if (3 == n6) {
                        pixels[1536 + n9] = n8;
                    }
                }
                if (n7 == 2) {
                    if (3 == n6) {
                        pixels[n9 + 512] = (pixels[n9] = n8);
                        pixels[1536 + n9] = (pixels[n9 + 1024] = n8);
                    }
                    else if (n6 == 0) {
                        pixels[n9 + 1] = (pixels[n9] = n8);
                        pixels[n9 + 3] = (pixels[n9 + 2] = n8);
                    }
                    else if (n6 == 1) {
                        pixels[512 + (3 + n9)] = (pixels[3 + n9] = n8);
                        pixels[n9 + 3 + 1536] = (pixels[n9 + 3 + 1024] = n8);
                    }
                    else if (2 == n6) {
                        pixels[1 + (1536 + n9)] = (pixels[n9 + 1536] = n8);
                        pixels[1536 + n9 + 3] = (pixels[2 + (1536 + n9)] = n8);
                    }
                }
            }
        }
        final long gameObjectTag = class31.scene.getGameObjectTag(n, n2, n3);
        if (gameObjectTag != 0L) {
            final int objectFlags2 = class31.scene.getObjectFlags(n, n2, n3, gameObjectTag);
            final int n10 = objectFlags2 >> 6 & 0x3;
            final int n11 = objectFlags2 & 0x1F;
            final ObjectComposition vmethod3249 = class144.vmethod3248(InterfaceParent.Entity_unpackID(gameObjectTag), (short)29579);
            if (-1 != vmethod3249.mapSceneId * 771086195) {
                final IndexedSprite indexedSprite2 = class333.mapSceneSprites[771086195 * vmethod3249.mapSceneId];
                if (indexedSprite2 != null) {
                    indexedSprite2.ax(48 + n2 * 4 + (-1064754148 * vmethod3249.sizeX - indexedSprite2.yOffset) / 2, (1952358772 * vmethod3249.sizeY - indexedSprite2.subWidth) / 2 + (4 * (104 - n3 - vmethod3249.sizeY * -1659393955) + 48));
                }
            }
            else if (n11 == 9) {
                int n12 = 15658734;
                if (class173.method957(gameObjectTag)) {
                    n12 = 15597568;
                }
                final int[] pixels2 = UrlRequester.sceneMinimapSprite.pixels;
                final int n13 = 24624 + n2 * 4 + (103 - n3) * 2048;
                if (n10 && n10 != 2) {
                    pixels2[1 + (512 + n13)] = (pixels2[n13] = n12);
                    pixels2[n13 + 1536 + 3] = (pixels2[2 + (n13 + 1024)] = n12);
                }
                else {
                    pixels2[1 + (n13 + 1024)] = (pixels2[1536 + n13] = n12);
                    pixels2[3 + n13] = (pixels2[2 + (n13 + 512)] = n12);
                }
            }
        }
        final long floorDecorationTag = class31.scene.getFloorDecorationTag(n, n2, n3);
        if (0L != floorDecorationTag) {
            final ObjectComposition vmethod3250 = class144.vmethod3248(InterfaceParent.Entity_unpackID(floorDecorationTag), (short)6738);
            if (vmethod3250.mapSceneId * 771086195 != -1) {
                final IndexedSprite indexedSprite3 = class333.mapSceneSprites[771086195 * vmethod3250.mapSceneId];
                if (null != indexedSprite3) {
                    indexedSprite3.ax(n2 * 4 + 48 + (vmethod3250.sizeX * -1064754148 - indexedSprite3.yOffset) / 2, 48 + (104 - n3 - -1659393955 * vmethod3250.sizeY) * 4 + (vmethod3250.sizeY * 1952358772 - indexedSprite3.subWidth) / 2);
                }
            }
        }
    }
    
    public long oj() {
        return -7932717541542796365L * this.accountHash;
    }
    
    public void iq(final int n) {
        VarpDefinition.musicTrackFileId = n * 1823837761;
    }
    
    public int ol() {
        return Client.camAngleDY * 1977625303;
    }
    
    public void ol(final int[] spriteBuffer_spritePalette) {
        class394.SpriteBuffer_spritePalette = spriteBuffer_spritePalette;
    }
    
    public static void doCycleLoggedIn(final int n) {
        if (!Client.zz) {
            Client.td = Client.field456 * 205350563;
            return;
        }
        final int n2 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
        final int n3 = class144.oculusOrbFocalPointY * -365969735 >> 7;
        final int plane = ScriptFrame.client.getPlane();
        final int ti = ScriptFrame.client.ti(class33.oculusOrbFocalPointX * -1958669353, class144.oculusOrbFocalPointY * -365969735, plane);
        int n4 = 0;
        final byte[][][] tileSettings = ScriptFrame.client.getTileSettings();
        final int[][][] tileHeights = ScriptFrame.client.getTileHeights();
        if (n2 > 3 && n3 > 3 && n2 < 100 && n3 < 100) {
            for (int i = n2 - 4; i <= n2 + 4; ++i) {
                for (int j = n3 - 4; j <= n3 + 4; ++j) {
                    int n5 = plane;
                    if (n5 < 3 && (tileSettings[1][i][j] & 0x2) == 0x2) {
                        ++n5;
                    }
                    final int n6 = ti - tileHeights[n5][i][j];
                    if (n6 > n4) {
                        n4 = n6;
                    }
                }
            }
        }
        int n7 = n4 * 128;
        if (n7 > 98048) {
            n7 = 98048;
        }
        if (n7 < 0) {
            n7 = 0;
        }
        if (n7 > Client.td) {
            Client.td += (n7 - Client.td) / 24;
        }
        else if (n7 < Client.td) {
            Client.td += (n7 - Client.td) / 80;
        }
        Client.field456 = Client.td * 800423179;
    }
    
    final void doCycleLoggedIn(final byte b) {
        try {
            class134.rsOrdinal(new int[] { 20, 260, 10000 }, new int[] { 1000, 100, 500 }, -1476012206);
            FriendsChat.worldPort = ((0 == -1274626977 * Client.field443) ? 43594 : (40000 + -453810525 * Client.staffModLevel)) * -1326916691;
            final int n = -1927102761;
            int n2;
            if (0 == Client.field476 * -1274626977) {
                if (b == 52) {
                    throw new IllegalStateException();
                }
                n2 = 443;
            }
            else {
                n2 = 50000 + -453810525 * Client.dg;
            }
            class127.js5Port = n * n2;
            ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
            PlayerComposition.field2837 = class315.field2865;
            PlayerComposition.field2828 = class315.field2863;
            WorldMapIcon_0.field2359 = class315.field2865;
            class437.field3825 = class315.field2863;
            class14.urlRequester = new class108(this.field401, 213);
            this.ai((byte)39);
            this.av((byte)62);
            class123.mouseWheel = this.aa(1822835590);
            this.ah((class29)Client.field590, 0, (byte)(-45));
            this.ah((class29)Client.keyHandlerInstance, 1, (byte)41);
            WorldMapID.masterDisk = new ArchiveDisk(255, JagexCache.JagexCache_dat2File, JagexCache.JagexCache_randomDat, 500000);
            class20.clientPreferences = class205.vmethod3951(-739086795);
            this.ay(1981115082);
            final String field167 = ReflectionCheck.field167;
            class31.field90 = this;
            if (field167 != null) {
                if (b == 52) {
                    throw new IllegalStateException();
                }
                class31.field91 = field167;
            }
            Decimator.setWindowedMode(class20.clientPreferences.method577((byte)106), (byte)(-51));
            World.friendSystem = new FriendSystem(class70.loginType);
            this.field529 = new class14("tokenRequest", 1, 1);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.bm(" + ')');
        }
    }
    
    public void setInterpolateObjectAnimations(final boolean yo) {
        Client.yo = yo;
    }
    
    public boolean isInterpolateNpcAnimations() {
        return Client.xk;
    }
    
    public void setInterpolateNpcAnimations(final boolean xk) {
        Client.xk = xk;
    }
    
    public boolean isInterpolateObjectAnimations() {
        return Client.yo;
    }
    
    public int[] getBoostedSkillLevels() {
        return Client.currentLevels;
    }
    
    public boolean isResized() {
        return Client.isResizable;
    }
    
    public int[] getIntStack() {
        return Interpreter.Interpreter_intStack;
    }
    
    public boolean isFriended(final String s, final boolean b) {
        return this.kp().ws(this.ad(s, this.cq()), b);
    }
    
    public int getStringStackSize() {
        return SecureRandomCallable.Interpreter_stringStackSize * -2017760987;
    }
    
    public String[] getStringStack() {
        return Interpreter.Interpreter_stringStack;
    }
    
    public int getIntStackSize() {
        return Interpreter.Interpreter_intStackSize * -964267539;
    }
    
    public int getVarbitValue(final int n) {
        return this.getVarbitValue(this.getVarps(), n);
    }
    
    public int getVarbitValue(final int[] array, final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        if (n < 0 || n >= Client.gi.length) {
            throw new IndexOutOfBoundsException("Varbit " + n + " does not exist");
        }
        final int n2 = Client.gi[n];
        if (n2 == 0) {
            throw new IndexOutOfBoundsException("Varbit " + n + " does not exist");
        }
        final int n3 = n2 >> 16;
        final int n4 = n2 & 0xFF;
        return array[n3] >> n4 & (1 << (n2 >> 8 & 0xFF) - n4 + 1) - 1;
    }
    
    public MessageNode addChatMessage(final ChatMessageType chatMessageType, final String s, final String s2, final String s3) {
        return this.addChatMessage(chatMessageType, s, s2, s3, true);
    }
    
    public MessageNode addChatMessage(final ChatMessageType chatMessageType, final String s, final String s2, final String s3, final boolean b) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        ChatMessageType chatMessageType2 = chatMessageType;
        String s4 = s2;
        if (chatMessageType == ChatMessageType.CLAN_GIM_CHAT) {
            chatMessageType2 = ChatMessageType.CLAN_CHAT;
            s4 = "|" + s2;
        }
        else if (chatMessageType == ChatMessageType.CLAN_GIM_MESSAGE) {
            chatMessageType2 = ChatMessageType.CLAN_MESSAGE;
            s4 = "|" + s2;
        }
        final int type = chatMessageType2.getType();
        final String s5 = s4;
        final int n = type;
        try {
            ChatChannel chatChannel = Messages.Messages_channels.get(n);
            if (chatChannel == null) {
                chatChannel = new ChatChannel();
                Messages.Messages_channels.put(n, chatChannel);
            }
            final Message dh = ChatChannel.dh(chatChannel, n, s, s5, s3, (short)(-22035));
            Messages.Messages_hashTable.put(dh, dh.type * -1117255211);
            Messages.Messages_queue.add(dh);
            Client.chatCycle = Client.cycleCntr * -2073795047;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "fo.aw(" + ')');
        }
        if (Client.nw.isDebugEnabled()) {
            Client.nw.debug("Chat message type {}: {}", (Object)chatMessageType.name(), (Object)s2);
        }
        final MessageNode messageNode = ScriptFrame.client.getChatLineMap().get(chatMessageType2.getType()).getLines()[0];
        if (b) {
            ScriptFrame.client.getCallbacks().post((Object)new ChatMessage(messageNode, chatMessageType, s, s2, s3, messageNode.getTimestamp()));
        }
        return messageNode;
    }
    
    public int getVarpValue(final int n) {
        return this.getVarps()[n];
    }
    
    public void refreshChat() {
        this.qj(this.co());
    }
    
    public EnumSet getWorldType() {
        return WorldType.fromMask(this.bg());
    }
    
    public GameState getGameState() {
        return GameState.of(this.kh());
    }
    
    public net.runelite.api.SpritePixels createItemSprite(final int n, final int n2, final int n3, final int n4, final int n5, final boolean b, final int n6) {
        assert this.isClientThread() : "must be called on client thread";
        final Clips clips = Rasterizer3D.clips;
        final int nj = clips.nj();
        clips.ug(n6);
        try {
            return (net.runelite.api.SpritePixels)this.ma(n, n2, n3, n4, n5, b);
        }
        finally {
            clips.ug(nj);
        }
    }
    
    public String getUsername() {
        return Login.Login_username;
    }
    
    public int getTickCount() {
        return Client.bg;
    }
    
    public void setTickCount(final int bg) {
        Client.bg = bg;
    }
    
    public boolean isGpu() {
        return this.yu;
    }
    
    public net.runelite.api.widgets.Widget getWidget(final WidgetInfo widgetInfo) {
        return (net.runelite.api.widgets.Widget)this.fp(widgetInfo.getGroupId(), widgetInfo.getChildId());
    }
    
    public boolean isStretchedEnabled() {
        return Client.uu;
    }
    
    public boolean isStretchedFast() {
        return Client.wj;
    }
    
    public long getAccountHash() {
        try {
            return -7932717541542796365L * this.accountHash;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.getAccountHash(" + ')');
        }
    }
    
    public int getPlane() {
        return GameEngine.Client_plane * -1727408401;
    }
    
    public void eg(final int n) {
        Client.changedVarpCount = n * 165304329;
    }
    
    static final void qq() {
        if (1705142349 * Client.logoutTimer > 0) {
            class31.logOut(1819149068);
            return;
        }
        Timer.fw(Client.timer, -704142494);
        class138.updateGameState(40, 1464034700);
        class333.field3090 = Client.packetWriter.getSocket((byte)99);
        PacketWriter.ty(Client.packetWriter, -274968704);
    }
    
    static final boolean ww(final int n, final int n2, final int n3, final int n4, final int n5) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (n == -294782925 * pendingSpawn2.plane && n2 == 68300005 * pendingSpawn2.x && n3 == 800888185 * pendingSpawn2.y && pendingSpawn2.type * -1654011563 == n4) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn != null) {
            pendingSpawn.field931 = n5 * -433463904;
            return true;
        }
        return false;
    }
    
    public static void ww(final int n) {
        if (ScriptFrame.client.ji() > 0) {
            Client.hz = (int)((System.nanoTime() - Client.wl) / 20000000L);
        }
        else {
            Client.hz = 0;
            Client.wl = System.nanoTime();
        }
        ScriptFrame.client.wk(15000 * Client.hz / Client.kd);
    }
    
    final void openMenu(int n, int n2, final int n3) {
        final MenuOpened menuOpened = new MenuOpened();
        menuOpened.setMenuEntries(this.getMenuEntries());
        ScriptFrame.client.getCallbacks().post((Object)menuOpened);
        final Font qk = this.qk();
        int bf = qk.bf("Choose Option");
        int n4 = 0;
        for (int i = 0; i < Client.clientType * 730065501; ++i) {
            if (Client.qi[i] == null) {
                ++n4;
            }
        }
        for (int j = 0; j < Client.oculusOrbSlowedSpeed * 730065501; ++j) {
            if (Client.qi[j] == null) {
                String s = Client.menuActions[j];
                if (!Client.menuTargets[j].isEmpty()) {
                    s = s + " " + Client.menuActions[j];
                }
                if (Client.changedSkills[j] == MenuAction.RUNELITE_SUBMENU.getId()) {
                    s += " <gt>";
                }
                final int textWidth = qk.getTextWidth(s);
                if (textWidth > bf) {
                    bf = textWidth;
                }
            }
        }
        bf += 8;
        final int n5 = n4 * 15 + 22;
        int n6 = n - bf / 2;
        if (bf + n6 > this.getMouseIdleTicks()) {
            n6 = this.getIntStackSize() - bf;
        }
        if (n6 < 0) {
            n6 = 0;
        }
        int n7 = n2;
        if (n2 + n5 > this.getLoginIndex()) {
            n7 = this.getIdleTimeout() - n5;
        }
        if (n7 < 0) {
            n7 = 0;
        }
        class192.menuX = n6 * -945723825;
        ArchiveLoader.menuY = n7 * 232216885;
        DesktopPlatformInfoProvider.menuWidth = bf * -760159457;
        class147.menuHeight = (n4 * 15 + 22) * -1944661289;
        n -= ScriptFrame.client.getGameCycle();
        n2 -= ScriptFrame.client.ge();
        ScriptFrame.client.la().menuOpen(ScriptFrame.client.getViewportHeight(), n, n2, false);
        this.setShouldRenderLoginScreenFire(true);
    }
    
    public int[] oq() {
        return class394.SpriteBuffer_spritePalette;
    }
    
    public void oq(final OtlTokenRequester field399) {
        if (null == field399) {
            return;
        }
        this.field399 = field399;
        class129.method763(10, (byte)48);
    }
    
    public String mj(final String s) {
        if (this.yb == null) {
            this.ru = new File(this.cd, System.getProperty("runelite.credentials.path", "credentials.properties"));
            this.yb = new Properties();
            if (this.xe) {
                for (final String key : new String[] { "JX_ACCESS_TOKEN", "JX_REFRESH_TOKEN", "JX_CHARACTER_ID", "JX_SESSION_ID", "JX_DISPLAY_NAME" }) {
                    final String value = System.getenv().get(key);
                    if (value != null) {
                        this.yb.setProperty(key, value);
                    }
                }
                this.fd = true;
            }
            if (this.yb.isEmpty() && this.ru.exists()) {
                try {
                    final FileInputStream in = new FileInputStream(this.ru);
                    try {
                        final InputStreamReader reader = new InputStreamReader(in, StandardCharsets.UTF_8);
                        try {
                            this.yb.load(reader);
                            reader.close();
                        }
                        catch (Throwable t) {
                            try {
                                reader.close();
                            }
                            catch (Throwable exception) {
                                t.addSuppressed(exception);
                            }
                            throw t;
                        }
                        in.close();
                    }
                    catch (Throwable t2) {
                        try {
                            in.close();
                        }
                        catch (Throwable exception2) {
                            t2.addSuppressed(exception2);
                        }
                        throw t2;
                    }
                }
                catch (IOException ex) {
                    Client.nw.warn("unable to load credentials from disk", (Throwable)ex);
                }
                if (this.yb.size() > 0) {
                    Client.nw.info("read {} credentials from disk", (Object)this.yb.size());
                }
            }
            else if (this.xe) {
                Client.nw.info("writing {} credentials to disk", (Object)this.yb.size());
                this.hf();
            }
        }
        String property = System.getenv().get(s);
        if (property == null) {
            property = this.yb.getProperty(s);
            if (property != null && "JX_REFRESH_TOKEN".equals(s)) {
                this.fd = true;
            }
        }
        return property;
    }
    
    public static void od(final GameEngine gameEngine, final Font font) {
        if (!Login.worldSelectOpen && (MouseHandler.MouseHandler_lastPressedX * 2020601481 > Login.xPadding * 578342931 + 765 || MouseHandler.MouseHandler_lastPressedY * 1163896205 > 503)) {
            MouseHandler.MouseHandler_lastPressedX = 0 * -1607997511;
            MouseHandler.MouseHandler_lastPressedY = 0 * -852023995;
        }
    }
    
    public int jq() {
        return Client.soundEffectCount * -297150195;
    }
    
    public int kill0() {
        return Rasterizer2D.Rasterizer2D_yClipEnd;
    }
    
    @Override
    protected final void kill0(final int n) {
        try {
            if (class373.varcs.hasUnwrittenChanges(-1302793492)) {
                class373.varcs.tryWrite(1900216587);
            }
            if (null != UserComparator6.mouseRecorder) {
                if (n != -72974483) {
                    return;
                }
                UserComparator6.mouseRecorder.isRunning = false;
            }
            UserComparator6.mouseRecorder = null;
            Client.packetWriter.close(-343033137);
            GraphicsObject.getModel((short)152);
            class123.mouseWheel = null;
            if (class28.pcmPlayer0 != null) {
                class28.pcmPlayer0.shutdown((byte)(-1));
            }
            if (HorizontalAlignment.pcmPlayer1 != null) {
                if (n != -72974483) {
                    throw new IllegalStateException();
                }
                HorizontalAlignment.pcmPlayer1.shutdown((byte)(-1));
            }
            class295.method1608((byte)0);
            class144.method822(1444508047);
            if (class14.urlRequester != null) {
                class14.urlRequester.close(-1770460847);
                class14.urlRequester = null;
            }
            try {
                JagexCache.JagexCache_dat2File.close(1887935555);
                for (int i = 0; i < JagexCache.idxCount * 1064766397; ++i) {
                    if (n != -72974483) {
                        return;
                    }
                    class370.JagexCache_idxFiles[i].close(1957780139);
                }
                JagexCache.JagexCache_idx255File.close(-1485962844);
                JagexCache.JagexCache_randomDat.close(-1515903532);
            }
            catch (Exception ex2) {}
            this.field529.method54(537635380);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.bj(" + ')');
        }
    }
    
    public ModelData gm(final ModelData... array) {
        return this.mn(array, array.length);
    }
    
    public int dd() {
        return Client.hintArrowY * 796703205;
    }
    
    public DbRowType mg(final int n) {
        return class125.method750(n, 1883775054);
    }
    
    public int mg() {
        return class503.SpriteBuffer_spriteCount * 1606065339;
    }
    
    public void mu(final int n, final int n2, final int n3, final int n4, final int n5) {
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2, n3, n4, n5);
    }
    
    public int dj() {
        return Rasterizer2D.Rasterizer2D_yClipStart;
    }
    
    void method397(final String s, final int n) throws IOException {
        try {
            final HashMap<String, String> hashMap = new HashMap<String, String>();
            hashMap.put("grant_type", "refresh_token");
            hashMap.put("scope", "gamesso.token.create");
            hashMap.put("refresh_token", s);
            final URL url = new URL(ViewportMouse.field2213 + "shield/oauth/token" + new class438(hashMap).method2298(-759167743));
            final class394 class394 = new class394();
            class394.method2114(Client.field405, (byte)95);
            class394.method2106("Host", new URL(ViewportMouse.field2213).getHost(), -687653151);
            class394.method2111(class435.field3823, (byte)49);
            final class9 field30 = class9.field30;
            final com$jagex$oldscape$pub$RefreshAccessTokenRequester field31 = this.field419;
            if (null == field31) {
                this.field390 = class14.ni(this.field529, new class10(url, field30, class394, this.field401), (byte)1);
                return;
            }
            if (n >= -617213805) {
                throw new IllegalStateException();
            }
            this.field404 = field31.request(field30.method30((byte)(-7)), url, class394.method2105(1411572394), "");
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gl(" + ')');
        }
    }
    
    static WorldMap oy() {
        return class126.worldMap;
    }
    
    static final void qo(final boolean b) {
        if (b) {
            Client.field394 = (Login.field751 ? class135.field1299 : class135.field1301);
        }
        else {
            Client.field394 = (ClientPreferences.setBrightness(class20.clientPreferences, Login.Login_username, (byte)(-22)) ? class135.field1302 : class135.field1305);
        }
    }
    
    public EvictingDualNodeHashTable nj() {
        return HealthBarDefinition.HealthBarDefinition_cached;
    }
    
    public boolean ou() {
        return Client.gameState * -1275976559 == 10;
    }
    
    public void qw(final net.runelite.api.widgets.Widget widget) {
        this.alignWidget((Widget)widget, -1113228420);
    }
    
    static void qw(final int n) {
        final int method1846 = class330.method1846((byte)95);
        if (-3 == n) {
            class205.method1137(Strings.bv, Strings.bl, Strings.bp, -1121146449);
        }
        else if (-1079135150 == n) {
            class205.method1137(Strings.bc, Strings.bh, Strings.bw, 1866494504);
        }
        else if (-1 == n) {
            class205.method1137(Strings.ce, Strings.ci, Strings.cs, -2034796858);
        }
        else if (n == 3) {
            class129.method763(3, (byte)50);
            Login.field752 = -1552230487;
        }
        else if (4 == n) {
            class14.method55(0, 1827580093);
        }
        else if (5 == n) {
            Login.field752 = 1776987740;
            class205.method1137(Strings.cu, Strings.ck, Strings.cq, 1963545296);
        }
        else if (n == -2096324761 || (!Client.onMobile && 6 == n)) {
            class205.method1137(Strings.cm, Strings.cf, Strings.cl, -854049837);
        }
        else if (7 == n) {
            class205.method1137(Strings.cg, Strings.cr, Strings.cy, 1260678484);
        }
        else if (8 == n) {
            class205.method1137(Strings.cx, Strings.cv, Strings.cb, 369637682);
        }
        else if (9 == n) {
            class205.method1137(Strings.co, Strings.cz, Strings.cw, -1456558623);
        }
        else if (n == 10) {
            class205.method1137(Strings.cj, Strings.ch, Strings.ct, 2087450770);
        }
        else if (11 == n) {
            class205.method1137(Strings.cp, Strings.cd, Strings.dm, 1782802044);
        }
        else if (12 == n) {
            class205.method1137(Strings.dw, Strings.dc, Strings.do, 819621190);
        }
        else if (13 == n) {
            class205.method1137(Strings.di, Strings.dr, Strings.dl, -374624294);
        }
        else if (14 == n) {
            class205.method1137(Strings.dk, Strings.dt, Strings.dv, -447493735);
        }
        else if (16 == n) {
            class205.method1137(Strings.dz, Strings.dg, Strings.de, -1825503441);
            class129.method763(-236413354, (byte)23);
        }
        else if (n == 17) {
            class205.method1137(Strings.dh, Strings.dp, Strings.du, -1488037608);
        }
        else if (n == 18) {
            class14.method55(1, 1929287542);
        }
        else if (19 == n) {
            class205.method1137(Strings.dd, Strings.dj, Strings.dx, -253101831);
        }
        else if (n == 20) {
            class205.method1137(Strings.dn, Strings.dy, Strings.ds, -715870233);
        }
        else if (n == 22) {
            class205.method1137(Strings.da, Strings.ep, Strings.eo, -1795905325);
        }
        else if (n == 23) {
            class205.method1137(Strings.eq, Strings.et, Strings.ef, 1943371535);
        }
        else if (24 == n) {
            class205.method1137(Strings.ez, Strings.ej, Strings.ea, -553646522);
        }
        else if (n == 25) {
            class205.method1137(Strings.eu, Strings.es, Strings.eb, -1669702197);
        }
        else if (26 == n) {
            class205.method1137(Strings.el, Strings.en, Strings.er, -926843241);
        }
        else if (n == 27) {
            class205.method1137(Strings.eg, Strings.ed, Strings.ev, -513812512);
        }
        else if (31 == n) {
            class205.method1137(Strings.ec, Strings.ei, Strings.ee, 1719794587);
        }
        else if (-933599013 == n) {
            class14.method55(2, 1620010344);
        }
        else if (-1082292930 == n) {
            class205.method1137(Strings.fh, Strings.fl, Strings.fp, 1457393892);
        }
        else if (n == 38) {
            class205.method1137(Strings.fo, Strings.fx, Strings.fd, 1053425536);
        }
        else if (55 == n) {
            class129.method763(8, (byte)51);
        }
        else {
            if (n == -1768122035) {
                class205.method1137(Strings.fy, Strings.fw, Strings.fr, -264876910);
                class138.updateGameState(11, 1249777544);
                return;
            }
            if (n == 9774874) {
                class205.method1137(Strings.fv, Strings.fq, Strings.fc, 1927392676);
                class138.updateGameState(11, 1644194851);
                return;
            }
            if (664408042 == n) {
                class205.method1137("", "Please enter your date of birth (DD/MM/YYYY)", "", -1435587554);
                class129.method763(7, (byte)96);
            }
            else {
                if (n == -1194307120) {
                    class138.updateGameState(10, 949302551);
                    class129.method763(9, (byte)48);
                    class205.method1137(Strings.ff, Strings.fj, Strings.fg, 643207264);
                    return;
                }
                if (n == 1780041675) {
                    class138.updateGameState(10, 1067367190);
                    class129.method763(9, (byte)118);
                    class205.method1137(Strings.fk, Strings.fm, Strings.ft, -1444253571);
                    return;
                }
                if (n == 65 || n == -441851468) {
                    class138.updateGameState(10, 1541492550);
                    class129.method763(9, (byte)106);
                    class205.method1137(Strings.fu, Strings.gr, Strings.go, -1291457573);
                    return;
                }
                if (n == 71) {
                    class138.updateGameState(10, 1626199860);
                    class129.method763(7, (byte)95);
                    class205.method1137("There was a problem updating your DOB.", "Please try again later. If the problem ", "persists, please contact Jagex Support.", 1205998010);
                }
                else if (73 == n) {
                    class138.updateGameState(10, 452901173);
                    class129.method763(6, (byte)67);
                    class205.method1137(Strings.mm, Strings.me, Strings.mv, -565744168);
                }
                else if (72 == n) {
                    class138.updateGameState(10, 374211665);
                    class129.method763(-1059873469, (byte)122);
                }
                else {
                    class205.method1137(Strings.gs, Strings.gj, Strings.gg, -1178371258);
                }
            }
        }
        class138.updateGameState(10, 1437720691);
        if (method1846 == class330.method1846((byte)(-12)) && Client.field395.method2558(295246544)) {
            class129.method763(9, (byte)10);
        }
    }
    
    public static void qw(final Widget[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        final NodeHashTable xr = ScriptFrame.client.xr();
        for (final Widget widget : array) {
            if (widget != null && widget.ev() == n) {
                if (!widget.isSelfHidden()) {
                    if (n != -1) {
                        widget.mo(n);
                    }
                    final int n8 = n6 + widget.getRelativeX();
                    final int n9 = n7 + widget.getRelativeY();
                    widget.yf(n8);
                    widget.ic(n9);
                    final InterfaceParent interfaceParent = (InterfaceParent)UserComparator4.wv(xr, widget.getId());
                    if (interfaceParent != null) {
                        final int id = widget.getId();
                        for (final Widget widget2 : ScriptFrame.client.oh()[interfaceParent.getId()]) {
                            if (widget2.ev() == -1) {
                                widget2.mo(id);
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static boolean qw(final int n) {
        if (n != 6599) {
            if (n == 40) {
                ScriptFrame.client.getCallbacks().post((Object)new ScriptPreFired(Client.od.getIntOperands()[Client.xh]));
            }
            else if (n == 21) {
                ScriptFrame.client.getCallbacks().post((Object)new ScriptPostFired((int)Client.od.getHash()));
            }
            else if (n == 5504) {
                final int[] intStack = ScriptFrame.client.getIntStack();
                final int intStackSize = ScriptFrame.client.getIntStackSize();
                final int n2 = intStack[intStackSize - 2];
                final int n3 = intStack[intStackSize - 1];
                if (!ScriptFrame.client.sl()) {
                    tr(n3, n2);
                }
            }
            return false;
        }
        assert Client.od.getInstructions()[Client.xh] == 6599;
        int stringStackSize = ScriptFrame.client.getStringStackSize();
        final String eventName = ScriptFrame.client.getStringStack()[--stringStackSize];
        ScriptFrame.client.setStringStackSize(stringStackSize);
        if ("debug".equals(eventName)) {
            int intStackSize2 = ScriptFrame.client.getIntStackSize();
            final String input = ScriptFrame.client.getStringStack()[--stringStackSize];
            final StringBuffer sb = new StringBuffer();
            final Matcher matcher = Pattern.compile("%(.)").matcher(input);
            while (matcher.find()) {
                matcher.appendReplacement(sb, "");
                switch (matcher.group(1).charAt(0)) {
                    case 'd':
                    case 'i': {
                        sb.append(ScriptFrame.client.getIntStack()[--intStackSize2]);
                        continue;
                    }
                    case 's': {
                        sb.append(ScriptFrame.client.getStringStack()[--stringStackSize]);
                        continue;
                    }
                    default: {
                        sb.append(matcher.group(0)).append("=unknown");
                        continue;
                    }
                }
            }
            matcher.appendTail(sb);
            Client.nw.debug(sb.toString());
            ScriptFrame.client.setStringStackSize(stringStackSize);
            ScriptFrame.client.setIntStackSize(intStackSize2);
            return true;
        }
        if ("mes".equals(eventName)) {
            int intStackSize3 = ScriptFrame.client.getIntStackSize();
            final int n4 = ScriptFrame.client.getIntStack()[--intStackSize3];
            final String s = ScriptFrame.client.getStringStack()[--stringStackSize];
            ScriptFrame.client.setStringStackSize(stringStackSize);
            ScriptFrame.client.setIntStackSize(intStackSize3);
            ScriptFrame.client.addChatMessage(ChatMessageType.of(n4), "", s, null, true);
            return true;
        }
        final ScriptCallbackEvent scriptCallbackEvent = new ScriptCallbackEvent();
        scriptCallbackEvent.setScript((net.runelite.api.Script)Client.od);
        scriptCallbackEvent.setEventName(eventName);
        ScriptFrame.client.getCallbacks().post((Object)scriptCallbackEvent);
        return true;
    }
    
    static final void wf() {
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn != null; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (1457211081 * pendingSpawn.endCycle == -1) {
                pendingSpawn.startCycle = 0;
                Messages.method656(pendingSpawn, 1990193703);
            }
            else {
                pendingSpawn.hw();
            }
        }
    }
    
    public void setDrawCallbacks(final DrawCallbacks rz) {
        Client.rz = rz;
    }
    
    public List getNpcs() {
        final int qe = this.qe();
        final int[] qm = this.qm();
        final NPC[] pb = this.pb();
        final ArrayList list = new ArrayList<NPC>(qe);
        for (int i = 0; i < qe; ++i) {
            list.add(pb[qm[i]]);
        }
        return list;
    }
    
    public List getPlayers() {
        final int nq = this.nq();
        final int[] jc = this.jc();
        final Player[] ic = this.ic();
        final ArrayList list = new ArrayList<Player>(nq);
        for (int i = 0; i < nq; ++i) {
            list.add(ic[jc[i]]);
        }
        return list;
    }
    
    public Callbacks getCallbacks() {
        return this.wu;
    }
    
    public int getRealSkillLevel(final Skill skill) {
        return this.getRealSkillLevels()[skill.ordinal()];
    }
    
    public DrawCallbacks getDrawCallbacks() {
        return Client.rz;
    }
    
    public int getViewportXOffset() {
        return Client.viewportOffsetX * -82629945;
    }
    
    public void setGameState(final GameState gameState) {
        assert this.isClientThread() : "must be called on client thread";
        this.qx(gameState.getState());
    }
    
    public int getScale() {
        return Client.viewportZoom * -1114517553;
    }
    
    public int getCameraX() {
        return class36.cameraX * -2100544359;
    }
    
    public int getCanvasWidth() {
        return GameEngine.canvasWidth * -1687260435;
    }
    
    public int getViewportYOffset() {
        return Client.viewportOffsetY * 1352043351;
    }
    
    public int getCameraYaw() {
        return class125.cameraYaw * -1010818347;
    }
    
    public int[][][] getTileHeights() {
        return Tiles.Tiles_heights;
    }
    
    public byte[][][] getTileSettings() {
        return Tiles.Tiles_renderFlags;
    }
    
    public int getViewportWidth() {
        return Client.viewportWidth * 433849721;
    }
    
    public int getSceneMaxPlane() {
        return Scene.Scene_plane;
    }
    
    public void stopNow() {
        this.iu(1L);
    }
    
    public int getCameraY() {
        return class297.cameraZ * -91399205;
    }
    
    public int getViewportHeight() {
        return Client.viewportHeight * 2042096749;
    }
    
    public void setUsername(final String s) {
        this.tl(s);
        this.getCallbacks().post((Object)new UsernameChanged());
    }
    
    public int getLoginIndex() {
        return Login.loginIndex * 1145608355;
    }
    
    public int getTotalLevel() {
        int n = 0;
        final int[] realSkillLevels = ScriptFrame.client.getRealSkillLevels();
        final int ordinal = Skill.CONSTRUCTION.ordinal();
        for (int i = 0; i < realSkillLevels.length; ++i) {
            if (i <= ordinal) {
                n += realSkillLevels[i];
            }
        }
        return n;
    }
    
    public int getCameraPitch() {
        return WorldMapSectionType.cameraPitch * 1897923909;
    }
    
    public int getCanvasHeight() {
        return class262.canvasHeight * 1658005443;
    }
    
    public void setOtp(final String otp) {
        Messages.otp = otp;
    }
    
    public int getCameraZ() {
        return class174.cameraY * 1772923873;
    }
    
    public int getFPS() {
        return GameEngine.fps * 1913114939;
    }
    
    public int getWorld() {
        return Client.worldId * -453810525;
    }
    
    public AccountType getAccountType() {
        switch (this.getVarbitValue(1777)) {
            case 1: {
                return AccountType.IRONMAN;
            }
            case 2: {
                return AccountType.ULTIMATE_IRONMAN;
            }
            case 3: {
                return AccountType.HARDCORE_IRONMAN;
            }
            case 4: {
                return AccountType.GROUP_IRONMAN;
            }
            case 5: {
                return AccountType.HARDCORE_GROUP_IRONMAN;
            }
            default: {
                return AccountType.NORMAL;
            }
        }
    }
    
    public IndexDataBase getIndexScripts() {
        return (IndexDataBase)Client.az[12];
    }
    
    public boolean isDraggingWidget() {
        return Client.isDraggingWidget;
    }
    
    public int getMapAngle() {
        return Client.camAngleY * 704283033;
    }
    
    public IndexDataBase getIndexSprites() {
        return (IndexDataBase)Client.az[8];
    }
    
    public int getBaseX() {
        return WorldMapData_0.baseX * -1232093375;
    }
    
    public int getMenuY() {
        return ArchiveLoader.menuY * -115281635;
    }
    
    public int getDragTime() {
        return class96.widgetDragDuration * 1993201275;
    }
    
    public int getBaseY() {
        return GameObject.baseY * 827352769;
    }
    
    public void setMenuEntries(final MenuEntry[] array) {
        boolean b = false;
        if (Language.tempMenuAction != null && Client.menuOptionsCount * 730065501 > 0) {
            b = (Language.tempMenuAction.xc() == Client.menuOpcodes[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.dg() == Client.menuIdentifiers[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.mp() == Client.menuActions[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.yi() == Client.menuTargets[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.kk() == Client.menuArguments1[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.tj() == Client.menuArguments2[Client.menuOptionsCount * 730065501 - 1] && Language.tempMenuAction.xx() == Client.menuItemIds[Client.menuOptionsCount * 730065501 - 1]);
        }
        for (int i = 0; i < array.length; ++i) {
            final rl3 rl3 = (rl3)array[i];
            if (rl3.ai != i) {
                assert rl3.ai > i;
                vv(rl3.ai, i);
            }
        }
        Client.menuOptionsCount = array.length * 1153055221;
        Client.wd = array.length;
        if (b && Client.menuOptionsCount * 730065501 > 0) {
            assert Language.tempMenuAction != null;
            Language.tempMenuAction.gl(Client.menuOpcodes[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.tm(Client.menuIdentifiers[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.dl(Client.menuActions[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.zh(Client.menuTargets[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.ws(Client.menuArguments1[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.ml(Client.menuArguments2[Client.menuOptionsCount * 730065501 - 1]);
            Language.tempMenuAction.cl(Client.menuItemIds[Client.menuOptionsCount * 730065501 - 1]);
        }
    }
    
    public int getMenuHeight() {
        return class147.menuHeight * 245252327;
    }
    
    public void setDraggedOnWidget(final net.runelite.api.widgets.Widget widget) {
        Client.draggedOnWidget = (Widget)widget;
    }
    
    public int getMenuX() {
        return class192.menuX * -1141903185;
    }
    
    public int getMenuWidth() {
        return DesktopPlatformInfoProvider.menuWidth * -960964385;
    }
    
    public net.runelite.api.widgets.Widget[] getWidgetRoots() {
        final int topLevelInterfaceId = this.getTopLevelInterfaceId();
        if (topLevelInterfaceId == -1) {
            return new net.runelite.api.widgets.Widget[0];
        }
        final ArrayList<Widget> list = new ArrayList<Widget>();
        for (final Widget widget : this.oh()[topLevelInterfaceId]) {
            if (widget != null && widget.ev() == -1) {
                list.add(widget);
            }
        }
        return list.toArray(new net.runelite.api.widgets.Widget[list.size()]);
    }
    
    public int getEnergy() {
        return Client.runEnergy * -365416549;
    }
    
    public boolean isMenuOpen() {
        return Client.isMenuOpen;
    }
    
    public int getRevision() {
        return RunException.RunException_revision * 2027530319;
    }
    
    public int getServerVarpValue(final int n) {
        return this.getServerVarps()[n];
    }
    
    public boolean isPrayerActive(final Prayer prayer) {
        return this.getVarbitValue(prayer.getVarbit()) == 1;
    }
    
    public int getSkillExperience(final Skill skill) {
        final int[] skillExperiences = this.getSkillExperiences();
        if (skill == Skill.OVERALL) {
            Client.nw.debug("getSkillExperience called for {}!", (Object)skill);
            return (int)this.getOverallExperience();
        }
        final int ordinal = skill.ordinal();
        if (ordinal >= skillExperiences.length) {
            return -1;
        }
        return skillExperiences[ordinal];
    }
    
    public int[][] getXteaKeys() {
        return GameObject.xteaKeys;
    }
    
    public void setVarcIntValue(final int i, final int j) {
        this.getVarcMap().put(i, j);
    }
    
    public void setVarbitValue(final int[] array, final int n, final int n2) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        if (n < 0 || n >= Client.gi.length) {
            throw new IndexOutOfBoundsException("Varbit " + n + " does not exist");
        }
        final int n3 = Client.gi[n];
        if (n3 == 0) {
            throw new IndexOutOfBoundsException("Varbit " + n + " does not exist");
        }
        final int n4 = n3 >> 16;
        final int n5 = n3 & 0xFF;
        final int n6 = (1 << (n3 >> 8 & 0xFF) - n5 + 1) - 1;
        array[n4] = ((array[n4] & ~(n6 << n5)) | (n2 & n6) << n5);
    }
    
    public String getVarcStrValue(final int i) {
        final String value = this.getVarcMap().get(i);
        return (value instanceof String) ? value : "";
    }
    
    public int getVarcIntValue(final int i) {
        final Integer value = this.getVarcMap().get(i);
        return (value instanceof Integer) ? value : 0;
    }
    
    public Map getChatLineMap() {
        return Messages.Messages_channels;
    }
    
    public Map getVarcMap() {
        return this.di().eo();
    }
    
    public Object getDBTableField(final int n, final int n2, final int n3, final int n4) {
        final DbRowType mg = this.mg(n);
        final DbTableType wo = this.wo(mg.getTableID());
        Object[] ha = mg.ha(n2);
        final int[] array = wo.py()[n2];
        if (ha == null) {
            ha = wo.ea()[n2];
        }
        if (ha == null) {
            return null;
        }
        if (n3 >= array.length) {
            throw new IllegalArgumentException("tuple index too large");
        }
        if (n4 > ha.length / array.length) {
            throw new IllegalArgumentException("field index too large");
        }
        return ha[n3 * array.length + n4];
    }
    
    public int[] getMapRegions() {
        return WorldMapAreaData.regions;
    }
    
    public void setVarbit(final int n, final int n2) {
        this.setVarbitValue(this.getVarps(), n, n2);
    }
    
    public void queueChangedVarp(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        final int[] mb = this.mb();
        int lj = ScriptFrame.client.lj();
        mb[++lj - 1 & 0x1F] = n;
        ScriptFrame.client.eg(lj);
    }
    
    public int[] getServerVarps() {
        return Varps.Varps_temp;
    }
    
    public int getVar(final int n) {
        return this.getVarbitValue(this.getVarps(), n);
    }
    
    public void setVarcStrValue(final int i, final String s) {
        this.getVarcMap().put(i, s);
    }
    
    public int[] getVarps() {
        return Varps.Varps_main;
    }
    
    public int getGameCycle() {
        return Client.cycle * -1886224337;
    }
    
    public Deque getGraphicsObjects() {
        return (Deque)this.bu();
    }
    
    public int getMusicVolume() {
        return class20.clientPreferences.eo();
    }
    
    public void playSoundEffect(final int n, int n2) {
        assert this.isClientThread() : "must be called on client thread";
        final SoundEffect zo = this.zo(Client.az[4], n, 0);
        if (zo == null) {
            return;
        }
        final int soundEffectVolume = class20.clientPreferences.getSoundEffectVolume();
        if (soundEffectVolume != 0) {
            n2 = soundEffectVolume;
        }
        final RawPcmStream vp = this.vp(zo.fq().wy(this.xf()), 100, n2);
        vp.np(1);
        this.vf().ep(vp);
    }
    
    public void playSoundEffect(final int n, final int n2, final int n3, final int n4) {
        this.playSoundEffect(n, n2, n3, n4, 0);
    }
    
    public void playSoundEffect(final int n, final int n2, final int n3, final int n4, final int n5) {
        assert this.isClientThread() : "must be called on client thread";
        final int n6 = ((n2 & 0xFF) << 16) + ((n3 & 0xFF) << 8) + (n4 & 0xFF);
        final int[] qi = this.qi();
        final int[] iw = this.iw();
        final int[] us = this.us();
        final SoundEffect[] eb = this.eb();
        final int[] ge = this.ge();
        final int jq = this.jq();
        qi[jq] = n;
        iw[jq] = 1;
        us[jq] = n5;
        eb[jq] = null;
        ge[jq] = n6;
        this.bl(jq + 1);
        Client.wk = jq + 1;
    }
    
    public void playSoundEffect(final int n) {
        this.playSoundEffect(n, 0, 0, 0, 0);
    }
    
    public int getMouseIdleTicks() {
        return Client.hz;
    }
    
    public net.runelite.api.Projectile createProjectile(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10, final net.runelite.api.Actor actor, final int n11, final int n12) {
        int n13 = 0;
        if (actor instanceof NPC) {
            n13 = ((NPC)actor).getIndex() + 1;
        }
        else if (actor instanceof Player) {
            n13 = -(((Player)actor).getId() + 1);
        }
        final Projectile ve = this.ve(n, n2, n3, n4, n5, n6, n7, n8, n9, n13, n10);
        ve.xg(n11, n12, Perspective.getTileHeight((net.runelite.api.Client)ScriptFrame.client, new LocalPoint(n11, n12), ScriptFrame.client.getPlane()), n6 + ScriptFrame.client.getGameCycle());
        return (net.runelite.api.Projectile)ve;
    }
    
    public boolean isPlayingJingle() {
        return Client.playingJingle;
    }
    
    public void changeMemoryMode(final boolean b) {
        this.resizeGame(b);
        this.wm(b);
        this.wq(true);
        if (this.getGameState() == GameState.LOGGED_IN) {
            this.setGameState(GameState.LOADING);
        }
    }
    
    public void setModIcons(final net.runelite.api.IndexedSprite[] array) {
        this.bh((IndexedSprite[])array);
    }
    
    public Deque getProjectiles() {
        return (Deque)Client.projectiles;
    }
    
    public void setMusicVolume(final int n) {
        if (n > 0 && class20.clientPreferences.eo() <= 0 && this.iv() != -1) {
            this.ui(1);
            this.bh(Client.az[6]);
            this.gp(this.iv());
            this.iq(0);
            this.vn(n);
            this.po(10000);
        }
        class20.clientPreferences.jm(n);
        this.vn(n);
        final MidiPcmStream wm = this.wm();
        if (wm != null) {
            wm.lx(n);
        }
    }
    
    public void setStretchedFast(final boolean wj) {
        Client.wj = wj;
    }
    
    public int getCameraYawTarget() {
        return Client.camAngleY * 704283033;
    }
    
    public net.runelite.api.widgets.Widget getScriptDotWidget() {
        return (net.runelite.api.widgets.Widget)SoundSystem.scriptDotWidget;
    }
    
    public void setInvertPitch(final boolean eh) {
        Client.eh = eh;
    }
    
    public void setInvertYaw(final boolean aw) {
        Client.aw = aw;
    }
    
    public void changeWorld(final net.runelite.api.World world) {
        FloorOverlayDefinition.changeWorld((World)world, 1003171316);
    }
    
    public void setStringStackSize(final int n) {
        SecureRandomCallable.Interpreter_stringStackSize = n * -1086551379;
    }
    
    public RenderOverview getRenderOverview() {
        return (RenderOverview)this.ya();
    }
    
    public void runScript(final Object... array) {
        ua(this.ek(array));
    }
    
    public void setScalingFactor(final int n) {
        Client.bz = 1.0 + n / 100.0;
    }
    
    public Dimension getRealDimensions() {
        if (!this.isStretchedEnabled()) {
            return this.getCanvas().getSize();
        }
        if (Client.il == null) {
            if (this.isResized()) {
                final Container parent = this.getCanvas().getParent();
                final int width = parent.getWidth();
                final int height = parent.getHeight();
                int width2 = (int)(width / Client.bz);
                int height2 = (int)(height / Client.bz);
                if (width2 < 765 || height2 < 503) {
                    final double min = Math.min(width / 765.0, height / 503.0);
                    width2 = (int)(width / min);
                    height2 = (int)(height / min);
                }
                Client.il = new Dimension(width2, height2);
            }
            else {
                Client.il = Constants.GAME_FIXED_SIZE;
            }
        }
        return Client.il;
    }
    
    public void setIntStackSize(final int n) {
        Interpreter.Interpreter_intStackSize = n * 427135973;
    }
    
    public void setCameraYawTarget(final int n) {
        Client.bx = lo(n);
        ScriptFrame.client.mr(n);
    }
    
    public int[] getRealSkillLevels() {
        return Client.levels;
    }
    
    public boolean hasHintArrow() {
        return this.getHintArrowType() != 0;
    }
    
    public void setCompass(final net.runelite.api.SpritePixels spritePixels) {
        ChatChannel.compass = (SpritePixels)spritePixels;
    }
    
    public void setHintArrow(final LocalPoint localPoint) {
        this.pl(2);
        final WorldPoint fromLocal = WorldPoint.fromLocal((net.runelite.api.Client)ScriptFrame.client, localPoint);
        this.hs(fromLocal.getX());
        this.wb(fromLocal.getY());
        this.nx(localPoint.getX() & 0x7F);
        this.ae(localPoint.getY() & 0x7F);
        this.ph(0);
    }
    
    public void setHintArrow(final net.runelite.api.NPC npc) {
        this.pl(1);
        this.um(npc.getIndex());
    }
    
    public void setHintArrow(final net.runelite.api.Player player) {
        this.pl(10);
        this.yw(player.getId());
    }
    
    public void setHintArrow(final WorldPoint worldPoint) {
        this.pl(2);
        this.hs(worldPoint.getX());
        this.wb(worldPoint.getY());
        this.nx(64);
        this.ae(64);
        this.ph(0);
    }
    
    public WorldPoint getHintArrowPoint() {
        if (this.getHintArrowType() == 2) {
            return new WorldPoint(this.nm(), this.dd(), this.getPlane());
        }
        return null;
    }
    
    public void queueChangedSkill(final Skill skill) {
        final int[] cf = ScriptFrame.client.cf();
        int sn = ScriptFrame.client.sn();
        cf[++sn - 1 & 0x1F] = skill.ordinal();
        ScriptFrame.client.dx(sn);
    }
    
    public Map getSpriteOverrides() {
        return Client.ym;
    }
    
    public void setGpu(final boolean yu) {
        this.yu = yu;
    }
    
    public int getHintArrowType() {
        return Client.hintArrowType * 633821975;
    }
    
    public int getOculusOrbState() {
        return Client.oculusOrbState * 986256295;
    }
    
    public void hopToWorld(final net.runelite.api.World world) {
        final int id = world.getId();
        class17.menuAction(id, WidgetInfo.WORLD_SWITCHER_LIST.getId(), MenuAction.CC_OP.getId(), 1, -1, "Switch", "<col=ff9040>" + (id - 300) + "</col>", -1, -1, -1745540313);
    }
    
    public void setSkyboxColor(final int ij) {
        Client.ij = ij;
    }
    
    public int getSkyboxColor() {
        return Client.ij;
    }
    
    public void clearHintArrow() {
        this.pl(0);
    }
    
    public void openWorldHopper() {
        class17.menuAction(-1, WidgetInfo.WORLD_SWITCHER_BUTTON.getId(), MenuAction.CC_OP.getId(), 1, -1, "World Switcher", "", -1, -1, -1745540313);
    }
    
    public int get3dZoom() {
        return Rasterizer3D.clips.nj();
    }
    
    public void setOculusOrbState(final int n) {
        Client.oculusOrbState = n * -1041341417;
    }
    
    public void setRenderArea(final boolean[][] visibleTiles) {
        Scene.visibleTiles = visibleTiles;
    }
    
    public net.runelite.api.clan.ClanSettings getClanSettings() {
        return (net.runelite.api.clan.ClanSettings)this.hs()[0];
    }
    
    public net.runelite.api.clan.ClanSettings getClanSettings(final int n) {
        final ClanSettings[] hs = this.hs();
        if (n < 0 || n >= hs.length) {
            return null;
        }
        return (net.runelite.api.clan.ClanSettings)hs[n];
    }
    
    public void setUnlockedFps(final boolean fw) {
        if (!(Client.fw = fw)) {
            Client.ah = 0L;
        }
    }
    
    public int getCameraX2() {
        return Scene.Scene_cameraX;
    }
    
    public boolean isKeyPressed(final int n) {
        return this.jg().method1153()[n];
    }
    
    public void setLoginScreen(final net.runelite.api.SpritePixels spritePixels) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        Client.id = (SpritePixels)spritePixels;
        ScriptFrame.client.sv(false);
        if (ScriptFrame.client.getGameState() == GameState.LOGIN_SCREEN) {
            try {
                ScriptFrame.client.setGameState(GameState.UNKNOWN);
            }
            finally {
                ScriptFrame.client.setGameState(GameState.LOGIN_SCREEN);
            }
        }
    }
    
    public net.runelite.api.clan.ClanChannel getClanChannel() {
        return (net.runelite.api.clan.ClanChannel)this.st()[0];
    }
    
    public net.runelite.api.clan.ClanChannel getClanChannel(final int n) {
        final ClanChannel[] st = this.st();
        if (n < 0 || n >= st.length) {
            return null;
        }
        return (net.runelite.api.clan.ClanChannel)st[n];
    }
    
    public void setIdleTimeout(final int kd) {
        Client.kd = kd;
        if (Client.kd > 75000) {
            Client.kd = 75000;
        }
        else if (Client.kd < 15000) {
            Client.kd = 15000;
        }
    }
    
    public void draw2010Menu(final int n) {
        this.eq(null, this.getMenuX(), this.getMenuY(), this.getMenuWidth(), this.getMenuHeight(), n);
    }
    
    public int getIdleTimeout() {
        return Client.kd;
    }
    
    public int getCameraZ2() {
        return Scene.Scene_cameraZ;
    }
    
    public void setWidgetSelected(final boolean isSpellSelected) {
        Client.isSpellSelected = isSpellSelected;
    }
    
    public void checkClickbox(final net.runelite.api.Model model, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final long n9) {
        final Model model2 = (Model)model;
        final boolean b = n9 != 0L && (int)(n9 >>> 16 & 0x1L) != 1;
        final boolean vn = ScriptFrame.client.vn();
        if (!b || !vn) {
            return;
        }
        if (!this.ua((net.runelite.api.Model)model2, n, n6, n7, n8)) {
            return;
        }
        final int n10 = (int)(n9 >> 14 & 0x3L);
        final boolean b2 = n10 == 2 || n10 == 3;
        final int n11 = (int)(n9 & 0x7FL);
        final int n12 = (int)(n9 >> 7 & 0x7FL);
        final int n13 = MusicPatchNode.localPlayer.zg()[0];
        final int n14 = MusicPatchNode.localPlayer.ie()[0];
        if (b2 && Math.max(Math.abs(n11 - n13), Math.abs(n12 - n14)) > 50) {
            return;
        }
        if (model2.isClickable()) {
            this.hy(n9);
            return;
        }
        final int verticesCount = model2.getVerticesCount();
        final int faceCount = model2.getFaceCount();
        final int[] verticesX = model2.getVerticesX();
        final int[] verticesY = model2.getVerticesY();
        final int[] verticesZ = model2.getVerticesZ();
        final int[] faceIndices1 = model2.getFaceIndices1();
        final int[] faceIndices2 = model2.getFaceIndices2();
        final int[] faceIndices3 = model2.getFaceIndices3();
        final int[] faceColors3 = model2.getFaceColors3();
        final int get3dZoom = ScriptFrame.client.get3dZoom();
        final int centerX = ScriptFrame.client.getCenterX();
        final int centerY = ScriptFrame.client.getCenterY();
        int n15 = 0;
        int n16 = 0;
        if (n != 0) {
            n15 = Perspective.SINE[n];
            n16 = Perspective.COSINE[n];
        }
        for (int i = 0; i < verticesCount; ++i) {
            int n17 = verticesX[i];
            final int n18 = verticesY[i];
            int n19 = verticesZ[i];
            if (n != 0) {
                final int n20 = n19 * n15 + n17 * n16 >> 16;
                n19 = n19 * n16 - n17 * n15 >> 16;
                n17 = n20;
            }
            final int n21 = n17 + n6;
            final int n22 = n18 + n7;
            final int n23 = n19 + n8;
            final int n24 = n23 * n4 + n5 * n21 >> 16;
            final int n25 = n5 * n23 - n21 * n4 >> 16;
            final int n26 = n24;
            final int n27 = n3 * n22 - n25 * n2 >> 16;
            final int n28 = n22 * n2 + n3 * n25 >> 16;
            if (n28 >= 50) {
                Model.modelViewportXs[i] = n26 * get3dZoom / n28 + centerX;
                Model.modelViewportYs[i] = n27 * get3dZoom / n28 + centerY;
            }
            else {
                Model.modelViewportXs[i] = -5000;
            }
        }
        final int bp = ScriptFrame.client.bp();
        final int by = ScriptFrame.client.by();
        for (int j = 0; j < faceCount; ++j) {
            if (faceColors3[j] != -2) {
                final int n29 = faceIndices1[j];
                final int n30 = faceIndices2[j];
                final int n31 = faceIndices3[j];
                final int n32 = Model.modelViewportXs[n29];
                final int n33 = Model.modelViewportXs[n30];
                final int n34 = Model.modelViewportXs[n31];
                final int n35 = Model.modelViewportYs[n29];
                final int n36 = Model.modelViewportYs[n30];
                final int n37 = Model.modelViewportYs[n31];
                if (n32 != -5000 && n33 != -5000) {
                    if (n34 != -5000) {
                        final int n38 = model2.isClickable() ? 20 : 5;
                        final int n39 = n38 + by;
                        boolean b3;
                        if (n39 < n35 && n39 < n36 && n39 < n37) {
                            b3 = false;
                        }
                        else {
                            final int n40 = by - n38;
                            if (n40 > n35 && n40 > n36 && n40 > n37) {
                                b3 = false;
                            }
                            else {
                                final int n41 = n38 + bp;
                                if (n41 < n32 && n41 < n33 && n41 < n34) {
                                    b3 = false;
                                }
                                else {
                                    final int n42 = bp - n38;
                                    b3 = (n42 <= n32 || n42 <= n33 || n42 <= n34);
                                }
                            }
                        }
                        if (b3) {
                            this.hy(n9);
                            break;
                        }
                    }
                }
            }
        }
    }
    
    public int getCameraY2() {
        return Scene.Scene_cameraY;
    }
    
    public net.runelite.api.widgets.Widget getSelectedWidget() {
        if (!this.isWidgetSelected()) {
            return null;
        }
        final int jc = this.jc();
        final int kz = this.kz();
        Object o = this.ex(jc);
        if (o != null && kz > -1) {
            o = ((net.runelite.api.widgets.Widget)o).getChild(kz);
        }
        return (net.runelite.api.widgets.Widget)o;
    }
    
    public void drawOriginalMenu(final int n) {
        this.ku(null, class192.menuX * -1141903185, ArchiveLoader.menuY * -115281635, DesktopPlatformInfoProvider.menuWidth * -960964385, class147.menuHeight * 245252327, n);
    }
    
    public double getMinimapZoom() {
        return Client.xq;
    }
    
    public boolean isMinimapZoom() {
        return Client.wp;
    }
    
    public Rasterizer getRasterizer() {
        return class220.ks;
    }
    
    public void setMinimapZoom(final boolean wp) {
        Client.wp = wp;
        Client.xq = 4.0;
    }
    
    public void setMinimapZoom(final double n) {
        if (!Client.wp) {
            return;
        }
        Client.xq = Doubles.constrainToRange(n, 2.0, 8.0);
    }
    
    public int getRasterizer3D_clipMidY2() {
        return Rasterizer3D.clips.ic();
    }
    
    public void setUnlockedFpsTarget(final int n) {
        if (n <= 0) {
            Client.ah = 0L;
            return;
        }
        Client.ah = 1000000000L / n;
    }
    
    public int getOculusOrbFocalPointX() {
        return class33.oculusOrbFocalPointX * -1958669353;
    }
    
    public void setShouldRenderLoginScreenFire(final boolean zk) {
        LoginScreenAnimation.zk = zk;
    }
    
    public void setInventoryDragDelay(final int ic) {
        Client.ic = ic;
    }
    
    public void setGeSearchResultCount(final int n) {
        class264.foundItemIdCount = n * -316033701;
    }
    
    public int getCrossWorldMessageIdsIndex() {
        return Client.field588 * 1960529059;
    }
    
    public void setMinimapTileDrawer(final TileFunction jc) {
        if (jc == null) {
            Client.jc = Client.wp;
        }
        else {
            Client.jc = jc;
        }
    }
    
    public void setGeSearchResultIds(final short[] foundItemIds) {
        class399.foundItemIds = foundItemIds;
    }
    
    public void resetHealthBarCaches() {
        this.nj().reset();
        this.drawLoggedIn().reset();
    }
    
    public long[] getCrossWorldMessageIds() {
        return Client.field652;
    }
    
    public int getRasterizer3D_clipNegativeMidY() {
        return Rasterizer3D.clips.ok();
    }
    
    public Map getWidgetSpriteOverrides() {
        return Client.qp;
    }
    
    public int getRasterizer3D_clipMidX2() {
        return Rasterizer3D.clips.fi();
    }
    
    public int getRasterizer3D_clipNegativeMidX() {
        return Rasterizer3D.clips.qw();
    }
    
    public void setGeSearchResultIndex(final int n) {
        FontName.foundItemIndex = n * 1333557417;
    }
    
    public int[] getSkillExperiences() {
        return Client.experience;
    }
    
    public void setOculusOrbNormalSpeed(final int n) {
        Client.oculusOrbNormalSpeed = n * -658916663;
    }
    
    public int getOculusOrbFocalPointY() {
        return class144.oculusOrbFocalPointY * -365969735;
    }
    
    public void setAllWidgetsAreOpTargetable(final boolean dl) {
        Client.dl = dl;
    }
    
    public int getBoostedSkillLevel(final Skill skill) {
        return this.getBoostedSkillLevels()[skill.ordinal()];
    }
    
    public LocalPoint getLocalDestinationLocation() {
        final int sl = this.sl();
        final int yg = this.yg();
        if (sl != 0 && yg != 0) {
            return LocalPoint.fromScene(sl, yg);
        }
        return null;
    }
    
    public int[] getWidgetPositionsY() {
        return Client.rootWidgetYs;
    }
    
    public int getTopLevelInterfaceId() {
        return Client.rootInterface * -896157613;
    }
    
    public int getServerVarbitValue(final int n) {
        return this.getVarbitValue(this.getServerVarps(), n);
    }
    
    public long getMouseLastPressedMillis() {
        return MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L;
    }
    
    public net.runelite.api.widgets.Widget getScriptActiveWidget() {
        return (net.runelite.api.widgets.Widget)class1.scriptActiveWidget;
    }
    
    public int[] getWidgetPositionsX() {
        return Client.rootWidgetXs;
    }
    
    public int getMouseCurrentButton() {
        return MouseHandler.MouseHandler_currentButton * 114417019;
    }
    
    public int getMusicCurrentTrackId() {
        return class379.musicTrackGroupId * -747672747;
    }
    
    public int getCameraPitchTarget() {
        return Client.camAngleX * -954734641;
    }
    
    public int getCurrentLoginField() {
        return Login.currentLoginField * -1232221421;
    }
    
    public net.runelite.api.Tile getSelectedSceneTile() {
        final int wn = this.wn();
        final int xh = this.xh();
        if (wn < 0 || xh < 0 || wn >= 104 || xh >= 104) {
            return null;
        }
        return (net.runelite.api.Tile)this.la().je()[this.getPlane()][wn][xh];
    }
    
    public Point getMouseCanvasPosition() {
        return new Point(this.nt(), this.kf());
    }
    
    public int[][][] getInstanceTemplateChunks() {
        return Client.instanceChunkTemplates;
    }
    
    public long getOverallExperience() {
        final int[] skillExperiences = this.getSkillExperiences();
        long n = 0L;
        final int[] array = skillExperiences;
        for (int length = array.length, i = 0; i < length; ++i) {
            n += array[i];
        }
        return n;
    }
    
    public int getKeyboardIdleTicks() {
        return this.fv().ff();
    }
    
    public boolean[] getPlayerOptionsPriorities() {
        return Client.playerOptionsPriorities;
    }
    
    public Dimension getStretchedDimensions() {
        if (Client.zu == null) {
            final Container parent = this.getCanvas().getParent();
            int width = parent.getWidth();
            int height = parent.getHeight();
            final Dimension realDimensions = this.getRealDimensions();
            if (Client.di) {
                final double n = realDimensions.getWidth() / realDimensions.getHeight();
                final int n2 = (int)(height * n);
                if (n2 > width) {
                    height = (int)(width / n);
                }
                else {
                    width = n2;
                }
            }
            if (Client.fl) {
                if (width > realDimensions.width) {
                    width -= width % realDimensions.width;
                }
                if (height > realDimensions.height) {
                    height -= height % realDimensions.height;
                }
            }
            Client.zu = new Dimension(width, height);
        }
        return Client.zu;
    }
    
    public boolean isWidgetSelected() {
        return Client.isSpellSelected;
    }
    
    public String[] getPlayerOptions() {
        return Client.playerMenuActions;
    }
    
    public MenuEntry[] getMenuEntries() {
        return Arrays.copyOf((MenuEntry[])Client.ix, Client.menuOptionsCount * 730065501);
    }
    
    public int[] getPlayerMenuTypes() {
        return Client.playerMenuOpcodes;
    }
    
    static final void vq(int n, int n2, final int n3) {
        if (n >= 128 && n2 >= 128 && n <= 13056 && n2 <= 13056) {
            final int n4 = class147.getTileHeight(n, n2, -1727408401 * GameEngine.Client_plane, (byte)(-48)) - n3;
            n -= class36.cameraX * -2100544359;
            final int n5 = n4 - class174.cameraY * 1772923873;
            n2 -= class297.cameraZ * -91399205;
            final int n6 = Rasterizer3D.Rasterizer3D_sine[1897923909 * WorldMapSectionType.cameraPitch];
            final int n7 = Rasterizer3D.Rasterizer3D_cosine[WorldMapSectionType.cameraPitch * 1897923909];
            final int n8 = Rasterizer3D.Rasterizer3D_sine[-1010818347 * class125.cameraYaw];
            final int n9 = Rasterizer3D.Rasterizer3D_cosine[-1010818347 * class125.cameraYaw];
            final int n10 = n9 * n + n8 * n2 >> 16;
            n2 = n2 * n9 - n8 * n >> 16;
            n = n10;
            final int n11 = n7 * n5 - n6 * n2 >> 16;
            n2 = n2 * n7 + n5 * n6 >> 16;
            final int n12 = n11;
            if (n2 >= 50) {
                Client.viewportTempX = (433849721 * Client.viewportWidth / 2 + n * (Client.viewportZoom * -1114517553) / n2) * -846498395;
                Client.viewportTempY = -1610031701 * (Client.viewportHeight * 2042096749 / 2 + n12 * (-1114517553 * Client.viewportZoom) / n2);
            }
            else {
                Client.viewportTempX = 846498395;
                Client.viewportTempY = 1610031701;
            }
            return;
        }
        Client.viewportTempX = 846498395;
        Client.viewportTempY = 1610031701;
    }
    
    public void jx(final int scene_cameraYTile) {
        Scene.Scene_cameraYTile = scene_cameraYTile;
    }
    
    public static void gr(final Script od) {
        if (Client.hl != null) {
            if (od != null) {
                final ScriptPreFired scriptPreFired = new ScriptPreFired((int)od.getHash());
                scriptPreFired.setScriptEvent((net.runelite.api.ScriptEvent)Client.hl);
                ScriptFrame.client.getCallbacks().post((Object)scriptPreFired);
            }
            Client.hl = null;
        }
        Client.od = od;
    }
    
    public int nq() {
        return Players.Players_count * -2010934433;
    }
    
    static void tj(final Player player, final boolean b) {
        if (null != player && player.isVisible(1666539507) && !player.isHidden) {
            player.isUnanimated = false;
            if (((Client.isLowDetail && Players.Players_count * -2010934433 > 50) || -2010934433 * Players.Players_count > 200) && (b && player.cd * 951662265 == -1456327361 * player.dg)) {
                player.isUnanimated = true;
            }
            final int n = -1136015151 * player.br >> 7;
            final int n2 = -1425757803 * player.ep >> 7;
            if (n >= 0 && n < -1520082380 && n2 >= 0 && n2 < 104) {
                final long calculateTag = FaceNormal.calculateTag(0, 0, 0, false, player.index * -1232170701, 1983988656);
                if (player.attachedModel != null && -253033628 * Client.cycle >= player.animationCycleStart * -1402262375 && -1886224337 * Client.cycle < player.animationCycleEnd * -935505685) {
                    player.isUnanimated = false;
                    player.tileHeight = class147.getTileHeight(1144428983 * player.br, -1829819148 * player.ep, GameEngine.Client_plane * -2057512521, (byte)(-54)) * -548513145;
                    player.cx = 1628708048 * Client.cycle;
                    class31.scene.addNullableObject(-1727408401 * GameEngine.Client_plane, player.br * 1144428983, player.ep * -411750205, -1296859312 * player.tileHeight, 60, player, player.dx * -938449024, calculateTag, -731462824 * player.minX, 1610787421 * player.minY, -334061919 * player.maxX, player.maxY * 806621699);
                }
                else {
                    if (0x26A7416A == (796242895 * player.br & 0x7F) && 0x40 == (player.ep * 230012751 & 0x91E1515B)) {
                        if (Client.tileLastDrawnActor[n][n2] == Client.viewportDrawCount * 2041464667) {
                            return;
                        }
                        Client.tileLastDrawnActor[n][n2] = 2041464667 * Client.viewportDrawCount;
                    }
                    player.tileHeight = class147.getTileHeight(1144428983 * player.br, player.ep * -411750205, -418835637 * GameEngine.Client_plane, (byte)(-111)) * -548513145;
                    player.cx = Client.cycle * -14183397;
                    class31.scene.drawEntity(GameEngine.Client_plane * -1727408401, player.br * -2119479359, player.ep * -1346020311, 561204023 * player.tileHeight, 60, player, -1703696531 * player.dx, calculateTag, player.an);
                }
            }
        }
    }
    
    static final boolean wg(final int n, final int n2, final int n3, final int n4, final int n5) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (n == 593068225 * pendingSpawn2.plane && n2 == 68300005 * pendingSpawn2.x && n3 == 800888185 * pendingSpawn2.y && pendingSpawn2.type * -1586499579 == n4) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn != null) {
            pendingSpawn.field931 = n5 * -620279391;
            return true;
        }
        return false;
    }
    
    public static void qb(final int n, final int n2, final int n3, final int n4, final int n5) {
        final AbstractRasterProvider xj = ScriptFrame.client.xj();
        final int width = ((BufferProvider)xj).getWidth();
        final int[] pixels = ((BufferProvider)xj).getPixels();
        int n6 = n2 * width + n;
        final int n7 = width - n3;
        for (int i = n2; i < n2 + n4; ++i) {
            for (int j = n; j < n + n3; ++j) {
                pixels[n6++] = 0;
            }
            n6 += n7;
        }
    }
    
    static long qb() {
        return Client.playerUUID * -1749026863537138247L;
    }
    
    public EvictingDualNodeHashTable og() {
        return Widget.Widget_cachedSprites;
    }
    
    static final String zd(final int n, final int n2) {
        final int n3 = n2 - n;
        if (n3 < 1081538211) {
            return class383.method2081(16711680, 263816253);
        }
        if (n3 < -6) {
            return class383.method2081(16723968, -547794397);
        }
        if (n3 < -3) {
            return class383.method2081(16740352, 1478829537);
        }
        if (n3 < 0) {
            return class383.method2081(16756736, -2022393237);
        }
        if (n3 > 9) {
            return class383.method2081(570735346, -1321857942);
        }
        if (n3 > 6) {
            return class383.method2081(682154324, -705223109);
        }
        if (n3 > 3) {
            return class383.method2081(8453888, 395487103);
        }
        if (n3 > 0) {
            return class383.method2081(-49559857, 829359196);
        }
        return class383.method2081(16776960, 647505304);
    }
    
    public void zd(final TileItem bl) {
        Client.bl = bl;
    }
    
    static final int vl(final int n, final int n2, final int n3) {
        final int n4 = n >> 7;
        final int n5 = n2 >> 7;
        if (n4 >= 0 && n5 >= 0 && n4 <= 103 && n5 <= -1701222375) {
            int n6 = n3;
            if (n6 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n4][n5] & 0x2)) {
                ++n6;
            }
            final int n7 = n & 0x7F584810;
            final int n8 = n2 & 0xEABAA2F3;
            return n8 * (n7 * Tiles.Tiles_heights[n6][n4 + 1][n5 + 1] + Tiles.Tiles_heights[n6][n4][1 + n5] * (128 - n7) >> 7) + (n7 * Tiles.Tiles_heights[n6][1 + n4][n5] + Tiles.Tiles_heights[n6][n4][n5] * (128 - n7) >> 7) * (128 - n8) >> 7;
        }
        return 0;
    }
    
    public int vw() {
        return MouseHandler.MouseHandler_y * -1224153235;
    }
    
    static final void vw(int n, int n2, final int n3) {
        if (n >= -623103833 && n2 >= 1503432226 && n <= 590304878 && n2 <= 462909003) {
            final int n4 = class147.getTileHeight(n, n2, -1727408401 * GameEngine.Client_plane, (byte)(-105)) - n3;
            n -= class36.cameraX * -88769262;
            final int n5 = n4 - class174.cameraY * -1070659837;
            n2 -= class297.cameraZ * -1938039406;
            final int n6 = Rasterizer3D.Rasterizer3D_sine[1897923909 * WorldMapSectionType.cameraPitch];
            final int n7 = Rasterizer3D.Rasterizer3D_cosine[WorldMapSectionType.cameraPitch * 1138351002];
            final int n8 = Rasterizer3D.Rasterizer3D_sine[-1865190570 * class125.cameraYaw];
            final int n9 = Rasterizer3D.Rasterizer3D_cosine[-1010818347 * class125.cameraYaw];
            final int n10 = n9 * n + n8 * n2 >> 16;
            n2 = n2 * n9 - n8 * n >> 16;
            n = n10;
            final int n11 = n7 * n5 - n6 * n2 >> 16;
            n2 = n2 * n7 + n5 * n6 >> 16;
            final int n12 = n11;
            if (n2 >= 50) {
                Client.viewportTempX = (-430014963 * Client.viewportWidth / 2 + n * (Client.viewportZoom * -1114517553) / n2) * -259454310;
                Client.viewportTempY = -397076376 * (Client.viewportHeight * 2042096749 / 2 + n12 * (-1114517553 * Client.viewportZoom) / n2);
            }
            else {
                Client.viewportTempX = -1838902533;
                Client.viewportTempY = 1114429458;
            }
            return;
        }
        Client.viewportTempX = 846498395;
        Client.viewportTempY = -287097378;
    }
    
    public void vw(final boolean b) {
        final long nanoTime = System.nanoTime();
        final long n = nanoTime - this.iz;
        this.iz = nanoTime;
        if (this.kh() == GameState.LOGGED_IN.getState()) {
            this.ma(n);
        }
    }
    
    public static void jn(final Client client) {
        if (client == null) {
            client.getChatLineMap();
        }
        if (-1 != Client.rootInterface * -896157613) {
            final int n = Client.rootInterface * -896157613;
            if (SoundSystem.loadInterface(n, 1376777516)) {
                TileItem.drawModelComponents(VerticalAlignment.Widget_interfaceComponents[n], -1, (byte)64);
            }
        }
        for (int i = 0; i < Client.rootWidgetCount * -356793645; ++i) {
            if (Client.field573[i]) {
                Client.field574[i] = true;
            }
            Client.field519[i] = Client.field573[i];
            Client.field573[i] = false;
        }
        Client.field527 = Client.cycle * -1146781383;
        Client.viewportX = -563689483;
        Client.viewportY = -2111961447;
        if (-1 != Client.rootInterface * -896157613) {
            Client.rootWidgetCount = 0;
            class13.drawWidgets(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, class262.canvasHeight * 1658005443, 0, 0, -1, (byte)(-69));
        }
        Rasterizer2D.Rasterizer2D_resetClip();
        if (Client.showMouseCross) {
            if (-1306273505 * Client.mouseCrossColor == 1) {
                class173.crossSprites[1513573489 * Client.mouseCrossState / 100].drawAt(-902574261 * Client.mouseCrossX - 8, 682495699 * Client.mouseCrossY - 8);
            }
            if (-1306273505 * Client.mouseCrossColor == 2) {
                class173.crossSprites[4 + 1513573489 * Client.mouseCrossState / 100].drawAt(-902574261 * Client.mouseCrossX - 8, 682495699 * Client.mouseCrossY - 8);
            }
        }
        if (!Client.isMenuOpen) {
            if (-1 != Client.viewportX * -2086038621) {
                class85.method498(-2086038621 * Client.viewportX, Client.viewportY * -870509993, (byte)(-22));
            }
        }
        else {
            final int n2 = -1141903185 * class192.menuX;
            final int n3 = ArchiveLoader.menuY * -115281635;
            final int n4 = -960964385 * DesktopPlatformInfoProvider.menuWidth;
            final int n5 = 245252327 * class147.menuHeight;
            final int n6 = 6116423;
            Rasterizer2D.Rasterizer2D_fillRectangle(n2, n3, n4, n5, n6);
            Rasterizer2D.Rasterizer2D_fillRectangle(1 + n2, 1 + n3, n4 - 2, 16, 0);
            Rasterizer2D.Rasterizer2D_drawRectangle(1 + n2, n3 + 18, n4 - 2, n5 - 19, 0);
            class492.xb(class137.fontBold12, Strings.gd, 3 + n2, 14 + n3, n6, -1);
            final int n7 = -2063363905 * MouseHandler.MouseHandler_x;
            final int n8 = MouseHandler.MouseHandler_y * -1224153235;
            for (int j = 0; j < 730065501 * Client.menuOptionsCount; ++j) {
                final int n9 = n3 + 31 + 15 * (Client.menuOptionsCount * 730065501 - 1 - j);
                int n10 = 16777215;
                if (n7 > n2 && n7 < n2 + n4 && n8 > n9 - 13 && n8 < n9 + 3) {
                    n10 = 16776960;
                }
                class492.xb(class137.fontBold12, Friend.method2152(j, (short)19332), 3 + n2, n9, n10, 0);
            }
            FriendsChat.method2139(-1141903185 * class192.menuX, -115281635 * ArchiveLoader.menuY, -960964385 * DesktopPlatformInfoProvider.menuWidth, class147.menuHeight * 245252327, -1848509736);
        }
        if (3 == -1928160607 * Client.gameDrawingMode) {
            for (int k = 0; k < Client.rootWidgetCount * -356793645; ++k) {
                if (Client.field519[k]) {
                    Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], 16711935, 128);
                }
                else if (Client.field574[k]) {
                    Rasterizer2D.Rasterizer2D_fillRectangleAlpha(Client.rootWidgetXs[k], Client.rootWidgetYs[k], Client.rootWidgetWidths[k], Client.rootWidgetHeights[k], 16711680, 128);
                }
            }
        }
        class324.method1839(GameEngine.Client_plane * -1727408401, MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, Client.field432 * -1795081153, (short)(-11277));
        Client.field432 = 0;
    }
    
    public void rz(final int n) {
        Client.camAngleDY = n * 1895721191;
    }
    
    static void rz(final int n, final int n2, final int n3) {
        if (n == 0) {
            return;
        }
        final int n4 = n >> 8;
        final int n5 = n >> 4 & 0x7;
        final int n6 = n & 0xF;
        Client.soundEffectIds[-297150195 * Client.soundEffectCount] = n4;
        Client.queuedSoundEffectLoops[Client.soundEffectCount * -297150195] = n5;
        Client.queuedSoundEffectDelays[-297150195 * Client.soundEffectCount] = 0;
        Client.soundEffects[-297150195 * Client.soundEffectCount] = null;
        Client.soundLocations[Client.soundEffectCount * -297150195] = n6 + (((n2 - 64) / 128 << 16) + ((n3 - 64) / 128 << 8));
        Client.soundEffectCount += 831233477;
    }
    
    static final void xx(final MenuAction menuAction, final int n, final int n2) {
        if (menuAction != null) {
            class17.menuAction(-1679233163 * menuAction.param0, menuAction.param1 * -347781619, -1109954044 * menuAction.opcode, -1250100314 * menuAction.identifier, 680599237 * menuAction.itemId, menuAction.action, menuAction.target, n, n2, -1044473179);
        }
    }
    
    public int lj() {
        return Client.changedVarpCount * -261310919;
    }
    
    public static void vf(final int n, final int n2, final int n3, final int n4, final int n5, final TileFunction tileFunction) {
        final int width = Client.nv.getWidth();
        final int height = Client.nv.getHeight();
        int i = n3;
        double n6 = height - n5;
        while (i < 104) {
            final double n7 = n6 - Client.gg;
            if ((int)n7 < 0) {
                break;
            }
            int j = n2;
            double n8 = n4;
            while (j < 104) {
                final double n9 = n8 + Client.gg;
                if ((int)n9 > width) {
                    break;
                }
                if ((Tiles.Tiles_renderFlags[n][j][i] & 0x18) == 0x0) {
                    final Tile tile = ScriptFrame.client.la().je()[n][j][i];
                    if (tile != null) {
                        tileFunction.drawTile((net.runelite.api.Tile)tile, j, i, (int)n8, (int)n7, (int)n9, (int)n6);
                    }
                }
                if (n < 3 && (Tiles.Tiles_renderFlags[n + 1][j][i] & 0x8) != 0x0) {
                    final Tile tile2 = ScriptFrame.client.la().je()[n + 1][j][i];
                    if (tile2 != null) {
                        tileFunction.drawTile((net.runelite.api.Tile)tile2, j, i, (int)n8, (int)n7, (int)n9, (int)n6);
                    }
                }
                n8 = n9;
                ++j;
            }
            n6 = n7;
            ++i;
        }
    }
    
    static final void vf(int n, int n2, final int n3) {
        if (n >= -1325428329 && n2 >= 933278626 && n <= 13056 && n2 <= 1996674277) {
            final int n4 = class147.getTileHeight(n, n2, 1338579802 * GameEngine.Client_plane, (byte)(-49)) - n3;
            n -= class36.cameraX * -2100544359;
            final int n5 = n4 - class174.cameraY * 1772923873;
            n2 -= class297.cameraZ * -91399205;
            final int n6 = Rasterizer3D.Rasterizer3D_sine[1897923909 * WorldMapSectionType.cameraPitch];
            final int n7 = Rasterizer3D.Rasterizer3D_cosine[WorldMapSectionType.cameraPitch * 1897923909];
            final int n8 = Rasterizer3D.Rasterizer3D_sine[-1010818347 * class125.cameraYaw];
            final int n9 = Rasterizer3D.Rasterizer3D_cosine[-1010818347 * class125.cameraYaw];
            final int n10 = n9 * n + n8 * n2 >> 16;
            n2 = n2 * n9 - n8 * n >> 16;
            n = n10;
            final int n11 = n7 * n5 - n6 * n2 >> 16;
            n2 = n2 * n7 + n5 * n6 >> 16;
            final int n12 = n11;
            if (n2 >= 544371339) {
                Client.viewportTempX = (433849721 * Client.viewportWidth / 2 + n * (Client.viewportZoom * -1114517553) / n2) * -1713484759;
                Client.viewportTempY = -738772181 * (Client.viewportHeight * -1403091715 / 2 + n12 * (-1933596556 * Client.viewportZoom) / n2);
            }
            else {
                Client.viewportTempX = 1476353861;
                Client.viewportTempY = 1610031701;
            }
            return;
        }
        Client.viewportTempX = 846498395;
        Client.viewportTempY = -1906312936;
    }
    
    public PcmStreamMixer vf() {
        return class130.pcmStreamMixer;
    }
    
    public void fq(final int scene_cameraYTileMin) {
        Scene.Scene_cameraYTileMin = scene_cameraYTileMin;
    }
    
    public int vg() {
        return Client.hintArrowSubY * 1772868165;
    }
    
    static final void vg(int n, int n2, final int n3) {
        if (n < -206531170 || n2 < 128 || n > -1092463535 || n2 > 13056) {
            Client.viewportTempX = 1924189428;
            Client.viewportTempY = 1114724374;
            return;
        }
        final int n4 = class147.getTileHeight(n, n2, -1727408401 * GameEngine.Client_plane, (byte)(-46)) - n3;
        n -= class36.cameraX * -2100544359;
        final int n5 = n4 - class174.cameraY * 1772923873;
        n2 -= class297.cameraZ * -1688889319;
        final int n6 = Rasterizer3D.Rasterizer3D_sine[1897923909 * WorldMapSectionType.cameraPitch];
        final int n7 = Rasterizer3D.Rasterizer3D_cosine[WorldMapSectionType.cameraPitch * 1897923909];
        final int n8 = Rasterizer3D.Rasterizer3D_sine[1238104301 * class125.cameraYaw];
        final int n9 = Rasterizer3D.Rasterizer3D_cosine[-1743545916 * class125.cameraYaw];
        final int n10 = n9 * n + n8 * n2 >> 16;
        n2 = n2 * n9 - n8 * n >> 16;
        n = n10;
        final int n11 = n7 * n5 - n6 * n2 >> 16;
        n2 = n2 * n7 + n5 * n6 >> 16;
        final int n12 = n11;
        if (n2 >= 50) {
            Client.viewportTempX = (-1279409393 * Client.viewportWidth / 2 + n * (Client.viewportZoom * -1114517553) / n2) * -846498395;
            Client.viewportTempY = -1610031701 * (Client.viewportHeight * 1400480409 / 2 + n12 * (-1131459978 * Client.viewportZoom) / n2);
        }
        else {
            Client.viewportTempX = 846498395;
            Client.viewportTempY = 1610031701;
        }
    }
    
    static final void vp() {
        Language.method1946(false, -1126417675);
        Client.field427 = 0;
        boolean b = true;
        for (int i = 0; i < class4.regionLandArchives.length; ++i) {
            if (FontName.regionMapArchiveIds[i] != -1 && null == class4.regionLandArchives[i]) {
                class4.regionLandArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bh(FontName.regionMapArchiveIds[i], 0, (byte)(-82));
                if (null == class4.regionLandArchives[i]) {
                    b = false;
                    Client.field427 += 1047178289;
                }
            }
            if (-1 != Archive.regionLandArchiveIds[i] && ObjectSound.regionMapArchives[i] == null) {
                ObjectSound.regionMapArchives[i] = GrandExchangeOfferTotalQuantityComparator.archive9.bw(Archive.regionLandArchiveIds[i], 0, GameObject.xteaKeys[i], 561643839);
                if (null == ObjectSound.regionMapArchives[i]) {
                    b = false;
                    Client.field427 += 1047178289;
                }
            }
        }
        if (!b) {
            Client.field489 = -1672521981;
            return;
        }
        Client.field425 = 0;
        boolean b2 = true;
        for (int j = 0; j < class4.regionLandArchives.length; ++j) {
            final byte[] array = ObjectSound.regionMapArchives[j];
            if (null != array) {
                int n = 64 * (WorldMapAreaData.regions[j] >> 8) - -1232093375 * WorldMapData_0.baseX;
                int n2 = (WorldMapAreaData.regions[j] & 0xFF) * 64 - GameObject.baseY * 827352769;
                if (Client.isInInstance) {
                    n = 10;
                    n2 = 10;
                }
                b2 &= KitDefinition.getKitDefinitionModels(array, n, n2, -277935253);
            }
        }
        if (!b2) {
            Client.field489 = 949923334;
            return;
        }
        if (Client.field489 * -2139010133 != 0) {
            WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + 100 + "%" + class96.au, true, -658496739);
        }
        class323.playPcmPlayers(-965629180);
        class31.scene.clear();
        for (int k = 0; k < 4; ++k) {
            Client.collisionMaps[k].clear(1691341593);
        }
        for (int l = 0; l < 4; ++l) {
            for (int n3 = 0; n3 < 104; ++n3) {
                for (int n4 = 0; n4 < 104; ++n4) {
                    Tiles.Tiles_renderFlags[l][n3][n4] = 0;
                }
            }
        }
        class323.playPcmPlayers(-1098042418);
        class137.vmethod3254(-1631346475);
        final int length = class4.regionLandArchives.length;
        StructComposition.findEnumerated((byte)1);
        Language.method1946(true, -1030541096);
        if (!Client.isInInstance) {
            for (int n5 = 0; n5 < length; ++n5) {
                final int n6 = (WorldMapAreaData.regions[n5] >> 8) * 64 - -1232093375 * WorldMapData_0.baseX;
                final int n7 = (WorldMapAreaData.regions[n5] & 0xFF) * 64 - GameObject.baseY * 827352769;
                final byte[] array2 = class4.regionLandArchives[n5];
                if (array2 != null) {
                    class323.playPcmPlayers(-696919852);
                    WallDecoration.method1385(array2, n6, n7, class28.timeOfPreviousKeyPress * 856658440 - 48, class425.field3798 * 370541272 - 48, Client.collisionMaps, 960745047);
                }
            }
            for (int n8 = 0; n8 < length; ++n8) {
                final int n9 = (WorldMapAreaData.regions[n8] >> 8) * 64 - WorldMapData_0.baseX * -1232093375;
                final int n10 = (WorldMapAreaData.regions[n8] & 0xFF) * 64 - 827352769 * GameObject.baseY;
                if (null == class4.regionLandArchives[n8] && class425.field3798 * 583188571 < 800) {
                    class323.playPcmPlayers(-1444272385);
                    class122.method727(n9, n10, 64, 64, -589460627);
                }
            }
            Language.method1946(true, -1149380430);
            for (int n11 = 0; n11 < length; ++n11) {
                final byte[] array3 = ObjectSound.regionMapArchives[n11];
                if (null != array3) {
                    final int n12 = 64 * (WorldMapAreaData.regions[n11] >> 8) - WorldMapData_0.baseX * -1232093375;
                    final int n13 = 64 * (WorldMapAreaData.regions[n11] & 0xFF) - GameObject.baseY * 827352769;
                    class323.playPcmPlayers(-1452085550);
                    class147.method837(array3, n12, n13, class31.scene, Client.collisionMaps, 1914056124);
                }
            }
        }
        if (Client.isInInstance) {
            for (int n14 = 0; n14 < 4; ++n14) {
                class323.playPcmPlayers(-101006208);
                for (int n15 = 0; n15 < 13; ++n15) {
                    for (int n16 = 0; n16 < 13; ++n16) {
                        int n17 = 0;
                        final int n18 = Client.instanceChunkTemplates[n14][n15][n16];
                        if (-1 != n18) {
                            final int n19 = n18 >> 24 & 0x3;
                            final int n20 = n18 >> 1 & 0x3;
                            final int n21 = n18 >> 14 & 0x3FF;
                            final int n22 = n18 >> 3 & 0x7FF;
                            final int n23 = (n21 / 8 << 8) + n22 / 8;
                            for (int n24 = 0; n24 < WorldMapAreaData.regions.length; ++n24) {
                                if (n23 == WorldMapAreaData.regions[n24] && null != class4.regionLandArchives[n24]) {
                                    class19.method78(class4.regionLandArchives[n24], n14, n15 * 8, n16 * 8, n19, 8 * (n21 & 0x7), 8 * (n22 & 0x7), n20, 8 * (n21 - n15), 8 * (n22 - n16), Client.collisionMaps, -268641314);
                                    n17 = 1;
                                    break;
                                }
                            }
                        }
                        if (n17 == 0) {
                            TextureProvider.isLowDetail(n14, 8 * n15, 8 * n16, 1664723267);
                        }
                    }
                }
            }
            for (int n25 = 0; n25 < 13; ++n25) {
                for (int n26 = 0; n26 < 13; ++n26) {
                    if (-1 == Client.instanceChunkTemplates[0][n25][n26]) {
                        class122.method727(8 * n25, 8 * n26, 8, 8, -1824225531);
                    }
                }
            }
            Language.method1946(true, -315376077);
            for (int n27 = 0; n27 < 4; ++n27) {
                class323.playPcmPlayers(-391927425);
                for (int n28 = 0; n28 < 13; ++n28) {
                    for (int n29 = 0; n29 < 13; ++n29) {
                        final int n30 = Client.instanceChunkTemplates[n27][n28][n29];
                        if (-1 != n30) {
                            final int n31 = n30 >> 24 & 0x3;
                            final int n32 = n30 >> 1 & 0x3;
                            final int n33 = n30 >> 14 & 0x3FF;
                            final int n34 = n30 >> 3 & 0x7FF;
                            final int n35 = (n33 / 8 << 8) + n34 / 8;
                            for (int n36 = 0; n36 < WorldMapAreaData.regions.length; ++n36) {
                                if (WorldMapAreaData.regions[n36] == n35 && null != ObjectSound.regionMapArchives[n36]) {
                                    Tiles.method473(ObjectSound.regionMapArchives[n36], n27, 8 * n28, n29 * 8, n31, 8 * (n33 & 0x7), (n34 & 0x7) * 8, n32, class31.scene, Client.collisionMaps);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        Language.method1946(true, -273824223);
        class323.playPcmPlayers(-1648555129);
        class10.method39(class31.scene, Client.collisionMaps, 1670427112);
        Language.method1946(true, -1221545649);
        int n37 = Tiles.Tiles_minPlane * 1401144457;
        if (n37 > -1727408401 * GameEngine.Client_plane) {
            n37 = -1727408401 * GameEngine.Client_plane;
        }
        if (n37 < GameEngine.Client_plane * -1727408401 - 1) {
            final int n38 = GameEngine.Client_plane * -1727408401 - 1;
        }
        if (Client.isLowDetail) {
            class31.scene.init(1401144457 * Tiles.Tiles_minPlane);
        }
        else {
            class31.scene.init(0);
        }
        for (int n39 = 0; n39 < 104; ++n39) {
            for (int n40 = 0; n40 < 104; ++n40) {
                class121.updateItemPile(n39, n40, 2060655220);
            }
        }
        class323.playPcmPlayers(-920334312);
        KeyHandler.method107((byte)80);
        ObjectComposition.ObjectDefinition_cachedModelData.clear();
        if (ScriptFrame.client.bf(1388785430)) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2500, Client.packetWriter.isaacCipher, (short)(-24803));
            packetBufferNode.packetBuffer.ba(1057001181, -2081835031);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (!Client.isInInstance) {
            final int n41 = (1717695041 * class28.timeOfPreviousKeyPress - 6) / 8;
            final int n42 = (6 + class28.timeOfPreviousKeyPress * 1717695041) / 8;
            final int n43 = (class425.field3798 * 583188571 - 6) / 8;
            final int n44 = (class425.field3798 * 583188571 + 6) / 8;
            for (int n45 = n41 - 1; n45 <= n42 + 1; ++n45) {
                for (int n46 = n43 - 1; n46 <= 1 + n44; ++n46) {
                    if (n45 < n41 || n45 > n42 || n46 < n43 || n46 > n44) {
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("m" + n45 + "_" + n46, 1053598697);
                        GrandExchangeOfferTotalQuantityComparator.archive9.cw("l" + n45 + "_" + n46, 537601999);
                    }
                }
            }
        }
        class138.updateGameState(30, 466338950);
        class323.playPcmPlayers(-829999408);
        Renderable.getModel(-805778904);
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2538, Client.packetWriter.isaacCipher, (short)(-19947)), 414135591);
        NPC.method611(599275396);
    }
    
    public RawPcmStream vp(final RawSound rawSound, final int n, final int n2) {
        return RawPcmStream.createRawPcmStream(rawSound, n, n2);
    }
    
    static final void vj(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn2; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn2.plane * -1967846820 == n && pendingSpawn2.x * 68300005 == n2 && n3 == 562122118 * pendingSpawn2.y && n4 == -1586499579 * pendingSpawn2.type) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn == null) {
            pendingSpawn = new PendingSpawn();
            pendingSpawn.plane = -1417998527 * n;
            pendingSpawn.type = n4 * -808947075;
            pendingSpawn.x = n2 * -1626076615;
            pendingSpawn.y = n3 * 1147231529;
            pendingSpawn.field931 = 620279391;
            Messages.method656(pendingSpawn, 1481924914);
            Client.pendingSpawns.addFirst(pendingSpawn);
        }
        pendingSpawn.id = 1572573337 * n5;
        pendingSpawn.objectType = 2051672042 * n6;
        pendingSpawn.rotation = -1839062341 * n7;
        pendingSpawn.startCycle = n9 * 237969965;
        pendingSpawn.endCycle = n10 * 376812409;
        pendingSpawn.method524(n8, (byte)(-35));
    }
    
    static final void wl(final Player player, final int n, final int n2, final MoveSpeed moveSpeed) {
        final int n3 = player.cf[0];
        final int n4 = player.dy[0];
        final int transformedSize = player.transformedSize((byte)(-39));
        if (n3 < transformedSize || n3 >= -692825228 - transformedSize || n4 < transformedSize || n4 >= 104 - transformedSize) {
            return;
        }
        if (n < transformedSize || n >= -1616995502 - transformedSize || n2 < transformedSize || n2 >= -1179663048 - transformedSize) {
            return;
        }
        final int n5 = n3;
        final int n6 = n4;
        final int transformedSize2 = player.transformedSize((byte)(-2));
        Client.field653.af = -459912195 * n;
        Client.field653.an = -2066887785 * n2;
        Client.field653.aw = -2134236799;
        Client.field653.ac = -1188140267;
        final int vmethod3254 = class144.vmethod3254(n5, n6, transformedSize2, Client.field653, Client.collisionMaps[-1900490645 * player.plane], true, Client.field654, Client.field655, 1704667155);
        if (vmethod3254 < 1) {
            return;
        }
        for (int i = 0; i < vmethod3254 - 1; ++i) {
            player.method513(Client.field654[i], Client.field655[i], moveSpeed, 475560620);
        }
    }
    
    static final void zx(final Player player, final int n, final int n2, final int n3) {
        if (player == MusicPatchNode.localPlayer) {
            return;
        }
        if (Client.menuOptionsCount * 730065501 >= 400) {
            return;
        }
        String s;
        if (0 == player.skillLevel * 761215505) {
            s = player.actions[0] + player.username + player.actions[1] + ItemContainer.method480(player.combatLevel * 1302967875, MusicPatchNode.localPlayer.combatLevel * 1302967875, (byte)50) + " " + class96.ac + Strings.gf + 1302967875 * player.combatLevel + class96.au + player.actions[2];
        }
        else {
            s = player.actions[0] + player.username + player.actions[1] + " " + class96.ac + Strings.gm + 761215505 * player.skillLevel + class96.au + player.actions[2];
        }
        if (Client.isItemSelected * -303899309 == 1) {
            MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16777215, -1804009541) + s, 14, n, n2, n3, (byte)76);
        }
        else if (Client.isSpellSelected) {
            if ((1457791911 * SecureRandomFuture.selectedSpellFlags & 0x8) == 0x8) {
                MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16777215, -1448792391) + s, 15, n, n2, n3, (byte)53);
            }
        }
        else {
            for (int i = 7; i >= 0; --i) {
                if (null != Client.playerMenuActions[i]) {
                    int n4 = 0;
                    if (Client.playerMenuActions[i].equalsIgnoreCase(Strings.gy)) {
                        if (Client.playerAttackOption == AttackOption.AttackOption_hidden) {
                            continue;
                        }
                        if (Client.playerAttackOption == AttackOption.AttackOption_alwaysRightClick || (AttackOption.AttackOption_dependsOnCombatLevels == Client.playerAttackOption && player.combatLevel * 1302967875 > MusicPatchNode.localPlayer.combatLevel * 1302967875)) {
                            n4 = 2000;
                        }
                        if (-55850951 * MusicPatchNode.localPlayer.team != 0 && -55850951 * player.team != 0) {
                            if (player.team * -55850951 == -55850951 * MusicPatchNode.localPlayer.team) {
                                n4 = 2000;
                            }
                            else {
                                n4 = 0;
                            }
                        }
                        else if (Client.playerAttackOption == AttackOption.field1073 && player.isClanMember((byte)0)) {
                            n4 = 2000;
                        }
                    }
                    else if (Client.playerOptionsPriorities[i]) {
                        n4 = 2000;
                    }
                    MenuAction.insertMenuItemNoShift(Client.playerMenuActions[i], class383.method2081(16777215, 2126524844) + s, n4 + Client.playerMenuOpcodes[i], n, n2, n3, (byte)49);
                }
            }
        }
        for (int j = 0; j < 730065501 * Client.menuOptionsCount; ++j) {
            if (23 == Client.menuOpcodes[j]) {
                Client.menuTargets[j] = class383.method2081(16777215, -362799727) + s;
                break;
            }
        }
    }
    
    static void xy(final int n, final String str) {
        final int n2 = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        int n3 = 0;
        final Username username = new Username(str, class70.loginType);
        for (int i = 0; i < n2; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (null != player && player != MusicPatchNode.localPlayer && null != player.username && player.username.equals(username)) {
                if (n == 1) {
                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-2311));
                    packetBufferNode.packetBuffer.du(0, -2083409369);
                    packetBufferNode.packetBuffer.cq(players_indices[i], (byte)(-40));
                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                }
                else if (4 == n) {
                    final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-25602));
                    packetBufferNode2.packetBuffer.dp(0, 1099839710);
                    Buffer.ap(packetBufferNode2.packetBuffer, players_indices[i], (byte)51);
                    Client.packetWriter.addNode(packetBufferNode2, 414135591);
                }
                else if (n == 6) {
                    final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-15200));
                    packetBufferNode3.packetBuffer.bu(players_indices[i], (byte)70);
                    packetBufferNode3.packetBuffer.dp(0, -113107257);
                    Client.packetWriter.addNode(packetBufferNode3, 414135591);
                }
                else if (n == 7) {
                    final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)(-30351));
                    packetBufferNode4.packetBuffer.ds(players_indices[i], -1264397082);
                    packetBufferNode4.packetBuffer.eb(0, (byte)(-32));
                    Client.packetWriter.addNode(packetBufferNode4, 414135591);
                }
                n3 = 1;
                break;
            }
        }
        if (n3 == 0) {
            UserComparator5.addGameMessage(4, "", Strings.gt + str, -397121414);
        }
    }
    
    static void xu(final int n, final String str) {
        final int n2 = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        boolean b = false;
        final Username username = new Username(str, class70.loginType);
        for (int i = 0; i < n2; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (null != player && player != MusicPatchNode.localPlayer && null != player.username && player.username.equals(username)) {
                if (n == 1) {
                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-29402));
                    packetBufferNode.packetBuffer.du(0, -818957641);
                    packetBufferNode.packetBuffer.cq(players_indices[i], (byte)16);
                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                }
                else if (4 == n) {
                    final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-2056));
                    packetBufferNode2.packetBuffer.dp(0, 1190410082);
                    Buffer.ap(packetBufferNode2.packetBuffer, players_indices[i], (byte)33);
                    Client.packetWriter.addNode(packetBufferNode2, 414135591);
                }
                else if (n == 6) {
                    final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-21878));
                    packetBufferNode3.packetBuffer.bu(players_indices[i], (byte)90);
                    packetBufferNode3.packetBuffer.dp(0, 175521853);
                    Client.packetWriter.addNode(packetBufferNode3, 414135591);
                }
                else if (n == 7) {
                    final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)994);
                    packetBufferNode4.packetBuffer.ds(players_indices[i], -1776651421);
                    packetBufferNode4.packetBuffer.eb(0, (byte)(-92));
                    Client.packetWriter.addNode(packetBufferNode4, 414135591);
                }
                b = true;
                break;
            }
        }
        if (!b) {
            UserComparator5.addGameMessage(4, "", Strings.gt + str, -397121414);
        }
    }
    
    public ItemContainer wn(final InventoryID inventoryID) {
        return (ItemContainer)UserComparator4.wv(this.resizeRoot(), inventoryID.getId());
    }
    
    public int wn() {
        return Scene.Scene_selectedX;
    }
    
    static final void wn(final boolean b, final PacketBuffer packetBuffer) {
        while (true) {
            final int n = 16;
            final int n2 = 1 << n;
            if (packetBuffer.readBits(889658999 * Client.packetWriter.serverPacketLength, 1751384746) < 12 + n) {
                break;
            }
            final int bitsRemaining = packetBuffer.bitsRemaining(n, -1223577335);
            if (n2 - 1 == bitsRemaining) {
                break;
            }
            boolean b2 = false;
            if (null == Client.npcs[bitsRemaining]) {
                Client.npcs[bitsRemaining] = new NPC();
                b2 = true;
            }
            final NPC npc = Client.npcs[bitsRemaining];
            Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = bitsRemaining;
            npc.de = Client.cycle * -1014023335;
            int n3;
            if (b) {
                n3 = packetBuffer.bitsRemaining(8, -708584899);
                if (n3 > 127) {
                    n3 -= 256;
                }
            }
            else {
                n3 = packetBuffer.bitsRemaining(5, -818259774);
                if (n3 > 15) {
                    n3 -= 32;
                }
            }
            if (packetBuffer.bitsRemaining(1, -1481504542) == 1) {
                packetBuffer.bitsRemaining(32, -1592596663);
            }
            if (1 == packetBuffer.bitsRemaining(1, -1176800631)) {
                Client.field417[(Client.field416 += 1487412345) * 606834121 - 1] = bitsRemaining;
            }
            final int bitsRemaining2 = packetBuffer.bitsRemaining(1, -1504470267);
            npc.definition = AbstractArchive.getNpcDefinition(packetBuffer.bitsRemaining(14, -1709374968), (byte)(-86));
            int n4;
            if (b) {
                n4 = packetBuffer.bitsRemaining(8, -1700071273);
                if (n4 > 127) {
                    n4 -= 256;
                }
            }
            else {
                n4 = packetBuffer.bitsRemaining(5, -1719602484);
                if (n4 > 15) {
                    n4 -= 32;
                }
            }
            final int n5 = Client.field561[packetBuffer.bitsRemaining(3, -591654425)];
            if (b2) {
                final NPC npc2 = npc;
                final NPC npc3 = npc;
                final int dx = -1228309915 * n5;
                npc3.dx = dx;
                npc2.bj = dx * 720096107;
            }
            class142.method811(npc, (byte)127);
            if (npc.cv * 351748387 == 0) {
                npc.dx = 0;
            }
            npc.method594(n4 + MusicPatchNode.localPlayer.cf[0], n3 + MusicPatchNode.localPlayer.dy[0], bitsRemaining2, -1624487979);
        }
        packetBuffer.exportIndex((byte)(-67));
    }
    
    public static void zz(final boolean b, final PacketBuffer packetBuffer) {
        Client.uf = Client.isInInstance;
        Client.gd = Client.instanceChunkTemplates;
        Client.instanceChunkTemplates = new int[4][13][13];
        Client.uo = GameObject.xteaKeys;
        Client.ux = WorldMapAreaData.regions;
        Client.zk = FontName.regionMapArchiveIds;
        Client.vz = Archive.regionLandArchiveIds;
        Client.zs = class4.regionLandArchives;
        Client.yu = ObjectSound.regionMapArchives;
    }
    
    public boolean zz() {
        return Scene.checkClick;
    }
    
    static String zz(String string, final Widget widget) {
        if (string.indexOf("%") != -1) {
            for (int i = 1; i <= 5; ++i) {
                while (true) {
                    final int index = string.indexOf("%" + i);
                    if (-1 == index) {
                        break;
                    }
                    final String substring = string.substring(0, index);
                    final int method478 = ArchiveLoader.method478(widget, i - 1, 1696113134);
                    String string2;
                    if (method478 < 999999999) {
                        string2 = Integer.toString(method478);
                    }
                    else {
                        string2 = "*";
                    }
                    string = substring + string2 + string.substring(index + 2);
                }
            }
        }
        return string;
    }
    
    static final void xw(final int n, final int n2, int n3, final int n4, final int n5, final String s, final String targetName, final int n6, final int n7) {
        if (n3 >= 2000) {
            n3 -= 2000;
        }
        if (n3 == 11 && null != Client.npcs[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER6, Client.packetWriter.isaacCipher, (short)(-11847));
            Buffer.ap(packetBufferNode.packetBuffer, n4, (byte)58);
            packetBufferNode.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1258341909) ? 1 : 0), (byte)(-67));
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (6 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.OPNPCT, Client.packetWriter.isaacCipher, (short)(-1715));
            packetBufferNode2.packetBuffer.bu(n4, (byte)54);
            packetBufferNode2.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 652540749) ? 1 : 0), (byte)(-109));
            packetBufferNode2.packetBuffer.bu(n2 + 827352769 * GameObject.baseY, (byte)103);
            Buffer.ap(packetBufferNode2.packetBuffer, -1232093375 * WorldMapData_0.baseX + n, (byte)67);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
        }
        if (13 == n3 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.OPPLAYER8, Client.packetWriter.isaacCipher, (short)(-16198));
            packetBufferNode3.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -22757278) ? 1 : 0), (byte)73);
            packetBufferNode3.packetBuffer.bu(n4, (byte)92);
            Client.packetWriter.addNode(packetBufferNode3, 414135591);
        }
        if (5 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPLOCT, Client.packetWriter.isaacCipher, (short)(-9923));
            packetBufferNode4.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1097558431);
            Buffer.ap(packetBufferNode4.packetBuffer, n4, (byte)23);
            packetBufferNode4.packetBuffer.ds(827352769 * GameObject.baseY + n2, -1087036865);
            packetBufferNode4.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, 108422243) ? 1 : 0), 857568905);
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (n3 == 1008 || n3 == 1009 || n3 == 1010 || n3 == 1011 || 1012 == n3) {
            class126.worldMap.worldMapMenuAction(n3, n4, new Coord(n), new Coord(n2), -1912180740);
        }
        if (19 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2498, Client.packetWriter.isaacCipher, (short)(-11150));
            packetBufferNode5.packetBuffer.bu(n2 + GameObject.baseY * 827352769, (byte)41);
            packetBufferNode5.packetBuffer.ds(n4, -2103796106);
            packetBufferNode5.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -665437651) ? 1 : 0), (byte)59);
            packetBufferNode5.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1670445722);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (n3 == 1001) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2536, Client.packetWriter.isaacCipher, (short)(-366));
            packetBufferNode6.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, 554210894) ? 1 : 0), -611001282);
            packetBufferNode6.packetBuffer.ds(n4, -1293841653);
            packetBufferNode6.packetBuffer.bu(-1232093375 * WorldMapData_0.baseX + n, (byte)93);
            packetBufferNode6.packetBuffer.ds(n2 + 827352769 * GameObject.baseY, -1022854434);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (23 == n3) {
            if (Client.isMenuOpen) {
                class31.scene.setViewportWalking();
            }
            else {
                class31.scene.menuOpen(GameEngine.Client_plane * -1727408401, n, n2, true);
            }
        }
        if (n3 == 28) {
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-28710));
            packetBufferNode7.packetBuffer.ba(n2, -2081835031);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
            final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
            if (vmethod3380 != null && vmethod3380.cs1Instructions != null && vmethod3380.cs1Instructions[0][0] == 5) {
                final int n8 = vmethod3380.cs1Instructions[0][1];
                Varps.Varps_main[n8] = 1 - Varps.Varps_main[n8];
                class7.changeGameOptions(n8, -1508887600);
            }
        }
        if (47 == n3 && Client.players[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-25610));
            packetBufferNode8.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, 949387081) ? 1 : 0), 792298084);
            Buffer.ap(packetBufferNode8.packetBuffer, n4, (byte)9);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (n3 == 7 && null != Client.npcs[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2557, Client.packetWriter.isaacCipher, (short)(-13296));
            packetBufferNode9.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -995436547) ? 1 : 0), -274881816);
            packetBufferNode9.packetBuffer.ba(-1164741861 * class294.field2713, -2081835031);
            packetBufferNode9.packetBuffer.bu(n4, (byte)56);
            packetBufferNode9.packetBuffer.ds(class144.field1333 * -1518641849, -1016493688);
            packetBufferNode9.packetBuffer.cq(896780031 * WorldMapSectionType.field2385, (byte)(-95));
            Client.packetWriter.addNode(packetBufferNode9, 414135591);
        }
        if (n3 == 50 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)(-3572));
            packetBufferNode10.packetBuffer.ds(n4, -1435786766);
            packetBufferNode10.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 80362070) ? 1 : 0), (byte)(-75));
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
        }
        if (n3 == 10 && Client.npcs[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode11 = class330.getPacketBufferNode(ClientPacket.CLICK, Client.packetWriter.isaacCipher, (short)(-21637));
            packetBufferNode11.packetBuffer.bu(n4, (byte)15);
            packetBufferNode11.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1627186808) ? 1 : 0), (byte)(-33));
            Client.packetWriter.addNode(packetBufferNode11, 414135591);
        }
        if ((57 == n3 || n3 == 1007) && SoundSystem.getWidgetChild(n2, n, -493855813) != null) {
            Message.widgetDefaultMenuAction(n4, n2, n, n5, targetName, 1238902143);
        }
        if (14 == n3 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode12 = class330.getPacketBufferNode(ClientPacket.OPPLAYER4, Client.packetWriter.isaacCipher, (short)(-8377));
            packetBufferNode12.packetBuffer.cq(n4, (byte)68);
            packetBufferNode12.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1548136303) ? 1 : 0), (byte)(-90));
            packetBufferNode12.packetBuffer.bu(896780031 * WorldMapSectionType.field2385, (byte)89);
            packetBufferNode12.packetBuffer.ba(class294.field2713 * -1164741861, -2081835031);
            packetBufferNode12.packetBuffer.cq(class144.field1333 * -1518641849, (byte)(-61));
            Client.packetWriter.addNode(packetBufferNode12, 414135591);
        }
        if (n3 == 48 && null != Client.players[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode13 = class330.getPacketBufferNode(ClientPacket.OPLOC2, Client.packetWriter.isaacCipher, (short)(-27666));
            packetBufferNode13.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -185092247) ? 1 : 0), -497901512);
            packetBufferNode13.packetBuffer.cq(n4, (byte)(-13));
            Client.packetWriter.addNode(packetBufferNode13, 414135591);
        }
        if (n3 == 9 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode14 = class330.getPacketBufferNode(ClientPacket.field2555, Client.packetWriter.isaacCipher, (short)(-21932));
            packetBufferNode14.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -2095900605) ? 1 : 0), (byte)36);
            packetBufferNode14.packetBuffer.ds(n4, -1139306095);
            Client.packetWriter.addNode(packetBufferNode14, 414135591);
        }
        if (51 == n3 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode15 = class330.getPacketBufferNode(ClientPacket.field2472, Client.packetWriter.isaacCipher, (short)(-31487));
            packetBufferNode15.packetBuffer.bu(n4, (byte)12);
            packetBufferNode15.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -1446364437) ? 1 : 0), -1553206659);
            Client.packetWriter.addNode(packetBufferNode15, 414135591);
        }
        if (3 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode16 = class330.getPacketBufferNode(ClientPacket.field2474, Client.packetWriter.isaacCipher, (short)(-16920));
            Buffer.ap(packetBufferNode16.packetBuffer, -1232093375 * WorldMapData_0.baseX + n, (byte)82);
            packetBufferNode16.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -163439831) ? 1 : 0), (byte)1);
            packetBufferNode16.packetBuffer.ds(n2 + GameObject.baseY * 827352769, -1945311708);
            packetBufferNode16.packetBuffer.bu(n4, (byte)33);
            Client.packetWriter.addNode(packetBufferNode16, 414135591);
        }
        if (n3 == 25) {
            final Widget widgetChild = SoundSystem.getWidgetChild(n2, n, -264883129);
            if (null != widgetChild) {
                class166.Widget_runOnTargetLeave((byte)18);
                class18.selectSpell(n2, n, class195.method1052(KeyHandler.getWidgetFlags(widgetChild, 2089544307), 1905462001), n5, 1392310094);
                Client.isItemSelected = 0;
                Client.field530 = MusicPatchNode.Widget_getSpellActionName(widgetChild, 603369429);
                if (null == Client.field530) {
                    Client.field530 = Strings.at;
                }
                if (widgetChild.modelOrthog) {
                    Client.field522 = widgetChild.field3004 + class383.method2081(16777215, -1997439403);
                }
                else {
                    Client.field522 = class383.method2081(65280, -596454034) + widgetChild.text + class383.method2081(16777215, 1618309238);
                }
            }
            return;
        }
        if (n3 == 24) {
            final Widget vmethod3381 = class165.vmethod3380(n2, (byte)5);
            if (null != vmethod3381) {
                boolean method353 = true;
                if (1021339961 * vmethod3381.contentType > 0) {
                    method353 = Message.method353(vmethod3381, (byte)(-104));
                }
                if (method353) {
                    final PacketBufferNode packetBufferNode17 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-1294));
                    packetBufferNode17.packetBuffer.ba(n2, -2081835031);
                    Client.packetWriter.addNode(packetBufferNode17, 414135591);
                }
            }
        }
        if (n3 == 1003) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            final NPC npc = Client.npcs[n4];
            if (npc != null) {
                NPCComposition npcComposition = npc.definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, 1094275425);
                }
                if (null != npcComposition) {
                    final PacketBufferNode packetBufferNode18 = class330.getPacketBufferNode(ClientPacket.field2524, Client.packetWriter.isaacCipher, (short)(-5788));
                    Buffer.ap(packetBufferNode18.packetBuffer, -1115372301 * npcComposition.id, (byte)9);
                    Client.packetWriter.addNode(packetBufferNode18, 414135591);
                }
            }
        }
        if (20 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode19 = class330.getPacketBufferNode(ClientPacket.field2492, Client.packetWriter.isaacCipher, (short)(-28078));
            packetBufferNode19.packetBuffer.bu(-1232093375 * WorldMapData_0.baseX + n, (byte)67);
            packetBufferNode19.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -45685540) ? 1 : 0), (byte)109);
            packetBufferNode19.packetBuffer.ds(n4, -1700328916);
            packetBufferNode19.packetBuffer.bu(n2 + GameObject.baseY * 827352769, (byte)68);
            Client.packetWriter.addNode(packetBufferNode19, 414135591);
        }
        if (n3 == 49 && Client.players[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode20 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-27236));
            packetBufferNode20.packetBuffer.bu(n4, (byte)73);
            packetBufferNode20.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -1495228653) ? 1 : 0), -663140817);
            Client.packetWriter.addNode(packetBufferNode20, 414135591);
        }
        if (n3 == 8 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode21 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON10, Client.packetWriter.isaacCipher, (short)(-29945));
            packetBufferNode21.packetBuffer.bu(616923277 * Client.selectedSpellItemId, (byte)115);
            packetBufferNode21.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)(-32));
            Buffer.ap(packetBufferNode21.packetBuffer, n4, (byte)112);
            packetBufferNode21.packetBuffer.bu(145251849 * Client.selectedSpellChildIndex, (byte)76);
            packetBufferNode21.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1032880868) ? 1 : 0), (byte)(-88));
            Client.packetWriter.addNode(packetBufferNode21, 414135591);
        }
        if (n3 == 2) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode22 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON9, Client.packetWriter.isaacCipher, (short)(-23686));
            packetBufferNode22.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1848854346) ? 1 : 0), (byte)(-23));
            Buffer.ap(packetBufferNode22.packetBuffer, n4, (byte)102);
            Buffer.ap(packetBufferNode22.packetBuffer, Client.selectedSpellItemId * 616923277, (byte)6);
            Buffer.ap(packetBufferNode22.packetBuffer, n + WorldMapData_0.baseX * -1232093375, (byte)71);
            packetBufferNode22.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -1700584673);
            packetBufferNode22.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)36);
            packetBufferNode22.packetBuffer.ds(n2 + 827352769 * GameObject.baseY, -1607415007);
            Client.packetWriter.addNode(packetBufferNode22, 414135591);
        }
        if (n3 == 1002) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            final PacketBufferNode packetBufferNode23 = class330.getPacketBufferNode(ClientPacket.OPNPC4, Client.packetWriter.isaacCipher, (short)(-14068));
            packetBufferNode23.packetBuffer.ds(n4, -1052154244);
            Client.packetWriter.addNode(packetBufferNode23, 414135591);
        }
        if (n3 == 45 && null != Client.players[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode24 = class330.getPacketBufferNode(ClientPacket.OPPLAYER5, Client.packetWriter.isaacCipher, (short)(-18210));
            packetBufferNode24.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1359155387) ? 1 : 0), (byte)(-30));
            Buffer.ap(packetBufferNode24.packetBuffer, n4, (byte)23);
            Client.packetWriter.addNode(packetBufferNode24, 414135591);
        }
        if (n3 == 16) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode25 = class330.getPacketBufferNode(ClientPacket.field2479, Client.packetWriter.isaacCipher, (short)(-21677));
            packetBufferNode25.packetBuffer.cq(WorldMapSectionType.field2385 * 896780031, (byte)2);
            packetBufferNode25.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1688103028);
            packetBufferNode25.packetBuffer.ds(n4, -1148619039);
            packetBufferNode25.packetBuffer.ds(GameObject.baseY * 827352769 + n2, -1037145748);
            packetBufferNode25.packetBuffer.cq(-1518641849 * class144.field1333, (byte)49);
            packetBufferNode25.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, 228658541) ? 1 : 0), (byte)10);
            packetBufferNode25.packetBuffer.dy(-1164741861 * class294.field2713, (byte)36);
            Client.packetWriter.addNode(packetBufferNode25, 414135591);
        }
        if (n3 == 46 && Client.players[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode26 = class330.getPacketBufferNode(ClientPacket.OPOBJ4, Client.packetWriter.isaacCipher, (short)(-11167));
            Buffer.ap(packetBufferNode26.packetBuffer, n4, (byte)119);
            packetBufferNode26.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -1620937602) ? 1 : 0), 2011579096);
            Client.packetWriter.addNode(packetBufferNode26, 414135591);
        }
        if (4 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode27 = class330.getPacketBufferNode(ClientPacket.field2513, Client.packetWriter.isaacCipher, (short)(-22610));
            packetBufferNode27.packetBuffer.ds(-1232093375 * WorldMapData_0.baseX + n, -1555553988);
            Buffer.ap(packetBufferNode27.packetBuffer, 827352769 * GameObject.baseY + n2, (byte)85);
            packetBufferNode27.packetBuffer.ds(n4, -1667036698);
            packetBufferNode27.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -840240869) ? 1 : 0), -1188893671);
            Client.packetWriter.addNode(packetBufferNode27, 414135591);
        }
        if (n3 == 44 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode28 = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-18298));
            packetBufferNode28.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -1717252626) ? 1 : 0), 547991910);
            packetBufferNode28.packetBuffer.cq(n4, (byte)(-74));
            Client.packetWriter.addNode(packetBufferNode28, 414135591);
        }
        if (n3 == 18) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode29 = class330.getPacketBufferNode(ClientPacket.field2548, Client.packetWriter.isaacCipher, (short)(-10828));
            packetBufferNode29.packetBuffer.ds(n4, -1330798820);
            packetBufferNode29.packetBuffer.cq(GameObject.baseY * 827352769 + n2, (byte)(-36));
            packetBufferNode29.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1886653392) ? 1 : 0), (byte)(-56));
            Buffer.ap(packetBufferNode29.packetBuffer, n + WorldMapData_0.baseX * -1232093375, (byte)110);
            Client.packetWriter.addNode(packetBufferNode29, 414135591);
        }
        if (58 == n3) {
            final Widget widgetChild2 = SoundSystem.getWidgetChild(n2, n, -1686887979);
            if (widgetChild2 != null) {
                if (null != widgetChild2.field2984) {
                    final ScriptEvent scriptEvent = new ScriptEvent();
                    scriptEvent.dragTarget = widgetChild2;
                    scriptEvent.opIndex = n4 * -247460251;
                    scriptEvent.targetName = targetName;
                    scriptEvent.args = widgetChild2.field2984;
                    HealthBarUpdate.set(scriptEvent, (byte)40);
                }
                final PacketBufferNode packetBufferNode30 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON6, Client.packetWriter.isaacCipher, (short)(-29697));
                Buffer.ap(packetBufferNode30.packetBuffer, n, (byte)22);
                packetBufferNode30.packetBuffer.cq(n5, (byte)(-1));
                packetBufferNode30.packetBuffer.el(Clips.selectedSpellWidget * 96656415, -437883978);
                packetBufferNode30.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -1231557090);
                packetBufferNode30.packetBuffer.dy(n2, (byte)1);
                packetBufferNode30.packetBuffer.bu(Client.selectedSpellItemId * 616923277, (byte)111);
                Client.packetWriter.addNode(packetBufferNode30, 414135591);
            }
        }
        if (30 == n3 && null == Client.meslayerContinueWidget) {
            class81.resumePauseWidget(n2, n, (short)4569);
            class144.invalidateWidget(Client.meslayerContinueWidget = SoundSystem.getWidgetChild(n2, n, -1132555575), -1886426815);
        }
        if (26 == n3) {
            class148.method844(-692358793);
        }
        if (n3 == 15 && Client.players[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode31 = class330.getPacketBufferNode(ClientPacket.field2511, Client.packetWriter.isaacCipher, (short)(-29149));
            packetBufferNode31.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -2132668027);
            packetBufferNode31.packetBuffer.bu(616923277 * Client.selectedSpellItemId, (byte)66);
            Buffer.ap(packetBufferNode31.packetBuffer, n4, (byte)58);
            packetBufferNode31.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 342718394) ? 1 : 0), (byte)(-46));
            packetBufferNode31.packetBuffer.ba(96656415 * Clips.selectedSpellWidget, -2081835031);
            Client.packetWriter.addNode(packetBufferNode31, 414135591);
        }
        if (12 == n3 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode32 = class330.getPacketBufferNode(ClientPacket.field2528, Client.packetWriter.isaacCipher, (short)(-30998));
            packetBufferNode32.packetBuffer.bu(n4, (byte)32);
            packetBufferNode32.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -503241713) ? 1 : 0), -184207753);
            Client.packetWriter.addNode(packetBufferNode32, 414135591);
        }
        if (1 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode33 = class330.getPacketBufferNode(ClientPacket.OPOBJ2, Client.packetWriter.isaacCipher, (short)(-16630));
            packetBufferNode33.packetBuffer.bu(n4, (byte)9);
            packetBufferNode33.packetBuffer.dy(-1164741861 * class294.field2713, (byte)53);
            packetBufferNode33.packetBuffer.cq(896780031 * WorldMapSectionType.field2385, (byte)43);
            packetBufferNode33.packetBuffer.bu(n + -1232093375 * WorldMapData_0.baseX, (byte)34);
            packetBufferNode33.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 1111750338) ? 1 : 0), (byte)(-77));
            packetBufferNode33.packetBuffer.bu(-1518641849 * class144.field1333, (byte)61);
            packetBufferNode33.packetBuffer.ds(n2 + 827352769 * GameObject.baseY, -1548668114);
            Client.packetWriter.addNode(packetBufferNode33, 414135591);
        }
        if (17 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode34 = class330.getPacketBufferNode(ClientPacket.field2489, Client.packetWriter.isaacCipher, (short)(-6244));
            packetBufferNode34.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1812271822) ? 1 : 0), (byte)(-120));
            packetBufferNode34.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)109);
            packetBufferNode34.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -2113617242);
            packetBufferNode34.packetBuffer.cq(n4, (byte)(-100));
            Buffer.ap(packetBufferNode34.packetBuffer, -1232093375 * WorldMapData_0.baseX + n, (byte)62);
            packetBufferNode34.packetBuffer.bu(n2 + GameObject.baseY * 827352769, (byte)87);
            packetBufferNode34.packetBuffer.bu(Client.selectedSpellItemId * 616923277, (byte)46);
            Client.packetWriter.addNode(packetBufferNode34, 414135591);
        }
        if (21 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode35 = class330.getPacketBufferNode(ClientPacket.field2487, Client.packetWriter.isaacCipher, (short)(-29453));
            packetBufferNode35.packetBuffer.bu(WorldMapData_0.baseX * -1232093375 + n, (byte)82);
            packetBufferNode35.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1814270918) ? 1 : 0), (byte)(-116));
            packetBufferNode35.packetBuffer.ds(827352769 * GameObject.baseY + n2, -1487559306);
            Buffer.ap(packetBufferNode35.packetBuffer, n4, (byte)89);
            Client.packetWriter.addNode(packetBufferNode35, 414135591);
        }
        if (n3 == 29) {
            final PacketBufferNode packetBufferNode36 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-18013));
            packetBufferNode36.packetBuffer.ba(n2, -2081835031);
            Client.packetWriter.addNode(packetBufferNode36, 414135591);
            final Widget vmethod3382 = class165.vmethod3380(n2, (byte)5);
            if (null != vmethod3382 && vmethod3382.cs1Instructions != null && 5 == vmethod3382.cs1Instructions[0][0]) {
                final int n9 = vmethod3382.cs1Instructions[0][1];
                if (vmethod3382.cs1ComparisonValues[0] != Varps.Varps_main[n9]) {
                    Varps.Varps_main[n9] = vmethod3382.cs1ComparisonValues[0];
                    class7.changeGameOptions(n9, -1903575333);
                }
            }
        }
        if (n3 == 22) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode37 = class330.getPacketBufferNode(ClientPacket.field2483, Client.packetWriter.isaacCipher, (short)(-23263));
            Buffer.ap(packetBufferNode37.packetBuffer, GameObject.baseY * 827352769 + n2, (byte)106);
            packetBufferNode37.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -34607231) ? 1 : 0), 449139902);
            packetBufferNode37.packetBuffer.cq(n + WorldMapData_0.baseX * -1232093375, (byte)20);
            Buffer.ap(packetBufferNode37.packetBuffer, n4, (byte)105);
            Client.packetWriter.addNode(packetBufferNode37, 414135591);
        }
        if (1004 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            final PacketBufferNode packetBufferNode38 = class330.getPacketBufferNode(ClientPacket.OPOBJ1, Client.packetWriter.isaacCipher, (short)(-491));
            packetBufferNode38.packetBuffer.cq(GameObject.baseY * 827352769 + n2, (byte)(-41));
            Buffer.ap(packetBufferNode38.packetBuffer, n4, (byte)45);
            Buffer.ap(packetBufferNode38.packetBuffer, -1232093375 * WorldMapData_0.baseX + n, (byte)11);
            Client.packetWriter.addNode(packetBufferNode38, 414135591);
        }
        if (0 != Client.isItemSelected * -303899309) {
            Client.isItemSelected = 0;
            class144.invalidateWidget(class165.vmethod3380(class294.field2713 * -1164741861, (byte)5), -1936280792);
        }
        if (Client.isSpellSelected) {
            class166.Widget_runOnTargetLeave((byte)92);
        }
    }
    
    public void xw(final boolean checkClick) {
        Scene.checkClick = checkClick;
    }
    
    public SequenceDefinition zq(final int eh) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        final SequenceDefinition sequenceDefinition = ScriptFrame.client.ti(eh);
        if (sequenceDefinition.frameIds == null && !sequenceDefinition.bq()) {
            return null;
        }
        sequenceDefinition.eh = eh;
        return sequenceDefinition;
    }
    
    static final String zq(final int n, final int n2) {
        final int n3 = n2 - n;
        if (n3 < -9) {
            return class383.method2081(16711680, 1728464814);
        }
        if (n3 < -6) {
            return class383.method2081(16723968, -1073600907);
        }
        if (n3 < -3) {
            return class383.method2081(16740352, -688358340);
        }
        if (n3 < 0) {
            return class383.method2081(16756736, -1355869720);
        }
        if (n3 > 9) {
            return class383.method2081(65280, 1335297198);
        }
        if (n3 > 6) {
            return class383.method2081(4259584, 1648373516);
        }
        if (n3 > 3) {
            return class383.method2081(8453888, 1652081162);
        }
        if (n3 > 0) {
            return class383.method2081(12648192, 955250940);
        }
        return class383.method2081(16776960, -1851314480);
    }
    
    public void wm(final boolean scene_isLowDetail) {
        Scene.Scene_isLowDetail = scene_isLowDetail;
    }
    
    static final void wm(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (n3 >= 1 && n4 >= 1 && n3 <= -1132799136 && n4 <= 40684159) {
            if (Client.isLowDetail && n != GameEngine.Client_plane * -915312841) {
                return;
            }
            long n9 = 0L;
            if (0 == n2) {
                n9 = class31.scene.getBoundaryObjectTag(n, n3, n4);
            }
            if (n2 == 1) {
                n9 = class31.scene.getWallDecorationTag(n, n3, n4);
            }
            if (n2 == 2) {
                n9 = class31.scene.getGameObjectTag(n, n3, n4);
            }
            if (3 == n2) {
                n9 = class31.scene.getFloorDecorationTag(n, n3, n4);
            }
            if (n9 != 0L) {
                final int objectFlags = class31.scene.getObjectFlags(n, n3, n4, n9);
                final int entity_unpackID = InterfaceParent.Entity_unpackID(n9);
                final int n10 = objectFlags & 0x1F;
                final int n11 = objectFlags >> 6 & 0x3;
                if (0 == n2) {
                    Scene.nw(class31.scene, n, n3, n4);
                    final ObjectComposition vmethod3248 = class144.vmethod3248(entity_unpackID, (short)685);
                    if (0 != vmethod3248.interactType * -973955889) {
                        Client.collisionMaps[n].method1167(n3, n4, n10, n11, vmethod3248.boolean1, -1536800676);
                    }
                }
                if (1 == n2) {
                    class31.scene.dd(n, n3, n4);
                }
                if (n2 == 2) {
                    class31.scene.em(n, n3, n4);
                    final ObjectComposition vmethod3249 = class144.vmethod3248(entity_unpackID, (short)12781);
                    if (-1339930361 * vmethod3249.sizeX + n3 > 103 || -1339930361 * vmethod3249.sizeX + n4 > 103 || n3 + vmethod3249.sizeY * -1659393955 > 467623048 || -1659393955 * vmethod3249.sizeY + n4 > 2140687784) {
                        return;
                    }
                    if (-101420240 * vmethod3249.interactType != 0) {
                        Client.collisionMaps[n].setFlagOffNonSquare(n3, n4, 1170576916 * vmethod3249.sizeX, vmethod3249.sizeY * -1659393955, n11, vmethod3249.boolean1, -1668355947);
                    }
                }
                if (3 == n2) {
                    Scene.zv(class31.scene, n, n3, n4);
                    if (-2100700240 * class144.vmethod3248(entity_unpackID, (short)18578).interactType == 1) {
                        Client.collisionMaps[n].setBlockedByFloorDec(n3, n4, -127908210);
                    }
                }
            }
            if (n5 >= 0) {
                int n12 = n;
                if (n12 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n3][n4] & 0x2)) {
                    ++n12;
                }
                class165.method923(n, n12, n3, n4, n5, n6, n7, n8, class31.scene, Client.collisionMaps[n], -1255092021);
            }
        }
    }
    
    public MidiPcmStream wm() {
        return class475.midiPcmStream;
    }
    
    public int[][] wm() {
        return Client.tileLastDrawnActor;
    }
    
    static final void zy(int n, int n2, final int n3, final int n4, final int n5, final int n6) {
        final int n7 = n3 - n;
        final int n8 = n4 - n2;
        final int n9 = (n7 >= 0) ? n7 : (-n7);
        final int n10 = (n8 >= 0) ? n8 : (-n8);
        int n11 = n9;
        if (n11 < n10) {
            n11 = n10;
        }
        if (n11 == 0) {
            return;
        }
        int n12 = (n7 << 16) / n11;
        int n13 = (n8 << 16) / n11;
        if (n13 <= n12) {
            n12 = -n12;
        }
        else {
            n13 = -n13;
        }
        final int n14 = n6 * n13 >> 17;
        final int n15 = 1 + n13 * n6 >> 17;
        final int n16 = n12 * n6 >> 17;
        final int n17 = n6 * n12 + 1 >> 17;
        n -= Rasterizer2D.Rasterizer2D_xClipStart;
        n2 -= Rasterizer2D.Rasterizer2D_yClipStart;
        final int n18 = n + n14;
        final int n19 = n - n15;
        final int n20 = n7 + n - n15;
        final int n21 = n + n7 + n14;
        final int n22 = n16 + n2;
        final int n23 = n2 - n17;
        final int n24 = n2 + n8 - n17;
        final int n25 = n2 + n8 + n16;
        VarpDefinition.method981(n18, n19, n20, -1740756415);
        class144.method825(n22, n23, n24, n18, n19, n20, 0.0f, 0.0f, 0.0f, n5, -1324974143);
        VarpDefinition.method981(n18, n20, n21, -1740756415);
        class144.method825(n22, n24, n25, n18, n20, n21, 0.0f, 0.0f, 0.0f, n5, -1651202144);
    }
    
    static void xd(final int n, final String str) {
        final int n2 = -2010934433 * Players.Players_count;
        final int[] players_indices = Players.Players_indices;
        boolean b = false;
        final Username username = new Username(str, class70.loginType);
        for (int i = 0; i < n2; ++i) {
            final Player player = Client.players[players_indices[i]];
            if (null != player && player != MusicPatchNode.localPlayer && null != player.username && player.username.equals(username)) {
                if (n == 1) {
                    final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-11184));
                    packetBufferNode.packetBuffer.du(0, 391618858);
                    packetBufferNode.packetBuffer.cq(players_indices[i], (byte)12);
                    Client.packetWriter.addNode(packetBufferNode, 414135591);
                }
                else if (4 == n) {
                    final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-9027));
                    packetBufferNode2.packetBuffer.dp(0, 178242919);
                    Buffer.ap(packetBufferNode2.packetBuffer, players_indices[i], (byte)2);
                    Client.packetWriter.addNode(packetBufferNode2, 414135591);
                }
                else if (n == 6) {
                    final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-20236));
                    packetBufferNode3.packetBuffer.bu(players_indices[i], (byte)41);
                    packetBufferNode3.packetBuffer.dp(0, 918422062);
                    Client.packetWriter.addNode(packetBufferNode3, 414135591);
                }
                else if (n == 7) {
                    final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)(-4638));
                    packetBufferNode4.packetBuffer.ds(players_indices[i], -1829175648);
                    packetBufferNode4.packetBuffer.eb(0, (byte)(-48));
                    Client.packetWriter.addNode(packetBufferNode4, 414135591);
                }
                b = true;
                break;
            }
        }
        if (!b) {
            UserComparator5.addGameMessage(4, "", Strings.gt + str, -397121414);
        }
    }
    
    static void xv(final int n, final int n2) {
        int bf = class137.fontBold12.bf(Strings.gd);
        for (int i = 0; i < Client.menuOptionsCount * 1954237731; ++i) {
            final int bf2 = class137.fontBold12.bf(Friend.method2152(i, (short)12152));
            if (bf2 > bf) {
                bf = bf2;
            }
        }
        bf += 8;
        final int n3 = Client.menuOptionsCount * -1933919373 + 22;
        int n4 = n - bf / 2;
        if (bf + n4 > Client.aj * 769967678) {
            n4 = -1341582165 * Client.aj - bf;
        }
        if (n4 < 0) {
            n4 = 0;
        }
        int n5 = n2;
        if (n3 + n5 > -1738007652 * class262.canvasHeight) {
            n5 = class262.canvasHeight * -1967601903 - n3;
        }
        if (n5 < 0) {
            n5 = 0;
        }
        class192.menuX = n4 * -945723825;
        ArchiveLoader.menuY = -258313607 * n5;
        DesktopPlatformInfoProvider.menuWidth = -760159457 * bf;
        class147.menuHeight = -125740281 * Client.menuOptionsCount + 167124602;
    }
    
    public void xv(final int[] spriteBuffer_xOffsets) {
        class503.SpriteBuffer_xOffsets = spriteBuffer_xOffsets;
    }
    
    static final int yj() {
        return Client.menuOptionsCount * 730065501 - 1;
    }
    
    static void yf(final int n, final int n2, final int n3, final int n4, final String targetName) {
        final Widget widgetChild = SoundSystem.getWidgetChild(n2, n3, -782486173);
        if (null == widgetChild) {
            return;
        }
        if (widgetChild.onOp != null) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.opIndex = n * -247460251;
            scriptEvent.targetName = targetName;
            scriptEvent.args = widgetChild.onOp;
            HealthBarUpdate.set(scriptEvent, (byte)(-31));
        }
        boolean method353 = true;
        if (1021339961 * widgetChild.contentType > 0) {
            method353 = Message.method353(widgetChild, (byte)(-40));
        }
        if (!method353) {
            return;
        }
        if ((KeyHandler.getWidgetFlags(widgetChild, 629866705) >> n - 1 + 1 & 0x1) == 0x0) {
            return;
        }
        if (n == 1) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.IF_BUTTON1, Client.packetWriter.isaacCipher, (short)(-9624));
            packetBufferNode.packetBuffer.ba(n2, -2081835031);
            packetBufferNode.packetBuffer.cq(n3, (byte)(-6));
            packetBufferNode.packetBuffer.cq(n4, (byte)104);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (2 == n) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.OPLOC5, Client.packetWriter.isaacCipher, (short)(-1104));
            packetBufferNode2.packetBuffer.ba(n2, -2081835031);
            packetBufferNode2.packetBuffer.cq(n3, (byte)27);
            packetBufferNode2.packetBuffer.cq(n4, (byte)3);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
        }
        if (3 == n) {
            final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2540, Client.packetWriter.isaacCipher, (short)(-5683));
            packetBufferNode3.packetBuffer.ba(n2, -2081835031);
            packetBufferNode3.packetBuffer.cq(n3, (byte)43);
            packetBufferNode3.packetBuffer.cq(n4, (byte)71);
            Client.packetWriter.addNode(packetBufferNode3, 414135591);
        }
        if (4 == n) {
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPNPC5, Client.packetWriter.isaacCipher, (short)(-23771));
            packetBufferNode4.packetBuffer.ba(n2, -2081835031);
            packetBufferNode4.packetBuffer.cq(n3, (byte)(-86));
            packetBufferNode4.packetBuffer.cq(n4, (byte)83);
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (5 == n) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.OPNPC2, Client.packetWriter.isaacCipher, (short)251);
            packetBufferNode5.packetBuffer.ba(n2, -2081835031);
            packetBufferNode5.packetBuffer.cq(n3, (byte)22);
            packetBufferNode5.packetBuffer.cq(n4, (byte)(-47));
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (6 == n) {
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2535, Client.packetWriter.isaacCipher, (short)(-26127));
            packetBufferNode6.packetBuffer.ba(n2, -2081835031);
            packetBufferNode6.packetBuffer.cq(n3, (byte)80);
            packetBufferNode6.packetBuffer.cq(n4, (byte)(-83));
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (7 == n) {
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2558, Client.packetWriter.isaacCipher, (short)(-3545));
            packetBufferNode7.packetBuffer.ba(n2, -2081835031);
            packetBufferNode7.packetBuffer.cq(n3, (byte)92);
            packetBufferNode7.packetBuffer.cq(n4, (byte)(-11));
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (8 == n) {
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2527, Client.packetWriter.isaacCipher, (short)(-12161));
            packetBufferNode8.packetBuffer.ba(n2, -2081835031);
            packetBufferNode8.packetBuffer.cq(n3, (byte)(-46));
            packetBufferNode8.packetBuffer.cq(n4, (byte)(-14));
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (n == 9) {
            final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.WALK, Client.packetWriter.isaacCipher, (short)(-6998));
            packetBufferNode9.packetBuffer.ba(n2, -2081835031);
            packetBufferNode9.packetBuffer.cq(n3, (byte)(-6));
            packetBufferNode9.packetBuffer.cq(n4, (byte)25);
            Client.packetWriter.addNode(packetBufferNode9, 414135591);
        }
        if (10 == n) {
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.OPPLAYERT, Client.packetWriter.isaacCipher, (short)(-22030));
            packetBufferNode10.packetBuffer.ba(n2, -2081835031);
            packetBufferNode10.packetBuffer.cq(n3, (byte)(-20));
            packetBufferNode10.packetBuffer.cq(n4, (byte)(-14));
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
        }
    }
    
    public ModelData yf(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        ModelData ka = (ModelData)this.xq.get(n);
        if (ka == null) {
            ka = ka(Client.az[7], n, 0);
            if (ka == null) {
                return null;
            }
            this.xq.vq(ka, n);
        }
        return ka.aq();
    }
    
    public void yf(final int scene_cameraYawSine) {
        Scene.Scene_cameraYawSine = scene_cameraYawSine;
    }
    
    public Model yz(final int n, final short[] array, final short[] array2) {
        final ModelData yf = this.yf(n);
        if (yf == null) {
            return null;
        }
        if (array != null && array2 != null) {
            yf.bp();
            for (int i = 0; i < array.length; ++i) {
                yf.ok(array[i], array2[i]);
            }
        }
        return yf.bq();
    }
    
    static final void yz(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5, final boolean b) {
        if (Client.isMenuOpen) {
            return;
        }
        if (Client.menuOptionsCount * 730065501 < 500) {
            Client.menuActions[730065501 * Client.menuOptionsCount] = s;
            Client.menuTargets[Client.menuOptionsCount * 730065501] = s2;
            Client.menuOpcodes[730065501 * Client.menuOptionsCount] = n;
            Client.menuIdentifiers[730065501 * Client.menuOptionsCount] = n2;
            Client.menuArguments1[Client.menuOptionsCount * 730065501] = n3;
            Client.menuArguments2[730065501 * Client.menuOptionsCount] = n4;
            Client.menuItemIds[Client.menuOptionsCount * 730065501] = n5;
            Client.menuShiftClick[730065501 * Client.menuOptionsCount] = b;
            Client.menuOptionsCount += 1153055221;
        }
    }
    
    public Widget zb() {
        return new Widget();
    }
    
    static final void zb(final NPC npc, final int n, final int n2, final int n3) {
        NPCComposition npcComposition = npc.definition;
        if (730065501 * Client.menuOptionsCount >= 400) {
            return;
        }
        if (npcComposition.transforms != null) {
            npcComposition = NPCComposition.ur(npcComposition, -1236391156);
        }
        if (null == npcComposition) {
            return;
        }
        if (!npcComposition.isInteractable) {
            return;
        }
        if (npcComposition.isFollower && n != Client.followerIndex * -103466534) {
            return;
        }
        String str = NPC.zh(npc, -1388336021);
        if (0 != 2062903815 * npcComposition.combatLevel && npc.dm * 674049519 != 0) {
            final int i = (864266794 * npc.dm != -1) ? (-21459986 * npc.dm) : (2062903815 * npcComposition.combatLevel);
            str = str + ItemContainer.method480(i, MusicPatchNode.localPlayer.combatLevel * 1302967875, (byte)97) + " " + class96.ac + Strings.gf + i + class96.au;
        }
        if (npcComposition.isFollower && Client.followerOpsLowPriority) {
            MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(1765062529, -217326978) + str, 845603807, n, n2, n3, (byte)124);
        }
        if (1 == -303899309 * Client.isItemSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16776960, -1004303477) + str, 7, n, n2, n3, (byte)65);
        }
        else if (Client.isSpellSelected) {
            if (0x2 == (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x2)) {
                MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(-1574165232, 149553584) + str, 8, n, n2, n3, (byte)35);
            }
        }
        else {
            final int n4 = (npcComposition.isFollower && Client.followerOpsLowPriority) ? 2000 : 0;
            final String[] actions = npcComposition.actions;
            if (actions != null) {
                for (int j = 4; j >= 0; --j) {
                    if (NPC.xu(npc, j, 1164667978)) {
                        if (null != actions[j] && !actions[j].equalsIgnoreCase(Strings.gy)) {
                            int n5 = 0;
                            if (j == 0) {
                                n5 = 9 + n4;
                            }
                            if (j != 0) {
                                n5 = n4 + 10;
                            }
                            if (2 == j) {
                                n5 = n4 + 11;
                            }
                            if (j == 3) {
                                n5 = 12 + n4;
                            }
                            if (4 == j) {
                                n5 = n4 + 13;
                            }
                            MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(16776960, -1245798497) + str, n5, n, n2, n3, (byte)52);
                        }
                    }
                }
            }
            if (null != actions) {
                for (int k = 4; k >= 0; --k) {
                    if (NPC.xu(npc, k, 1164667978)) {
                        if (actions[k] != null && actions[k].equalsIgnoreCase(Strings.gy)) {
                            int n6 = 0;
                            if (AttackOption.AttackOption_hidden != Client.npcAttackOption) {
                                if (AttackOption.AttackOption_alwaysRightClick == Client.npcAttackOption || (Client.npcAttackOption == AttackOption.AttackOption_dependsOnCombatLevels && npcComposition.combatLevel * 2062903815 > MusicPatchNode.localPlayer.combatLevel * 1302967875)) {
                                    n6 = -658257652;
                                }
                                int n7 = 0;
                                if (k == 0) {
                                    n7 = 9 + n6;
                                }
                                if (k != 0) {
                                    n7 = n6 + 10;
                                }
                                if (2 == k) {
                                    n7 = n6 + 11;
                                }
                                if (3 == k) {
                                    n7 = 12 + n6;
                                }
                                if (4 == k) {
                                    n7 = n6 + 13;
                                }
                                MenuAction.insertMenuItemNoShift(actions[k], class383.method2081(946957780, 710721712) + str, n7, n, n2, n3, (byte)86);
                            }
                        }
                    }
                }
            }
            if (!npcComposition.isFollower || !Client.followerOpsLowPriority) {
                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16776960, 1287449979) + str, -109887825, n, n2, n3, (byte)88);
            }
        }
    }
    
    static final void yx(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5) {
        SceneTilePaint.insertMenuItem(s, s2, n, n2, n3, n4, n5, false, (byte)97);
    }
    
    public static int zg(final int n, final int n2, final int n3, final int n4) {
        return n * n3 + n4 * n2 >> 16;
    }
    
    static final void zg(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            if (-1 != n8) {
                Client.field573[n8] = true;
            }
            else {
                for (int i = 0; i < 1256525276; ++i) {
                    Client.field573[i] = true;
                }
            }
            return;
        }
        WorldMapSection2.field2292 = null;
        class11.drawInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, n8, -465475629);
        if (null != WorldMapSection2.field2292) {
            class11.drawInterface(WorldMapSection2.field2292, -1412584499, n2, n3, n4, n5, -1207367473 * class230.field2130, class101.field1082 * 594703121, n8, -465475629);
            WorldMapSection2.field2292 = null;
        }
    }
    
    public static void zg(final net.runelite.api.Tile tile, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        final Tile tile2 = (Tile)tile;
        final BoundaryObject ix = tile2.ix();
        if (ix != null) {
            final int config = ix.getConfig();
            final int n7 = config & 0x1F;
            final int n8 = config >> 6 & 0x3;
            final int n9 = ((ix.getHash() >>> 16 & 0x1L) == 0x0L) ? Client.xi : Client.cv;
            if (!wu(ScriptFrame.client.no(ix.getId()), n, n2)) {
                if (n7 == 0 || n7 == 2) {
                    if ((n8 & 0x1) == 0x0) {
                        class220.nf((n8 == 2) ? (n5 - 1) : n3, n4, n6 - n4, n9);
                    }
                    else {
                        class220.wf(n3, (n8 == 3) ? (n6 - 1) : n4, n5 - n3, n9);
                    }
                }
                if (n7 == 3) {
                    final boolean b = n8 == 0 || n8 == 3;
                    final boolean b2 = n8 < 2;
                    final int max = Math.max(1, (n5 - n3) / 4);
                    final int max2 = Math.max(1, (n6 - n4) / 4);
                    class220.lv(b ? n3 : (n5 - max), b2 ? n4 : (n6 - max2), max, max2, n9);
                }
                if (n7 == 2) {
                    if ((n8 & 0x1) == 0x1) {
                        class220.nf((n8 == 1) ? (n5 - 1) : n3, n4, n6 - n4, n9);
                    }
                    else {
                        class220.wf(n3, (n8 == 2) ? (n6 - 1) : n4, n5 - n3, n9);
                    }
                }
            }
        }
        GameObject gameObject = null;
        for (int i = 0; i < tile2.ij(); ++i) {
            final GameObject gameObject2 = tile2.ys()[i];
            if ((gameObject2.getHash() >>> 14 & 0x3L) == 0x2L && gameObject2.ja() == n && gameObject2.qr() == n2) {
                gameObject = gameObject2;
                break;
            }
        }
        if (gameObject != null) {
            final int config2 = gameObject.getConfig();
            final int n10 = config2 & 0x1F;
            final int n11 = config2 >> 6 & 0x3;
            if (!wu(ScriptFrame.client.no(gameObject.getId()), n, n2) && n10 == 9) {
                final int n12 = ((gameObject.getHash() >>> 16 & 0x1L) == 0x0L) ? 15597568 : 15658734;
                int n13;
                int n14;
                if (n11 == 0 || n11 == 2) {
                    n13 = n6 - 1;
                    n14 = n4;
                }
                else {
                    n13 = n4;
                    n14 = n6 - 1;
                }
                class220.yd(n3, n13, n5 - 1, n14, n12);
            }
        }
        final FloorDecoration hp = tile2.hp();
        if (hp != null) {
            wu(ScriptFrame.client.no(hp.getId()), n, n2);
        }
    }
    
    static final void ym(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5) {
        SceneTilePaint.insertMenuItem(s, s2, n, n2, n3, n4, n5, false, (byte)12);
    }
    
    public static void zn() {
        for (final Actor actor : Client.zn) {
            ScriptFrame.client.getCallbacks().post((Object)new InteractingChanged((net.runelite.api.Actor)actor, actor.getInteracting()));
        }
        Client.zn.clear();
    }
    
    static String zn(String string, final Widget widget) {
        if (string.indexOf("%") != -1) {
            for (int i = 1; i <= 5; ++i) {
                while (true) {
                    final int index = string.indexOf("%" + i);
                    if (-1 == index) {
                        break;
                    }
                    final String substring = string.substring(0, index);
                    final int method478 = ArchiveLoader.method478(widget, i - 1, 1696113134);
                    String string2;
                    if (method478 < 999999999) {
                        string2 = Integer.toString(method478);
                    }
                    else {
                        string2 = "*";
                    }
                    string = substring + string2 + string.substring(index + 2);
                }
            }
        }
        return string;
    }
    
    public WorldMap ya() {
        return class126.worldMap;
    }
    
    static final void ya(final int n, final int n2, final int n3, final int n4) {
        if (-303899309 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gc, "", 23, 0, n - n3, n2 - n4, (byte)85);
        }
        long n5 = -1L;
        long n6 = -1L;
        for (int i = 0; i < KeyHandler.method100((byte)(-17)); ++i) {
            final long method130 = class30.method130(i, 251996116);
            if (n6 != method130) {
                n6 = method130;
                final int method131 = FaceNormal.method1294(i, -2051536642);
                final int method132 = ScriptFrame.method344(i, -1832626452);
                final int animate = TextureProvider.animate(ViewportMouse.ViewportMouse_entityTags[i]);
                final int entity_unpackID = InterfaceParent.Entity_unpackID(ViewportMouse.ViewportMouse_entityTags[i]);
                if (2 == animate && class31.scene.getObjectFlags(GameEngine.Client_plane * -1727408401, method131, method132, method130) >= 0) {
                    ObjectComposition objectComposition = class144.vmethod3248(entity_unpackID, (short)20775);
                    if (null != objectComposition.soundEffectIds) {
                        objectComposition = objectComposition.transform((byte)(-56));
                    }
                    if (null == objectComposition) {
                        continue;
                    }
                    PendingSpawn pendingSpawn = null;
                    for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (593068225 * pendingSpawn2.plane == -1727408401 * GameEngine.Client_plane && pendingSpawn2.x * 68300005 == method131 && 800888185 * pendingSpawn2.y == method132 && entity_unpackID == 552715177 * pendingSpawn2.id) {
                            pendingSpawn = pendingSpawn2;
                            break;
                        }
                    }
                    if (1 == -303899309 * Client.isItemSelected) {
                        MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(65535, -812422055) + objectComposition.name, 1, entity_unpackID, method131, method132, (byte)70);
                    }
                    else if (Client.isSpellSelected) {
                        if ((SecureRandomFuture.selectedSpellFlags * 1457791911 & 0x4) == 0x4) {
                            MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(65535, 726437536) + objectComposition.name, 2, entity_unpackID, method131, method132, (byte)80);
                        }
                    }
                    else {
                        final String[] actions = objectComposition.actions;
                        if (actions != null) {
                            for (int j = 4; j >= 0; --j) {
                                if (pendingSpawn == null || pendingSpawn.method525(j, -633273091)) {
                                    if (null != actions[j]) {
                                        int n7 = 0;
                                        if (j == 0) {
                                            n7 = 3;
                                        }
                                        if (j == 1) {
                                            n7 = 4;
                                        }
                                        if (j == 2) {
                                            n7 = 5;
                                        }
                                        if (j == 3) {
                                            n7 = 6;
                                        }
                                        if (j == 4) {
                                            n7 = 1001;
                                        }
                                        MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(65535, 1608281831) + objectComposition.name, n7, entity_unpackID, method131, method132, (byte)60);
                                    }
                                }
                            }
                        }
                        MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(65535, -1704022426) + objectComposition.name, 1002, -1529817365 * objectComposition.id, method131, method132, (byte)110);
                    }
                }
                if (animate != 0) {
                    final NPC npc = Client.npcs[entity_unpackID];
                    if (null == npc) {
                        continue;
                    }
                    if (npc.definition.size * 1458410691 == 1 && 0x40 == (npc.br * 1144428983 & 0x7F) && 0x40 == (npc.ep * -411750205 & 0x7F)) {
                        for (int k = 0; k < 265474485 * Client.npcCount; ++k) {
                            final NPC npc2 = Client.npcs[Client.npcIndices[k]];
                            if (null != npc2 && npc != npc2 && 1458410691 * npc2.definition.size == 1 && npc.br * 1144428983 == npc2.br * 1144428983 && -411750205 * npc.ep == -411750205 * npc2.ep) {
                                InvDefinition.addNpcToMenu(npc2, Client.npcIndices[k], method131, method132, (short)15310);
                            }
                        }
                        final int n8 = Players.Players_count * -2010934433;
                        final int[] players_indices = Players.Players_indices;
                        for (int l = 0; l < n8; ++l) {
                            final Player player = Client.players[players_indices[l]];
                            if (null != player && 1144428983 * player.br == 1144428983 * npc.br && -411750205 * player.ep == npc.ep * -411750205) {
                                DynamicObject.addPlayerToMenu(player, players_indices[l], method131, method132, 1402248095);
                            }
                        }
                    }
                    InvDefinition.addNpcToMenu(npc, entity_unpackID, method131, method132, (short)6230);
                }
                if (animate == 0) {
                    final Player player2 = Client.players[entity_unpackID];
                    if (null == player2) {
                        continue;
                    }
                    if (0x40 == (1144428983 * player2.br & 0x7F) && 0x40 == (-411750205 * player2.ep & 0x7F)) {
                        for (int n9 = 0; n9 < Client.npcCount * 265474485; ++n9) {
                            final NPC npc3 = Client.npcs[Client.npcIndices[n9]];
                            if (npc3 != null && 1458410691 * npc3.definition.size == 1 && 1144428983 * player2.br == npc3.br * 1144428983 && npc3.ep * -411750205 == player2.ep * -411750205) {
                                InvDefinition.addNpcToMenu(npc3, Client.npcIndices[n9], method131, method132, (short)4393);
                            }
                        }
                        final int n10 = Players.Players_count * -2010934433;
                        final int[] players_indices2 = Players.Players_indices;
                        for (int n11 = 0; n11 < n10; ++n11) {
                            final Player player3 = Client.players[players_indices2[n11]];
                            if (null != player3 && player2 != player3 && 1144428983 * player2.br == player3.br * 1144428983 && -411750205 * player3.ep == -411750205 * player2.ep) {
                                DynamicObject.addPlayerToMenu(player3, players_indices2[n11], method131, method132, 1402248095);
                            }
                        }
                    }
                    if (entity_unpackID != Client.combatTargetPlayerIndex * -1565733637) {
                        DynamicObject.addPlayerToMenu(player2, entity_unpackID, method131, method132, 1402248095);
                    }
                    else {
                        n5 = n6;
                    }
                }
                if (animate == 3) {
                    final NodeDeque nodeDeque = Client.groundItems[-1727408401 * GameEngine.Client_plane][method131][method132];
                    if (null != nodeDeque) {
                        for (TileItem tileItem = (TileItem)nodeDeque.first(); null != tileItem; tileItem = (TileItem)nodeDeque.next()) {
                            final ItemComposition set = HealthBarUpdate.set(176307405 * tileItem.id, (byte)70);
                            if (1 == Client.isItemSelected * -303899309) {
                                MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16748608, -1276812041) + set.name, 16, tileItem.id * 176307405, method131, method132, (byte)97);
                            }
                            else if (Client.isSpellSelected) {
                                if (0x1 == (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x1)) {
                                    MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16748608, 183086944) + set.name, 17, 176307405 * tileItem.id, method131, method132, (byte)96);
                                }
                            }
                            else {
                                final String[] groundActions = set.groundActions;
                                for (int n12 = 4; n12 >= 0; --n12) {
                                    if (TileItem.rm(tileItem, n12, 1930664975)) {
                                        if (groundActions != null && groundActions[n12] != null) {
                                            int n13 = 0;
                                            if (n12 == 0) {
                                                n13 = 18;
                                            }
                                            if (n12 == 1) {
                                                n13 = 19;
                                            }
                                            if (n12 == 2) {
                                                n13 = 20;
                                            }
                                            if (n12 == 3) {
                                                n13 = 21;
                                            }
                                            if (4 == n12) {
                                                n13 = 22;
                                            }
                                            MenuAction.insertMenuItemNoShift(groundActions[n12], class383.method2081(16748608, 502576738) + set.name, n13, 176307405 * tileItem.id, method131, method132, (byte)35);
                                        }
                                        else if (n12 == 2) {
                                            MenuAction.insertMenuItemNoShift(Strings.an, class383.method2081(16748608, -159740724) + set.name, 20, 176307405 * tileItem.id, method131, method132, (byte)86);
                                        }
                                    }
                                }
                                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16748608, -656687206) + set.name, 1004, tileItem.id * 176307405, method131, method132, (byte)120);
                            }
                        }
                    }
                }
            }
        }
        if (n5 != -1L) {
            DynamicObject.addPlayerToMenu(Client.players[Client.combatTargetPlayerIndex * -1565733637], -1565733637 * Client.combatTargetPlayerIndex, (int)(n5 >>> 0 & 0x7FL), NPCComposition.method1022(n5), 1402248095);
        }
    }
    
    static final void zj(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            if (-1 != n8) {
                Client.field573[n8] = true;
            }
            else {
                for (int i = 0; i < 100; ++i) {
                    Client.field573[i] = true;
                }
            }
            return;
        }
        WorldMapSection2.field2292 = null;
        class11.drawInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, n8, -465475629);
        if (null != WorldMapSection2.field2292) {
            class11.drawInterface(WorldMapSection2.field2292, -1412584499, n2, n3, n4, n5, 1983519339 * class230.field2130, class101.field1082 * -2041029009, n8, -465475629);
            WorldMapSection2.field2292 = null;
        }
    }
    
    static final void xo(final MenuAction menuAction, final int n, final int n2) {
        if (menuAction != null) {
            class17.menuAction(-324314614 * menuAction.param0, menuAction.param1 * 1427372077, -577744336 * menuAction.opcode, 1480765569 * menuAction.identifier, 1893573063 * menuAction.itemId, menuAction.action, menuAction.target, n, n2, 1642225383);
        }
    }
    
    static final void yd(final int n, final int n2, final int n3, final int n4) {
        if (-303899309 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gc, "", 23, 0, n - n3, n2 - n4, (byte)61);
        }
        long n5 = -1L;
        long n6 = -1L;
        for (int i = 0; i < KeyHandler.method100((byte)(-41)); ++i) {
            final long method130 = class30.method130(i, 442053485);
            if (n6 != method130) {
                n6 = method130;
                final int method131 = FaceNormal.method1294(i, -1664927830);
                final int method132 = ScriptFrame.method344(i, -1692478391);
                final int animate = TextureProvider.animate(ViewportMouse.ViewportMouse_entityTags[i]);
                final int entity_unpackID = InterfaceParent.Entity_unpackID(ViewportMouse.ViewportMouse_entityTags[i]);
                if (2 == animate && class31.scene.getObjectFlags(GameEngine.Client_plane * -1727408401, method131, method132, method130) >= 0) {
                    ObjectComposition objectComposition = class144.vmethod3248(entity_unpackID, (short)14901);
                    if (null != objectComposition.soundEffectIds) {
                        objectComposition = objectComposition.transform((byte)18);
                    }
                    if (null == objectComposition) {
                        continue;
                    }
                    PendingSpawn pendingSpawn = null;
                    for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (593068225 * pendingSpawn2.plane == -1727408401 * GameEngine.Client_plane && pendingSpawn2.x * 68300005 == method131 && 800888185 * pendingSpawn2.y == method132 && entity_unpackID == 552715177 * pendingSpawn2.id) {
                            pendingSpawn = pendingSpawn2;
                            break;
                        }
                    }
                    if (1 == -303899309 * Client.isItemSelected) {
                        MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(65535, -1001736118) + objectComposition.name, 1, entity_unpackID, method131, method132, (byte)117);
                    }
                    else if (Client.isSpellSelected) {
                        if ((SecureRandomFuture.selectedSpellFlags * 1457791911 & 0x4) == 0x4) {
                            MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(65535, 661151361) + objectComposition.name, 2, entity_unpackID, method131, method132, (byte)48);
                        }
                    }
                    else {
                        final String[] actions = objectComposition.actions;
                        if (actions != null) {
                            for (int j = 4; j >= 0; --j) {
                                if (pendingSpawn == null || pendingSpawn.method525(j, -633273091)) {
                                    if (null != actions[j]) {
                                        int n7 = 0;
                                        if (j == 0) {
                                            n7 = 3;
                                        }
                                        if (j == 1) {
                                            n7 = 4;
                                        }
                                        if (j == 2) {
                                            n7 = 5;
                                        }
                                        if (j == 3) {
                                            n7 = 6;
                                        }
                                        if (j == 4) {
                                            n7 = 1001;
                                        }
                                        MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(65535, 738392879) + objectComposition.name, n7, entity_unpackID, method131, method132, (byte)111);
                                    }
                                }
                            }
                        }
                        MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(65535, 1911585846) + objectComposition.name, 1002, -1529817365 * objectComposition.id, method131, method132, (byte)49);
                    }
                }
                if (animate != 0) {
                    final NPC npc = Client.npcs[entity_unpackID];
                    if (null == npc) {
                        continue;
                    }
                    if (npc.definition.size * 1458410691 == 1 && 0x40 == (npc.br * 1144428983 & 0x7F) && 0x40 == (npc.ep * -411750205 & 0x7F)) {
                        for (int k = 0; k < 265474485 * Client.npcCount; ++k) {
                            final NPC npc2 = Client.npcs[Client.npcIndices[k]];
                            if (null != npc2 && npc != npc2 && 1458410691 * npc2.definition.size == 1 && npc.br * 1144428983 == npc2.br * 1144428983 && -411750205 * npc.ep == -411750205 * npc2.ep) {
                                InvDefinition.addNpcToMenu(npc2, Client.npcIndices[k], method131, method132, (short)8716);
                            }
                        }
                        final int n8 = Players.Players_count * -2010934433;
                        final int[] players_indices = Players.Players_indices;
                        for (int l = 0; l < n8; ++l) {
                            final Player player = Client.players[players_indices[l]];
                            if (null != player && 1144428983 * player.br == 1144428983 * npc.br && -411750205 * player.ep == npc.ep * -411750205) {
                                DynamicObject.addPlayerToMenu(player, players_indices[l], method131, method132, 1402248095);
                            }
                        }
                    }
                    InvDefinition.addNpcToMenu(npc, entity_unpackID, method131, method132, (short)10780);
                }
                if (animate == 0) {
                    final Player player2 = Client.players[entity_unpackID];
                    if (null == player2) {
                        continue;
                    }
                    if (0x40 == (1144428983 * player2.br & 0x7F) && 0x40 == (-411750205 * player2.ep & 0x7F)) {
                        for (int n9 = 0; n9 < Client.npcCount * 265474485; ++n9) {
                            final NPC npc3 = Client.npcs[Client.npcIndices[n9]];
                            if (npc3 != null && 1458410691 * npc3.definition.size == 1 && 1144428983 * player2.br == npc3.br * 1144428983 && npc3.ep * -411750205 == player2.ep * -411750205) {
                                InvDefinition.addNpcToMenu(npc3, Client.npcIndices[n9], method131, method132, (short)32670);
                            }
                        }
                        final int n10 = Players.Players_count * -2010934433;
                        final int[] players_indices2 = Players.Players_indices;
                        for (int n11 = 0; n11 < n10; ++n11) {
                            final Player player3 = Client.players[players_indices2[n11]];
                            if (null != player3 && player2 != player3 && 1144428983 * player2.br == player3.br * 1144428983 && -411750205 * player3.ep == -411750205 * player2.ep) {
                                DynamicObject.addPlayerToMenu(player3, players_indices2[n11], method131, method132, 1402248095);
                            }
                        }
                    }
                    if (entity_unpackID != Client.combatTargetPlayerIndex * -1565733637) {
                        DynamicObject.addPlayerToMenu(player2, entity_unpackID, method131, method132, 1402248095);
                    }
                    else {
                        n5 = n6;
                    }
                }
                if (animate == 3) {
                    final NodeDeque nodeDeque = Client.groundItems[-1727408401 * GameEngine.Client_plane][method131][method132];
                    if (null != nodeDeque) {
                        for (TileItem tileItem = (TileItem)nodeDeque.first(); null != tileItem; tileItem = (TileItem)nodeDeque.next()) {
                            final ItemComposition set = HealthBarUpdate.set(176307405 * tileItem.id, (byte)94);
                            if (1 == Client.isItemSelected * -303899309) {
                                MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16748608, -1251402539) + set.name, 16, tileItem.id * 176307405, method131, method132, (byte)36);
                            }
                            else if (Client.isSpellSelected) {
                                if (0x1 == (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x1)) {
                                    MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16748608, 1685742560) + set.name, 17, 176307405 * tileItem.id, method131, method132, (byte)93);
                                }
                            }
                            else {
                                final String[] groundActions = set.groundActions;
                                for (int n12 = 4; n12 >= 0; --n12) {
                                    if (TileItem.rm(tileItem, n12, 1688573425)) {
                                        if (groundActions != null && groundActions[n12] != null) {
                                            int n13 = 0;
                                            if (n12 == 0) {
                                                n13 = 18;
                                            }
                                            if (n12 == 1) {
                                                n13 = 19;
                                            }
                                            if (n12 == 2) {
                                                n13 = 20;
                                            }
                                            if (n12 == 3) {
                                                n13 = 21;
                                            }
                                            if (4 == n12) {
                                                n13 = 22;
                                            }
                                            MenuAction.insertMenuItemNoShift(groundActions[n12], class383.method2081(16748608, 2018483691) + set.name, n13, 176307405 * tileItem.id, method131, method132, (byte)94);
                                        }
                                        else if (n12 == 2) {
                                            MenuAction.insertMenuItemNoShift(Strings.an, class383.method2081(16748608, -2090748277) + set.name, 20, 176307405 * tileItem.id, method131, method132, (byte)79);
                                        }
                                    }
                                }
                                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16748608, 868473031) + set.name, 1004, tileItem.id * 176307405, method131, method132, (byte)45);
                            }
                        }
                    }
                }
            }
        }
        if (n5 != -1L) {
            DynamicObject.addPlayerToMenu(Client.players[Client.combatTargetPlayerIndex * -1565733637], -1565733637 * Client.combatTargetPlayerIndex, (int)(n5 >>> 0 & 0x7FL), NPCComposition.method1022(n5), 1402248095);
        }
    }
    
    public World[] wj() {
        return class31.World_worlds;
    }
    
    static final void wj(final int n, final int n2) {
        final NodeDeque nodeDeque = Client.groundItems[GameEngine.Client_plane * -1727408401][n][n2];
        if (nodeDeque == null) {
            class31.scene.removeWallDecoration(-1727408401 * GameEngine.Client_plane, n, n2);
            return;
        }
        long n3 = -99999999L;
        TileItem tileItem = null;
        for (TileItem tileItem2 = (TileItem)nodeDeque.last(); tileItem2 != null; tileItem2 = (TileItem)nodeDeque.previous()) {
            final ItemComposition set = HealthBarUpdate.set(tileItem2.id * 176307405, (byte)48);
            long n4 = set.price * -1706039181;
            if (1 == set.isStackable * 1552863327) {
                n4 *= ((-1745152527 * tileItem2.quantity < Integer.MAX_VALUE) ? (1 + tileItem2.quantity * -1745152527) : ((long)(tileItem2.quantity * -1745152527)));
            }
            if (n4 > n3) {
                n3 = n4;
                tileItem = tileItem2;
            }
        }
        if (null == tileItem) {
            class31.scene.removeWallDecoration(GameEngine.Client_plane * -1727408401, n, n2);
            return;
        }
        nodeDeque.addLast(tileItem);
        TileItem tileItem3 = null;
        Renderable renderable = null;
        for (TileItem tileItem4 = (TileItem)nodeDeque.last(); null != tileItem4; tileItem4 = (TileItem)nodeDeque.previous()) {
            if (tileItem.id * 176307405 != tileItem4.id * 176307405) {
                if (tileItem3 == null) {
                    tileItem3 = tileItem4;
                }
                if (176307405 * tileItem3.id != tileItem4.id * 176307405 && renderable == null) {
                    renderable = tileItem4;
                }
            }
        }
        class31.scene.newGroundItemPile(-1727408401 * GameEngine.Client_plane, n, n2, class147.getTileHeight(64 + n * 128, 64 + 128 * n2, GameEngine.Client_plane * -1727408401, (byte)(-59)), tileItem, FaceNormal.calculateTag(n, n2, 3, false, 0, 684927540), tileItem3, renderable);
    }
    
    public NodeDeque wj() {
        return Client.scriptEvents;
    }
    
    static void wv(final NPC npc) {
        npc.bt = 1763542591 * npc.definition.size;
        npc.cv = npc.definition.rotation * -1952936367;
        npc.cr = npc.definition.walkSequence * 869101579;
        npc.bf = -1784513249 * npc.definition.walkBackSequence;
        npc.dl = 1886938753 * npc.definition.walkLeftSequence;
        npc.dp = npc.definition.walkRightSequence * 2010418861;
        npc.cd = npc.definition.idleSequence * -133009915;
        npc.bh = npc.definition.turnLeftSequence * -1457034847;
        npc.dz = npc.definition.turnRightSequence * -1686059033;
        npc.dr = -1079417805 * npc.definition.runSequence;
        npc.bx = npc.definition.runBackSequence * -2020975041;
        npc.bg = npc.definition.runLeftSequence * 1337010697;
        npc.eo = 269496349 * npc.definition.runRightSequence;
        npc.ba = -2121315781 * npc.definition.crawlSequence;
        npc.bm = npc.definition.crawlBackSequence * -605946035;
        npc.bs = npc.definition.crawlLeftSequence * -76847983;
        npc.bu = npc.definition.crawlRightSequence * -1771433781;
    }
    
    public AbstractRasterProvider xj() {
        return RouteStrategy.rasterProvider;
    }
    
    static final void xj(final int n, final int n2, int n3, final int n4, final int n5, final String s, final String targetName, final int n6, final int n7) {
        if (n3 >= 2000) {
            n3 -= 2000;
        }
        if (n3 == 11 && null != Client.npcs[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1577744987;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPPLAYER6, Client.packetWriter.isaacCipher, (short)(-7297));
            Buffer.ap(packetBufferNode.packetBuffer, n4, (byte)92);
            packetBufferNode.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 746558610) ? 1 : 0), (byte)(-28));
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (6 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = -1126411754 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1753461141 * n;
            Client.destinationY = 2054946010 * n2;
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.OPNPCT, Client.packetWriter.isaacCipher, (short)(-30232));
            packetBufferNode2.packetBuffer.bu(n4, (byte)125);
            packetBufferNode2.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -712841612) ? 1 : 0), (byte)(-125));
            packetBufferNode2.packetBuffer.bu(n2 + -1682161858 * GameObject.baseY, (byte)58);
            Buffer.ap(packetBufferNode2.packetBuffer, -1232093375 * WorldMapData_0.baseX + n, (byte)78);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
        }
        if (13 == n3 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = -401355631;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * -1764926646;
            final PacketBufferNode packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.OPPLAYER8, Client.packetWriter.isaacCipher, (short)(-15530));
            packetBufferNode3.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(1502018004, -811385760) ? 1 : 0), (byte)113);
            packetBufferNode3.packetBuffer.bu(n4, (byte)40);
            Client.packetWriter.addNode(packetBufferNode3, 414135591);
        }
        if (5 == n3) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 141889124 * n7;
            Client.mouseCrossColor = 923225517;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = -1763629263 * n2;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.OPLOCT, Client.packetWriter.isaacCipher, (short)(-17523));
            packetBufferNode4.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1579519752);
            Buffer.ap(packetBufferNode4.packetBuffer, n4, (byte)49);
            packetBufferNode4.packetBuffer.ds(-2052040494 * GameObject.baseY + n2, -2012551299);
            packetBufferNode4.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(462181821, -1834635453) ? 1 : 0), 1518003567);
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (n3 == -214909173 || n3 == 1009 || n3 == 1010 || n3 == 1011 || 1012 == n3) {
            class126.worldMap.worldMapMenuAction(n3, n4, new Coord(n), new Coord(n2), -1912180740);
        }
        if (19 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 1453084275;
            Client.mouseCrossColor = -1950886210;
            Client.mouseCrossState = 0;
            Client.destinationX = n * 1168418751;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2498, Client.packetWriter.isaacCipher, (short)(-14695));
            packetBufferNode5.packetBuffer.bu(n2 + GameObject.baseY * 1150353675, (byte)35);
            packetBufferNode5.packetBuffer.ds(n4, -2093870406);
            packetBufferNode5.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -1781543750) ? 1 : 0), (byte)52);
            packetBufferNode5.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1559119566);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (n3 == -2009511662) {
            Client.mouseCrossX = n6 * 1820621297;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1157604392;
            Client.mouseCrossState = 0;
            Client.destinationX = 101299939 * n;
            Client.destinationY = -728514247 * n2;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2536, Client.packetWriter.isaacCipher, (short)(-13989));
            packetBufferNode6.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -61347114) ? 1 : 0), -523117110);
            packetBufferNode6.packetBuffer.ds(n4, -1803010534);
            packetBufferNode6.packetBuffer.bu(-1232093375 * WorldMapData_0.baseX + n, (byte)39);
            packetBufferNode6.packetBuffer.ds(n2 + -810514409 * GameObject.baseY, -1515392467);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (23 == n3) {
            if (Client.isMenuOpen) {
                class31.scene.setViewportWalking();
            }
            else {
                class31.scene.menuOpen(GameEngine.Client_plane * -1727408401, n, n2, true);
            }
        }
        if (n3 == 28) {
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-16542));
            packetBufferNode7.packetBuffer.ba(n2, -2081835031);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
            final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
            if (vmethod3380 != null && vmethod3380.cs1Instructions != null && vmethod3380.cs1Instructions[0][0] == 5) {
                final int n8 = vmethod3380.cs1Instructions[0][1];
                Varps.Varps_main[n8] = 1 - Varps.Varps_main[n8];
                class7.changeGameOptions(n8, -186455564);
            }
        }
        if (47 == n3 && Client.players[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * 639100356;
            Client.destinationY = -234155444 * n2;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2526, Client.packetWriter.isaacCipher, (short)(-11142));
            packetBufferNode8.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, 626309267) ? 1 : 0), -857145410);
            Buffer.ap(packetBufferNode8.packetBuffer, n4, (byte)116);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (n3 == 7 && null != Client.npcs[n4]) {
            Client.mouseCrossX = n6 * 1834122130;
            Client.mouseCrossY = n7 * -1721728458;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * 2039008520;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2557, Client.packetWriter.isaacCipher, (short)(-30354));
            packetBufferNode9.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, 148133176) ? 1 : 0), -1607099115);
            packetBufferNode9.packetBuffer.ba(-235773550 * class294.field2713, -2081835031);
            packetBufferNode9.packetBuffer.bu(n4, (byte)2);
            packetBufferNode9.packetBuffer.ds(class144.field1333 * -1518641849, -1944484927);
            packetBufferNode9.packetBuffer.cq(896780031 * WorldMapSectionType.field2385, (byte)(-85));
            Client.packetWriter.addNode(packetBufferNode9, 414135591);
        }
        if (n3 == -1685056792 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = 1515951446 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.OPOBJT, Client.packetWriter.isaacCipher, (short)(-20111));
            packetBufferNode10.packetBuffer.ds(n4, -1394837788);
            packetBufferNode10.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(1247811000, 352969875) ? 1 : 0), (byte)(-51));
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
        }
        if (n3 == 10 && Client.npcs[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 623514360;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode11 = class330.getPacketBufferNode(ClientPacket.CLICK, Client.packetWriter.isaacCipher, (short)(-17570));
            packetBufferNode11.packetBuffer.bu(n4, (byte)39);
            packetBufferNode11.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(-640440589, 328542196) ? 1 : 0), (byte)(-123));
            Client.packetWriter.addNode(packetBufferNode11, 414135591);
        }
        if ((-1291701355 == n3 || n3 == 1007) && SoundSystem.getWidgetChild(n2, n, -2006555171) != null) {
            Message.widgetDefaultMenuAction(n4, n2, n, n5, targetName, 1238902143);
        }
        if (14 == n3 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * 1072471677;
            Client.destinationY = 1534699827 * n2;
            final PacketBufferNode packetBufferNode12 = class330.getPacketBufferNode(ClientPacket.OPPLAYER4, Client.packetWriter.isaacCipher, (short)(-16825));
            packetBufferNode12.packetBuffer.cq(n4, (byte)(-20));
            packetBufferNode12.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -1083924999) ? 1 : 0), (byte)(-71));
            packetBufferNode12.packetBuffer.bu(896780031 * WorldMapSectionType.field2385, (byte)4);
            packetBufferNode12.packetBuffer.ba(class294.field2713 * 1070391399, -2081835031);
            packetBufferNode12.packetBuffer.cq(class144.field1333 * -234132486, (byte)(-61));
            Client.packetWriter.addNode(packetBufferNode12, 414135591);
        }
        if (n3 == 48 && null != Client.players[n4]) {
            Client.mouseCrossX = n6 * 1225626940;
            Client.mouseCrossY = -203145897 * n7;
            Client.mouseCrossColor = -1876109689;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * -1687141703;
            final PacketBufferNode packetBufferNode13 = class330.getPacketBufferNode(ClientPacket.OPLOC2, Client.packetWriter.isaacCipher, (short)(-4309));
            packetBufferNode13.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(-2015435595, 372485064) ? 1 : 0), -298219703);
            packetBufferNode13.packetBuffer.cq(n4, (byte)(-73));
            Client.packetWriter.addNode(packetBufferNode13, 414135591);
        }
        if (n3 == 9 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * -1903387413;
            Client.mouseCrossColor = -1044349575;
            Client.mouseCrossState = 0;
            Client.destinationX = 53294134 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode14 = class330.getPacketBufferNode(ClientPacket.field2555, Client.packetWriter.isaacCipher, (short)76);
            packetBufferNode14.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, -69270930) ? 1 : 0), (byte)53);
            packetBufferNode14.packetBuffer.ds(n4, -1619178320);
            Client.packetWriter.addNode(packetBufferNode14, 414135591);
        }
        if (-502184638 == n3 && null != Client.players[n4]) {
            Client.mouseCrossX = -742701613 * n6;
            Client.mouseCrossY = 1904133915 * n7;
            Client.mouseCrossColor = -31306369;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode15 = class330.getPacketBufferNode(ClientPacket.field2472, Client.packetWriter.isaacCipher, (short)(-26825));
            packetBufferNode15.packetBuffer.bu(n4, (byte)7);
            packetBufferNode15.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(-1400531521, -940243633) ? 1 : 0), -1767330052);
            Client.packetWriter.addNode(packetBufferNode15, 414135591);
        }
        if (3 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 459677815 * n7;
            Client.mouseCrossColor = -1065695706;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1418712275;
            Client.destinationY = n2 * 344508188;
            final PacketBufferNode packetBufferNode16 = class330.getPacketBufferNode(ClientPacket.field2474, Client.packetWriter.isaacCipher, (short)(-9475));
            Buffer.ap(packetBufferNode16.packetBuffer, -483318156 * WorldMapData_0.baseX + n, (byte)22);
            packetBufferNode16.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 140587017) ? 1 : 0), (byte)(-120));
            packetBufferNode16.packetBuffer.ds(n2 + GameObject.baseY * 827352769, -1068032739);
            packetBufferNode16.packetBuffer.bu(n4, (byte)5);
            Client.packetWriter.addNode(packetBufferNode16, 414135591);
        }
        if (n3 == 25) {
            final Widget widgetChild = SoundSystem.getWidgetChild(n2, n, -1500216670);
            if (null != widgetChild) {
                class166.Widget_runOnTargetLeave((byte)116);
                class18.selectSpell(n2, n, class195.method1052(KeyHandler.getWidgetFlags(widgetChild, 423941016), 2096952497), n5, 1618462711);
                Client.isItemSelected = 0;
                Client.field530 = MusicPatchNode.Widget_getSpellActionName(widgetChild, 603369429);
                if (null == Client.field530) {
                    Client.field530 = Strings.at;
                }
                if (widgetChild.modelOrthog) {
                    Client.field522 = widgetChild.field3004 + class383.method2081(16777215, -742126857);
                }
                else {
                    Client.field522 = class383.method2081(-668978794, 1289445316) + widgetChild.text + class383.method2081(265846411, -221499605);
                }
            }
            return;
        }
        if (n3 == 24) {
            final Widget vmethod3381 = class165.vmethod3380(n2, (byte)5);
            if (null != vmethod3381) {
                boolean method353 = true;
                if (1021339961 * vmethod3381.contentType > 0) {
                    method353 = Message.method353(vmethod3381, (byte)(-66));
                }
                if (method353) {
                    final PacketBufferNode packetBufferNode17 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-21644));
                    packetBufferNode17.packetBuffer.ba(n2, -2081835031);
                    Client.packetWriter.addNode(packetBufferNode17, 414135591);
                }
            }
        }
        if (n3 == 1981980965) {
            Client.mouseCrossX = n6 * 1078306879;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 130179063;
            Client.mouseCrossState = 0;
            final NPC npc = Client.npcs[n4];
            if (npc != null) {
                NPCComposition npcComposition = npc.definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, -346487596);
                }
                if (null != npcComposition) {
                    final PacketBufferNode packetBufferNode18 = class330.getPacketBufferNode(ClientPacket.field2524, Client.packetWriter.isaacCipher, (short)(-9571));
                    Buffer.ap(packetBufferNode18.packetBuffer, 1581332655 * npcComposition.id, (byte)35);
                    Client.packetWriter.addNode(packetBufferNode18, 414135591);
                }
            }
        }
        if (20 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 94231766;
            Client.mouseCrossColor = 1033893660;
            Client.mouseCrossState = 0;
            Client.destinationX = 1600763857 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode19 = class330.getPacketBufferNode(ClientPacket.field2492, Client.packetWriter.isaacCipher, (short)(-24908));
            packetBufferNode19.packetBuffer.bu(765348711 * WorldMapData_0.baseX + n, (byte)62);
            packetBufferNode19.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(-1660708325, 345130089) ? 1 : 0), (byte)85);
            packetBufferNode19.packetBuffer.ds(n4, -1438480147);
            packetBufferNode19.packetBuffer.bu(n2 + GameObject.baseY * 93750646, (byte)77);
            Client.packetWriter.addNode(packetBufferNode19, 414135591);
        }
        if (n3 == 49 && Client.players[n4] != null) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = -404385424;
            Client.mouseCrossState = 0;
            Client.destinationX = 1149980286 * n;
            Client.destinationY = n2 * 2014390021;
            final PacketBufferNode packetBufferNode20 = class330.getPacketBufferNode(ClientPacket.IF_BUTTONT, Client.packetWriter.isaacCipher, (short)(-29310));
            packetBufferNode20.packetBuffer.bu(n4, (byte)15);
            packetBufferNode20.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(82, -1206163109) ? 1 : 0), -908133992);
            Client.packetWriter.addNode(packetBufferNode20, 414135591);
        }
        if (n3 == 8 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * -345043542;
            Client.mouseCrossY = -145797852 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode21 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON10, Client.packetWriter.isaacCipher, (short)(-29256));
            packetBufferNode21.packetBuffer.bu(-747698793 * Client.selectedSpellItemId, (byte)11);
            packetBufferNode21.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)51);
            Buffer.ap(packetBufferNode21.packetBuffer, n4, (byte)12);
            packetBufferNode21.packetBuffer.bu(844936701 * Client.selectedSpellChildIndex, (byte)5);
            packetBufferNode21.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 410533523) ? 1 : 0), (byte)(-109));
            Client.packetWriter.addNode(packetBufferNode21, 414135591);
        }
        if (n3 == 2) {
            Client.mouseCrossX = n6 * 604959967;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode22 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON9, Client.packetWriter.isaacCipher, (short)(-19743));
            packetBufferNode22.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(445323536, 808166136) ? 1 : 0), (byte)(-50));
            Buffer.ap(packetBufferNode22.packetBuffer, n4, (byte)108);
            Buffer.ap(packetBufferNode22.packetBuffer, Client.selectedSpellItemId * 616923277, (byte)67);
            Buffer.ap(packetBufferNode22.packetBuffer, n + WorldMapData_0.baseX * -517707668, (byte)118);
            packetBufferNode22.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -2002224224);
            packetBufferNode22.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)(-74));
            packetBufferNode22.packetBuffer.ds(n2 + 827352769 * GameObject.baseY, -2065946874);
            Client.packetWriter.addNode(packetBufferNode22, 414135591);
        }
        if (n3 == 1002) {
            Client.mouseCrossX = 974095226 * n6;
            Client.mouseCrossY = n7 * -1074577682;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            final PacketBufferNode packetBufferNode23 = class330.getPacketBufferNode(ClientPacket.OPNPC4, Client.packetWriter.isaacCipher, (short)(-24923));
            packetBufferNode23.packetBuffer.ds(n4, -1076855230);
            Client.packetWriter.addNode(packetBufferNode23, 414135591);
        }
        if (n3 == 685394202 && null != Client.players[n4]) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1056327491 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode24 = class330.getPacketBufferNode(ClientPacket.OPPLAYER5, Client.packetWriter.isaacCipher, (short)(-11928));
            packetBufferNode24.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, -699473394) ? 1 : 0), (byte)(-4));
            Buffer.ap(packetBufferNode24.packetBuffer, n4, (byte)93);
            Client.packetWriter.addNode(packetBufferNode24, 414135591);
        }
        if (n3 == 16) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * -2140944455;
            final PacketBufferNode packetBufferNode25 = class330.getPacketBufferNode(ClientPacket.field2479, Client.packetWriter.isaacCipher, (short)(-25695));
            packetBufferNode25.packetBuffer.cq(WorldMapSectionType.field2385 * -2035994103, (byte)(-87));
            packetBufferNode25.packetBuffer.ds(WorldMapData_0.baseX * -1232093375 + n, -1414463040);
            packetBufferNode25.packetBuffer.ds(n4, -1275731595);
            packetBufferNode25.packetBuffer.ds(GameObject.baseY * 556210894 + n2, -2069727523);
            packetBufferNode25.packetBuffer.cq(-1742858266 * class144.field1333, (byte)(-33));
            packetBufferNode25.packetBuffer.bf((int)(Client.keyHandlerInstance.getKeyPressed(82, 990216692) ? 1 : 0), (byte)16);
            packetBufferNode25.packetBuffer.dy(-1164741861 * class294.field2713, (byte)25);
            Client.packetWriter.addNode(packetBufferNode25, 414135591);
        }
        if (n3 == 1761458063 && Client.players[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = -1715575366;
            Client.mouseCrossState = 0;
            Client.destinationX = n * 801328312;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode26 = class330.getPacketBufferNode(ClientPacket.OPOBJ4, Client.packetWriter.isaacCipher, (short)(-8270));
            Buffer.ap(packetBufferNode26.packetBuffer, n4, (byte)97);
            packetBufferNode26.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -1153935731) ? 1 : 0), -1268621238);
            Client.packetWriter.addNode(packetBufferNode26, 414135591);
        }
        if (4 == n3) {
            Client.mouseCrossX = 346771268 * n6;
            Client.mouseCrossY = n7 * 1430593577;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode27 = class330.getPacketBufferNode(ClientPacket.field2513, Client.packetWriter.isaacCipher, (short)(-21655));
            packetBufferNode27.packetBuffer.ds(-1232093375 * WorldMapData_0.baseX + n, -1257849535);
            Buffer.ap(packetBufferNode27.packetBuffer, 827352769 * GameObject.baseY + n2, (byte)80);
            packetBufferNode27.packetBuffer.ds(n4, -2068621918);
            packetBufferNode27.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, 1062514131) ? 1 : 0), 1044447462);
            Client.packetWriter.addNode(packetBufferNode27, 414135591);
        }
        if (n3 == 44 && null != Client.players[n4]) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 330229149;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode28 = class330.getPacketBufferNode(ClientPacket.OPPLAYER1, Client.packetWriter.isaacCipher, (short)(-25762));
            packetBufferNode28.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(112733255, -863944864) ? 1 : 0), 224379140);
            packetBufferNode28.packetBuffer.cq(n4, (byte)8);
            Client.packetWriter.addNode(packetBufferNode28, 414135591);
        }
        if (n3 == 18) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = -1624796138;
            Client.mouseCrossState = 0;
            Client.destinationX = 1108436675 * n;
            Client.destinationY = n2 * 875414437;
            final PacketBufferNode packetBufferNode29 = class330.getPacketBufferNode(ClientPacket.field2548, Client.packetWriter.isaacCipher, (short)(-1840));
            packetBufferNode29.packetBuffer.ds(n4, -1654412946);
            packetBufferNode29.packetBuffer.cq(GameObject.baseY * 962289420 + n2, (byte)110);
            packetBufferNode29.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(82, 848325367) ? 1 : 0), (byte)(-68));
            Buffer.ap(packetBufferNode29.packetBuffer, n + WorldMapData_0.baseX * -1643489410, (byte)41);
            Client.packetWriter.addNode(packetBufferNode29, 414135591);
        }
        if (58 == n3) {
            final Widget widgetChild2 = SoundSystem.getWidgetChild(n2, n, 1538180111);
            if (widgetChild2 != null) {
                if (null != widgetChild2.field2984) {
                    final ScriptEvent scriptEvent = new ScriptEvent();
                    scriptEvent.dragTarget = widgetChild2;
                    scriptEvent.opIndex = n4 * -247460251;
                    scriptEvent.targetName = targetName;
                    scriptEvent.args = widgetChild2.field2984;
                    HealthBarUpdate.set(scriptEvent, (byte)(-40));
                }
                final PacketBufferNode packetBufferNode30 = class330.getPacketBufferNode(ClientPacket.IF_BUTTON6, Client.packetWriter.isaacCipher, (short)(-27695));
                Buffer.ap(packetBufferNode30.packetBuffer, n, (byte)21);
                packetBufferNode30.packetBuffer.cq(n5, (byte)(-25));
                packetBufferNode30.packetBuffer.el(Clips.selectedSpellWidget * 1545891476, -437883978);
                packetBufferNode30.packetBuffer.ds(-2077755639 * Client.selectedSpellChildIndex, -1979632411);
                packetBufferNode30.packetBuffer.dy(n2, (byte)(-43));
                packetBufferNode30.packetBuffer.bu(Client.selectedSpellItemId * 616923277, (byte)91);
                Client.packetWriter.addNode(packetBufferNode30, 414135591);
            }
        }
        if (30 == n3 && null == Client.meslayerContinueWidget) {
            class81.resumePauseWidget(n2, n, (short)20293);
            class144.invalidateWidget(Client.meslayerContinueWidget = SoundSystem.getWidgetChild(n2, n, 1470724623), -1088848882);
        }
        if (26 == n3) {
            class148.method844(-837883064);
        }
        if (n3 == 15 && Client.players[n4] != null) {
            Client.mouseCrossX = n6 * -1210641890;
            Client.mouseCrossY = n7 * -2077695464;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = 1065213394 * n;
            Client.destinationY = 875414437 * n2;
            final PacketBufferNode packetBufferNode31 = class330.getPacketBufferNode(ClientPacket.field2511, Client.packetWriter.isaacCipher, (short)(-22359));
            packetBufferNode31.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -1581120277);
            packetBufferNode31.packetBuffer.bu(616923277 * Client.selectedSpellItemId, (byte)57);
            Buffer.ap(packetBufferNode31.packetBuffer, n4, (byte)114);
            packetBufferNode31.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(-428287034, -638292016) ? 1 : 0), (byte)(-128));
            packetBufferNode31.packetBuffer.ba(96656415 * Clips.selectedSpellWidget, -2081835031);
            Client.packetWriter.addNode(packetBufferNode31, 414135591);
        }
        if (12 == n3 && Client.npcs[n4] != null) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * 66194573;
            Client.mouseCrossColor = -773129760;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = -412831824 * n2;
            final PacketBufferNode packetBufferNode32 = class330.getPacketBufferNode(ClientPacket.field2528, Client.packetWriter.isaacCipher, (short)(-1916));
            packetBufferNode32.packetBuffer.bu(n4, (byte)49);
            packetBufferNode32.packetBuffer.du((int)(Client.keyHandlerInstance.getKeyPressed(82, -1248618331) ? 1 : 0), 1957733261);
            Client.packetWriter.addNode(packetBufferNode32, 414135591);
        }
        if (1 == n3) {
            Client.mouseCrossX = -654569448 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 518352121;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -2005591390;
            Client.destinationY = n2 * 761452421;
            final PacketBufferNode packetBufferNode33 = class330.getPacketBufferNode(ClientPacket.OPOBJ2, Client.packetWriter.isaacCipher, (short)(-5866));
            packetBufferNode33.packetBuffer.bu(n4, (byte)33);
            packetBufferNode33.packetBuffer.dy(-1340437255 * class294.field2713, (byte)(-39));
            packetBufferNode33.packetBuffer.cq(-1618596263 * WorldMapSectionType.field2385, (byte)89);
            packetBufferNode33.packetBuffer.bu(n + -1232093375 * WorldMapData_0.baseX, (byte)5);
            packetBufferNode33.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(-2070615324, -1413208758) ? 1 : 0), (byte)(-38));
            packetBufferNode33.packetBuffer.bu(-1518641849 * class144.field1333, (byte)5);
            packetBufferNode33.packetBuffer.ds(n2 + -578207609 * GameObject.baseY, -1076797030);
            Client.packetWriter.addNode(packetBufferNode33, 414135591);
        }
        if (17 == n3) {
            Client.mouseCrossX = n6 * 1956692579;
            Client.mouseCrossY = n7 * -1811924545;
            Client.mouseCrossColor = -2030955774;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 43257128;
            final PacketBufferNode packetBufferNode34 = class330.getPacketBufferNode(ClientPacket.field2489, Client.packetWriter.isaacCipher, (short)(-16815));
            packetBufferNode34.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(-673004908, -12068853) ? 1 : 0), (byte)(-47));
            packetBufferNode34.packetBuffer.dy(96656415 * Clips.selectedSpellWidget, (byte)50);
            packetBufferNode34.packetBuffer.ds(145251849 * Client.selectedSpellChildIndex, -1643487507);
            packetBufferNode34.packetBuffer.cq(n4, (byte)(-81));
            Buffer.ap(packetBufferNode34.packetBuffer, -881283045 * WorldMapData_0.baseX + n, (byte)20);
            packetBufferNode34.packetBuffer.bu(n2 + GameObject.baseY * 827352769, (byte)123);
            packetBufferNode34.packetBuffer.bu(Client.selectedSpellItemId * 519007828, (byte)45);
            Client.packetWriter.addNode(packetBufferNode34, 414135591);
        }
        if (21 == n3) {
            Client.mouseCrossX = n6 * 229307853;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 1387316670;
            Client.mouseCrossState = 0;
            Client.destinationX = n * -1970850269;
            Client.destinationY = n2 * 1474887589;
            final PacketBufferNode packetBufferNode35 = class330.getPacketBufferNode(ClientPacket.field2487, Client.packetWriter.isaacCipher, (short)(-2398));
            packetBufferNode35.packetBuffer.bu(WorldMapData_0.baseX * -1232093375 + n, (byte)33);
            packetBufferNode35.packetBuffer.eb((int)(Client.keyHandlerInstance.getKeyPressed(-1624352631, -158951014) ? 1 : 0), (byte)(-111));
            packetBufferNode35.packetBuffer.ds(827352769 * GameObject.baseY + n2, -2126058203);
            Buffer.ap(packetBufferNode35.packetBuffer, n4, (byte)80);
            Client.packetWriter.addNode(packetBufferNode35, 414135591);
        }
        if (n3 == 29) {
            final PacketBufferNode packetBufferNode36 = class330.getPacketBufferNode(ClientPacket.field2497, Client.packetWriter.isaacCipher, (short)(-1334));
            packetBufferNode36.packetBuffer.ba(n2, -2081835031);
            Client.packetWriter.addNode(packetBufferNode36, 414135591);
            final Widget vmethod3382 = class165.vmethod3380(n2, (byte)5);
            if (null != vmethod3382 && vmethod3382.cs1Instructions != null && 5 == vmethod3382.cs1Instructions[0][0]) {
                final int n9 = vmethod3382.cs1Instructions[0][1];
                if (vmethod3382.cs1ComparisonValues[0] != Varps.Varps_main[n9]) {
                    Varps.Varps_main[n9] = vmethod3382.cs1ComparisonValues[0];
                    class7.changeGameOptions(n9, 1071045247);
                }
            }
        }
        if (n3 == 22) {
            Client.mouseCrossX = 1956692579 * n6;
            Client.mouseCrossY = n7 * 956660059;
            Client.mouseCrossColor = 953640476;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * n;
            Client.destinationY = n2 * -2056316894;
            final PacketBufferNode packetBufferNode37 = class330.getPacketBufferNode(ClientPacket.field2483, Client.packetWriter.isaacCipher, (short)(-32006));
            Buffer.ap(packetBufferNode37.packetBuffer, GameObject.baseY * 827352769 + n2, (byte)40);
            packetBufferNode37.packetBuffer.dp((int)(Client.keyHandlerInstance.getKeyPressed(500409819, -1554440643) ? 1 : 0), 2070233539);
            packetBufferNode37.packetBuffer.cq(n + WorldMapData_0.baseX * -987372596, (byte)(-30));
            Buffer.ap(packetBufferNode37.packetBuffer, n4, (byte)127);
            Client.packetWriter.addNode(packetBufferNode37, 414135591);
        }
        if (1004 == n3) {
            Client.mouseCrossX = -352140698 * n6;
            Client.mouseCrossY = 956660059 * n7;
            Client.mouseCrossColor = 204675611;
            Client.mouseCrossState = 0;
            final PacketBufferNode packetBufferNode38 = class330.getPacketBufferNode(ClientPacket.OPOBJ1, Client.packetWriter.isaacCipher, (short)(-10400));
            packetBufferNode38.packetBuffer.cq(GameObject.baseY * 827352769 + n2, (byte)14);
            Buffer.ap(packetBufferNode38.packetBuffer, n4, (byte)28);
            Buffer.ap(packetBufferNode38.packetBuffer, 537748736 * WorldMapData_0.baseX + n, (byte)16);
            Client.packetWriter.addNode(packetBufferNode38, 414135591);
        }
        if (0 != Client.isItemSelected * -303899309) {
            Client.isItemSelected = 0;
            class144.invalidateWidget(class165.vmethod3380(class294.field2713 * -1164741861, (byte)5), -1221741411);
        }
        if (Client.isSpellSelected) {
            class166.Widget_runOnTargetLeave((byte)9);
        }
    }
    
    public Widget xj() {
        return Client.draggedOnWidget;
    }
    
    static final void xq(final int n, final int n2) {
        if (730065501 * Client.menuOptionsCount < 2 && -303899309 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            return;
        }
        if (!Client.showMouseOverText) {
            return;
        }
        final int method461 = DynamicObject.method461((short)2729);
        String str;
        if (1 == Client.isItemSelected * -303899309 && 730065501 * Client.menuOptionsCount < 2) {
            str = Strings.gu + Strings.gk + Client.field364 + " " + class96.ab;
        }
        else if (Client.isSpellSelected && 730065501 * Client.menuOptionsCount < 2) {
            str = Client.field530 + Strings.gk + Client.field522 + " " + class96.ab;
        }
        else {
            str = Friend.method2152(method461, (short)3392);
        }
        if (730065501 * Client.menuOptionsCount > 2) {
            str = str + class383.method2081(16777215, 2136145043) + " " + '/' + " " + (Client.menuOptionsCount * 730065501 - 2) + Strings.gw;
        }
        AbstractFont.lu(class137.fontBold12, str, 4 + n, 15 + n2, 16777215, 0, Client.cycle * -1886224337 / 1000);
    }
    
    public IntegerNode xq(final int n) {
        return new IntegerNode(n);
    }
    
    static String yw(final int n) {
        if (n < 0) {
            return "";
        }
        if (Client.menuTargets[n].length() > 0) {
            return Client.menuActions[n] + Strings.gk + Client.menuTargets[n];
        }
        return Client.menuActions[n];
    }
    
    public void yw(final ScriptEvent scriptEvent, final int n, final int n2) {
        PlayerType.runScript(scriptEvent, n, n2, 637714632);
    }
    
    public void yw(final int n) {
        Client.hintArrowPlayerIndex = n * -1034603829;
    }
    
    static final void zt(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            if (-1 != n8) {
                Client.field573[n8] = true;
            }
            else {
                for (int i = 0; i < 100; ++i) {
                    Client.field573[i] = true;
                }
            }
            return;
        }
        WorldMapSection2.field2292 = null;
        class11.drawInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, n8, -465475629);
        if (null != WorldMapSection2.field2292) {
            class11.drawInterface(WorldMapSection2.field2292, -1412584499, n2, n3, n4, n5, 1983519339 * class230.field2130, class101.field1082 * -2041029009, n8, -465475629);
            WorldMapSection2.field2292 = null;
        }
    }
    
    public static FloorOverlayDefinition xt(final int n) {
        final FloorOverlayDefinition floorOverlayDefinition = (FloorOverlayDefinition)FloorOverlayDefinition.FloorOverlayDefinition_cached.get(n);
        if (floorOverlayDefinition != null) {
            return floorOverlayDefinition;
        }
        final byte[] loadData = FloorOverlayDefinition.FloorOverlayDefinition_archive.loadData(4, n);
        final FloorOverlayDefinition ao = ScriptFrame.client.ao();
        if (loadData != null) {
            ao.ef(ScriptFrame.client.pc(loadData), n);
        }
        ao.ni();
        FloorOverlayDefinition.FloorOverlayDefinition_cached.vq(ao, n);
        return ao;
    }
    
    final boolean xt() {
        final int method461 = DynamicObject.method461((short)(-4251));
        int n = (Client.leftClickOpensMenu && -1601780261 * Client.menuOptionsCount > 2) ? 1 : 0;
        if (n == 0) {
            int n2;
            if (method461 < 0) {
                n2 = 0;
            }
            else {
                int n3 = Client.menuOpcodes[method461];
                if (n3 >= 2000) {
                    n3 -= 2000;
                }
                if (1007 == n3) {
                    n2 = 1;
                }
                else {
                    n2 = 0;
                }
            }
            n = n2;
        }
        return n != 0 && !Client.menuShiftClick[method461];
    }
    
    static final void yv() {
        int i = 0;
        while (i == 0) {
            i = 1;
            for (int j = 0; j < 730065501 * Client.menuOptionsCount - 1; ++j) {
                if (Client.menuOpcodes[j] < -1756256669 && Client.menuOpcodes[j + 1] > 1323649411) {
                    final String s = Client.menuTargets[j];
                    Client.menuTargets[j] = Client.menuTargets[1 + j];
                    Client.menuTargets[j + 1] = s;
                    final String s2 = Client.menuActions[j];
                    Client.menuActions[j] = Client.menuActions[1 + j];
                    Client.menuActions[j + 1] = s2;
                    final int n = Client.menuOpcodes[j];
                    Client.menuOpcodes[j] = Client.menuOpcodes[j + 1];
                    Client.menuOpcodes[j + 1] = n;
                    final int n2 = Client.menuArguments1[j];
                    Client.menuArguments1[j] = Client.menuArguments1[1 + j];
                    Client.menuArguments1[1 + j] = n2;
                    final int n3 = Client.menuArguments2[j];
                    Client.menuArguments2[j] = Client.menuArguments2[j + 1];
                    Client.menuArguments2[1 + j] = n3;
                    final int n4 = Client.menuIdentifiers[j];
                    Client.menuIdentifiers[j] = Client.menuIdentifiers[1 + j];
                    Client.menuIdentifiers[j + 1] = n4;
                    final int n5 = Client.menuItemIds[j];
                    Client.menuItemIds[j] = Client.menuItemIds[1 + j];
                    Client.menuItemIds[1 + j] = n5;
                    final boolean b = Client.menuShiftClick[j];
                    Client.menuShiftClick[j] = Client.menuShiftClick[1 + j];
                    Client.menuShiftClick[1 + j] = b;
                    i = 0;
                }
            }
        }
    }
    
    public static void yv(final Client client, final String s, final int n) throws IOException {
        if (client == null) {
            client.method371(s, n);
        }
        try {
            final URL url = new URL(ViewportMouse.field2213 + "public/v1/games/YCfdbvr2pM1zUYMxJRexZY/play");
            final class394 class394 = new class394();
            class394.method2108(s, -807271819);
            final class9 field24 = class9.field24;
            final OtlTokenRequester field25 = client.field399;
            if (null == field25) {
                client.field410 = class14.ni(client.field529, new class10(url, field24, class394, client.field401), (byte)1);
                return;
            }
            if (n == -19427563) {
                return;
            }
            client.field400 = field25.request(field24.method30((byte)(-89)), url, class394.method2105(1466216773), "");
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.gz(" + ')');
        }
    }
    
    static void xz() {
        if (!Client.isSpellSelected) {
            return;
        }
        final Widget widgetChild = SoundSystem.getWidgetChild(96656415 * Clips.selectedSpellWidget, 145251849 * Client.selectedSpellChildIndex, -1122531258);
        if (widgetChild != null && null != widgetChild.onTargetLeave) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetLeave;
            HealthBarUpdate.set(scriptEvent, (byte)70);
        }
        Client.selectedSpellItemId = -35668549;
        Client.isSpellSelected = false;
        class144.invalidateWidget(widgetChild, -809059611);
    }
    
    public TextureProvider xz() {
        return class7.textureProvider;
    }
    
    static String zp(String string, final Widget widget) {
        if (string.indexOf("%") != -1) {
            for (int i = 1; i <= 5; ++i) {
                while (true) {
                    final int index = string.indexOf("%" + i);
                    if (-1 == index) {
                        break;
                    }
                    final String substring = string.substring(0, index);
                    final int method478 = ArchiveLoader.method478(widget, i - 1, 1696113134);
                    String string2;
                    if (method478 < -496697634) {
                        string2 = Integer.toString(method478);
                    }
                    else {
                        string2 = "*";
                    }
                    string = substring + string2 + string.substring(index + 2);
                }
            }
        }
        return string;
    }
    
    @Override
    protected final void fz(final boolean b) {
        boolean b2 = false;
        Label_0192: {
            try {
                if (926096579 * class297.musicPlayerStatus == 2) {
                    if (RouteStrategy.musicTrack == null) {
                        RouteStrategy.musicTrack = MusicTrack.readTrack(class297.musicTrackArchive, class379.musicTrackGroupId * -642628721, VarpDefinition.musicTrackFileId * -69327413);
                        if (RouteStrategy.musicTrack == null) {
                            b2 = false;
                            break Label_0192;
                        }
                    }
                    if (null == class297.soundCache) {
                        class297.soundCache = new SoundCache(class297.soundEffectsArchive, class297.musicSamplesArchive);
                    }
                    if (class475.midiPcmStream.loadMusicTrack(RouteStrategy.musicTrack, class297.musicPatchesArchive, class297.soundCache, 22050, -1020516025)) {
                        class475.midiPcmStream.bw(864855702);
                        class475.midiPcmStream.setPcmStreamVolume(-280777997 * class100.musicTrackVolume, (byte)19);
                        class475.midiPcmStream.setMusicTrack(RouteStrategy.musicTrack, class120.musicTrackBoolean, -972368442);
                        class297.musicPlayerStatus = 0;
                        RouteStrategy.musicTrack = null;
                        class297.soundCache = null;
                        class297.musicTrackArchive = null;
                        b2 = true;
                        break Label_0192;
                    }
                }
            }
            catch (Exception ex) {
                ex.printStackTrace();
                class475.midiPcmStream.clear((byte)(-51));
                class297.musicPlayerStatus = 0;
                RouteStrategy.musicTrack = null;
                class297.soundCache = null;
                class297.musicTrackArchive = null;
            }
            b2 = false;
        }
        if (b2 && Client.playingJingle && null != class28.pcmPlayer0) {
            class28.pcmPlayer0.run(-1087705052);
        }
        if ((-1781326977 * Client.gameState == 10 || -1275976559 * Client.gameState == 20 || 30 == Client.gameState * -1443850929) && -3223439394100928671L * Client.field581 != 0L && class96.clockNow(1058136303) > -3223439394100928671L * Client.field581) {
            Decimator.setWindowedMode(GrandExchangeOfferNameComparator.getWindowedMode(1336769651), (byte)(-83));
        }
        if (b) {
            for (int i = 0; i < -1931945868; ++i) {
                Client.field573[i] = true;
            }
        }
        if (-1275976559 * Client.gameState == 0) {
            GameEngine.hr(this, 1158424865 * Login.Login_loadingPercent, Login.Login_loadingText, b, -1958357614);
        }
        else if (5 == Client.gameState * 1611574876) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, 927624824);
        }
        else if (Client.gameState * -1629355882 == 10 || 1301591583 * Client.gameState == 11) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -908085193);
        }
        else if (381921724 * Client.gameState == 20) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, 1645177949);
        }
        else if (Client.gameState * -1275976559 == 50) {
            class6.drawTitle(class137.fontBold12, Language.fontPlain11, WallDecoration.fontPlain12, -728493521);
        }
        else if (25 == Client.gameState * -1275976559) {
            if (1 == Client.field489 * -1097191055) {
                if (Client.field427 * -215929647 > Client.field593 * 817023789) {
                    Client.field593 = Client.field427 * -1916370382;
                }
                WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + (Client.field593 * -2098483510 - Client.field427 * 2088419538) / (Client.field593 * 1028361499) + "%" + class96.au, false, 1516834002);
            }
            else if (-2139010133 * Client.field489 == 2) {
                if (Client.field425 * 1372828241 > Client.field426 * 1124460124) {
                    Client.field426 = 1072852375 * Client.field425;
                }
                WorldMapDecoration.drawLoadingMessage(Strings.ao + class96.aq + class96.ac + ((Client.field426 * 498448830 - -506887337 * Client.field425) / (Client.field426 * 1233759319) - 888593705) + "%" + class96.au, false, -2007284391);
            }
            else {
                WorldMapDecoration.drawLoadingMessage(Strings.ao, false, -1704588756);
            }
        }
        else if (Client.gameState * -1453983652 == 30) {
            this.drawLoggedIn(1983773964);
        }
        else if (40 == Client.gameState * -1275976559) {
            WorldMapDecoration.drawLoadingMessage(Strings.ax + class96.aq + Strings.ai, false, 361982760);
        }
        else if (-1822126405 == Client.gameState * -1275976559) {
            WorldMapDecoration.drawLoadingMessage(Strings.gi, false, 294405425);
        }
        if (952895413 * Client.gameState == 30 && 0 == Client.gameDrawingMode * -2055186485 && !b && !Client.isResizable) {
            for (int j = 0; j < -1911442825 * Client.rootWidgetCount; ++j) {
                if (Client.field574[j]) {
                    RouteStrategy.rasterProvider.draw(Client.rootWidgetXs[j], Client.rootWidgetYs[j], Client.rootWidgetWidths[j], Client.rootWidgetHeights[j], 1005060372);
                    Client.field574[j] = false;
                }
            }
        }
        else if (Client.gameState * -1275976559 > 0) {
            RouteStrategy.rasterProvider.drawFull(0, 0, 969809065);
            for (int k = 0; k < Client.rootWidgetCount * 85172503; ++k) {
                Client.field574[k] = false;
            }
        }
    }
    
    public static void gs(final int[] array, final int n, final int n2, final int n3, final int n4) {
        Scene.Scene_buildVisiblityMap(array, n, n2, n3, n4);
    }
    
    public LoginType cq() {
        return class70.loginType;
    }
    
    final void rk() {
        if (Client.rebootTimer * -1496573241 > 1) {
            Client.rebootTimer -= 1317177079;
        }
        if (Client.logoutTimer * 1705142349 > 0) {
            Client.logoutTimer += 100200315;
        }
        if (Client.hadNetworkError) {
            Client.hadNetworkError = false;
            class349.method1918(709882847);
            return;
        }
        if (!Client.isMenuOpen) {
            class156.addCancelMenuEntry(-742935767);
        }
        for (int n = 0; n < 100 && this.method391(Client.packetWriter, -1600189087); ++n) {}
        if (30 != -1275976559 * Client.gameState) {
            return;
        }
        while (null != class36.reflectionChecks.up()) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2549, Client.packetWriter.isaacCipher, (short)(-29016));
            packetBufferNode.packetBuffer.bf(0, (byte)63);
            final int n2 = packetBufferNode.packetBuffer.at * -1633313603;
            class432.vmethod7769(packetBufferNode.packetBuffer, (byte)(-53));
            packetBufferNode.packetBuffer.cu(-1633313603 * packetBufferNode.packetBuffer.at - n2, -911735450);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (Client.timer.field3670) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2552, Client.packetWriter.isaacCipher, (short)(-9827));
            packetBufferNode2.packetBuffer.bf(0, (byte)41);
            final int n3 = -1633313603 * packetBufferNode2.packetBuffer.at;
            Client.timer.write(packetBufferNode2.packetBuffer, -202270354);
            packetBufferNode2.packetBuffer.cu(-1633313603 * packetBufferNode2.packetBuffer.at - n3, -223349853);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
            Timer.ct(Client.timer, (byte)13);
        }
        synchronized (UserComparator6.mouseRecorder.lock) {
            if (Client.lockMouseRecorder) {
                if (0 != -1222491879 * MouseHandler.MouseHandler_lastButton || 535437747 * UserComparator6.mouseRecorder.index >= 40) {
                    PacketBufferNode packetBufferNode3 = null;
                    int n4 = 0;
                    int n5 = 0;
                    int n6 = 0;
                    int n7 = 0;
                    for (int n8 = 0; n8 < 535437747 * UserComparator6.mouseRecorder.index && (packetBufferNode3 == null || -1633313603 * packetBufferNode3.packetBuffer.at - n4 < 246); ++n8) {
                        n5 = n8;
                        int n9 = UserComparator6.mouseRecorder.ys[n8];
                        if (n9 < -1) {
                            n9 = -1;
                        }
                        else if (n9 > 65534) {
                            n9 = 65534;
                        }
                        int n10 = UserComparator6.mouseRecorder.xs[n8];
                        if (n10 < -1) {
                            n10 = -1;
                        }
                        else if (n10 > 65534) {
                            n10 = 65534;
                        }
                        if (Client.lastMouseRecordX * -751176573 != n10 || Client.lastMouseRecordY * -2076298705 != n9) {
                            if (packetBufferNode3 == null) {
                                packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2559, Client.packetWriter.isaacCipher, (short)(-31514));
                                packetBufferNode3.packetBuffer.bf(0, (byte)5);
                                n4 = packetBufferNode3.packetBuffer.at * -1633313603;
                                final PacketBuffer packetBuffer = packetBufferNode3.packetBuffer;
                                packetBuffer.at += 1262255402;
                                n6 = 0;
                                n7 = 0;
                            }
                            int n11;
                            int n12;
                            int n13;
                            if (-1L != Client.lastMouseRecordTime * 8511124946921102523L) {
                                n11 = n10 - -751176573 * Client.lastMouseRecordX;
                                n12 = n9 - -2076298705 * Client.lastMouseRecordY;
                                n13 = (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) / 20L);
                                n6 += (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) % 20L);
                            }
                            else {
                                n11 = n10;
                                n12 = n9;
                                n13 = Integer.MAX_VALUE;
                            }
                            Client.lastMouseRecordX = -791348693 * n10;
                            Client.lastMouseRecordY = 824333519 * n9;
                            if (n13 < 8 && n11 >= -32 && n11 <= 31 && n12 >= -32 && n12 <= 31) {
                                n11 += 32;
                                n12 += 32;
                                packetBufferNode3.packetBuffer.cq((n13 << 12) + (n11 << 6) + n12, (byte)(-17));
                            }
                            else if (n13 < 32 && n11 >= -128 && n11 <= 127 && n12 >= -128 && n12 <= 127) {
                                n11 += 128;
                                n12 += 128;
                                packetBufferNode3.packetBuffer.bf(n13 + 128, (byte)109);
                                packetBufferNode3.packetBuffer.cq((n11 << 8) + n12, (byte)(-73));
                            }
                            else if (n13 < 32) {
                                packetBufferNode3.packetBuffer.bf(n13 + 192, (byte)60);
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            else {
                                packetBufferNode3.packetBuffer.cq((n13 & 0x1FFF) + 57344, (byte)(-26));
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            ++n7;
                            Client.lastMouseRecordTime = 2560228884295272563L * UserComparator6.mouseRecorder.millis[n8];
                        }
                    }
                    if (null != packetBufferNode3) {
                        packetBufferNode3.packetBuffer.cu(packetBufferNode3.packetBuffer.at * -1633313603 - n4, 26348408);
                        final int n14 = packetBufferNode3.packetBuffer.at * -1633313603;
                        packetBufferNode3.packetBuffer.at = -1516355947 * n4;
                        packetBufferNode3.packetBuffer.bf(n6 / n7, (byte)15);
                        packetBufferNode3.packetBuffer.bf(n6 % n7, (byte)21);
                        packetBufferNode3.packetBuffer.at = -1516355947 * n14;
                        Client.packetWriter.addNode(packetBufferNode3, 414135591);
                    }
                    if (n5 >= UserComparator6.mouseRecorder.index * 535437747) {
                        UserComparator6.mouseRecorder.index = 0;
                    }
                    else {
                        final MouseRecorder mouseRecorder = UserComparator6.mouseRecorder;
                        mouseRecorder.index -= -1762036357 * n5;
                        System.arraycopy(UserComparator6.mouseRecorder.xs, n5, UserComparator6.mouseRecorder.xs, 0, UserComparator6.mouseRecorder.index * 535437747);
                        System.arraycopy(UserComparator6.mouseRecorder.ys, n5, UserComparator6.mouseRecorder.ys, 0, 535437747 * UserComparator6.mouseRecorder.index);
                        System.arraycopy(UserComparator6.mouseRecorder.millis, n5, UserComparator6.mouseRecorder.millis, 0, UserComparator6.mouseRecorder.index * 535437747);
                    }
                }
            }
            else {
                UserComparator6.mouseRecorder.index = 0;
            }
        }
        if (1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && 4 == MouseHandler.MouseHandler_lastButton * -1222491879) || MouseHandler.MouseHandler_lastButton * -1222491879 == 2) {
            long n15 = MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L - 2243792022961482123L * Client.mouseLastLastPressedTimeMillis;
            if (n15 > 32767L) {
                n15 = 32767L;
            }
            Client.mouseLastLastPressedTimeMillis = 5332065808650620587L * MouseHandler.MouseHandler_lastPressedTimeMillis;
            int n16 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
            if (n16 < 0) {
                n16 = 0;
            }
            else if (n16 > 1658005443 * class262.canvasHeight) {
                n16 = class262.canvasHeight * 1658005443;
            }
            int n17 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            if (n17 < 0) {
                n17 = 0;
            }
            else if (n17 > -1687260435 * Client.aj) {
                n17 = -1687260435 * Client.aj;
            }
            final int n18 = (int)n15;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.field2477, Client.packetWriter.isaacCipher, (short)(-2207));
            packetBufferNode4.packetBuffer.cq(((2 == MouseHandler.MouseHandler_lastButton * -1222491879) ? 1 : 0) + (n18 << 1), (byte)4);
            packetBufferNode4.packetBuffer.cq(n17, (byte)(-62));
            packetBufferNode4.packetBuffer.cq(n16, (byte)(-32));
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (Client.keyHandlerInstance.pressedKeysCount * 1888573011 > 0) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2469, Client.packetWriter.isaacCipher, (short)(-12394));
            packetBufferNode5.packetBuffer.cq(0, (byte)77);
            final int n19 = -1633313603 * packetBufferNode5.packetBuffer.at;
            final long clockNow = class96.clockNow(-135749632);
            for (int i = 0; i < 1888573011 * Client.keyHandlerInstance.pressedKeysCount; ++i) {
                long n20 = clockNow - 8736327498043665535L * Client.timeOfPreviousKeyPress;
                if (n20 > 16777215L) {
                    n20 = 16777215L;
                }
                Client.timeOfPreviousKeyPress = clockNow * 4061967902176514943L;
                packetBufferNode5.packetBuffer.ez((int)n20, -461946796);
                packetBufferNode5.packetBuffer.bf(Client.keyHandlerInstance.field1856[i], (byte)33);
            }
            packetBufferNode5.packetBuffer.ca(packetBufferNode5.packetBuffer.at * -1633313603 - n19, -927467495);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (Client.packetIndicator * -1504372859 > 0) {
            Client.packetIndicator -= 1691830605;
        }
        if (Client.keyHandlerInstance.getKeyPressed(96, 906394845) || Client.keyHandlerInstance.getKeyPressed(97, 45973230) || Client.keyHandlerInstance.getKeyPressed(98, -480373110) || Client.keyHandlerInstance.getKeyPressed(99, -1929448793)) {
            Client.emitPackets = true;
        }
        if (Client.emitPackets && Client.packetIndicator * -1504372859 <= 0) {
            Client.packetIndicator = -523126268;
            Client.emitPackets = false;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2541, Client.packetWriter.isaacCipher, (short)(-20385));
            packetBufferNode6.packetBuffer.cq(Client.camAngleY * 704283033, (byte)106);
            packetBufferNode6.packetBuffer.cq(-954734641 * Client.camAngleX, (byte)76);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (AbstractByteArrayCopier.hasFocus && !Client.hadFocus) {
            Client.hadFocus = true;
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-6730));
            packetBufferNode7.packetBuffer.bf(1, (byte)119);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (!AbstractByteArrayCopier.hasFocus && Client.hadFocus) {
            Client.hadFocus = false;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-32232));
            packetBufferNode8.packetBuffer.bf(0, (byte)47);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (null != class126.worldMap) {
            class126.worldMap.ft(477184733);
        }
        Coord.method1686(-943897331);
        WorldMapElement.method988((byte)1);
        UserComparator8.method689((byte)(-83));
        if (30 != Client.gameState * -1275976559) {
            return;
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn.endCycle * 1457211081 > 0) {
                final PendingSpawn pendingSpawn2 = pendingSpawn;
                pendingSpawn2.endCycle -= 376812409;
            }
            if (0 == pendingSpawn.endCycle * 1457211081) {
                if (pendingSpawn.objectId * 637177597 < 0 || class195.method1053(637177597 * pendingSpawn.objectId, pendingSpawn.field922 * 1599541283, 1098947799)) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, 68300005 * pendingSpawn.x, 800888185 * pendingSpawn.y, pendingSpawn.objectId * 637177597, -1665966001 * pendingSpawn.field927, pendingSpawn.field922 * 1599541283, pendingSpawn.field931 * 1699404385, -2144034708);
                    pendingSpawn.hw();
                }
            }
            else {
                if (-536117851 * pendingSpawn.startCycle > 0) {
                    final PendingSpawn pendingSpawn3 = pendingSpawn;
                    pendingSpawn3.startCycle -= 237969965;
                }
                if (-536117851 * pendingSpawn.startCycle == 0 && 68300005 * pendingSpawn.x >= 1 && 800888185 * pendingSpawn.y >= 1 && pendingSpawn.x * 68300005 <= 102 && 800888185 * pendingSpawn.y <= 102 && (pendingSpawn.id * 552715177 < 0 || class195.method1053(pendingSpawn.id * 552715177, pendingSpawn.objectType * -1966402261, 1952640532))) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, pendingSpawn.x * 68300005, pendingSpawn.y * 800888185, 552715177 * pendingSpawn.id, 120493739 * pendingSpawn.rotation, pendingSpawn.objectType * -1966402261, 1699404385 * pendingSpawn.field931, -2134013965);
                    pendingSpawn.startCycle = -237969965;
                    if (pendingSpawn.objectId * 637177597 == 552715177 * pendingSpawn.id && -1 == pendingSpawn.objectId * 637177597) {
                        pendingSpawn.hw();
                    }
                    else if (637177597 * pendingSpawn.objectId == pendingSpawn.id * 552715177 && -1665966001 * pendingSpawn.field927 == pendingSpawn.rotation * 120493739 && -1966402261 * pendingSpawn.objectType == pendingSpawn.field922 * 1599541283) {
                        pendingSpawn.hw();
                    }
                }
            }
        }
        for (int j = 0; j < Client.soundEffectCount * -297150195; ++j) {
            final int[] queuedSoundEffectDelays = Client.queuedSoundEffectDelays;
            final int n21 = j;
            --queuedSoundEffectDelays[n21];
            if (Client.queuedSoundEffectDelays[j] < -10) {
                Client.soundEffectCount -= 831233477;
                for (int k = j; k < Client.soundEffectCount * -297150195; ++k) {
                    Client.soundEffectIds[k] = Client.soundEffectIds[1 + k];
                    Client.soundEffects[k] = Client.soundEffects[k + 1];
                    Client.queuedSoundEffectLoops[k] = Client.queuedSoundEffectLoops[1 + k];
                    Client.queuedSoundEffectDelays[k] = Client.queuedSoundEffectDelays[k + 1];
                    Client.soundLocations[k] = Client.soundLocations[k + 1];
                }
                --j;
            }
            else {
                SoundEffect soundEffect = Client.soundEffects[j];
                if (null == soundEffect) {
                    final SoundEffect soundEffect2 = null;
                    soundEffect = SoundEffect.readSoundEffect(class426.field3811, Client.soundEffectIds[j], 0);
                    if (soundEffect == null) {
                        continue;
                    }
                    final int[] queuedSoundEffectDelays2 = Client.queuedSoundEffectDelays;
                    final int n22 = j;
                    queuedSoundEffectDelays2[n22] += soundEffect.calculateDelay();
                    Client.soundEffects[j] = soundEffect;
                }
                if (Client.queuedSoundEffectDelays[j] < 0) {
                    int setUsernameToRemember;
                    if (Client.soundLocations[j] != 0) {
                        final int n23 = (Client.soundLocations[j] & 0xFF) * 128;
                        int n24 = 128 * (Client.soundLocations[j] >> 16 & 0xFF) + 64 - MusicPatchNode.localPlayer.br * 1144428983;
                        if (n24 < 0) {
                            n24 = -n24;
                        }
                        int n25 = 64 + (Client.soundLocations[j] >> 8 & 0xFF) * 128 - -411750205 * MusicPatchNode.localPlayer.ep;
                        if (n25 < 0) {
                            n25 = -n25;
                        }
                        int n26 = n24 + n25 - 128;
                        if (n26 > n23) {
                            Client.queuedSoundEffectDelays[j] = -100;
                            continue;
                        }
                        if (n26 < 0) {
                            n26 = 0;
                        }
                        setUsernameToRemember = (n23 - n26) * class20.clientPreferences.method573(-1958356182) / n23;
                    }
                    else {
                        setUsernameToRemember = ClientPreferences.setUsernameToRemember(class20.clientPreferences, 1933662938);
                    }
                    if (setUsernameToRemember > 0) {
                        final RawPcmStream rawPcmStream = RawPcmStream.createRawPcmStream(soundEffect.toRawSound().resample(WorldMapSectionType.decimator), 100, setUsernameToRemember);
                        rawPcmStream.setNumLoops(Client.queuedSoundEffectLoops[j] - 1);
                        class130.pcmStreamMixer.addSubStream(rawPcmStream);
                    }
                    Client.queuedSoundEffectDelays[j] = -100;
                }
            }
        }
        if (Client.playingJingle && !class4.method8(-1851919729)) {
            if (ClientPreferences.xp(class20.clientPreferences, 529721834) != 0 && -1 != Client.currentTrackGroupId * 1976903761) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, ClientPreferences.xp(class20.clientPreferences, -522739368), false, -2102379022);
            }
            Client.playingJingle = false;
        }
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.field1136 -= 18974871;
        if (997558489 * Client.packetWriter.field1136 > 750) {
            class349.method1918(709882847);
            return;
        }
        class207.method1162(-1316166006);
        EnumComposition.method1013(-1074260583);
        final int[] players_indices = Players.Players_indices;
        for (int l = 0; l < -2010934433 * Players.Players_count; ++l) {
            final Player player = Client.players[players_indices[l]];
            if (null != player && player.dt * -536830723 > 0) {
                final Player player2 = player;
                player2.dt -= 1655791701;
                if (player.dt * -536830723 == 0) {
                    player.bw = null;
                }
            }
        }
        for (int n27 = 0; n27 < 265474485 * Client.npcCount; ++n27) {
            final NPC npc = Client.npcs[Client.npcIndices[n27]];
            if (npc != null && -536830723 * npc.dt > 0) {
                final NPC npc2 = npc;
                npc2.dt -= 1655791701;
                if (npc.dt * -536830723 == 0) {
                    npc.bw = null;
                }
            }
        }
        Client.field432 -= 603147329;
        if (-1306273505 * Client.mouseCrossColor != 0) {
            Client.mouseCrossState += 2130385748;
            if (Client.mouseCrossState * 1513573489 >= 400) {
                Client.mouseCrossColor = 0;
            }
        }
        final Widget mousedOverWidgetIf1 = MidiPcmStream.mousedOverWidgetIf1;
        final Widget field1274 = class130.field1274;
        MidiPcmStream.mousedOverWidgetIf1 = null;
        class130.field1274 = null;
        Client.draggedOnWidget = null;
        Client.field622 = false;
        Client.field540 = false;
        Client.field355 = 0;
        while (class207.mt(Client.keyHandlerInstance, 372282165) && Client.field355 * -1685179677 < 128) {
            if (324465533 * Client.staffModLevel >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -816350999) && 66 == 546317845 * Client.keyHandlerInstance.field1867) {
                final StringBuilder sb = new StringBuilder();
                for (final Message message : Messages.Messages_hashTable) {
                    if (null != message.prefix && !message.prefix.isEmpty()) {
                        sb.append(message.prefix).append(':');
                    }
                    sb.append(message.sender).append('\n');
                }
                ScriptFrame.client.ao(sb.toString(), (byte)(-41));
            }
            else {
                if (Client.oculusOrbState * 986256295 == 1 && Client.keyHandlerInstance.field1866 > '\0') {
                    continue;
                }
                Client.field424[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1867 * 546317845;
                Client.field592[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1866;
                Client.field355 += 703505099;
            }
        }
        if (Client.staffModLevel * 324465533 >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -944934157) && Client.keyHandlerInstance.getKeyPressed(81, 686741332) && -121753353 * Client.mouseWheelRotation != 0) {
            int n28 = -1900490645 * MusicPatchNode.localPlayer.plane - Client.mouseWheelRotation * -121753353;
            if (n28 < 0) {
                n28 = 0;
            }
            else if (n28 > 3) {
                n28 = 3;
            }
            if (MusicPatchNode.localPlayer.plane * -1900490645 != n28) {
                final int n29 = WorldMapData_0.baseX * -1232093375 + MusicPatchNode.localPlayer.cf[0];
                final int n30 = 827352769 * GameObject.baseY + MusicPatchNode.localPlayer.dy[0];
                final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-2912));
                packetBufferNode9.packetBuffer.dy(0, (byte)50);
                packetBufferNode9.packetBuffer.bu(n29, (byte)65);
                packetBufferNode9.packetBuffer.eb(n28, (byte)(-79));
                packetBufferNode9.packetBuffer.ds(n30, -1764501036);
                Client.packetWriter.addNode(packetBufferNode9, 414135591);
            }
            Client.mouseWheelRotation = 0;
        }
        if (1 == MouseHandler.MouseHandler_lastButton * -1222491879) {
            Client.field590.method1138((byte)68);
        }
        if (-896157613 * Client.rootInterface != -1) {
            ReflectionCheck.updateRootInterface(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, 1658005443 * class262.canvasHeight, 0, 0, -631543188);
        }
        Client.cycleCntr -= 1340429835;
        while (true) {
            final ScriptEvent scriptEvent = (ScriptEvent)Client.field567.removeLast();
            if (scriptEvent == null) {
                break;
            }
            final Widget dragTarget = scriptEvent.dragTarget;
            if (55577617 * dragTarget.childIndex >= 0) {
                final Widget vmethod3380 = class165.vmethod3380(dragTarget.parentId * 913615679, (byte)5);
                if (null == vmethod3380 || null == vmethod3380.children || dragTarget.childIndex * 55577617 >= vmethod3380.children.length) {
                    continue;
                }
                if (dragTarget != vmethod3380.children[dragTarget.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent, (byte)5);
        }
        while (true) {
            final ScriptEvent scriptEvent2 = (ScriptEvent)Client.field568.removeLast();
            if (scriptEvent2 == null) {
                break;
            }
            final Widget dragTarget2 = scriptEvent2.dragTarget;
            if (55577617 * dragTarget2.childIndex >= 0) {
                final Widget vmethod3381 = class165.vmethod3380(dragTarget2.parentId * 913615679, (byte)5);
                if (vmethod3381 == null || vmethod3381.children == null || 55577617 * dragTarget2.childIndex >= vmethod3381.children.length) {
                    continue;
                }
                if (dragTarget2 != vmethod3381.children[dragTarget2.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent2, (byte)(-2));
        }
        while (true) {
            final ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.removeLast();
            if (null == scriptEvent3) {
                break;
            }
            final Widget dragTarget3 = scriptEvent3.dragTarget;
            if (dragTarget3.childIndex * 55577617 >= 0) {
                final Widget vmethod3382 = class165.vmethod3380(dragTarget3.parentId * 913615679, (byte)5);
                if (vmethod3382 == null || vmethod3382.children == null || dragTarget3.childIndex * 55577617 >= vmethod3382.children.length) {
                    continue;
                }
                if (dragTarget3 != vmethod3382.children[dragTarget3.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent3, (byte)(-16));
        }
        while (true) {
            final class206 class206 = (class206)Client.field569.removeLast();
            if (class206 == null) {
                break;
            }
            FriendsList.method2138(class206, 571554460);
        }
        this.menu((byte)12);
        class36.method198((byte)(-8));
        if (Client.clickedWidget != null) {
            this.method389((byte)(-49));
        }
        if (Scene.shouldSendWalk()) {
            final int scene_selectedX = Scene.Scene_selectedX;
            final int scene_selectedY = Scene.Scene_selectedY;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.field2523, Client.packetWriter.isaacCipher, (short)(-31437));
            packetBufferNode10.packetBuffer.bf(5, (byte)124);
            packetBufferNode10.packetBuffer.ds(GameObject.baseY * 827352769 + scene_selectedY, -2018079357);
            Buffer.ap(packetBufferNode10.packetBuffer, -1232093375 * WorldMapData_0.baseX + scene_selectedX, (byte)19);
            packetBufferNode10.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, -2057215192) ? (Client.keyHandlerInstance.getKeyPressed(81, -446876109) ? 2 : 1) : 0, -1104581632);
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
            Scene.method1264();
            Client.mouseCrossX = MouseHandler.MouseHandler_lastPressedX * -1884483333;
            Client.mouseCrossY = 2130738719 * MouseHandler.MouseHandler_lastPressedY;
            Client.mouseCrossColor = -1453825313;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * scene_selectedX;
            Client.destinationY = 875414437 * scene_selectedY;
        }
        if (mousedOverWidgetIf1 != MidiPcmStream.mousedOverWidgetIf1) {
            if (mousedOverWidgetIf1 != null) {
                class144.invalidateWidget(mousedOverWidgetIf1, -2132148960);
            }
            if (null != MidiPcmStream.mousedOverWidgetIf1) {
                class144.invalidateWidget(MidiPcmStream.mousedOverWidgetIf1, -1212563840);
            }
        }
        if (class130.field1274 != field1274 && 1239377975 * Client.field515 == 215597333 * Client.field514) {
            if (null != field1274) {
                class144.invalidateWidget(field1274, -832304529);
            }
            if (class130.field1274 != null) {
                class144.invalidateWidget(class130.field1274, -2031974255);
            }
        }
        if (null != class130.field1274) {
            if (215597333 * Client.field514 < 1239377975 * Client.field515) {
                Client.field514 -= 1411611075;
                if (Client.field514 * 215597333 == Client.field515 * 1239377975) {
                    class144.invalidateWidget(class130.field1274, -1960892187);
                }
            }
        }
        else if (Client.field514 * 215597333 > 0) {
            Client.field514 += 1411611075;
        }
        if (Client.oculusOrbState * 986256295 == 0) {
            final int n31 = 1144428983 * MusicPatchNode.localPlayer.br;
            final int n32 = MusicPatchNode.localPlayer.ep * -411750205;
            if (-1958669353 * class33.oculusOrbFocalPointX - n31 < -500 || class33.oculusOrbFocalPointX * -1958669353 - n31 > 500 || class144.oculusOrbFocalPointY * -365969735 - n32 < -500 || -365969735 * class144.oculusOrbFocalPointY - n32 > 500) {
                class33.oculusOrbFocalPointX = n31 * 1293848551;
                class144.oculusOrbFocalPointY = 892004233 * n32;
            }
            if (n31 != class33.oculusOrbFocalPointX * -1958669353) {
                class33.oculusOrbFocalPointX += 1293848551 * ((n31 - class33.oculusOrbFocalPointX * -1958669353) / 16);
            }
            if (class144.oculusOrbFocalPointY * -365969735 != n32) {
                class144.oculusOrbFocalPointY += 892004233 * ((n32 - class144.oculusOrbFocalPointY * -365969735) / 16);
            }
            final int n33 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
            final int n34 = class144.oculusOrbFocalPointY * -365969735 >> 7;
            final int tileHeight = class147.getTileHeight(class33.oculusOrbFocalPointX * -1958669353, -365969735 * class144.oculusOrbFocalPointY, -1727408401 * GameEngine.Client_plane, (byte)(-33));
            int n35 = 0;
            if (n33 > 3 && n34 > 3 && n33 < 100 && n34 < 100) {
                for (int n36 = n33 - 4; n36 <= n33 + 4; ++n36) {
                    for (int n37 = n34 - 4; n37 <= 4 + n34; ++n37) {
                        int n38 = -1727408401 * GameEngine.Client_plane;
                        if (n38 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n36][n37] & 0x2)) {
                            ++n38;
                        }
                        final int n39 = tileHeight - Tiles.Tiles_heights[n38][n36][n37];
                        if (n39 > n35) {
                            n35 = n39;
                        }
                    }
                }
            }
            int n40 = n35 * 192;
            if (n40 > 98048) {
                n40 = 98048;
            }
            if (n40 < 32768) {
                n40 = 32768;
            }
            if (n40 > 205350563 * Client.field456) {
                Client.field456 += (n40 - Client.field456 * 205350563) / 24 * 800423179;
            }
            else if (n40 < 205350563 * Client.field456) {
                Client.field456 += 800423179 * ((n40 - 205350563 * Client.field456) / 80);
            }
            class96.field1064 = (class147.getTileHeight(MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, -1727408401 * GameEngine.Client_plane, (byte)(-22)) - Client.camFollowHeight * 394960243) * -1138369095;
        }
        else if (1 == Client.oculusOrbState * 986256295) {
            class324.method1838(1521576132);
            int n41 = -1;
            if (Client.keyHandlerInstance.getKeyPressed(33, -1488273010)) {
                n41 = 0;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(49, -847031420)) {
                n41 = 1024;
            }
            if (Client.keyHandlerInstance.getKeyPressed(48, 262792472)) {
                if (n41 == 0) {
                    n41 = 1792;
                }
                else if (1024 == n41) {
                    n41 = 1280;
                }
                else {
                    n41 = 1536;
                }
            }
            else if (Client.keyHandlerInstance.getKeyPressed(50, -34976885)) {
                if (n41 == 0) {
                    n41 = 256;
                }
                else if (1024 == n41) {
                    n41 = 768;
                }
                else {
                    n41 = 512;
                }
            }
            int n42 = 0;
            if (Client.keyHandlerInstance.getKeyPressed(35, 30128821)) {
                n42 = -1;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(51, -986620625)) {
                n42 = 1;
            }
            int n43 = 0;
            if (n41 >= 0 || n42 != 0) {
                n43 = (Client.keyHandlerInstance.getKeyPressed(81, -1789569851) ? (Client.oculusOrbSlowedSpeed * 519949591) : (Client.oculusOrbNormalSpeed * 1101365113)) * 16;
                Client.field595 = n41 * -1988002169;
                Client.field398 = 818868517 * n42;
            }
            if (Client.field644 * -1277774705 < n43) {
                Client.field644 += n43 / 8 * 1574169199;
                if (Client.field644 * -1277774705 > n43) {
                    Client.field644 = n43 * 1574169199;
                }
            }
            else if (Client.field644 * -1277774705 > n43) {
                Client.field644 = 1384929543 * Client.field644 / 10 * 1574169199;
            }
            if (Client.field644 * -1277774705 > 0) {
                final int n44 = Client.field644 * -1277774705 / 16;
                if (1382999863 * Client.field595 >= 0) {
                    final int n45 = Client.field595 * 1382999863 - class125.cameraYaw * -1010818347 & 0x7FF;
                    final int n46 = Rasterizer3D.Rasterizer3D_sine[n45];
                    final int n47 = Rasterizer3D.Rasterizer3D_cosine[n45];
                    class33.oculusOrbFocalPointX += n44 * n46 / 65536 * 1293848551;
                    class144.oculusOrbFocalPointY += 892004233 * (n47 * n44 / 65536);
                }
                if (-168443219 * Client.field398 != 0) {
                    class96.field1064 += Client.field398 * -168443219 * n44 * -1138369095;
                    if (470489225 * class96.field1064 > 0) {
                        class96.field1064 = 0;
                    }
                }
            }
            else {
                Client.field595 = 1988002169;
                Client.field398 = -818868517;
            }
            if (Client.keyHandlerInstance.getKeyPressed(13, -228737118)) {
                Canvas.method92((byte)0);
            }
        }
        if (MouseHandler.MouseHandler_currentButton * 114417019 == 4 && class473.mouseCam) {
            final int n48 = MouseHandler.MouseHandler_y * -1224153235 - 332197605 * Client.mouseCamClickedY;
            Client.camAngleDX = 1932462086 * n48;
            Client.mouseCamClickedY = ((n48 == -1 || n48 == 1) ? (MouseHandler.MouseHandler_y * -1224153235) : ((332197605 * Client.mouseCamClickedY + -1224153235 * MouseHandler.MouseHandler_y) / 2)) * 1302863597;
            final int n49 = Client.mouseCamClickedX * -1491948821 - -2063363905 * MouseHandler.MouseHandler_x;
            Client.camAngleDY = n49 * -503524914;
            Client.mouseCamClickedX = ((-1 == n49 || n49 == 1) ? (MouseHandler.MouseHandler_x * -2063363905) : ((-1491948821 * Client.mouseCamClickedX + MouseHandler.MouseHandler_x * -2063363905) / 2)) * -837440061;
        }
        else {
            if (Client.keyHandlerInstance.getKeyPressed(96, 392437275)) {
                Client.camAngleDY += 1895721191 * ((-24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else if (Client.keyHandlerInstance.getKeyPressed(97, -531050007)) {
                Client.camAngleDY += 1895721191 * ((24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else {
                Client.camAngleDY = 1895721191 * (1977625303 * Client.camAngleDY / 2);
            }
            if (Client.keyHandlerInstance.getKeyPressed(98, -221433421)) {
                Client.camAngleDX += (12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(99, -1399722310)) {
                Client.camAngleDX += (-12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else {
                Client.camAngleDX = 1441154731 * Client.camAngleDX / 2 * -1181252605;
            }
            Client.mouseCamClickedY = MouseHandler.MouseHandler_y * 652543465;
            Client.mouseCamClickedX = 1278432381 * MouseHandler.MouseHandler_x;
        }
        Client.camAngleY = 642728617 * (Client.camAngleDY * 1977625303 / 2 + 704283033 * Client.camAngleY & 0x7FF);
        Client.camAngleX += -637026513 * (Client.camAngleDX * 1441154731 / 2);
        if (Client.camAngleX * -954734641 < 128) {
            Client.camAngleX = 64984960;
        }
        if (Client.camAngleX * -954734641 > 383) {
            Client.camAngleX = 831981393;
        }
        if (Client.field598) {
            class1.method5((byte)(-2));
        }
        else if (Client.isCameraLocked) {
            if (!Client.field541) {
                final int n50 = 64 + ObjTypeCustomisation.field1471 * 957080960;
                final int n51 = 958794368 * class123.field1209 + 64;
                class133.method777(n50, class147.getTileHeight(n50, n51, GameEngine.Client_plane * -1727408401, (byte)(-27)) - class16.field54 * -887836823, n51, -1793907848);
            }
            else if (null != Client.field535) {
                class36.cameraX = Client.field535.vmethod2321(2101634681) * -1682679895;
                class297.cameraZ = Client.field535.vmethod2319(2107399454) * 46344275;
                if (Client.field615) {
                    class174.cameraY = Client.field535.vmethod2320((byte)0) * -424093663;
                }
                else {
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, -91399205 * class297.cameraZ, GameEngine.Client_plane * -1727408401, (byte)(-103)) - Client.field535.vmethod2320((byte)0)) * -424093663;
                }
                Client.field535.aa(-351419551);
            }
            if (!Client.field614) {
                final int n52 = FontName.field3970 * 332584320 + 64;
                final int n53 = -1804719232 * MilliClock.field1455 + 64;
                final int n54 = class147.getTileHeight(n52, n53, GameEngine.Client_plane * -1727408401, (byte)(-1)) - ScriptFrame.field343 * 1496735347;
                final int n55 = n52 - -2100544359 * class36.cameraX;
                final int n56 = n54 - 1772923873 * class174.cameraY;
                final int n57 = n53 - -91399205 * class297.cameraZ;
                GraphicsObject.method433((int)(Math.atan2(n56, (int)Math.sqrt(n55 * n55 + n57 * n57)) * 325.9490051269531) & 0x7FF, (int)(Math.atan2(n55, n57) * -325.9490051269531) & 0x7FF, (byte)38);
            }
            else {
                if (null != Client.field604) {
                    WorldMapSectionType.cameraPitch = Client.field604.method2318(-1202466436) * 528729485;
                    WorldMapSectionType.cameraPitch = Math.min(Math.max(WorldMapSectionType.cameraPitch * 1897923909, 128), 383) * 528729485;
                    Client.field604.aa(-158802239);
                }
                if (Client.field617 != null) {
                    class125.cameraYaw = (Client.field617.method2318(-1609320597) & 0x7FF) * -1545206147;
                    Client.field617.aa(2089137880);
                }
            }
        }
        for (int n58 = 0; n58 < 5; ++n58) {
            final int[] cameraShakeCycle = Client.cameraShakeCycle;
            final int n59 = n58;
            ++cameraShakeCycle[n59];
        }
        class373.varcs.clearTransient(1593963648);
        final int value = SecureRandomFuture.get(1918076778);
        final int idleCycles = Client.bq.getIdleCycles((byte)(-115));
        if (value > 15000 && idleCycles > 15000) {
            Client.logoutTimer = 719725026;
            MouseHandler.MouseHandler_idleCycles = 1393311740;
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.IF_BUTTON2, Client.packetWriter.isaacCipher, (short)(-4218)), 414135591);
        }
        World.friendSystem.processFriendUpdates(1673735823);
        for (int n60 = 0; n60 < Client.field649.size(); ++n60) {
            if (class20.method82((int)Client.field649.get(n60), 854271946) != 2) {
                Client.field649.remove(n60);
                --n60;
            }
        }
        final PacketWriter packetWriter2 = Client.packetWriter;
        packetWriter2.pendingWrites -= 1313905755;
        if (1383386157 * Client.packetWriter.pendingWrites > 50) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-27431)), 414135591);
        }
        try {
            PacketWriter.ok(Client.packetWriter, 421941662);
        }
        catch (IOException ex) {
            class349.method1918(709882847);
        }
    }
    
    public static int rk(final int n, final int n2, final int n3, final int n4) {
        return n4 * n + n3 * n2 >> 16;
    }
    
    public WorldMapElement[] ku() {
        return WorldMapElement.WorldMapElement_cached;
    }
    
    public void ku(final rl3 rl3, final int n, final int n2, final int n3, final int n4, final int n5) {
        if (n5 != 255) {
            this.qp(n, n2, n3, n4, 6116423, n5);
            this.qp(n + 1, n2 + 1, n3 - 2, 16, 0, n5);
            this.pd(n + 1, n2 + 18, n3 - 2, n4 - 19, 0, n5);
        }
        else {
            this.mu(n, n2, n3, n4, 6116423);
            this.mu(n + 1, n2 + 1, n3 - 2, 16, 0);
            this.zu(n + 1, n2 + 18, n3 - 2, n4 - 19, 0);
        }
        final Font qk = this.qk();
        qk.me((rl3 == null) ? "Choose Option" : rl3.getTarget(), n + 3, n2 + 14, 6116423, -1);
        final int wk = this.wk();
        final int vw = this.vw();
        final int n6 = Client.menuOptionsCount * 730065501;
        final String[] menuTargets = Client.menuTargets;
        final String[] menuActions = Client.menuActions;
        int n7 = 0;
        for (int i = 0; i < n6; ++i) {
            if (Client.qi[i] == rl3) {
                ++n7;
            }
        }
        int n8 = 0;
        for (int j = 0; j < n6; ++j) {
            if (Client.qi[j] == rl3) {
                final int n9 = n2 + (n7 - 1 - n8++) * 15 + 31;
                String s = menuActions[j];
                if (!menuTargets[j].isEmpty()) {
                    s = s + " " + menuTargets[j];
                }
                if (Client.menuOpcodes[j] == MenuAction.RUNELITE_SUBMENU.getId()) {
                    s += " </col><gt>";
                }
                qk.me(s, n + 3, n9, (wk > n && wk < n3 + n && vw > n9 - 13 && vw < n9 + 3) ? 16776960 : 16777215, 0);
                if (Client.tk == j) {
                    this.ku(Client.ix[Client.tk], Client.uw, Client.io, Client.dg, Client.rc, n5);
                }
            }
        }
    }
    
    public short[][][] jl() {
        return class186.Tiles_underlays;
    }
    
    @Override
    protected final void fb() {
        Client.field581 = (class96.clockNow(-216404003) + 500L) * -1343645632282639199L;
        this.resizeJS(1075317957);
        if (-1 != Client.rootInterface * -896157613) {
            hp(this, true, -726156735);
        }
    }
    
    public void fb(final net.runelite.api.SpritePixels spritePixels) {
        ParamComposition.rightTitleSprite = (SpritePixels)spritePixels;
    }
    
    public static void setUp(final int n, final int n2) {
        for (final MenuEntry menuEntry : ScriptFrame.client.getMenuEntries()) {
            switch (rl1.ms[menuEntry.getType().ordinal()]) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14: {
                    menuEntry.setParam0(menuEntry.getParam0() - n);
                    menuEntry.setParam1(menuEntry.getParam1() - n2);
                    break;
                }
            }
        }
        final int wn = ScriptFrame.client.wn();
        final int xh = ScriptFrame.client.xh();
        if (wn != -1) {
            ScriptFrame.client.kd(wn - n);
            ScriptFrame.client.bq(xh - n2);
        }
    }
    
    @Override
    protected final void setUp(final byte b) {
        try {
            class134.rsOrdinal(new int[] { 20, 260, 10000 }, new int[] { 1000, 100, 500 }, -1476012206);
            FriendsChat.worldPort = ((0 == -1274626977 * Client.gameBuild) ? 43594 : (40000 + -453810525 * Client.worldId)) * -1326916691;
            final int n = -1927102761;
            int n2;
            if (0 == Client.gameBuild * -1274626977) {
                if (b == 52) {
                    throw new IllegalStateException();
                }
                n2 = 443;
            }
            else {
                n2 = 50000 + -453810525 * Client.worldId;
            }
            class127.js5Port = n * n2;
            ItemContainer.currentPort = 518729065 * FriendsChat.worldPort;
            PlayerComposition.field2837 = class315.field2864;
            PlayerComposition.field2828 = class315.field2863;
            WorldMapIcon_0.field2359 = class315.field2865;
            class437.field3825 = class315.field2866;
            class14.urlRequester = new class108(this.field401, 213);
            this.ai((byte)39);
            this.av((byte)62);
            class123.mouseWheel = this.aa(1822835590);
            this.ah((class29)Client.field590, 0, (byte)(-45));
            this.ah((class29)Client.keyHandlerInstance, 1, (byte)41);
            WorldMapID.masterDisk = new ArchiveDisk(255, JagexCache.JagexCache_dat2File, JagexCache.JagexCache_idx255File, 500000);
            class20.clientPreferences = class205.vmethod3951(-739086795);
            this.ay(1981115082);
            final String field167 = ReflectionCheck.field167;
            class31.field90 = this;
            if (field167 != null) {
                if (b == 52) {
                    throw new IllegalStateException();
                }
                class31.field91 = field167;
            }
            Decimator.setWindowedMode(class20.clientPreferences.method577((byte)106), (byte)(-51));
            World.friendSystem = new FriendSystem(class70.loginType);
            this.field529 = new class14("tokenRequest", 1, 1);
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.bm(" + ')');
        }
    }
    
    public int setUp() {
        return Client.field432 * -1795081153;
    }
    
    public int kz() {
        return Client.selectedSpellChildIndex * 145251849;
    }
    
    boolean method386(final PacketWriter packetWriter, final byte b) {
        try {
            if (UserComparator5.friendsChat != null) {
                if (b == 1) {
                    throw new IllegalStateException();
                }
                UserComparator5.friendsChat.method2146(packetWriter.packetBuffer, (byte)(-85));
            }
            Client.field558 = Client.cycleCntr * 235003969;
            GraphicsObject.ClanChat_inClanChat = true;
            packetWriter.field1133 = null;
            return true;
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.jt(" + ')');
        }
    }
    
    public void lu(final int model_transformTempX) {
        Model.Model_transformTempX = model_transformTempX;
    }
    
    public Model ez(final int n) {
        return this.yz(n, null, null);
    }
    
    public Frames dq(final int n) {
        return WorldMapID.getFrames(n, 746118634);
    }
    
    public void eo(final int scene_cameraX) {
        Scene.Scene_cameraX = scene_cameraX;
    }
    
    public static void fj(final Actor actor) {
        if (Client.zn.isEmpty() || Client.zn.get(Client.zn.size() - 1) != actor) {
            Client.zn.add(actor);
        }
    }
    
    public class207 jg() {
        return Client.keyHandlerInstance;
    }
    
    public SoundEffect[] eb() {
        return Client.soundEffects;
    }
    
    public static void eb(final net.runelite.api.Tile tile, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        final Tile tile2 = (Tile)tile;
        final SceneTilePaint li = tile2.li();
        if (li != null) {
            final int rbg = li.getRBG();
            if (rbg != 0) {
                class220.lv(n3, n4, n5 - n3, n6 - n4, rbg);
            }
        }
        else {
            final SceneTileModel bc = tile2.bc();
            if (bc != null) {
                ox(bc, n3, n4, n5, n6);
            }
        }
    }
    
    static void tq(final int n) {
        Client.field581 = 0L;
        if (n >= 2) {
            Client.isResizable = true;
        }
        else {
            Client.isResizable = false;
        }
        if (GrandExchangeOfferNameComparator.getWindowedMode(2046586671) == 1) {
            ScriptFrame.client.al(1294859407, 503, (byte)2);
        }
        else {
            ScriptFrame.client.al(-1749830822, 2160, (byte)2);
        }
        if (-1275976559 * Client.gameState >= 25) {
            class1.method4(557807354);
        }
    }
    
    public static void jy(final Renderable renderable, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final long n9) {
        final DrawCallbacks drawCallbacks = ScriptFrame.client.getDrawCallbacks();
        if (drawCallbacks != null) {
            drawCallbacks.draw((net.runelite.api.Renderable)renderable, n, n2, n3, n4, n5, n6, n7, n8, n9);
        }
        else {
            renderable.draw(n, n2, n3, n4, n5, n6, n7, n8, n9);
        }
    }
    
    public int gq() {
        return Client.localPlayerIndex * -549033243;
    }
    
    static final void rj() {
        if (GraphicsObject.ClanChat_inClanChat) {
            if (UserComparator5.friendsChat != null) {
                UserList.ge(UserComparator5.friendsChat, (byte)(-5));
            }
            for (int i = 0; i < -2010934433 * Players.Players_count; ++i) {
                Client.players[Players.Players_indices[i]].clearIsInFriendsChat(1883003258);
            }
            GraphicsObject.ClanChat_inClanChat = false;
        }
    }
    
    public Decimator xf() {
        return WorldMapSectionType.decimator;
    }
    
    static void xf(final int n, final int n2, final int n3, final int n4) {
        final Widget widgetChild = SoundSystem.getWidgetChild(n, n2, -1240035509);
        if (widgetChild != null && widgetChild.onTargetEnter != null) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widgetChild;
            scriptEvent.args = widgetChild.onTargetEnter;
            HealthBarUpdate.set(scriptEvent, (byte)51);
        }
        Client.selectedSpellItemId = n4 * 35668549;
        Client.isSpellSelected = true;
        Clips.selectedSpellWidget = n * 1511366623;
        Client.selectedSpellChildIndex = -1204907975 * n2;
        SecureRandomFuture.selectedSpellFlags = n3 * 1300386839;
        class144.invalidateWidget(widgetChild, -2089119477);
    }
    
    public void xf(final net.runelite.api.widgets.Widget[] array, final net.runelite.api.widgets.Widget widget, final boolean b) {
        WallDecoration.revalidateWidgetScroll((Widget[])array, (Widget)widget, b, (byte)44);
    }
    
    public int[] qm() {
        return Client.npcIndices;
    }
    
    public static boolean wu(final ObjectComposition objectComposition, final int n, final int n2) {
        final int mapSceneId = objectComposition.getMapSceneId();
        if (mapSceneId == -1) {
            return false;
        }
        final IndexedSprite indexedSprite = class333.mapSceneSprites[mapSceneId];
        if (indexedSprite == null || indexedSprite.getWidth() <= 0 || indexedSprite.getHeight() <= 0) {
            return true;
        }
        final int n3 = objectComposition.tj() * 4;
        final int n4 = objectComposition.cf() * 4;
        final int n5 = n * 4 + (n3 - indexedSprite.getWidth()) / 2;
        final int n6 = n2 * 4 + (n4 - indexedSprite.getHeight()) / 2;
        final int n7 = n5 + indexedSprite.getWidth();
        final int n8 = n6 + indexedSprite.getHeight();
        final int zl = zl(n5);
        final int wr = wr(n6);
        final int zl2 = zl(n7);
        final int wr2 = wr(n8);
        final int n9 = (zl2 - zl) * indexedSprite.getOriginalWidth() / indexedSprite.getWidth();
        final int n10 = (wr - wr2) * indexedSprite.getOriginalHeight() / indexedSprite.getHeight();
        if (n9 > 0 && n10 > 0) {
            indexedSprite.nx(zl, wr2, n9, n10);
        }
        return true;
    }
    
    public void wu(final int n) {
        WorldMapSectionType.cameraPitch = n * 528729485;
    }
    
    static final void wu(final PacketBuffer packetBuffer) {
        PacketBuffer.jb(packetBuffer, (byte)45);
        final int bitsRemaining = packetBuffer.bitsRemaining(8, -1659824188);
        if (bitsRemaining < Client.npcCount * 265474485) {
            for (int i = bitsRemaining; i < 265474485 * Client.npcCount; ++i) {
                Client.field485[(Client.field484 -= 1359666311) * 216061641 - 1] = Client.npcIndices[i];
            }
        }
        if (bitsRemaining > Client.npcCount * 265474485) {
            throw new RuntimeException("");
        }
        Client.npcCount = 0;
        for (int j = 0; j < bitsRemaining; ++j) {
            final int n = Client.npcIndices[j];
            final NPC npc = Client.npcs[n];
            if (packetBuffer.bitsRemaining(1, -59668127) == 0) {
                Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = n;
                npc.de = -1014023335 * Client.cycle;
            }
            else {
                final int bitsRemaining2 = packetBuffer.bitsRemaining(2, -2145577030);
                if (bitsRemaining2 == 0) {
                    Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = n;
                    npc.de = Client.cycle * -1014023335;
                    Client.field417[(Client.field416 += 1487412345) * 606834121 - 1] = n;
                }
                else if (bitsRemaining2 != 0) {
                    Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = n;
                    npc.de = Client.cycle * -1014023335;
                    npc.move(packetBuffer.bitsRemaining(3, -2128228521), MoveSpeed.WALK, (byte)118);
                    if (1 == packetBuffer.bitsRemaining(1, -1019449243)) {
                        Client.field417[(Client.field416 += 1487412345) * 606834121 - 1] = n;
                    }
                }
                else if (bitsRemaining2 == 2) {
                    Client.npcIndices[(Client.npcCount += 1796101277) * 265474485 - 1] = n;
                    npc.de = -1014023335 * Client.cycle;
                    if (packetBuffer.bitsRemaining(1, -1077728166) == 1) {
                        npc.move(packetBuffer.bitsRemaining(3, -295296118), MoveSpeed.RUN, (byte)105);
                        npc.move(packetBuffer.bitsRemaining(3, 66001299), MoveSpeed.RUN, (byte)126);
                    }
                    else {
                        npc.move(packetBuffer.bitsRemaining(3, -929677790), MoveSpeed.CRAWL, (byte)126);
                    }
                    if (packetBuffer.bitsRemaining(1, -1218632646) == 1) {
                        Client.field417[(Client.field416 += 1487412345) * 606834121 - 1] = n;
                    }
                }
                else if (bitsRemaining2 == 3) {
                    Client.field485[(Client.field484 -= 1359666311) * 216061641 - 1] = n;
                }
            }
        }
    }
    
    static final void zm(final Player player, final int n, final int n2, final int n3) {
        if (player == MusicPatchNode.localPlayer) {
            return;
        }
        if (Client.menuOptionsCount * 730065501 >= 400) {
            return;
        }
        String s;
        if (0 == player.skillLevel * 761215505) {
            s = player.actions[0] + player.username + player.actions[1] + ItemContainer.method480(player.combatLevel * 1302967875, MusicPatchNode.localPlayer.combatLevel * 1302967875, (byte)118) + " " + class96.ac + Strings.gf + 1302967875 * player.combatLevel + class96.au + player.actions[2];
        }
        else {
            s = player.actions[0] + player.username + player.actions[1] + " " + class96.ac + Strings.gm + 761215505 * player.skillLevel + class96.au + player.actions[2];
        }
        if (Client.isItemSelected * -303899309 == 1) {
            MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16777215, 1385384596) + s, 14, n, n2, n3, (byte)96);
        }
        else if (Client.isSpellSelected) {
            if ((1457791911 * SecureRandomFuture.selectedSpellFlags & 0x8) == 0x8) {
                MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16777215, 984801683) + s, 15, n, n2, n3, (byte)33);
            }
        }
        else {
            for (int i = 7; i >= 0; --i) {
                if (null != Client.playerMenuActions[i]) {
                    int n4 = 0;
                    if (Client.playerMenuActions[i].equalsIgnoreCase(Strings.gy)) {
                        if (Client.playerAttackOption == AttackOption.AttackOption_hidden) {
                            continue;
                        }
                        if (Client.playerAttackOption == AttackOption.AttackOption_alwaysRightClick || (AttackOption.AttackOption_dependsOnCombatLevels == Client.playerAttackOption && player.combatLevel * 1302967875 > MusicPatchNode.localPlayer.combatLevel * 1302967875)) {
                            n4 = 2000;
                        }
                        if (-55850951 * MusicPatchNode.localPlayer.team != 0 && -55850951 * player.team != 0) {
                            if (player.team * -55850951 == -55850951 * MusicPatchNode.localPlayer.team) {
                                n4 = 2000;
                            }
                            else {
                                n4 = 0;
                            }
                        }
                        else if (Client.playerAttackOption == AttackOption.field1073 && player.isClanMember((byte)0)) {
                            n4 = 2000;
                        }
                    }
                    else if (Client.playerOptionsPriorities[i]) {
                        n4 = 2000;
                    }
                    MenuAction.insertMenuItemNoShift(Client.playerMenuActions[i], class383.method2081(16777215, 416362095) + s, n4 + Client.playerMenuOpcodes[i], n, n2, n3, (byte)121);
                }
            }
        }
        for (int j = 0; j < 730065501 * Client.menuOptionsCount; ++j) {
            if (23 == Client.menuOpcodes[j]) {
                Client.menuTargets[j] = class383.method2081(16777215, -183228473) + s;
                break;
            }
        }
    }
    
    static final void su() {
        class133.method777(-621320819 * WorldMapRectangle.field2405, Players.field1095 * -51261845, -760417651 * KitDefinition.field1519, -1534961745);
        GraphicsObject.method433(ScriptEvent.field851 * -30755378, class86.field888 * -1642659271, (byte)83);
        if (-144981814 * class36.cameraX == -621320819 * WorldMapRectangle.field2405 && 1772923873 * class174.cameraY == -1852915743 * Players.field1095 && class297.cameraZ * -91399205 == -1639170318 * KitDefinition.field1519 && ScriptEvent.field851 * -1829847369 == WorldMapSectionType.cameraPitch * -94353750 && -1356562733 * class125.cameraYaw == class86.field888 * -1845397275) {
            Client.field598 = false;
            Client.isCameraLocked = false;
            Client.field541 = false;
            Client.field614 = false;
            FontName.field3970 = 0;
            MilliClock.field1455 = 0;
            ScriptFrame.field343 = 0;
            Archive.field3467 = 0;
            WorldMapElement.field1503 = 0;
            class138.field1314 = 0;
            KeyHandler.field81 = 0;
            ObjTypeCustomisation.field1471 = 0;
            class123.field1209 = 0;
            class16.field54 = 0;
            Client.field535 = null;
            Client.field604 = null;
            Client.field617 = null;
        }
    }
    
    public static boolean qg(final Client client, final PacketWriter packetWriter) {
        if (client == null) {
            client.getViewportYOffset();
        }
        final AbstractSocket socket = packetWriter.getSocket((byte)33);
        final PacketBuffer packetBuffer = packetWriter.packetBuffer;
        if (null == socket) {
            return false;
        }
        try {
            if (packetWriter.field1133 == null) {
                if (packetWriter.field1135) {
                    if (!socket.isAvailable(1, -1669811025)) {
                        return false;
                    }
                    socket.read(packetWriter.packetBuffer.al, 0, 1, -2106093590);
                    packetWriter.field1136 = 0;
                    packetWriter.field1135 = false;
                }
                packetBuffer.at = 0;
                if (packetBuffer.method2464((byte)77)) {
                    if (!socket.isAvailable(1, 605476831)) {
                        return false;
                    }
                    socket.read(packetWriter.packetBuffer.al, 1, 1, -2106093590);
                    packetWriter.field1136 = 0;
                }
                packetWriter.field1135 = true;
                final ServerPacket[] serverPacket_values = PacketBufferNode.ServerPacket_values(-1731859764);
                final int ws = PacketBuffer.ws(packetBuffer, 1038686191);
                if (ws < 0 || ws >= serverPacket_values.length) {
                    throw new IOException(ws + " " + -1633313603 * packetBuffer.at);
                }
                packetWriter.field1133 = serverPacket_values[ws];
                packetWriter.serverPacketLength = -1975731211 * packetWriter.field1133.id;
            }
            if (889658999 * packetWriter.serverPacketLength == -1) {
                if (!socket.isAvailable(1, -1443940725)) {
                    return false;
                }
                packetWriter.getSocket((byte)51).read(packetBuffer.al, 0, 1, -2106093590);
                packetWriter.serverPacketLength = (packetBuffer.al[0] & 0xFF) * 1873812295;
            }
            if (889658999 * packetWriter.serverPacketLength == -2) {
                if (!socket.isAvailable(2, -1445673019)) {
                    return false;
                }
                packetWriter.getSocket((byte)25).read(packetBuffer.al, 0, 2, -2106093590);
                packetBuffer.at = 0;
                packetWriter.serverPacketLength = packetBuffer.cl(881017840) * 1873812295;
            }
            if (!socket.isAvailable(packetWriter.serverPacketLength * 889658999, -570720093)) {
                return false;
            }
            packetBuffer.at = 0;
            socket.read(packetBuffer.al, 0, packetWriter.serverPacketLength * 889658999, -2106093590);
            packetWriter.field1136 = 0;
            Client.timer.method2095(-1033751982);
            packetWriter.field1139 = packetWriter.field1138;
            packetWriter.field1138 = packetWriter.serverPacket;
            packetWriter.serverPacket = packetWriter.field1133;
            if (packetWriter.field1133 == ServerPacket.field2608) {
                final int cx = packetBuffer.cx(-2142823141);
                final int cx2 = packetBuffer.cx(-1333590081);
                final int gcDuration = NetCache.getGcDuration(2058399923);
                final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.OPLOC3, Client.packetWriter.isaacCipher, (short)(-7511));
                packetBufferNode.packetBuffer.eb(1913114939 * Client.aa, (byte)(-119));
                packetBufferNode.packetBuffer.dp(gcDuration, -1205880780);
                packetBufferNode.packetBuffer.el(cx, -437883978);
                packetBufferNode.packetBuffer.el(cx2, -437883978);
                Client.packetWriter.addNode(packetBufferNode, 414135591);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2599 == packetWriter.field1133) {
                final byte wu = Buffer.wu(packetBuffer, 435772489);
                final long n = packetBuffer.cr(1748433413) + ((long)packetBuffer.cl(636542182) << 32);
                boolean b = false;
                final ClanChannel clanChannel = (wu >= 0) ? Client.currentClanChannels[wu] : MouseHandler.guestClanChannel;
                if (clanChannel == null) {
                    b = true;
                }
                else {
                    for (int i = 0; i < 100; ++i) {
                        if (Client.field652[i] == n) {
                            b = true;
                            break;
                        }
                    }
                }
                if (!b) {
                    Client.field652[1960529059 * Client.field588] = n;
                    Client.field588 = 1561052939 * ((1 + 1960529059 * Client.field588) % 100);
                    class136.addChatMessage((wu >= 0) ? 43 : 46, "", SceneTilePaint.readString(packetBuffer, (byte)34), clanChannel.name, (short)(-10923));
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2580) {
                final int vl = Buffer.vl(packetBuffer, 363073604);
                final int db = packetBuffer.db((byte)(-29));
                int zc = Buffer.zc(packetBuffer, -277963352);
                if (65535 == zc) {
                    zc = -1;
                }
                int or = Buffer.or(packetBuffer, -523126268);
                if (or == 65535) {
                    or = -1;
                }
                for (int j = or; j <= zc; ++j) {
                    final long n2 = ((long)vl << 32) + j;
                    final Node at = Client.widgetFlags.at(n2);
                    if (at != null) {
                        at.hw();
                    }
                    Client.widgetFlags.put(new IntegerNode(db), n2);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2649 == packetWriter.field1133) {
                final int tn = Buffer.tn(packetBuffer, -1649150099);
                final int en = packetBuffer.en(383378593);
                final int qd = Buffer.qd(packetBuffer, (byte)95);
                final Widget vmethod3380 = class165.vmethod3380(en, (byte)5);
                if (tn != vmethod3380.rawX * -115015413 || qd != 1651158159 * vmethod3380.rawY || 0 != -1596536121 * vmethod3380.xAlignment || 0 != 1484444061 * vmethod3380.yAlignment) {
                    vmethod3380.rawX = tn * 1806877347;
                    vmethod3380.rawY = qd * 1231090287;
                    vmethod3380.xAlignment = 0;
                    vmethod3380.yAlignment = 0;
                    class144.invalidateWidget(vmethod3380, -535844490);
                    client.alignWidget(vmethod3380, 367931689);
                    if (883712245 * vmethod3380.type == 0) {
                        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[en >> 16], vmethod3380, false, (byte)106);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2670 == packetWriter.field1133) {
                final int eq = packetBuffer.eq((byte)(-95));
                final int df = packetBuffer.df(-2139295801);
                final Widget vmethod3381 = class165.vmethod3380(packetBuffer.cx(-1476723226), (byte)5);
                ChatChannel.method470(vmethod3381, eq, df, -518444899);
                class144.invalidateWidget(vmethod3381, -1061955515);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2648 == packetWriter.field1133) {
                class293.forceDisconnect(Buffer.ra(packetBuffer, (byte)7), 16777216);
                packetWriter.field1133 = null;
                return false;
            }
            if (ServerPacket.field2646 == packetWriter.field1133) {
                class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5).rotationKey = (packetBuffer.cl(-423960953) + (Buffer.zc(packetBuffer, 2144730755) << 16)) * -1510822541;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2672 == packetWriter.field1133) {
                final NPC npc = Client.npcs[packetBuffer.cl(-103818727)];
                final int cl = packetBuffer.cl(-915773110);
                final int cx3 = packetBuffer.cx(-1739011061);
                if (null != npc) {
                    npc.cj(0, cl, cx3 >> 16, cx3 & 0xFFFF, 1188508160);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2634) {
                EnumComposition.processZoneOperation(ZoneOperation.field2572, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2691 == packetWriter.field1133) {
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2680) {
                final int en2 = packetBuffer.en(383378593);
                final int or2 = Buffer.or(packetBuffer, -523126268);
                final short n3 = (short)Buffer.qd(packetBuffer, (byte)123);
                final int df2 = packetBuffer.df(-2143409093);
                final NPC npc2 = Client.npcs[or2];
                if (null != npc2) {
                    npc2.method597(df2, en2, n3, 1669157384);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2584) {
                final int cl2 = packetBuffer.cl(-14679574);
                Player localPlayer;
                if (cl2 == Client.localPlayerIndex * -549033243) {
                    localPlayer = MusicPatchNode.localPlayer;
                }
                else {
                    localPlayer = Client.players[cl2];
                }
                final int cl3 = packetBuffer.cl(-244739320);
                final int cx4 = packetBuffer.cx(-1217282794);
                if (localPlayer != null) {
                    localPlayer.cj(0, cl3, cx4 >> 16, cx4 & 0xFFFF, -67089054);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2623 == packetWriter.field1133) {
                final int cd = packetBuffer.cd(-1085685625);
                final boolean b2 = Buffer.ra(packetBuffer, (byte)7) == 1;
                String cw = "";
                boolean b3 = false;
                if (b2) {
                    cw = packetBuffer.cw((byte)0);
                    if (World.friendSystem.isIgnored(new Username(cw, class70.loginType), -540668052)) {
                        b3 = true;
                    }
                }
                final String cw2 = packetBuffer.cw((byte)0);
                if (!b3) {
                    UserComparator5.addGameMessage(cd, cw, cw2, -397121414);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2693) {
                final int db2 = packetBuffer.db((byte)(-90));
                final int db3 = packetBuffer.db((byte)(-16));
                final Widget vmethod3382 = class165.vmethod3380(db2, (byte)5);
                class282.method1591(vmethod3382, db3, -1492147227);
                class144.invalidateWidget(vmethod3382, -1579465725);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2601 == packetWriter.field1133) {
                final int cx5 = packetBuffer.cx(-2064356541);
                final boolean spriteTiling = packetBuffer.dq(-2070899692) == 1;
                final Widget vmethod3383 = class165.vmethod3380(cx5, (byte)5);
                if (vmethod3383.spriteTiling != spriteTiling) {
                    vmethod3383.spriteTiling = spriteTiling;
                    class144.invalidateWidget(vmethod3383, -1989709833);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2641 == packetWriter.field1133) {
                return client.method386(packetWriter, (byte)(-87));
            }
            if (packetWriter.field1133 == ServerPacket.field2665) {
                EnumComposition.processZoneOperation(ZoneOperation.field2567, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2619) {
                final int en3 = packetBuffer.en(383378593);
                final int cl4 = packetBuffer.cl(-194807084);
                final Widget vmethod3384 = class165.vmethod3380(en3, (byte)5);
                if (1 != -123768459 * vmethod3384.modelType || -168077555 * vmethod3384.modelId != cl4) {
                    vmethod3384.modelType = -1714481443;
                    vmethod3384.modelId = 509431749 * cl4;
                    class144.invalidateWidget(vmethod3384, -1202403710);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2690 == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = true;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                final int cl5 = packetBuffer.cl(-1645816223);
                final int cl6 = packetBuffer.cl(-388374306);
                Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                final int ra = Buffer.ra(packetBuffer, (byte)7);
                final int n4 = ObjTypeCustomisation.field1471 * 957080960 + 64;
                final int n5 = 64 + 958794368 * class123.field1209;
                int n6;
                int n7;
                if (Client.field615) {
                    n6 = class174.cameraY * 1772923873;
                    n7 = class147.getTileHeight(n4, n5, -1727408401 * GameEngine.Client_plane, (byte)(-10)) - cl5;
                }
                else {
                    n6 = class147.getTileHeight(class36.cameraX * -2100544359, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)6) - class174.cameraY * 1772923873;
                    n7 = cl5;
                }
                Client.field535 = new class453(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, n6, n4, n5, n7, cl6, ra);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2644 == packetWriter.field1133) {
                return nk(client, packetWriter, 2, 509350232);
            }
            if (packetWriter.field1133 == ServerPacket.field2698) {
                FontName.field3968 = packetBuffer.df(-2146822445) * -522523151;
                class9.field28 = Buffer.ra(packetBuffer, (byte)7) * 671253333;
                while (-1633313603 * packetBuffer.at < 889658999 * packetWriter.serverPacketLength) {
                    EnumComposition.processZoneOperation(Varcs.setInt((byte)(-29))[Buffer.ra(packetBuffer, (byte)7)], -302991134);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2581 == packetWriter.field1133) {
                final Widget vmethod3385 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                vmethod3385.modelType = -848477033;
                vmethod3385.modelId = MusicPatchNode.localPlayer.appearance.getChatHeadId((short)16785) * 509431749;
                class144.invalidateWidget(vmethod3385, -1321280971);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2684 == packetWriter.field1133) {
                int cl7 = packetBuffer.cl(432852701);
                if (65535 == cl7) {
                    cl7 = -1;
                }
                Client.rootInterface = cl7 * -32945189;
                hp(client, false, -1025655982);
                ZoneOperation.Widget_resetModelFrames(cl7, 948447333);
                class12.runWidgetOnLoadListener(-896157613 * Client.rootInterface, (byte)119);
                for (int k = 0; k < 100; ++k) {
                    Client.field573[k] = true;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2669 == packetWriter.field1133) {
                World.friendSystem.readUpdate(packetBuffer, packetWriter.serverPacketLength * 889658999, 1123864149);
                Client.field557 = 1831095645 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2626) {
                Client.minimapState = Buffer.ra(packetBuffer, (byte)7) * -690225493;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2588) {
                EnumComposition.processZoneOperation(ZoneOperation.field2571, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2695) {
                Players.varclan = null;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2618 == packetWriter.field1133) {
                EnumComposition.processZoneOperation(ZoneOperation.field2570, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2592 == packetWriter.field1133) {
                final String cw3 = packetBuffer.cw((byte)0);
                final Object[] args = new Object[cw3.length() + 1];
                for (int l = cw3.length() - 1; l >= 0; --l) {
                    if (cw3.charAt(l) == 's') {
                        args[1 + l] = packetBuffer.cw((byte)0);
                    }
                    else {
                        args[1 + l] = new Integer(packetBuffer.cx(-1329464328));
                    }
                }
                args[0] = new Integer(packetBuffer.cx(-2057065449));
                final ScriptEvent scriptEvent = new ScriptEvent();
                scriptEvent.args = args;
                HealthBarUpdate.set(scriptEvent, (byte)(-38));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2666 == packetWriter.field1133) {
                GrandExchangeEvents.updatePlayers(packetBuffer, packetWriter.serverPacketLength * 889658999, 1902409035);
                class85.method499(-1914701331);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2628 == packetWriter.field1133) {
                final byte wu2 = Buffer.wu(packetBuffer, 435772489);
                final String cw4 = packetBuffer.cw((byte)0);
                final long n8 = packetBuffer.cl(193348266);
                final long n9 = packetBuffer.cr(1396682358);
                final PlayerType playerType = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)(-50)), Buffer.ra(packetBuffer, (byte)7), (short)173);
                final long n10 = n9 + (n8 << 32);
                boolean b4 = false;
                final ClanChannel clanChannel2 = (wu2 >= 0) ? Client.currentClanChannels[wu2] : MouseHandler.guestClanChannel;
                Label_2990: {
                    if (clanChannel2 == null) {
                        b4 = true;
                    }
                    else {
                        for (int n11 = 0; n11 < 100; ++n11) {
                            if (Client.field652[n11] == n10) {
                                b4 = true;
                                break Label_2990;
                            }
                        }
                        if (playerType.isUser && World.friendSystem.isIgnored(new Username(cw4, class70.loginType), 669150714)) {
                            b4 = true;
                        }
                    }
                }
                if (!b4) {
                    Client.field652[Client.field588 * 1960529059] = n10;
                    Client.field588 = 1561052939 * ((Client.field588 * 1960529059 + 1) % 100);
                    final String escapeBrackets = AbstractFont.escapeBrackets(SceneTilePaint.readString(packetBuffer, (byte)23));
                    final int n12 = (wu2 >= 0) ? 41 : 44;
                    if (2138745227 * playerType.modIcon != -1) {
                        class136.addChatMessage(n12, ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 1186829489) + cw4, escapeBrackets, clanChannel2.name, (short)20553);
                    }
                    else {
                        class136.addChatMessage(n12, cw4, escapeBrackets, clanChannel2.name, (short)2588);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2591) {
                final PacketBuffer packetBuffer2 = packetBuffer;
                packetBuffer2.at += 491706444;
                if (packetBuffer.de(1302546421)) {
                    UserComparator4.method681(packetBuffer, -1633313603 * packetBuffer.at - 28, (byte)19);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2622) {
                class127.loadRegions(false, packetWriter.packetBuffer, (byte)(-16));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2583 == packetWriter.field1133) {
                final int ra2 = Buffer.ra(packetBuffer, (byte)7);
                if (Buffer.ra(packetBuffer, (byte)7) == 0) {
                    Client.grandExchangeOffers[ra2] = new GrandExchangeOffer();
                    final PacketBuffer packetBuffer3 = packetBuffer;
                    packetBuffer3.at -= 1524603270;
                }
                else {
                    final PacketBuffer packetBuffer4 = packetBuffer;
                    packetBuffer4.at += 1516355947;
                    Client.grandExchangeOffers[ra2] = new GrandExchangeOffer(packetBuffer, false);
                }
                Client.field629 = -1209118871 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2637) {
                final int ef = packetBuffer.ef(-1250409278);
                final Widget vmethod3386 = class165.vmethod3380(packetBuffer.db((byte)(-81)), (byte)5);
                if (ef != vmethod3386.sequenceId * -1526544909 || ef == -1) {
                    vmethod3386.sequenceId = -1195025605 * ef;
                    vmethod3386.modelFrame = 0;
                    vmethod3386.modelFrameCycle = 0;
                    class144.invalidateWidget(vmethod3386, -933087101);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.REBUILD_REGION_NORMAL) {
                final boolean b5 = Buffer.ra(packetBuffer, (byte)7) == 1;
                final Widget vmethod3387 = class165.vmethod3380(packetBuffer.cx(-1313534788), (byte)5);
                SecureRandomCallable.method476(vmethod3387, MusicPatchNode.localPlayer.appearance, b5, (short)20004);
                class144.invalidateWidget(vmethod3387, -1765520368);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2633 == packetWriter.field1133) {
                final int da = packetBuffer.da(1560273366);
                final int db4 = packetBuffer.db((byte)(-101));
                final int n13 = ((da >> 10 & 0x1F) << 19) + ((da >> 5 & 0x1F) << 11) + ((da & 0x1F) << 3);
                final Widget vmethod3388 = class165.vmethod3380(db4, (byte)5);
                if (1409091639 * vmethod3388.color != n13) {
                    vmethod3388.color = n13 * -1604768377;
                    class144.invalidateWidget(vmethod3388, -1698299797);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2609) {
                final int cl8 = packetBuffer.cl(676452881);
                final int n14 = packetBuffer.df(-2110871859) * 4;
                final int dq = packetBuffer.dq(-2070899692);
                final byte dx = packetBuffer.dx(-1752062083);
                final int n15 = packetBuffer.dq(-2070899692) * 4;
                final int cl9 = packetBuffer.cl(-785567929);
                final int zc2 = Buffer.zc(packetBuffer, -1825653613);
                final int cy = packetBuffer.cy((byte)(-36));
                final int ra3 = Buffer.ra(packetBuffer, (byte)7);
                final int ea = packetBuffer.ea(-724317529);
                final int n16 = ea >> 16;
                final int n17 = ea >> 8 & 0xFF;
                final int n18 = n16 + (ea >> 4 & 0x7);
                final int n19 = n17 + (ea & 0x7);
                final byte wu3 = Buffer.wu(packetBuffer, 435772489);
                final int n20 = dx + n18;
                final int n21 = wu3 + n19;
                if (n18 >= 0 && n19 >= 0 && n18 < 104 && n19 < 104 && n20 >= 0 && n21 >= 0 && n20 < 104 && n21 < 104 && 65535 != cl9) {
                    final int n22 = 128 * n18 + 64;
                    final int n23 = 128 * n19 + 64;
                    final int n24 = 128 * n20 + 64;
                    final int n25 = 128 * n21 + 64;
                    final Projectile projectile = new Projectile(cl9, GameEngine.Client_plane * -1727408401, n22, n23, class147.getTileHeight(n22, n23, -1727408401 * GameEngine.Client_plane, (byte)(-115)) - n15, cl8 + Client.cycle * -1886224337, Client.cycle * -1886224337 + zc2, ra3, dq, cy, n14);
                    projectile.setDestination(n24, n25, class147.getTileHeight(n24, n25, -1727408401 * GameEngine.Client_plane, (byte)(-14)) - n14, cl8 + -1886224337 * Client.cycle, -335674854);
                    Client.projectiles.addFirst(projectile);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.LOGOUT_TRANSFER) {
                EnumComposition.processZoneOperation(ZoneOperation.field2564, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.UPDATE_UID192 == packetWriter.field1133) {
                FriendSystem.gh(World.friendSystem, (byte)0);
                Client.field557 = Client.cycleCntr * 1831095645;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2686 == packetWriter.field1133) {
                final int n26 = -1633313603 * packetBuffer.at + packetWriter.serverPacketLength * 889658999;
                int cl10 = packetBuffer.cl(-1149935597);
                if (65535 == cl10) {
                    cl10 = -1;
                }
                int cl11 = packetBuffer.cl(121554671);
                if (-896157613 * Client.rootInterface != cl10) {
                    Client.rootInterface = -32945189 * cl10;
                    hp(client, false, -1456508861);
                    ZoneOperation.Widget_resetModelFrames(Client.rootInterface * -896157613, 1626282258);
                    class12.runWidgetOnLoadListener(-896157613 * Client.rootInterface, (byte)116);
                    for (int n27 = 0; n27 < 100; ++n27) {
                        Client.field573[n27] = true;
                    }
                }
                while (cl11-- > 0) {
                    final int cx6 = packetBuffer.cx(-1042186773);
                    final int cl12 = packetBuffer.cl(672432343);
                    final int ra4 = Buffer.ra(packetBuffer, (byte)7);
                    InterfaceParent ifOpenSub = (InterfaceParent)Client.interfaceParents.at(cx6);
                    if (ifOpenSub != null && cl12 != 944864121 * ifOpenSub.group) {
                        class357.closeInterface(ifOpenSub, true, -308267077);
                        ifOpenSub = null;
                    }
                    if (null == ifOpenSub) {
                        ifOpenSub = AttackOption.ifOpenSub(cx6, cl12, ra4, -1618920051);
                    }
                    ifOpenSub.field848 = true;
                }
                for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
                    if (interfaceParent.field848) {
                        interfaceParent.field848 = false;
                    }
                    else {
                        class357.closeInterface(interfaceParent, true, 1689846583);
                    }
                }
                Client.widgetFlags = new NodeHashTable(512);
                while (-1633313603 * packetBuffer.at < n26) {
                    final int cx7 = packetBuffer.cx(-1081235994);
                    final int cl13 = packetBuffer.cl(-80947253);
                    final int cl14 = packetBuffer.cl(-457876757);
                    final int cx8 = packetBuffer.cx(-1190522888);
                    for (int n28 = cl13; n28 <= cl14; ++n28) {
                        Client.widgetFlags.put(new IntegerNode(cx8), ((long)cx7 << 32) + n28);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2650) {
                final int ra5 = Buffer.ra(packetBuffer, (byte)7);
                final int ra6 = Buffer.ra(packetBuffer, (byte)7);
                final int ra7 = Buffer.ra(packetBuffer, (byte)7);
                final int ra8 = Buffer.ra(packetBuffer, (byte)7);
                Client.field620[ra5] = true;
                Client.field621[ra5] = ra6;
                Client.field643[ra5] = ra7;
                Client.field499[ra5] = ra8;
                Client.cameraShakeCycle[ra5] = 0;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2668 == packetWriter.field1133) {
                final int or3 = Buffer.or(packetBuffer, -523126268);
                final int eq2 = packetBuffer.eq((byte)(-120));
                int or4 = Buffer.or(packetBuffer, -523126268);
                if (or4 == 65535) {
                    or4 = -1;
                }
                final NPC npc3 = Client.npcs[or3];
                if (null != npc3) {
                    if (or4 == npc3.cs * -1372355773 && or4 != -1) {
                        final int n29 = ItemContainer.SpotAnimationDefinition_get(or4, (byte)11).replyMode * 789159225;
                        if (n29 != 0) {
                            npc3.dw = 0;
                            npc3.dn = 0;
                            npc3.bd = -401806131 * eq2;
                            npc3.bo = 0;
                        }
                        else if (n29 == 2) {
                            npc3.bo = 0;
                        }
                    }
                    else if (or4 == -1 || -1 == -1372355773 * npc3.cs || ItemContainer.SpotAnimationDefinition_get(or4, (byte)122).forcedPriority * -1932560049 >= ItemContainer.SpotAnimationDefinition_get(npc3.cs * -1372355773, (byte)42).forcedPriority * -1932560049) {
                        npc3.cs = or4 * -1690721941;
                        npc3.dw = 0;
                        npc3.dn = 0;
                        npc3.bd = eq2 * -401806131;
                        npc3.bo = 0;
                        npc3.dk = -1718989897 * npc3.cb;
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2652 == packetWriter.field1133) {
                UserComparator3.method699(packetBuffer, 889658999 * packetWriter.serverPacketLength, 2139909618);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2632 == packetWriter.field1133) {
                for (int n30 = 0; n30 < Client.players.length; ++n30) {
                    if (Client.players[n30] != null) {
                        Client.players[n30].cs = 1690721941;
                    }
                }
                for (int n31 = 0; n31 < Client.npcs.length; ++n31) {
                    if (null != Client.npcs[n31]) {
                        Client.npcs[n31].cs = 1690721941;
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2605) {
                FontName.field3968 = packetBuffer.dq(-2070899692) * -522523151;
                class9.field28 = packetBuffer.df(-2095945414) * 671253333;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2600 == packetWriter.field1133) {
                EnumComposition.processZoneOperation(ZoneOperation.field2568, -302991134);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2630) {
                if (Buffer.kn(packetBuffer, 1404535452)) {
                    if (null == class132.field1277) {
                        class132.field1277 = new class354();
                    }
                }
                else {
                    class132.field1277 = null;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2681) {
                Client.field560 = 1358928753 * Client.cycleCntr;
                final byte wu4 = Buffer.wu(packetBuffer, 435772489);
                final class156 class156 = new class156(packetBuffer);
                ClanChannel guestClanChannel;
                if (wu4 >= 0) {
                    guestClanChannel = Client.currentClanChannels[wu4];
                }
                else {
                    guestClanChannel = MouseHandler.guestClanChannel;
                }
                class156.ny(class156, guestClanChannel, (byte)(-48));
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2596) {
                final int cx9 = packetBuffer.cx(-1127139718);
                final int or5 = Buffer.or(packetBuffer, -523126268);
                if ((Varps.Varps_temp[or5] = cx9) != Varps.Varps_main[or5]) {
                    Varps.Varps_main[or5] = cx9;
                }
                class7.changeGameOptions(or5, -949266384);
                Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = or5;
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2678) {
                final int cx10 = packetBuffer.cx(-1298352581);
                final int dq2 = packetBuffer.dq(-2070899692);
                final Widget vmethod3389 = class165.vmethod3380(cx10, (byte)5);
                class162.method911(vmethod3389, 1693987821 * MusicPatchNode.localPlayer.appearance.npcTransformId, dq2, (byte)(-65));
                class144.invalidateWidget(vmethod3389, -1334662242);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2683 == packetWriter.field1133) {
                Client.field598 = false;
                Client.isCameraLocked = false;
                Client.field541 = false;
                Client.field614 = false;
                FontName.field3970 = 0;
                MilliClock.field1455 = 0;
                ScriptFrame.field343 = 0;
                Client.field615 = false;
                Archive.field3467 = 0;
                WorldMapElement.field1503 = 0;
                class138.field1314 = 0;
                KeyHandler.field81 = 0;
                ObjTypeCustomisation.field1471 = 0;
                class123.field1209 = 0;
                class16.field54 = 0;
                Client.field535 = null;
                Client.field604 = null;
                Client.field617 = null;
                for (int n32 = 0; n32 < 5; ++n32) {
                    Client.field620[n32] = false;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2629 == packetWriter.field1133) {
                int da2 = packetBuffer.da(414768452);
                if (65535 == da2) {
                    da2 = -1;
                }
                class1.playSong(da2, -1252203934);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2659) {
                final int cr = packetBuffer.cr(-1691754405);
                int da3 = packetBuffer.da(1520083846);
                if (da3 == 65535) {
                    da3 = -1;
                }
                CollisionMap.playJingle(da3, cr, 1287836101);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2676 == packetWriter.field1133) {
                final int db5 = packetBuffer.db((byte)(-22));
                final int en4 = packetBuffer.en(383378593);
                int zc3 = Buffer.zc(packetBuffer, -1333825273);
                if (zc3 == 65535) {
                    zc3 = -1;
                }
                final Widget vmethod3390 = class165.vmethod3380(db5, (byte)5);
                if (!vmethod3390.modelOrthog) {
                    if (-1 == zc3) {
                        vmethod3390.modelType = 0;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    final ItemComposition set = HealthBarUpdate.set(zc3, (byte)98);
                    vmethod3390.modelType = 1732008820;
                    vmethod3390.modelId = zc3 * 509431749;
                    vmethod3390.modelAngleX = 874786355 * set.xan2d;
                    vmethod3390.modelAngleY = set.yan2d * -2065246853;
                    vmethod3390.modelZoom = -1582059804 * set.zoom2d / en4 * -467727501;
                    class144.invalidateWidget(vmethod3390, -2075262744);
                }
                else {
                    vmethod3390.itemId = -1852876811 * zc3;
                    vmethod3390.itemQuantity = en4 * -568259577;
                    final ItemComposition set2 = HealthBarUpdate.set(zc3, (byte)80);
                    vmethod3390.modelAngleX = 874786355 * set2.xan2d;
                    vmethod3390.modelAngleY = -2065246853 * set2.yan2d;
                    vmethod3390.modelAngleZ = 745454881 * set2.zan2d;
                    vmethod3390.modelOffsetX = -183088313 * set2.offsetX2d;
                    vmethod3390.modelOffsetY = set2.offsetY2d * -347855449;
                    vmethod3390.modelZoom = set2.zoom2d * 1614948179;
                    if (set2.isStackable * 1552863327 == 1) {
                        vmethod3390.itemQuantityMode = -761533221;
                    }
                    else {
                        vmethod3390.itemQuantityMode = -1523066442;
                    }
                    if (-289037969 * vmethod3390.modelRotation > 0) {
                        vmethod3390.modelZoom = -467727501 * (100808544 * vmethod3390.modelZoom / (-289037969 * vmethod3390.modelRotation));
                    }
                    else if (vmethod3390.rawWidth * -1960603747 > 0) {
                        vmethod3390.modelZoom = 100808544 * vmethod3390.modelZoom / (-1960603747 * vmethod3390.rawWidth) * -467727501;
                    }
                    class144.invalidateWidget(vmethod3390, -1190385968);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.field2631) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = true;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                final int cl15 = packetBuffer.cl(-1219350472);
                final int n33 = Buffer.ra(packetBuffer, (byte)7) * 128 + 64;
                final int n34 = Buffer.ra(packetBuffer, (byte)7) * 128 + 64;
                final int cl16 = packetBuffer.cl(-103636014);
                Client.field615 = Buffer.kn(packetBuffer, 1404535452);
                final int ra9 = Buffer.ra(packetBuffer, (byte)7);
                final int n35 = 64 + 957080960 * ObjTypeCustomisation.field1471;
                final int n36 = 64 + 958794368 * class123.field1209;
                int n37;
                int n38;
                if (Client.field615) {
                    n37 = class174.cameraY * 1772923873;
                    n38 = class147.getTileHeight(n35, n36, -1727408401 * GameEngine.Client_plane, (byte)(-52)) - cl15;
                }
                else {
                    n37 = class147.getTileHeight(-2100544359 * class36.cameraX, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-19)) - 1772923873 * class174.cameraY;
                    n38 = cl15;
                }
                Client.field535 = new class452(class36.cameraX * -2100544359, class297.cameraZ * -91399205, n37, n35, n36, n38, n33, n34, cl16, ra9);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.PLAYER_INFO == packetWriter.field1133) {
                if (-1 != -896157613 * Client.rootInterface) {
                    class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 0, (byte)63);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.NPC_INFO_SMALL == packetWriter.field1133 && Client.isCameraLocked) {
                Client.field598 = true;
                Client.field614 = false;
                Client.field541 = false;
                for (int n39 = 0; n39 < 5; ++n39) {
                    Client.field620[n39] = false;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.ENTER_FREECAM) {
                Client.destinationX = Buffer.ra(packetBuffer, (byte)7) * -1970850269;
                if (1494100363 * Client.destinationX == 255) {
                    Client.destinationX = 0;
                }
                Client.destinationY = Buffer.ra(packetBuffer, (byte)7) * 875414437;
                if (255 == Client.destinationY * -1748014035) {
                    Client.destinationY = 0;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.MESSAGE_PRIVATE == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field614 = true;
                final int cm = packetBuffer.cm((byte)(-76));
                final int method77 = class18.method77(WorldMapSectionType.cameraPitch * 1897923909 + packetBuffer.cm((byte)(-56)) & 0x7EB, -1332765205);
                final int n40 = cm + class125.cameraYaw * -1010818347;
                final int cl17 = packetBuffer.cl(-1846771808);
                final int ra10 = Buffer.ra(packetBuffer, (byte)7);
                Client.field604 = new class454(WorldMapSectionType.cameraPitch * 1897923909, method77, cl17, ra10);
                Client.field617 = new class454(-1010818347 * class125.cameraYaw, n40, cl17, ra10);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.SPOTANIM_SPECIFIC) {
                Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.TRIGGER_ONDIALOGABORT) {
                final byte[] array = new byte[889658999 * packetWriter.serverPacketLength];
                packetBuffer.method2459(array, 0, array.length, -1082141373);
                Ignored.compareTo_ignored(new Buffer(array).readStringCp1252NullTerminated((byte)0), true, false, (byte)50);
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2614 == packetWriter.field1133) {
                Client.isCameraLocked = true;
                Client.field598 = false;
                Client.field541 = false;
                ObjTypeCustomisation.field1471 = Buffer.ra(packetBuffer, (byte)7) * -436480541;
                class123.field1209 = Buffer.ra(packetBuffer, (byte)7) * 2032739133;
                class16.field54 = packetBuffer.cl(-1820431899) * -1725771559;
                KeyHandler.field81 = Buffer.ra(packetBuffer, (byte)7) * -2052337259;
                class138.field1314 = Buffer.ra(packetBuffer, (byte)7) * -449391195;
                if (class138.field1314 * -1514927571 >= 100) {
                    class36.cameraX = ObjTypeCustomisation.field1471 * -1848049280 - 317330880;
                    class297.cameraZ = class123.field1209 * 2021222272 - 1328933696;
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)(-15)) - class16.field54 * -887836823) * -424093663;
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2647 == packetWriter.field1133) {
                class36.method199(1256157432);
                final byte wu5 = Buffer.wu(packetBuffer, 435772489);
                final class142 class157 = new class142(packetBuffer);
                ClanSettings guestClanSettings;
                if (wu5 >= 0) {
                    guestClanSettings = Client.currentClanSettings[wu5];
                }
                else {
                    guestClanSettings = ItemComposition.guestClanSettings;
                }
                class157.method807(guestClanSettings, (byte)(-34));
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.NPC_INFO_LARGE) {
                class133.queueSoundEffect(packetBuffer.cl(-1014433924), Buffer.ra(packetBuffer, (byte)7), packetBuffer.cl(-502664893), (byte)(-26));
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.field2620 == packetWriter.field1133) {
                final int cx11 = packetBuffer.cx(-1472428672);
                if (cx11 != 1263827259 * Client.field444) {
                    Client.field444 = cx11 * 1409021939;
                    class173.method955((byte)(-28));
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (packetWriter.field1133 == ServerPacket.UPDATE_ZONE_PARTIAL_FOLLOWS) {
                ClientPacket.process((byte)2);
                Client.runEnergy = packetBuffer.cl(-952646654) * 440508051;
                Client.field433 = -235455367 * Client.cycleCntr;
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.MESSAGE_PRIVATE_ECHO == packetWriter.field1133) {
                final int db6 = packetBuffer.db((byte)(-48));
                int zc4 = Buffer.zc(packetBuffer, -988570368);
                final Widget vmethod3391 = class165.vmethod3380(db6, (byte)5);
                if (null != vmethod3391 && 0 == vmethod3391.type * 883712245) {
                    if (zc4 > -1273374131 * vmethod3391.scrollHeight - vmethod3391.height * 1473950221) {
                        zc4 = -1273374131 * vmethod3391.scrollHeight - 1473950221 * vmethod3391.height;
                    }
                    if (zc4 < 0) {
                        zc4 = 0;
                    }
                    if (zc4 != vmethod3391.scrollY * 1223232735) {
                        vmethod3391.scrollY = 946188063 * zc4;
                        class144.invalidateWidget(vmethod3391, -1335990801);
                    }
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.IF_SETNPCHEAD == packetWriter.field1133) {
                final String cw5 = packetBuffer.cw((byte)0);
                final Widget vmethod3392 = class165.vmethod3380(packetBuffer.db((byte)24), (byte)5);
                if (!cw5.equals(vmethod3392.field2916)) {
                    vmethod3392.field2916 = cw5;
                    class144.invalidateWidget(vmethod3392, -1866472939);
                }
                packetWriter.field1133 = null;
                return true;
            }
            if (ServerPacket.UPDATE_INV_CLEAR == packetWriter.field1133) {
                class36.method199(806504425);
                final byte wu6 = Buffer.wu(packetBuffer, 435772489);
                if (1 == packetWriter.serverPacketLength * 889658999) {
                    if (wu6 >= 0) {
                        Client.currentClanSettings[wu6] = null;
                    }
                    else {
                        ItemComposition.guestClanSettings = null;
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (wu6 >= 0) {
                    Client.currentClanSettings[wu6] = new ClanSettings(packetBuffer);
                }
                else {
                    ItemComposition.guestClanSettings = new ClanSettings(packetBuffer);
                }
                packetWriter.field1133 = null;
                return true;
            }
            else {
                if (packetWriter.field1133 == ServerPacket.field2696) {
                    final int ra11 = Buffer.ra(packetBuffer, (byte)7);
                    final NPC npc4 = Client.npcs[packetBuffer.cl(-1674771835)];
                    final int cl18 = packetBuffer.cl(-622573095);
                    final int cx12 = packetBuffer.cx(-1674285399);
                    if (null != npc4) {
                        npc4.cj(ra11, cl18, cx12 >> 16, cx12 & 0xFFFF, -157360664);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.MESSAGE_CLANCHANNEL_SYSTEM) {
                    for (int n41 = 0; n41 < Varps.Varps_main.length; ++n41) {
                        if (Varps.Varps_temp[n41] != Varps.Varps_main[n41]) {
                            Varps.Varps_main[n41] = Varps.Varps_temp[n41];
                            class7.changeGameOptions(n41, 1236715689);
                            Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = n41;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2657 == packetWriter.field1133) {
                    final int cx13 = packetBuffer.cx(-1772103591);
                    int cl19 = packetBuffer.cl(-327138195);
                    if (cx13 < -70000) {
                        cl19 += 32768;
                    }
                    Widget vmethod3393;
                    if (cx13 >= 0) {
                        vmethod3393 = class165.vmethod3380(cx13, (byte)5);
                    }
                    else {
                        vmethod3393 = null;
                    }
                    while (-1633313603 * packetBuffer.at < packetWriter.serverPacketLength * 889658999) {
                        final int cd2 = packetBuffer.cd(-1858462262);
                        final int cl20 = packetBuffer.cl(750988108);
                        int n42 = 0;
                        if (cl20 != 0) {
                            n42 = Buffer.ra(packetBuffer, (byte)7);
                            if (255 == n42) {
                                n42 = packetBuffer.cx(-1759752799);
                            }
                        }
                        if (null != vmethod3393 && cd2 >= 0 && cd2 < vmethod3393.itemIds.length) {
                            vmethod3393.itemIds[cd2] = cl20;
                            vmethod3393.field3007[cd2] = n42;
                        }
                        class373.itemContainerSetItem(cl19, cd2, cl20 - 1, n42, (byte)0);
                    }
                    if (null != vmethod3393) {
                        class144.invalidateWidget(vmethod3393, -1225388994);
                    }
                    ClientPacket.process((byte)2);
                    Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (cl19 & 0x7FFF);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.CLANCHANNEL_DELTA == packetWriter.field1133) {
                    class31.logOut(-935810560);
                    packetWriter.field1133 = null;
                    return false;
                }
                if (packetWriter.field1133 == ServerPacket.field2642) {
                    return nk(client, packetWriter, 1, 660501036);
                }
                if (ServerPacket.field2689 == packetWriter.field1133) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = true;
                    final int method78 = class425.method2262(packetBuffer.cm((byte)(-21)) & 0x7EB, -963027331);
                    final int method79 = class18.method77(packetBuffer.cm((byte)(-62)) & 0x7EB, -1786478525);
                    final int cl21 = packetBuffer.cl(-195315567);
                    final int ra12 = Buffer.ra(packetBuffer, (byte)7);
                    Client.field604 = new class454(1897923909 * WorldMapSectionType.cameraPitch, method79, cl21, ra12);
                    Client.field617 = new class454(-1010818347 * class125.cameraYaw, method78, cl21, ra12);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2694 == packetWriter.field1133) {
                    ClientPacket.process((byte)2);
                    Client.weight = packetBuffer.cm((byte)(-29)) * 717110291;
                    Client.field433 = Client.cycleCntr * -235455367;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.IF_SETOBJECT) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2569, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.TRADING_POST_RESULTS) {
                    FontName.field3968 = Buffer.ra(packetBuffer, (byte)7) * -522523151;
                    class9.field28 = packetBuffer.eq((byte)(-102)) * 671253333;
                    for (int n43 = 1555915261 * class9.field28; n43 < 8 + class9.field28 * 1555915261; ++n43) {
                        for (int n44 = FontName.field3968 * -191732975; n44 < FontName.field3968 * -191732975 + 8; ++n44) {
                            if (null != Client.groundItems[GameEngine.Client_plane * -1727408401][n43][n44]) {
                                Client.groundItems[GameEngine.Client_plane * -1727408401][n43][n44] = null;
                                class121.updateItemPile(n43, n44, 2035553685);
                            }
                        }
                    }
                    for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (68300005 * pendingSpawn.x >= 1555915261 * class9.field28 && pendingSpawn.x * 68300005 < 8 + 1555915261 * class9.field28 && pendingSpawn.y * 800888185 >= -191732975 * FontName.field3968 && 800888185 * pendingSpawn.y < 8 + -191732975 * FontName.field3968 && pendingSpawn.plane * 593068225 == -1727408401 * GameEngine.Client_plane) {
                            pendingSpawn.endCycle = 0;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2679 == packetWriter.field1133) {
                    final int db7 = packetBuffer.db((byte)(-35));
                    final int db8 = packetBuffer.db((byte)32);
                    final InterfaceParent interfaceParent2 = (InterfaceParent)Client.interfaceParents.at(db7);
                    final InterfaceParent interfaceParent3 = (InterfaceParent)Client.interfaceParents.at(db8);
                    if (interfaceParent3 != null) {
                        class357.closeInterface(interfaceParent3, interfaceParent2 == null || interfaceParent3.group * 944864121 != interfaceParent2.group * 944864121, 1088826450);
                    }
                    if (interfaceParent2 != null) {
                        interfaceParent2.hw();
                        Client.interfaceParents.put(interfaceParent2, db8);
                    }
                    final Widget vmethod3394 = class165.vmethod3380(db7, (byte)5);
                    if (vmethod3394 != null) {
                        class144.invalidateWidget(vmethod3394, -1392049097);
                    }
                    final Widget vmethod3395 = class165.vmethod3380(db8, (byte)5);
                    if (vmethod3395 != null) {
                        class144.invalidateWidget(vmethod3395, -876354352);
                        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[1713081171 * vmethod3395.id >>> 16], vmethod3395, true, (byte)65);
                    }
                    if (-1 != Client.rootInterface * -896157613) {
                        class127.runIntfCloseListeners(Client.rootInterface * -896157613, 1, (byte)63);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2677) {
                    final World world = new World();
                    world.host = packetBuffer.cw((byte)0);
                    world.id = packetBuffer.cl(-532497347) * -2098511939;
                    world.properties = packetBuffer.cx(-1556389390) * 1038974297;
                    class138.updateGameState(45, 485253390);
                    socket.close(2048534867);
                    FloorOverlayDefinition.changeWorld(world, 360018737);
                    packetWriter.field1133 = null;
                    return false;
                }
                if (ServerPacket.IF_OPENSUB == packetWriter.field1133) {
                    class146.updateNpcs(true, packetBuffer, -1232221421);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.REFLECTION_CHECK == packetWriter.field1133) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2562, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2660) {
                    final Widget vmethod3396 = class165.vmethod3380(packetBuffer.cx(-1352726801), (byte)5);
                    for (int n45 = 0; n45 < vmethod3396.itemIds.length; ++n45) {
                        vmethod3396.itemIds[n45] = -1;
                        vmethod3396.itemIds[n45] = 0;
                    }
                    class144.invalidateWidget(vmethod3396, -944661934);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2682 == packetWriter.field1133) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = false;
                    FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 775826691;
                    MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                    ScriptFrame.field343 = packetBuffer.cl(588874973) * -213879109;
                    Archive.field3467 = Buffer.ra(packetBuffer, (byte)7) * -1982200011;
                    WorldMapElement.field1503 = Buffer.ra(packetBuffer, (byte)7) * -2025357;
                    if (942361787 * WorldMapElement.field1503 >= 100) {
                        final int n46 = 64 + 332584320 * FontName.field3970;
                        final int n47 = 64 + MilliClock.field1455 * -1804719232;
                        final int n48 = class147.getTileHeight(n46, n47, GameEngine.Client_plane * -1727408401, (byte)(-43)) - ScriptFrame.field343 * 1496735347;
                        final int n49 = n46 - -2100544359 * class36.cameraX;
                        final int n50 = n48 - class174.cameraY * 1772923873;
                        final int n51 = n47 - -91399205 * class297.cameraZ;
                        WorldMapSectionType.cameraPitch = ((int)(Math.atan2(n50, (int)Math.sqrt(n49 * n49 + n51 * n51)) * 325.9490051269531) & 0x7FF) * 528729485;
                        class125.cameraYaw = ((int)(Math.atan2(n49, n51) * -325.9490051269531) & 0x7FF) * -1545206147;
                        if (1897923909 * WorldMapSectionType.cameraPitch < 128) {
                            WorldMapSectionType.cameraPitch = -1042102656;
                        }
                        if (1897923909 * WorldMapSectionType.cameraPitch > 383) {
                            WorldMapSectionType.cameraPitch = 639929843;
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2586 == packetWriter.field1133) {
                    ScriptFrame.method343(packetBuffer.cw((byte)0), (byte)(-57));
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2697 == packetWriter.field1133) {
                    final int ra13 = Buffer.ra(packetBuffer, (byte)7);
                    final int cl22 = packetBuffer.cl(-1679656394);
                    Player localPlayer2;
                    if (cl22 == -549033243 * Client.localPlayerIndex) {
                        localPlayer2 = MusicPatchNode.localPlayer;
                    }
                    else {
                        localPlayer2 = Client.players[cl22];
                    }
                    final int cl23 = packetBuffer.cl(-776103184);
                    final int cx14 = packetBuffer.cx(-1342397274);
                    if (localPlayer2 != null) {
                        localPlayer2.cj(ra13, cl23, cx14 >> 16, cx14 & 0xFFFF, 1765061685);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2615) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2565, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2593 == packetWriter.field1133) {
                    ClientPacket.process((byte)2);
                    final int dq3 = packetBuffer.dq(-2070899692);
                    final int dq4 = packetBuffer.dq(-2070899692);
                    final int en5 = packetBuffer.en(383378593);
                    Client.experience[dq3] = en5;
                    Client.currentLevels[dq3] = dq4;
                    Client.levels[dq3] = 1;
                    for (int n52 = 0; n52 < 98; ++n52) {
                        if (en5 >= Skills.Skills_experienceTable[n52]) {
                            Client.levels[dq3] = 2 + n52;
                        }
                    }
                    Client.changedSkills[(Client.changedSkillsCount += 1059665337) * -744210295 - 1 & 0x1F] = dq3;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.RESET_ANIMS) {
                    class127.loadRegions(true, packetWriter.packetBuffer, (byte)0);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.UPDATE_INV_FULL == packetWriter.field1133) {
                    final int zc5 = Buffer.zc(packetBuffer, 1407665747);
                    final int or6 = Buffer.or(packetBuffer, -523126268);
                    final int vl2 = Buffer.vl(packetBuffer, 363073604);
                    final int cl24 = packetBuffer.cl(-1122908176);
                    final Widget vmethod3397 = class165.vmethod3380(vl2, (byte)5);
                    if (or6 != 797932055 * vmethod3397.modelAngleX || vmethod3397.modelAngleY * -480949115 != zc5 || cl24 != 942674363 * vmethod3397.modelZoom) {
                        vmethod3397.modelAngleX = or6 * -142910041;
                        vmethod3397.modelAngleY = -230241203 * zc5;
                        vmethod3397.modelZoom = cl24 * -467727501;
                        class144.invalidateWidget(vmethod3397, -780212115);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.CAM_LOOKAT == packetWriter.field1133) {
                    final int ra14 = Buffer.ra(packetBuffer, (byte)7);
                    int n53 = ra14 >> 2;
                    final int n54 = ra14 & 0x3;
                    final int n55 = Client.field431[n53];
                    final int ej = packetBuffer.ej(-380817639);
                    final int n56 = ej >> 16;
                    final int n57 = ej >> 8 & 0xFF;
                    final int n58 = n56 + (ej >> 4 & 0x7);
                    final int n59 = (ej & 0x7) + n57;
                    final int da4 = packetBuffer.da(1463840898);
                    if (n58 >= 0 && n59 >= 0 && n58 < 103 && n59 < 103) {
                        if (n55 == 0) {
                            final BoundaryObject method80 = class31.scene.method1252(GameEngine.Client_plane * -1727408401, n58, n59);
                            if (null != method80) {
                                final int entity_unpackID = InterfaceParent.Entity_unpackID(method80.tag * -4009183385476919801L);
                                if (n53 == 2) {
                                    method80.renderable1 = new DynamicObject(entity_unpackID, 2, 4 + n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method80.renderable1);
                                    method80.renderable2 = new DynamicObject(entity_unpackID, 2, n54 + 1 & 0x3, -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method80.renderable2);
                                }
                                else {
                                    method80.renderable1 = new DynamicObject(entity_unpackID, n53, n54, -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method80.renderable1);
                                }
                            }
                        }
                        else if (n55 == 1) {
                            final WallDecoration method81 = class31.scene.method1253(GameEngine.Client_plane * -1727408401, n58, n59);
                            if (method81 != null) {
                                final int entity_unpackID2 = InterfaceParent.Entity_unpackID(method81.tag * -4691380879163567243L);
                                if (n53 == 4 || n53 == 5) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (6 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (7 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, 4 + (n54 + 2 & 0x3), -1727408401 * GameEngine.Client_plane, n58, n59, da4, false, method81.renderable1);
                                }
                                else if (8 == n53) {
                                    method81.renderable1 = new DynamicObject(entity_unpackID2, 4, n54 + 4, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable1);
                                    method81.renderable2 = new DynamicObject(entity_unpackID2, 4, (n54 + 2 & 0x3) + 4, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, method81.renderable2);
                                }
                            }
                        }
                        else if (n55 == 2) {
                            final GameObject gameObject = class31.scene.getGameObject(-1727408401 * GameEngine.Client_plane, n58, n59);
                            if (n53 == 11) {
                                n53 = 10;
                            }
                            if (null != gameObject) {
                                gameObject.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(gameObject.tag * 5016412888503339625L), n53, n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, gameObject.renderable);
                            }
                        }
                        else if (n55 == 3) {
                            final FloorDecoration floorDecoration = class31.scene.getFloorDecoration(GameEngine.Client_plane * -1727408401, n58, n59);
                            if (floorDecoration != null) {
                                floorDecoration.renderable = new DynamicObject(InterfaceParent.Entity_unpackID(floorDecoration.tag * 3423223696102332293L), 22, n54, GameEngine.Client_plane * -1727408401, n58, n59, da4, false, floorDecoration.renderable);
                            }
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2613) {
                    EnumComposition.processZoneOperation(ZoneOperation.field2566, -302991134);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.REBUILD_REGION == packetWriter.field1133) {
                    class244.method1392(Buffer.ra(packetBuffer, (byte)7), -415193228);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.HEAT_MAP == packetWriter.field1133) {
                    if (Buffer.ra(packetBuffer, (byte)7) == 1) {
                        class323.field3037 = (class96.clockNow(1261380709) - Buffer.ks(packetBuffer, (byte)1)) * 9023382677616235961L;
                        class375.grandExchangeEvents = new GrandExchangeEvents(packetBuffer, true);
                    }
                    else {
                        class375.grandExchangeEvents = null;
                    }
                    Client.field635 = Client.cycleCntr * -707539581;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.UPDATE_RUNENERGY) {
                    Client.isCameraLocked = true;
                    Client.field598 = false;
                    Client.field614 = true;
                    FontName.field3970 = Buffer.ra(packetBuffer, (byte)7) * 775826691;
                    MilliClock.field1455 = Buffer.ra(packetBuffer, (byte)7) * 732155751;
                    ScriptFrame.field343 = packetBuffer.cl(-1989704928) * -213879109;
                    final int cl25 = packetBuffer.cl(-1876826829);
                    final int ra15 = Buffer.ra(packetBuffer, (byte)7);
                    final int n60 = 64 + 332584320 * FontName.field3970;
                    final int n61 = -1804719232 * MilliClock.field1455 + 64;
                    final int n62 = class147.getTileHeight(n60, n61, GameEngine.Client_plane * -1727408401, (byte)6) - ScriptFrame.field343 * 1496735347;
                    final int n63 = n60 - -2100544359 * class36.cameraX;
                    final int n64 = n62 - class174.cameraY * 1772923873;
                    final int n65 = n61 - class297.cameraZ * -91399205;
                    final int method82 = class18.method77((int)(Math.atan2(n64, Math.sqrt(n65 * n65 + n63 * n63)) * 325.9490051269531) & 0x7FF, -1879290505);
                    final int method83 = class425.method2262((int)(Math.atan2(n63, n65) * -325.9490051269531) & 0x7FF, 1563457002);
                    Client.field604 = new class454(1897923909 * WorldMapSectionType.cameraPitch, method82, cl25, ra15);
                    Client.field617 = new class454(-1010818347 * class125.cameraYaw, method83, cl25, ra15);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.IF_SETTEXT) {
                    FloorUnderlayDefinition.privateChatMode = class399.method2128(Buffer.ra(packetBuffer, (byte)7), -108064052);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.GAMEFRAME_FULL) {
                    World.friendSystem.ignoreList.read(packetBuffer, 889658999 * packetWriter.serverPacketLength, -769165365);
                    Login.FriendSystem_invalidateIgnoreds(-681433942);
                    Client.field557 = 1831095645 * Client.cycleCntr;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2616) {
                    class146.updateNpcs(false, packetBuffer, -1232221421);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.IF_SETPOSITION == packetWriter.field1133) {
                    if (Players.varclan == null) {
                        Players.varclan = new class429(MenuAction.HitSplatDefinition_cached);
                    }
                    final class497 ac = MenuAction.HitSplatDefinition_cached.ac((Buffer)packetBuffer, 1927019529);
                    Players.varclan.field3820.vmethod8143(-52705447 * ac.field4105, ac.field4104, 984716383);
                    Client.field554[(Client.field555 -= 2007914853) * 2106773395 - 1 & 0x1F] = ac.field4105 * -52705447;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2664) {
                    final byte dj = packetBuffer.dj(794946187);
                    final int cl26 = packetBuffer.cl(-109816328);
                    if (Varps.Varps_main[cl26] != (Varps.Varps_temp[cl26] = dj)) {
                        Varps.Varps_main[cl26] = dj;
                    }
                    class7.changeGameOptions(cl26, 1419164966);
                    Client.changedVarps[(Client.changedVarpCount += 165304329) * -261310919 - 1 & 0x1F] = cl26;
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2594) {
                    final int or7 = Buffer.or(packetBuffer, -523126268);
                    User.method2164(or7, (short)29725);
                    Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (or7 & 0x7FFF);
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.UPDATE_INV_PARTIAL == packetWriter.field1133) {
                    final int zc6 = Buffer.zc(packetBuffer, 1058654070);
                    final Widget vmethod3398 = class165.vmethod3380(packetBuffer.en(383378593), (byte)5);
                    if (vmethod3398.modelType * -123768459 != 6 || vmethod3398.modelId * -168077555 != zc6) {
                        vmethod3398.modelType = -1696954066;
                        vmethod3398.modelId = 509431749 * zc6;
                        class144.invalidateWidget(vmethod3398, -1801561698);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (packetWriter.field1133 == ServerPacket.field2607) {
                    final String cw6 = packetBuffer.cw((byte)0);
                    final long n66 = packetBuffer.cl(340241407);
                    final long n67 = packetBuffer.cr(-1895434363);
                    final PlayerType playerType2 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)23), Buffer.ra(packetBuffer, (byte)7), (short)173);
                    final long n68 = n67 + (n66 << 32);
                    boolean b6 = false;
                    for (int n69 = 0; n69 < 100; ++n69) {
                        if (Client.field652[n69] == n68) {
                            b6 = true;
                            break;
                        }
                    }
                    if (World.friendSystem.isIgnored(new Username(cw6, class70.loginType), -2082970598)) {
                        b6 = true;
                    }
                    if (!b6 && 0 == 43311027 * Client.field476) {
                        Client.field652[1960529059 * Client.field588] = n68;
                        Client.field588 = (1 + Client.field588 * 1960529059) % 100 * 1561052939;
                        final String escapeBrackets2 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)100), (byte)(-63)));
                        int n70;
                        if (playerType2.isPrivileged) {
                            n70 = 7;
                        }
                        else {
                            n70 = 3;
                        }
                        if (2138745227 * playerType2.modIcon != -1) {
                            UserComparator5.addGameMessage(n70, ArchiveDiskActionHandler.addImageTag(playerType2.modIcon * 2138745227, 533474296) + cw6, escapeBrackets2, -397121414);
                        }
                        else {
                            UserComparator5.addGameMessage(n70, cw6, escapeBrackets2, -397121414);
                        }
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2627 == packetWriter.field1133) {
                    final int zc7 = Buffer.zc(packetBuffer, -908810289);
                    final Widget vmethod3399 = class165.vmethod3380(Buffer.vl(packetBuffer, 363073604), (byte)5);
                    if (-123768459 * vmethod3399.modelType != 2 || zc7 != vmethod3399.modelId * -168077555) {
                        vmethod3399.modelType = 866004410;
                        vmethod3399.modelId = 509431749 * zc7;
                        class144.invalidateWidget(vmethod3399, -1125965263);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                if (ServerPacket.field2658 == packetWriter.field1133) {
                    Client.field560 = Client.cycleCntr * 1358928753;
                    final byte wu7 = Buffer.wu(packetBuffer, 435772489);
                    if (1 == 889658999 * packetWriter.serverPacketLength) {
                        if (wu7 >= 0) {
                            Client.currentClanChannels[wu7] = null;
                        }
                        else {
                            MouseHandler.guestClanChannel = null;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (wu7 >= 0) {
                        Client.currentClanChannels[wu7] = new ClanChannel(packetBuffer);
                    }
                    else {
                        MouseHandler.guestClanChannel = new ClanChannel(packetBuffer);
                    }
                    packetWriter.field1133 = null;
                    return true;
                }
                else {
                    if (ServerPacket.field2671 == packetWriter.field1133) {
                        for (int n71 = 0; n71 < VarpDefinition.field1475 * -774485467; ++n71) {
                            if (null != GraphicsDefaults.decode(n71, -904593541)) {
                                Varps.Varps_temp[n71] = 0;
                                Varps.Varps_main[n71] = 0;
                            }
                        }
                        ClientPacket.process((byte)2);
                        Client.changedVarpCount += 994771232;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2667) {
                        final InterfaceParent interfaceParent4 = (InterfaceParent)Client.interfaceParents.at(packetBuffer.cx(-1886765213));
                        if (interfaceParent4 != null) {
                            class357.closeInterface(interfaceParent4, true, 1459460850);
                        }
                        if (Client.meslayerContinueWidget != null) {
                            class144.invalidateWidget(Client.meslayerContinueWidget, -1603531364);
                            Client.meslayerContinueWidget = null;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.CHAT_FILTER_SETTINGS) {
                        final int dq5 = packetBuffer.dq(-2070899692);
                        String cw7 = packetBuffer.cw((byte)0);
                        final int dq6 = packetBuffer.dq(-2070899692);
                        if (dq5 >= 1 && dq5 <= 8) {
                            if (cw7.equalsIgnoreCase(Strings.at)) {
                                cw7 = null;
                            }
                            Client.playerMenuActions[dq5 - 1] = cw7;
                            Client.playerOptionsPriorities[dq5 - 1] = (dq6 == 0);
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2579) {
                        UserComparator5.addGameMessage(6, packetBuffer.cw((byte)0), AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)55), (byte)(-78))), -397121414);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2597 == packetWriter.field1133) {
                        final String cw8 = packetBuffer.cw((byte)0);
                        final long ks = Buffer.ks(packetBuffer, (byte)1);
                        final long n72 = packetBuffer.cl(809941640);
                        final long n73 = packetBuffer.cr(-1357624645);
                        final PlayerType playerType3 = (PlayerType)StructComposition.findEnumerated(StudioGame.PlayerType_values((byte)(-21)), Buffer.ra(packetBuffer, (byte)7), (short)173);
                        final long n74 = n73 + (n72 << 32);
                        boolean b7 = false;
                        for (int n75 = 0; n75 < 100; ++n75) {
                            if (Client.field652[n75] == n74) {
                                b7 = true;
                                break;
                            }
                        }
                        if (playerType3.isUser && World.friendSystem.isIgnored(new Username(cw8, class70.loginType), 912978644)) {
                            b7 = true;
                        }
                        if (!b7 && Client.field476 * 43311027 == 0) {
                            Client.field652[1960529059 * Client.field588] = n74;
                            Client.field588 = 1561052939 * ((1 + 1960529059 * Client.field588) % 100);
                            final String escapeBrackets3 = AbstractFont.escapeBrackets(BuddyRankComparator.method711(SceneTilePaint.readString(packetBuffer, (byte)61), (byte)(-31)));
                            if (-1 != playerType3.modIcon * 2138745227) {
                                class136.addChatMessage(9, ArchiveDiskActionHandler.addImageTag(playerType3.modIcon * 2138745227, 464683124) + cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)14363);
                            }
                            else {
                                class136.addChatMessage(9, cw8, escapeBrackets3, FloorUnderlayDefinition.decode(ks), (short)15526);
                            }
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.field2685) {
                        final int ra16 = Buffer.ra(packetBuffer, (byte)7);
                        final int zc8 = Buffer.zc(packetBuffer, 2040342125);
                        final int ej2 = packetBuffer.ej(203251402);
                        final int n76 = ej2 >> 16;
                        final int n77 = ej2 >> 8 & 0xFF;
                        final int n78 = n76 + (ej2 >> 4 & 0x7);
                        final int n79 = (ej2 & 0x7) + n77;
                        final int cl27 = packetBuffer.cl(-20572428);
                        if (n78 >= 0 && n79 >= 0 && n78 < 104 && n79 < 104) {
                            final int n80 = 64 + n78 * 128;
                            final int n81 = n79 * 128 + 64;
                            Client.graphicsObjects.addFirst(new GraphicsObject(cl27, -1727408401 * GameEngine.Client_plane, n80, n81, class147.getTileHeight(n80, n81, GameEngine.Client_plane * -1727408401, (byte)(-42)) - ra16, zc8, Client.cycle * -1886224337));
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (packetWriter.field1133 == ServerPacket.VARCLAN) {
                        Client.publicChatMode = packetBuffer.dq(-2070899692) * 1410976369;
                        Client.tradeChatMode = Buffer.ra(packetBuffer, (byte)7) * -2053731769;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2651 == packetWriter.field1133) {
                        Client.rebootTimer = packetBuffer.da(438973323) * 860606706;
                        Client.field433 = -235455367 * Client.cycleCntr;
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2598 == packetWriter.field1133) {
                        Client.hintArrowType = Buffer.ra(packetBuffer, (byte)7) * -1378513753;
                        if (1 == Client.hintArrowType * 633821975) {
                            Client.hintArrowNpcIndex = packetBuffer.cl(754505064) * -431692551;
                        }
                        if (Client.hintArrowType * 633821975 >= 2 && Client.hintArrowType * 633821975 <= 6) {
                            if (633821975 * Client.hintArrowType == 2) {
                                Client.hintArrowSubX = 2045745472;
                                Client.hintArrowSubY = 349971264;
                            }
                            if (3 == Client.hintArrowType * 633821975) {
                                Client.hintArrowSubX = 0;
                                Client.hintArrowSubY = 349971264;
                            }
                            if (Client.hintArrowType * 633821975 == 4) {
                                Client.hintArrowSubX = -203476352;
                                Client.hintArrowSubY = 349971264;
                            }
                            if (5 == 633821975 * Client.hintArrowType) {
                                Client.hintArrowSubX = 2045745472;
                                Client.hintArrowSubY = 0;
                            }
                            if (6 == 633821975 * Client.hintArrowType) {
                                Client.hintArrowSubX = 2045745472;
                                Client.hintArrowSubY = 699942528;
                            }
                            Client.hintArrowType = 1537939790;
                            Client.hintArrowX = packetBuffer.cl(-2147016897) * -501846925;
                            Client.hintArrowY = packetBuffer.cl(-17449237) * 1886247917;
                            Client.hintArrowHeight = Buffer.ra(packetBuffer, (byte)7) * 233713123;
                        }
                        if (10 == Client.hintArrowType * 633821975) {
                            Client.hintArrowPlayerIndex = packetBuffer.cl(665532533) * -1034603829;
                        }
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2610 == packetWriter.field1133) {
                        final int df3 = packetBuffer.df(-2020198272);
                        final int da5 = packetBuffer.da(1827633674);
                        final int vl3 = Buffer.vl(packetBuffer, 363073604);
                        final InterfaceParent interfaceParent5 = (InterfaceParent)Client.interfaceParents.at(vl3);
                        if (null != interfaceParent5) {
                            class357.closeInterface(interfaceParent5, da5 != 944864121 * interfaceParent5.group, -603123780);
                        }
                        AttackOption.ifOpenSub(vl3, da5, df3, -1618920051);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2611 == packetWriter.field1133) {
                        final int cx15 = packetBuffer.cx(-2003094558);
                        int cl28 = packetBuffer.cl(853779662);
                        if (cx15 < -70000) {
                            cl28 += 32768;
                        }
                        Widget vmethod3400;
                        if (cx15 >= 0) {
                            vmethod3400 = class165.vmethod3380(cx15, (byte)5);
                        }
                        else {
                            vmethod3400 = null;
                        }
                        if (vmethod3400 != null) {
                            for (int n82 = 0; n82 < vmethod3400.itemIds.length; ++n82) {
                                vmethod3400.itemIds[n82] = 0;
                                vmethod3400.field3007[n82] = 0;
                            }
                        }
                        WorldMapRegion.initWorldMapData0(cl28, -28927295);
                        for (int cl29 = packetBuffer.cl(-1573193422), n83 = 0; n83 < cl29; ++n83) {
                            final int da6 = packetBuffer.da(851797402);
                            int n84 = packetBuffer.dq(-2070899692);
                            if (n84 == 255) {
                                n84 = Buffer.vl(packetBuffer, 363073604);
                            }
                            if (null != vmethod3400 && n83 < vmethod3400.itemIds.length) {
                                vmethod3400.itemIds[n83] = da6;
                                vmethod3400.field3007[n83] = n84;
                            }
                            class373.itemContainerSetItem(cl28, n83, da6 - 1, n84, (byte)120);
                        }
                        if (vmethod3400 != null) {
                            class144.invalidateWidget(vmethod3400, -1203982740);
                        }
                        ClientPacket.process((byte)2);
                        Client.changedItemContainers[(Client.changedItemContainersCount -= 565562765) * -710491461 - 1 & 0x1F] = (cl28 & 0x7FFF);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    if (ServerPacket.field2674 == packetWriter.field1133) {
                        EnumComposition.processZoneOperation(ZoneOperation.field2563, -302991134);
                        packetWriter.field1133 = null;
                        return true;
                    }
                    class387.RunException_sendStackTrace("" + ((null != packetWriter.field1133) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((null != packetWriter.field1138) ? (1287795301 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (1287795301 * packetWriter.field1139.length) : -1) + class96.an + packetWriter.serverPacketLength * 889658999, null, (byte)8);
                    class31.logOut(629132511);
                }
            }
        }
        catch (IOException ex2) {
            class349.method1918(709882847);
        }
        catch (Exception ex) {
            String str = "" + ((packetWriter.field1133 != null) ? (1287795301 * packetWriter.field1133.length) : -1) + class96.an + ((packetWriter.field1138 != null) ? (1287795301 * packetWriter.field1138.length) : -1) + class96.an + ((null != packetWriter.field1139) ? (1287795301 * packetWriter.field1139.length) : -1) + class96.an + 889658999 * packetWriter.serverPacketLength + class96.an + (MusicPatchNode.localPlayer.cf[0] + -1232093375 * WorldMapData_0.baseX) + class96.an + (GameObject.baseY * 827352769 + MusicPatchNode.localPlayer.dy[0]) + class96.an;
            for (int n85 = 0; n85 < 889658999 * packetWriter.serverPacketLength && n85 < 50; ++n85) {
                str = str + packetBuffer.al[n85] + class96.an;
            }
            class387.RunException_sendStackTrace(str, ex, (byte)8);
            class31.logOut(-408904558);
        }
        return true;
    }
    
    static long qg() {
        return Client.playerUUID * -1749026863537138247L;
    }
    
    public static void qg(final int n) {
        if (Client.id != null) {
            ScriptFrame.client.ix((net.runelite.api.SpritePixels)Client.id);
        }
    }
    
    public ObjectNode jh(final Object o) {
        return new ObjectNode(o);
    }
    
    public int yn() {
        return Client.camAngleDX * 1441154731;
    }
    
    static void yn(final int n, final int n2) {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.CONTINUE, Client.packetWriter.isaacCipher, (short)(-32449));
        packetBufferNode.packetBuffer.el(n, -437883978);
        Buffer.ap(packetBufferNode.packetBuffer, n2, (byte)15);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    final void qh() {
        if (Client.rebootTimer * -1496573241 > 1) {
            Client.rebootTimer -= 1317177079;
        }
        if (Client.logoutTimer * 1705142349 > 0) {
            Client.logoutTimer += 100200315;
        }
        if (Client.hadNetworkError) {
            Client.hadNetworkError = false;
            class349.method1918(709882847);
            return;
        }
        if (!Client.isMenuOpen) {
            class156.addCancelMenuEntry(-742935767);
        }
        for (int n = 0; n < 100 && this.method391(Client.packetWriter, -1706367565); ++n) {}
        if (30 != -1275976559 * Client.gameState) {
            return;
        }
        while (null != class36.reflectionChecks.up()) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2549, Client.packetWriter.isaacCipher, (short)(-5523));
            packetBufferNode.packetBuffer.bf(0, (byte)20);
            final int n2 = packetBufferNode.packetBuffer.at * -1633313603;
            class432.vmethod7769(packetBufferNode.packetBuffer, (byte)(-5));
            packetBufferNode.packetBuffer.cu(-1633313603 * packetBufferNode.packetBuffer.at - n2, -579102640);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        if (Client.timer.field3670) {
            final PacketBufferNode packetBufferNode2 = class330.getPacketBufferNode(ClientPacket.field2552, Client.packetWriter.isaacCipher, (short)(-7421));
            packetBufferNode2.packetBuffer.bf(0, (byte)87);
            final int n3 = -1633313603 * packetBufferNode2.packetBuffer.at;
            Client.timer.write(packetBufferNode2.packetBuffer, -892139108);
            packetBufferNode2.packetBuffer.cu(-1633313603 * packetBufferNode2.packetBuffer.at - n3, 1660149558);
            Client.packetWriter.addNode(packetBufferNode2, 414135591);
            Timer.ct(Client.timer, (byte)49);
        }
        synchronized (UserComparator6.mouseRecorder.lock) {
            if (Client.lockMouseRecorder) {
                if (0 != -1222491879 * MouseHandler.MouseHandler_lastButton || 535437747 * UserComparator6.mouseRecorder.index >= 40) {
                    PacketBufferNode packetBufferNode3 = null;
                    int n4 = 0;
                    int n5 = 0;
                    int n6 = 0;
                    int n7 = 0;
                    for (int n8 = 0; n8 < 535437747 * UserComparator6.mouseRecorder.index && (packetBufferNode3 == null || -1633313603 * packetBufferNode3.packetBuffer.at - n4 < 246); ++n8) {
                        n5 = n8;
                        int n9 = UserComparator6.mouseRecorder.ys[n8];
                        if (n9 < -1) {
                            n9 = -1;
                        }
                        else if (n9 > 65534) {
                            n9 = 65534;
                        }
                        int n10 = UserComparator6.mouseRecorder.xs[n8];
                        if (n10 < -1) {
                            n10 = -1;
                        }
                        else if (n10 > 65534) {
                            n10 = 65534;
                        }
                        if (Client.lastMouseRecordX * -751176573 != n10 || Client.lastMouseRecordY * -2076298705 != n9) {
                            if (packetBufferNode3 == null) {
                                packetBufferNode3 = class330.getPacketBufferNode(ClientPacket.field2559, Client.packetWriter.isaacCipher, (short)(-22337));
                                packetBufferNode3.packetBuffer.bf(0, (byte)30);
                                n4 = packetBufferNode3.packetBuffer.at * -1633313603;
                                final PacketBuffer packetBuffer = packetBufferNode3.packetBuffer;
                                packetBuffer.at += 1262255402;
                                n6 = 0;
                                n7 = 0;
                            }
                            int n11;
                            int n12;
                            int n13;
                            if (-1L != Client.lastMouseRecordTime * 8511124946921102523L) {
                                n11 = n10 - -751176573 * Client.lastMouseRecordX;
                                n12 = n9 - -2076298705 * Client.lastMouseRecordY;
                                n13 = (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) / 20L);
                                n6 += (int)((UserComparator6.mouseRecorder.millis[n8] - Client.lastMouseRecordTime * 8511124946921102523L) % 20L);
                            }
                            else {
                                n11 = n10;
                                n12 = n9;
                                n13 = Integer.MAX_VALUE;
                            }
                            Client.lastMouseRecordX = -791348693 * n10;
                            Client.lastMouseRecordY = 824333519 * n9;
                            if (n13 < 8 && n11 >= -32 && n11 <= 31 && n12 >= -32 && n12 <= 31) {
                                n11 += 32;
                                n12 += 32;
                                packetBufferNode3.packetBuffer.cq((n13 << 12) + (n11 << 6) + n12, (byte)(-9));
                            }
                            else if (n13 < 32 && n11 >= -128 && n11 <= 127 && n12 >= -128 && n12 <= 127) {
                                n11 += 128;
                                n12 += 128;
                                packetBufferNode3.packetBuffer.bf(n13 + 128, (byte)47);
                                packetBufferNode3.packetBuffer.cq((n11 << 8) + n12, (byte)(-37));
                            }
                            else if (n13 < 32) {
                                packetBufferNode3.packetBuffer.bf(n13 + 192, (byte)63);
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            else {
                                packetBufferNode3.packetBuffer.cq((n13 & 0x1FFF) + 57344, (byte)(-73));
                                if (n10 == -1 || n9 == -1) {
                                    packetBufferNode3.packetBuffer.ba(Integer.MIN_VALUE, -2081835031);
                                }
                                else {
                                    packetBufferNode3.packetBuffer.ba(n10 | n9 << 16, -2081835031);
                                }
                            }
                            ++n7;
                            Client.lastMouseRecordTime = 2560228884295272563L * UserComparator6.mouseRecorder.millis[n8];
                        }
                    }
                    if (null != packetBufferNode3) {
                        packetBufferNode3.packetBuffer.cu(packetBufferNode3.packetBuffer.at * -1633313603 - n4, -664053231);
                        final int n14 = packetBufferNode3.packetBuffer.at * -1633313603;
                        packetBufferNode3.packetBuffer.at = -1516355947 * n4;
                        packetBufferNode3.packetBuffer.bf(n6 / n7, (byte)111);
                        packetBufferNode3.packetBuffer.bf(n6 % n7, (byte)120);
                        packetBufferNode3.packetBuffer.at = -1516355947 * n14;
                        Client.packetWriter.addNode(packetBufferNode3, 414135591);
                    }
                    if (n5 >= UserComparator6.mouseRecorder.index * 535437747) {
                        UserComparator6.mouseRecorder.index = 0;
                    }
                    else {
                        final MouseRecorder mouseRecorder = UserComparator6.mouseRecorder;
                        mouseRecorder.index -= -1762036357 * n5;
                        System.arraycopy(UserComparator6.mouseRecorder.xs, n5, UserComparator6.mouseRecorder.xs, 0, UserComparator6.mouseRecorder.index * 535437747);
                        System.arraycopy(UserComparator6.mouseRecorder.ys, n5, UserComparator6.mouseRecorder.ys, 0, 535437747 * UserComparator6.mouseRecorder.index);
                        System.arraycopy(UserComparator6.mouseRecorder.millis, n5, UserComparator6.mouseRecorder.millis, 0, UserComparator6.mouseRecorder.index * 535437747);
                    }
                }
            }
            else {
                UserComparator6.mouseRecorder.index = 0;
            }
        }
        if (1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && 4 == MouseHandler.MouseHandler_lastButton * -1222491879) || MouseHandler.MouseHandler_lastButton * -1222491879 == 2) {
            long n15 = MouseHandler.MouseHandler_lastPressedTimeMillis * -1442809844282041895L - 2243792022961482123L * Client.mouseLastLastPressedTimeMillis;
            if (n15 > 32767L) {
                n15 = 32767L;
            }
            Client.mouseLastLastPressedTimeMillis = 5332065808650620587L * MouseHandler.MouseHandler_lastPressedTimeMillis;
            int n16 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
            if (n16 < 0) {
                n16 = 0;
            }
            else if (n16 > 1658005443 * class262.canvasHeight) {
                n16 = class262.canvasHeight * 1658005443;
            }
            int n17 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            if (n17 < 0) {
                n17 = 0;
            }
            else if (n17 > -1687260435 * Client.aj) {
                n17 = -1687260435 * Client.aj;
            }
            final int n18 = (int)n15;
            final PacketBufferNode packetBufferNode4 = class330.getPacketBufferNode(ClientPacket.field2477, Client.packetWriter.isaacCipher, (short)(-14819));
            packetBufferNode4.packetBuffer.cq(((2 == MouseHandler.MouseHandler_lastButton * -1222491879) ? 1 : 0) + (n18 << 1), (byte)(-42));
            packetBufferNode4.packetBuffer.cq(n17, (byte)58);
            packetBufferNode4.packetBuffer.cq(n16, (byte)35);
            Client.packetWriter.addNode(packetBufferNode4, 414135591);
        }
        if (Client.keyHandlerInstance.pressedKeysCount * 1888573011 > 0) {
            final PacketBufferNode packetBufferNode5 = class330.getPacketBufferNode(ClientPacket.field2469, Client.packetWriter.isaacCipher, (short)(-9244));
            packetBufferNode5.packetBuffer.cq(0, (byte)4);
            final int n19 = -1633313603 * packetBufferNode5.packetBuffer.at;
            final long clockNow = class96.clockNow(1215450964);
            for (int i = 0; i < 1888573011 * Client.keyHandlerInstance.pressedKeysCount; ++i) {
                long n20 = clockNow - 8736327498043665535L * Client.timeOfPreviousKeyPress;
                if (n20 > 16777215L) {
                    n20 = 16777215L;
                }
                Client.timeOfPreviousKeyPress = clockNow * 4061967902176514943L;
                packetBufferNode5.packetBuffer.ez((int)n20, -256037617);
                packetBufferNode5.packetBuffer.bf(Client.keyHandlerInstance.field1856[i], (byte)73);
            }
            packetBufferNode5.packetBuffer.ca(packetBufferNode5.packetBuffer.at * -1633313603 - n19, -1654126370);
            Client.packetWriter.addNode(packetBufferNode5, 414135591);
        }
        if (Client.packetIndicator * -1504372859 > 0) {
            Client.packetIndicator -= 1691830605;
        }
        if (Client.keyHandlerInstance.getKeyPressed(96, 734975023) || Client.keyHandlerInstance.getKeyPressed(97, -300561690) || Client.keyHandlerInstance.getKeyPressed(98, 805511420) || Client.keyHandlerInstance.getKeyPressed(99, -243844427)) {
            Client.emitPackets = true;
        }
        if (Client.emitPackets && Client.packetIndicator * -1504372859 <= 0) {
            Client.packetIndicator = -523126268;
            Client.emitPackets = false;
            final PacketBufferNode packetBufferNode6 = class330.getPacketBufferNode(ClientPacket.field2541, Client.packetWriter.isaacCipher, (short)(-13444));
            packetBufferNode6.packetBuffer.cq(Client.camAngleY * 704283033, (byte)(-1));
            packetBufferNode6.packetBuffer.cq(-954734641 * Client.camAngleX, (byte)35);
            Client.packetWriter.addNode(packetBufferNode6, 414135591);
        }
        if (AbstractByteArrayCopier.hasFocus && !Client.hadFocus) {
            Client.hadFocus = true;
            final PacketBufferNode packetBufferNode7 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-31225));
            packetBufferNode7.packetBuffer.bf(1, (byte)53);
            Client.packetWriter.addNode(packetBufferNode7, 414135591);
        }
        if (!AbstractByteArrayCopier.hasFocus && Client.hadFocus) {
            Client.hadFocus = false;
            final PacketBufferNode packetBufferNode8 = class330.getPacketBufferNode(ClientPacket.field2520, Client.packetWriter.isaacCipher, (short)(-23870));
            packetBufferNode8.packetBuffer.bf(0, (byte)89);
            Client.packetWriter.addNode(packetBufferNode8, 414135591);
        }
        if (null != class126.worldMap) {
            class126.worldMap.ft(1875946932);
        }
        Coord.method1686(-2140553613);
        WorldMapElement.method988((byte)1);
        UserComparator8.method689((byte)(-62));
        if (30 != Client.gameState * -1275976559) {
            return;
        }
        for (PendingSpawn pendingSpawn = (PendingSpawn)Client.pendingSpawns.last(); null != pendingSpawn; pendingSpawn = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (pendingSpawn.endCycle * 1457211081 > 0) {
                final PendingSpawn pendingSpawn2 = pendingSpawn;
                pendingSpawn2.endCycle -= 376812409;
            }
            if (0 == pendingSpawn.endCycle * 1457211081) {
                if (pendingSpawn.objectId * 637177597 < 0 || class195.method1053(637177597 * pendingSpawn.objectId, pendingSpawn.field922 * 1599541283, 1977760998)) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, 68300005 * pendingSpawn.x, 800888185 * pendingSpawn.y, pendingSpawn.objectId * 637177597, -1665966001 * pendingSpawn.field927, pendingSpawn.field922 * 1599541283, pendingSpawn.field931 * 1699404385, -2135110658);
                    pendingSpawn.hw();
                }
            }
            else {
                if (-536117851 * pendingSpawn.startCycle > 0) {
                    final PendingSpawn pendingSpawn3 = pendingSpawn;
                    pendingSpawn3.startCycle -= 237969965;
                }
                if (-536117851 * pendingSpawn.startCycle == 0 && 68300005 * pendingSpawn.x >= 1 && 800888185 * pendingSpawn.y >= 1 && pendingSpawn.x * 68300005 <= 102 && 800888185 * pendingSpawn.y <= 102 && (pendingSpawn.id * 552715177 < 0 || class195.method1053(pendingSpawn.id * 552715177, pendingSpawn.objectType * -1966402261, 1819821099))) {
                    class81.addPendingSpawnToScene(pendingSpawn.plane * 593068225, -1586499579 * pendingSpawn.type, pendingSpawn.x * 68300005, pendingSpawn.y * 800888185, 552715177 * pendingSpawn.id, 120493739 * pendingSpawn.rotation, pendingSpawn.objectType * -1966402261, 1699404385 * pendingSpawn.field931, -2129936397);
                    pendingSpawn.startCycle = -237969965;
                    if (pendingSpawn.objectId * 637177597 == 552715177 * pendingSpawn.id && -1 == pendingSpawn.objectId * 637177597) {
                        pendingSpawn.hw();
                    }
                    else if (637177597 * pendingSpawn.objectId == pendingSpawn.id * 552715177 && -1665966001 * pendingSpawn.field927 == pendingSpawn.rotation * 120493739 && -1966402261 * pendingSpawn.objectType == pendingSpawn.field922 * 1599541283) {
                        pendingSpawn.hw();
                    }
                }
            }
        }
        for (int j = 0; j < Client.soundEffectCount * -297150195; ++j) {
            final int[] queuedSoundEffectDelays = Client.queuedSoundEffectDelays;
            final int n21 = j;
            --queuedSoundEffectDelays[n21];
            if (Client.queuedSoundEffectDelays[j] < -10) {
                Client.soundEffectCount -= 831233477;
                for (int k = j; k < Client.soundEffectCount * -297150195; ++k) {
                    Client.soundEffectIds[k] = Client.soundEffectIds[1 + k];
                    Client.soundEffects[k] = Client.soundEffects[k + 1];
                    Client.queuedSoundEffectLoops[k] = Client.queuedSoundEffectLoops[1 + k];
                    Client.queuedSoundEffectDelays[k] = Client.queuedSoundEffectDelays[k + 1];
                    Client.soundLocations[k] = Client.soundLocations[k + 1];
                }
                --j;
            }
            else {
                SoundEffect soundEffect = Client.soundEffects[j];
                if (null == soundEffect) {
                    final SoundEffect soundEffect2 = null;
                    soundEffect = SoundEffect.readSoundEffect(class426.field3811, Client.soundEffectIds[j], 0);
                    if (soundEffect == null) {
                        continue;
                    }
                    final int[] queuedSoundEffectDelays2 = Client.queuedSoundEffectDelays;
                    final int n22 = j;
                    queuedSoundEffectDelays2[n22] += soundEffect.calculateDelay();
                    Client.soundEffects[j] = soundEffect;
                }
                if (Client.queuedSoundEffectDelays[j] < 0) {
                    int setUsernameToRemember;
                    if (Client.soundLocations[j] != 0) {
                        final int n23 = (Client.soundLocations[j] & 0xFF) * 128;
                        int n24 = 128 * (Client.soundLocations[j] >> 16 & 0xFF) + 64 - MusicPatchNode.localPlayer.br * 1144428983;
                        if (n24 < 0) {
                            n24 = -n24;
                        }
                        int n25 = 64 + (Client.soundLocations[j] >> 8 & 0xFF) * 128 - -411750205 * MusicPatchNode.localPlayer.ep;
                        if (n25 < 0) {
                            n25 = -n25;
                        }
                        int n26 = n24 + n25 - 128;
                        if (n26 > n23) {
                            Client.queuedSoundEffectDelays[j] = -100;
                            continue;
                        }
                        if (n26 < 0) {
                            n26 = 0;
                        }
                        setUsernameToRemember = (n23 - n26) * class20.clientPreferences.method573(-1997740130) / n23;
                    }
                    else {
                        setUsernameToRemember = ClientPreferences.setUsernameToRemember(class20.clientPreferences, 2027661578);
                    }
                    if (setUsernameToRemember > 0) {
                        final RawPcmStream rawPcmStream = RawPcmStream.createRawPcmStream(soundEffect.toRawSound().resample(WorldMapSectionType.decimator), 100, setUsernameToRemember);
                        rawPcmStream.setNumLoops(Client.queuedSoundEffectLoops[j] - 1);
                        class130.pcmStreamMixer.addSubStream(rawPcmStream);
                    }
                    Client.queuedSoundEffectDelays[j] = -100;
                }
            }
        }
        if (Client.playingJingle && !class4.method8(-2055649946)) {
            if (ClientPreferences.xp(class20.clientPreferences, -1652176341) != 0 && -1 != Client.currentTrackGroupId * 1976903761) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, ClientPreferences.xp(class20.clientPreferences, -1702178442), false, -2126124034);
            }
            Client.playingJingle = false;
        }
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.field1136 -= 18974871;
        if (997558489 * Client.packetWriter.field1136 > 750) {
            class349.method1918(709882847);
            return;
        }
        class207.method1162(-1730046399);
        EnumComposition.method1013(-1074260583);
        final int[] players_indices = Players.Players_indices;
        for (int l = 0; l < -2010934433 * Players.Players_count; ++l) {
            final Player player = Client.players[players_indices[l]];
            if (null != player && player.dt * -536830723 > 0) {
                final Player player2 = player;
                player2.dt -= 1655791701;
                if (player.dt * -536830723 == 0) {
                    player.bw = null;
                }
            }
        }
        for (int n27 = 0; n27 < 265474485 * Client.npcCount; ++n27) {
            final NPC npc = Client.npcs[Client.npcIndices[n27]];
            if (npc != null && -536830723 * npc.dt > 0) {
                final NPC npc2 = npc;
                npc2.dt -= 1655791701;
                if (npc.dt * -536830723 == 0) {
                    npc.bw = null;
                }
            }
        }
        Client.field432 -= 603147329;
        if (-1306273505 * Client.mouseCrossColor != 0) {
            Client.mouseCrossState += 2130385748;
            if (Client.mouseCrossState * 1513573489 >= 400) {
                Client.mouseCrossColor = 0;
            }
        }
        final Widget mousedOverWidgetIf1 = MidiPcmStream.mousedOverWidgetIf1;
        final Widget field1274 = class130.field1274;
        MidiPcmStream.mousedOverWidgetIf1 = null;
        class130.field1274 = null;
        Client.draggedOnWidget = null;
        Client.field622 = false;
        Client.field540 = false;
        Client.field355 = 0;
        while (class207.mt(Client.keyHandlerInstance, 574639829) && Client.field355 * -1685179677 < 128) {
            if (324465533 * Client.staffModLevel >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -2062808305) && 66 == 546317845 * Client.keyHandlerInstance.field1867) {
                final StringBuilder sb = new StringBuilder();
                for (final Message message : Messages.Messages_hashTable) {
                    if (null != message.prefix && !message.prefix.isEmpty()) {
                        sb.append(message.prefix).append(':');
                    }
                    sb.append(message.sender).append('\n');
                }
                ScriptFrame.client.ao(sb.toString(), (byte)(-27));
            }
            else {
                if (Client.oculusOrbState * 986256295 == 1 && Client.keyHandlerInstance.field1866 > '\0') {
                    continue;
                }
                Client.field424[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1867 * 546317845;
                Client.field592[Client.field355 * -1685179677] = Client.keyHandlerInstance.field1866;
                Client.field355 += 703505099;
            }
        }
        if (Client.staffModLevel * 324465533 >= 2 && Client.keyHandlerInstance.getKeyPressed(82, -1958274147) && Client.keyHandlerInstance.getKeyPressed(81, -1376424121) && -121753353 * Client.mouseWheelRotation != 0) {
            int n28 = -1900490645 * MusicPatchNode.localPlayer.plane - Client.mouseWheelRotation * -121753353;
            if (n28 < 0) {
                n28 = 0;
            }
            else if (n28 > 3) {
                n28 = 3;
            }
            if (MusicPatchNode.localPlayer.plane * -1900490645 != n28) {
                final int n29 = WorldMapData_0.baseX * -1232093375 + MusicPatchNode.localPlayer.cf[0];
                final int n30 = 827352769 * GameObject.baseY + MusicPatchNode.localPlayer.dy[0];
                final PacketBufferNode packetBufferNode9 = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)(-29161));
                packetBufferNode9.packetBuffer.dy(0, (byte)4);
                packetBufferNode9.packetBuffer.bu(n29, (byte)11);
                packetBufferNode9.packetBuffer.eb(n28, (byte)(-64));
                packetBufferNode9.packetBuffer.ds(n30, -1260270508);
                Client.packetWriter.addNode(packetBufferNode9, 414135591);
            }
            Client.mouseWheelRotation = 0;
        }
        if (1 == MouseHandler.MouseHandler_lastButton * -1222491879) {
            Client.field590.method1138((byte)75);
        }
        if (-896157613 * Client.rootInterface != -1) {
            ReflectionCheck.updateRootInterface(Client.rootInterface * -896157613, 0, 0, Client.aj * -1687260435, 1658005443 * class262.canvasHeight, 0, 0, -631543188);
        }
        Client.cycleCntr -= 1340429835;
        while (true) {
            final ScriptEvent scriptEvent = (ScriptEvent)Client.field567.removeLast();
            if (scriptEvent == null) {
                break;
            }
            final Widget dragTarget = scriptEvent.dragTarget;
            if (55577617 * dragTarget.childIndex >= 0) {
                final Widget vmethod3380 = class165.vmethod3380(dragTarget.parentId * 913615679, (byte)5);
                if (null == vmethod3380 || null == vmethod3380.children || dragTarget.childIndex * 55577617 >= vmethod3380.children.length) {
                    continue;
                }
                if (dragTarget != vmethod3380.children[dragTarget.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent, (byte)(-27));
        }
        while (true) {
            final ScriptEvent scriptEvent2 = (ScriptEvent)Client.field568.removeLast();
            if (scriptEvent2 == null) {
                break;
            }
            final Widget dragTarget2 = scriptEvent2.dragTarget;
            if (55577617 * dragTarget2.childIndex >= 0) {
                final Widget vmethod3381 = class165.vmethod3380(dragTarget2.parentId * 913615679, (byte)5);
                if (vmethod3381 == null || vmethod3381.children == null || 55577617 * dragTarget2.childIndex >= vmethod3381.children.length) {
                    continue;
                }
                if (dragTarget2 != vmethod3381.children[dragTarget2.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent2, (byte)(-40));
        }
        while (true) {
            final ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.removeLast();
            if (null == scriptEvent3) {
                break;
            }
            final Widget dragTarget3 = scriptEvent3.dragTarget;
            if (dragTarget3.childIndex * 55577617 >= 0) {
                final Widget vmethod3382 = class165.vmethod3380(dragTarget3.parentId * 913615679, (byte)5);
                if (vmethod3382 == null || vmethod3382.children == null || dragTarget3.childIndex * 55577617 >= vmethod3382.children.length) {
                    continue;
                }
                if (dragTarget3 != vmethod3382.children[dragTarget3.childIndex * 55577617]) {
                    continue;
                }
            }
            HealthBarUpdate.set(scriptEvent3, (byte)10);
        }
        while (true) {
            final class206 class206 = (class206)Client.field569.removeLast();
            if (class206 == null) {
                break;
            }
            FriendsList.method2138(class206, -1067406692);
        }
        this.menu((byte)(-27));
        class36.method198((byte)(-96));
        if (Client.clickedWidget != null) {
            this.method389((byte)(-67));
        }
        if (Scene.shouldSendWalk()) {
            final int scene_selectedX = Scene.Scene_selectedX;
            final int scene_selectedY = Scene.Scene_selectedY;
            final PacketBufferNode packetBufferNode10 = class330.getPacketBufferNode(ClientPacket.field2523, Client.packetWriter.isaacCipher, (short)(-16341));
            packetBufferNode10.packetBuffer.bf(5, (byte)50);
            packetBufferNode10.packetBuffer.ds(GameObject.baseY * 827352769 + scene_selectedY, -1417187312);
            Buffer.ap(packetBufferNode10.packetBuffer, -1232093375 * WorldMapData_0.baseX + scene_selectedX, (byte)8);
            packetBufferNode10.packetBuffer.du(Client.keyHandlerInstance.getKeyPressed(82, -2026597037) ? (Client.keyHandlerInstance.getKeyPressed(81, -992779214) ? 2 : 1) : 0, -1873300046);
            Client.packetWriter.addNode(packetBufferNode10, 414135591);
            Scene.method1264();
            Client.mouseCrossX = MouseHandler.MouseHandler_lastPressedX * -1884483333;
            Client.mouseCrossY = 2130738719 * MouseHandler.MouseHandler_lastPressedY;
            Client.mouseCrossColor = -1453825313;
            Client.mouseCrossState = 0;
            Client.destinationX = -1970850269 * scene_selectedX;
            Client.destinationY = 875414437 * scene_selectedY;
        }
        if (mousedOverWidgetIf1 != MidiPcmStream.mousedOverWidgetIf1) {
            if (mousedOverWidgetIf1 != null) {
                class144.invalidateWidget(mousedOverWidgetIf1, -1243770238);
            }
            if (null != MidiPcmStream.mousedOverWidgetIf1) {
                class144.invalidateWidget(MidiPcmStream.mousedOverWidgetIf1, -1406242218);
            }
        }
        if (class130.field1274 != field1274 && 1239377975 * Client.field515 == 215597333 * Client.field514) {
            if (null != field1274) {
                class144.invalidateWidget(field1274, -1344517151);
            }
            if (class130.field1274 != null) {
                class144.invalidateWidget(class130.field1274, -1890900048);
            }
        }
        if (null != class130.field1274) {
            if (215597333 * Client.field514 < 1239377975 * Client.field515) {
                Client.field514 -= 1411611075;
                if (Client.field514 * 215597333 == Client.field515 * 1239377975) {
                    class144.invalidateWidget(class130.field1274, -2061730461);
                }
            }
        }
        else if (Client.field514 * 215597333 > 0) {
            Client.field514 += 1411611075;
        }
        if (Client.oculusOrbState * 986256295 == 0) {
            final int n31 = 1144428983 * MusicPatchNode.localPlayer.br;
            final int n32 = MusicPatchNode.localPlayer.ep * -411750205;
            if (-1958669353 * class33.oculusOrbFocalPointX - n31 < -500 || class33.oculusOrbFocalPointX * -1958669353 - n31 > 500 || class144.oculusOrbFocalPointY * -365969735 - n32 < -500 || -365969735 * class144.oculusOrbFocalPointY - n32 > 500) {
                class33.oculusOrbFocalPointX = n31 * 1293848551;
                class144.oculusOrbFocalPointY = 892004233 * n32;
            }
            if (n31 != class33.oculusOrbFocalPointX * -1958669353) {
                class33.oculusOrbFocalPointX += 1293848551 * ((n31 - class33.oculusOrbFocalPointX * -1958669353) / 16);
            }
            if (class144.oculusOrbFocalPointY * -365969735 != n32) {
                class144.oculusOrbFocalPointY += 892004233 * ((n32 - class144.oculusOrbFocalPointY * -365969735) / 16);
            }
            final int n33 = class33.oculusOrbFocalPointX * -1958669353 >> 7;
            final int n34 = class144.oculusOrbFocalPointY * -365969735 >> 7;
            final int tileHeight = class147.getTileHeight(class33.oculusOrbFocalPointX * -1958669353, -365969735 * class144.oculusOrbFocalPointY, -1727408401 * GameEngine.Client_plane, (byte)(-37));
            int n35 = 0;
            if (n33 > 3 && n34 > 3 && n33 < 100 && n34 < 100) {
                for (int n36 = n33 - 4; n36 <= n33 + 4; ++n36) {
                    for (int n37 = n34 - 4; n37 <= 4 + n34; ++n37) {
                        int n38 = -1727408401 * GameEngine.Client_plane;
                        if (n38 < 3 && 0x2 == (Tiles.Tiles_renderFlags[1][n36][n37] & 0x2)) {
                            ++n38;
                        }
                        final int n39 = tileHeight - Tiles.Tiles_heights[n38][n36][n37];
                        if (n39 > n35) {
                            n35 = n39;
                        }
                    }
                }
            }
            int n40 = n35 * 192;
            if (n40 > 98048) {
                n40 = 98048;
            }
            if (n40 < 32768) {
                n40 = 32768;
            }
            if (n40 > 205350563 * Client.field456) {
                Client.field456 += (n40 - Client.field456 * 205350563) / 24 * 800423179;
            }
            else if (n40 < 205350563 * Client.field456) {
                Client.field456 += 800423179 * ((n40 - 205350563 * Client.field456) / 80);
            }
            class96.field1064 = (class147.getTileHeight(MusicPatchNode.localPlayer.br * 1144428983, MusicPatchNode.localPlayer.ep * -411750205, -1727408401 * GameEngine.Client_plane, (byte)12) - Client.camFollowHeight * 394960243) * -1138369095;
        }
        else if (1 == Client.oculusOrbState * 986256295) {
            class324.method1838(266624130);
            int n41 = -1;
            if (Client.keyHandlerInstance.getKeyPressed(33, -1564709600)) {
                n41 = 0;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(49, -1098817201)) {
                n41 = 1024;
            }
            if (Client.keyHandlerInstance.getKeyPressed(48, -1954336035)) {
                if (n41 == 0) {
                    n41 = 1792;
                }
                else if (1024 == n41) {
                    n41 = 1280;
                }
                else {
                    n41 = 1536;
                }
            }
            else if (Client.keyHandlerInstance.getKeyPressed(50, -1826676696)) {
                if (n41 == 0) {
                    n41 = 256;
                }
                else if (1024 == n41) {
                    n41 = 768;
                }
                else {
                    n41 = 512;
                }
            }
            int n42 = 0;
            if (Client.keyHandlerInstance.getKeyPressed(35, -324097131)) {
                n42 = -1;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(51, 480993754)) {
                n42 = 1;
            }
            int n43 = 0;
            if (n41 >= 0 || n42 != 0) {
                n43 = (Client.keyHandlerInstance.getKeyPressed(81, -750979700) ? (Client.oculusOrbSlowedSpeed * 519949591) : (Client.oculusOrbNormalSpeed * 1101365113)) * 16;
                Client.field595 = n41 * -1988002169;
                Client.field398 = 818868517 * n42;
            }
            if (Client.field644 * -1277774705 < n43) {
                Client.field644 += n43 / 8 * 1574169199;
                if (Client.field644 * -1277774705 > n43) {
                    Client.field644 = n43 * 1574169199;
                }
            }
            else if (Client.field644 * -1277774705 > n43) {
                Client.field644 = 1384929543 * Client.field644 / 10 * 1574169199;
            }
            if (Client.field644 * -1277774705 > 0) {
                final int n44 = Client.field644 * -1277774705 / 16;
                if (1382999863 * Client.field595 >= 0) {
                    final int n45 = Client.field595 * 1382999863 - class125.cameraYaw * -1010818347 & 0x7FF;
                    final int n46 = Rasterizer3D.Rasterizer3D_sine[n45];
                    final int n47 = Rasterizer3D.Rasterizer3D_cosine[n45];
                    class33.oculusOrbFocalPointX += n44 * n46 / 65536 * 1293848551;
                    class144.oculusOrbFocalPointY += 892004233 * (n47 * n44 / 65536);
                }
                if (-168443219 * Client.field398 != 0) {
                    class96.field1064 += Client.field398 * -168443219 * n44 * -1138369095;
                    if (470489225 * class96.field1064 > 0) {
                        class96.field1064 = 0;
                    }
                }
            }
            else {
                Client.field595 = 1988002169;
                Client.field398 = -818868517;
            }
            if (Client.keyHandlerInstance.getKeyPressed(13, 499063701)) {
                Canvas.method92((byte)0);
            }
        }
        if (MouseHandler.MouseHandler_currentButton * 114417019 == 4 && class473.mouseCam) {
            final int n48 = MouseHandler.MouseHandler_y * -1224153235 - 332197605 * Client.mouseCamClickedY;
            Client.camAngleDX = 1932462086 * n48;
            Client.mouseCamClickedY = ((n48 == -1 || n48 == 1) ? (MouseHandler.MouseHandler_y * -1224153235) : ((332197605 * Client.mouseCamClickedY + -1224153235 * MouseHandler.MouseHandler_y) / 2)) * 1302863597;
            final int n49 = Client.mouseCamClickedX * -1491948821 - -2063363905 * MouseHandler.MouseHandler_x;
            Client.camAngleDY = n49 * -503524914;
            Client.mouseCamClickedX = ((-1 == n49 || n49 == 1) ? (MouseHandler.MouseHandler_x * -2063363905) : ((-1491948821 * Client.mouseCamClickedX + MouseHandler.MouseHandler_x * -2063363905) / 2)) * -837440061;
        }
        else {
            if (Client.keyHandlerInstance.getKeyPressed(96, 911006774)) {
                Client.camAngleDY += 1895721191 * ((-24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else if (Client.keyHandlerInstance.getKeyPressed(97, -1459942920)) {
                Client.camAngleDY += 1895721191 * ((24 - 1977625303 * Client.camAngleDY) / 2);
            }
            else {
                Client.camAngleDY = 1895721191 * (1977625303 * Client.camAngleDY / 2);
            }
            if (Client.keyHandlerInstance.getKeyPressed(98, 344794990)) {
                Client.camAngleDX += (12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else if (Client.keyHandlerInstance.getKeyPressed(99, 399884761)) {
                Client.camAngleDX += (-12 - Client.camAngleDX * 1441154731) / 2 * -1181252605;
            }
            else {
                Client.camAngleDX = 1441154731 * Client.camAngleDX / 2 * -1181252605;
            }
            Client.mouseCamClickedY = MouseHandler.MouseHandler_y * 652543465;
            Client.mouseCamClickedX = 1278432381 * MouseHandler.MouseHandler_x;
        }
        Client.camAngleY = 642728617 * (Client.camAngleDY * 1977625303 / 2 + 704283033 * Client.camAngleY & 0x7FF);
        Client.camAngleX += -637026513 * (Client.camAngleDX * 1441154731 / 2);
        if (Client.camAngleX * -954734641 < 128) {
            Client.camAngleX = 64984960;
        }
        if (Client.camAngleX * -954734641 > 383) {
            Client.camAngleX = 831981393;
        }
        if (Client.field598) {
            class1.method5((byte)123);
        }
        else if (Client.isCameraLocked) {
            if (!Client.field541) {
                final int n50 = 64 + ObjTypeCustomisation.field1471 * 957080960;
                final int n51 = 958794368 * class123.field1209 + 64;
                class133.method777(n50, class147.getTileHeight(n50, n51, GameEngine.Client_plane * -1727408401, (byte)(-120)) - class16.field54 * -887836823, n51, -261906725);
            }
            else if (null != Client.field535) {
                class36.cameraX = Client.field535.vmethod2321(2139819353) * -1682679895;
                class297.cameraZ = Client.field535.vmethod2319(2107399454) * 46344275;
                if (Client.field615) {
                    class174.cameraY = Client.field535.vmethod2320((byte)0) * -424093663;
                }
                else {
                    class174.cameraY = (class147.getTileHeight(class36.cameraX * -2100544359, -91399205 * class297.cameraZ, GameEngine.Client_plane * -1727408401, (byte)(-46)) - Client.field535.vmethod2320((byte)0)) * -424093663;
                }
                Client.field535.aa(459854508);
            }
            if (!Client.field614) {
                final int n52 = FontName.field3970 * 332584320 + 64;
                final int n53 = -1804719232 * MilliClock.field1455 + 64;
                final int n54 = class147.getTileHeight(n52, n53, GameEngine.Client_plane * -1727408401, (byte)(-38)) - ScriptFrame.field343 * 1496735347;
                final int n55 = n52 - -2100544359 * class36.cameraX;
                final int n56 = n54 - 1772923873 * class174.cameraY;
                final int n57 = n53 - -91399205 * class297.cameraZ;
                GraphicsObject.method433((int)(Math.atan2(n56, (int)Math.sqrt(n55 * n55 + n57 * n57)) * 325.9490051269531) & 0x7FF, (int)(Math.atan2(n55, n57) * -325.9490051269531) & 0x7FF, (byte)115);
            }
            else {
                if (null != Client.field604) {
                    WorldMapSectionType.cameraPitch = Client.field604.method2318(-1318894383) * 528729485;
                    WorldMapSectionType.cameraPitch = Math.min(Math.max(WorldMapSectionType.cameraPitch * 1897923909, 128), 383) * 528729485;
                    Client.field604.aa(-44150602);
                }
                if (Client.field617 != null) {
                    class125.cameraYaw = (Client.field617.method2318(-700439406) & 0x7FF) * -1545206147;
                    Client.field617.aa(-1871135924);
                }
            }
        }
        for (int n58 = 0; n58 < 5; ++n58) {
            final int[] cameraShakeCycle = Client.cameraShakeCycle;
            final int n59 = n58;
            ++cameraShakeCycle[n59];
        }
        class373.varcs.clearTransient(1336017719);
        final int value = SecureRandomFuture.get(586093578);
        final int idleCycles = Client.bq.getIdleCycles((byte)91);
        if (value > 15000 && idleCycles > 15000) {
            Client.logoutTimer = 719725026;
            MouseHandler.MouseHandler_idleCycles = 1393311740;
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.IF_BUTTON2, Client.packetWriter.isaacCipher, (short)(-29019)), 414135591);
        }
        World.friendSystem.processFriendUpdates(1673735823);
        for (int n60 = 0; n60 < Client.field649.size(); ++n60) {
            if (class20.method82((int)Client.field649.get(n60), 854271946) != 2) {
                Client.field649.remove(n60);
                --n60;
            }
        }
        final PacketWriter packetWriter2 = Client.packetWriter;
        packetWriter2.pendingWrites -= 1313905755;
        if (1383386157 * Client.packetWriter.pendingWrites > 50) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-8025)), 414135591);
        }
        try {
            PacketWriter.ok(Client.packetWriter, 421941662);
        }
        catch (IOException ex) {
            class349.method1918(709882847);
        }
    }
    
    public void wq(final boolean pcmPlayer_stereo) {
        PcmPlayer.PcmPlayer_stereo = pcmPlayer_stereo;
    }
    
    static final boolean wq(final int n, final int n2, final int n3, final int n4, final int n5) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (n == 593068225 * pendingSpawn2.plane && n2 == 68300005 * pendingSpawn2.x && n3 == 800888185 * pendingSpawn2.y && pendingSpawn2.type * -1586499579 == n4) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn != null) {
            pendingSpawn.field931 = n5 * -620279391;
            return true;
        }
        return false;
    }
    
    void pz() {
        if (1000 == -1275976559 * Client.gameState) {
            return;
        }
        if (!Tile.method1214((byte)8)) {
            this.doCycleJs5Connect(-121494842);
        }
    }
    
    public static void lz(final int n, final int n2) {
        final int[] array = new int[9];
        for (int i = 0; i < array.length; ++i) {
            final int n3 = i * 32 + 15 + 128;
            final int n4 = n3 * 3 + 600;
            final int n5 = Perspective.SINE[n3];
            int n6 = n2 - 334;
            if (n6 < 0) {
                n6 = 0;
            }
            else if (n6 > 100) {
                n6 = 100;
            }
            array[i] = ((Client.zoomWidth - Client.zoomHeight) * n6 / 100 + Client.zoomHeight) * n4 / 256 * n5 >> 16;
        }
        gs(array, 500, 800, n * 334 / n2, 334);
    }
    
    public void ef(final int[] spriteBuffer_spriteWidths) {
        class97.SpriteBuffer_spriteWidths = spriteBuffer_spriteWidths;
    }
    
    static final void qv(final boolean b) {
        if (b) {
            Client.field394 = (Login.field751 ? class135.field1299 : class135.field1301);
        }
        else {
            Client.field394 = (ClientPreferences.setBrightness(class20.clientPreferences, Login.Login_username, (byte)(-86)) ? class135.field1302 : class135.field1305);
        }
    }
    
    public static void kq(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final Scene scene, final CollisionMap collisionMap) {
        Client.ht = scene.wb[n][n2][n3];
        final byte[] array = scene.wb[n][n2];
        array[n3] &= 0xFFFFFFEF;
        if (n6 == 22 && ScriptFrame.client.kf()) {
            final int n7 = scene.cb[n][n2][n3] & 0x7FFF;
            if (n7 > 0) {
                final rl2 gk = Client.gk;
                assert gk != null;
                final FloorOverlayDefinition mt = gk.mt(n7 - 1);
                if (mt.hb() < 0 && mt.ue() == 16711935) {
                    ScriptFrame.client.resizeGame(false);
                    Client.lf = true;
                }
            }
        }
    }
    
    static String zr(String string, final Widget widget) {
        if (string.indexOf("%") != -1) {
            for (int i = 1; i <= 5; ++i) {
                while (true) {
                    final int index = string.indexOf("%" + i);
                    if (-1 == index) {
                        break;
                    }
                    final String substring = string.substring(0, index);
                    final int method478 = ArchiveLoader.method478(widget, i - 1, 1696113134);
                    String string2;
                    if (method478 < 999999999) {
                        string2 = Integer.toString(method478);
                    }
                    else {
                        string2 = "*";
                    }
                    string = substring + string2 + string.substring(index + 2);
                }
            }
        }
        return string;
    }
    
    static final void yt(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5) {
        SceneTilePaint.insertMenuItem(s, s2, n, n2, n3, n4, n5, false, (byte)103);
    }
    
    boolean vz(final PacketWriter packetWriter) {
        if (UserComparator5.friendsChat != null) {
            UserComparator5.friendsChat.method2146(packetWriter.packetBuffer, (byte)(-39));
        }
        Client.field558 = Client.cycleCntr * 235003969;
        GraphicsObject.ClanChat_inClanChat = true;
        packetWriter.field1133 = null;
        return true;
    }
    
    public FriendsChat vz() {
        return UserComparator5.friendsChat;
    }
    
    public GrandExchangeOffer[] vz() {
        return Client.grandExchangeOffers;
    }
    
    public void qj(final int n) {
        Client.chatCycle = n * -1979304211;
    }
    
    static final void qj() {
        Client.packetWriter.close(-1233008858);
        FloorOverlayDefinition.FloorOverlayDefinition_cached.clear();
        class294.method1607((byte)4);
        class4.method9(-518646489);
        class14.method56(-1946934367);
        class173.method958((byte)13);
        class379.method2015((byte)(-13));
        SequenceDefinition.SequenceDefinition_cached.clear();
        SequenceDefinition.SequenceDefinition_cachedFrames.clear();
        SequenceDefinition.SequenceDefinition_cachedModel.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cached.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cachedModels.clear();
        VarbitComposition.VarbitDefinition_cached.clear();
        VarpDefinition.VarpDefinition_cached.clear();
        class160.HitSplatDefinition_cachedSprites.method2418((byte)(-59));
        MenuAction.HitSplatDefinition_cached.method2418((byte)(-108));
        class432.method2285(1647264030);
        GrandExchangeEvent.method1922(-553788210);
        InterfaceParent.method488(-2130196514);
        class165.method921(1007165877);
        Strings.method1854(-1995598373);
        class383.method2084(1043374672);
        DbRowType.DBRowType_cache.clear();
        Client.Widget_cachedModels.clear();
        Client.Widget_cachedFonts.clear();
        GrandExchangeOfferTotalQuantityComparator.method1913(1463050370);
        class18.method75(-1680358742);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).clear(376224278);
        Script.Script_cached.clear();
        Client.archive5.method2127(2132163677);
        DevicePcmPlayerProvider.field67.ua(1903798827);
        GameBuild.archive7.ua(1903798827);
        class85.archive4.ua(1903798827);
        class426.field3811.ua(1903798827);
        GrandExchangeOfferTotalQuantityComparator.archive9.ua(1903798827);
        class399.archive6.ua(1903798827);
        FloorUnderlayDefinition.archive11.ua(1903798827);
        class452.archive8.ua(1903798827);
        WorldMapLabelSize.field2285.ua(1903798827);
        NetFileRequest.archive10.ua(1903798827);
        class195.field1645.ua(1903798827);
        class126.archive12.ua(1903798827);
        PcmPlayer.field211.ua(1903798827);
        class31.scene.clear();
        for (int i = 0; i < 4; ++i) {
            Client.collisionMaps[i].clear(2067705146);
        }
        Client.field590.method1138((byte)(-71));
        System.gc();
        class297.musicPlayerStatus = -1770463315;
        class297.musicTrackArchive = null;
        class379.musicTrackGroupId = 1643562499;
        VarpDefinition.musicTrackFileId = 578015095;
        class100.musicTrackVolume = 0;
        class120.musicTrackBoolean = false;
        class162.pcmSampleLength = 440964570;
        Client.currentTrackGroupId = -1225072817;
        Client.playingJingle = false;
        StructComposition.findEnumerated((byte)1);
        class138.updateGameState(10, 1482475039);
    }
    
    static final void wz(final boolean b, final PacketBuffer packetBuffer) {
        while (true) {
            final int n = 16;
            final int n2 = 1 << n;
            if (packetBuffer.readBits(889658999 * Client.packetWriter.serverPacketLength, 1751384746) < 12 + n) {
                break;
            }
            final int bitsRemaining = packetBuffer.bitsRemaining(n, -1123234746);
            if (n2 - 1 == bitsRemaining) {
                break;
            }
            int n3 = 0;
            if (null == Client.npcs[bitsRemaining]) {
                Client.npcs[bitsRemaining] = new NPC();
                n3 = 1;
            }
            final NPC npc = Client.npcs[bitsRemaining];
            Client.npcIndices[(Client.npcCount -= 1270221409) * 1994342679 - 1] = bitsRemaining;
            npc.de = Client.cycle * -1014023335;
            int n4;
            if (b) {
                n4 = packetBuffer.bitsRemaining(8, -1545687114);
                if (n4 > 127) {
                    n4 -= 256;
                }
            }
            else {
                n4 = packetBuffer.bitsRemaining(5, -1048810270);
                if (n4 > 15) {
                    n4 -= 32;
                }
            }
            if (packetBuffer.bitsRemaining(1, 360436398) == 1) {
                packetBuffer.bitsRemaining(-1639086506, -2003796629);
            }
            if (1 == packetBuffer.bitsRemaining(1, -170147370)) {
                Client.field417[(Client.field416 += 1487412345) * -1054924550 - 1] = bitsRemaining;
            }
            final int bitsRemaining2 = packetBuffer.bitsRemaining(1, -720580180);
            npc.definition = AbstractArchive.getNpcDefinition(packetBuffer.bitsRemaining(14, -569176459), (byte)(-100));
            int n5;
            if (b) {
                n5 = packetBuffer.bitsRemaining(8, -1974812174);
                if (n5 > 127) {
                    n5 -= 256;
                }
            }
            else {
                n5 = packetBuffer.bitsRemaining(5, 50929580);
                if (n5 > 15) {
                    n5 -= 32;
                }
            }
            final int n6 = Client.field561[packetBuffer.bitsRemaining(3, -488116125)];
            if (n3 != 0) {
                final NPC npc2 = npc;
                final NPC npc3 = npc;
                final int dx = 1587908241 * n6;
                npc3.dx = dx;
                npc2.bj = dx * -1716893729;
            }
            class142.method811(npc, (byte)88);
            if (npc.cv * 351748387 == 0) {
                npc.dx = 0;
            }
            npc.method594(n5 + MusicPatchNode.localPlayer.cf[0], n4 + MusicPatchNode.localPlayer.dy[0], bitsRemaining2, 1366870197);
        }
        packetBuffer.exportIndex((byte)(-66));
    }
    
    static final void yu(final int n, final int n2, final int n3, final int n4) {
        if (-303899309 * Client.isItemSelected == 0 && !Client.isSpellSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gc, "", 23, 0, n - n3, n2 - n4, (byte)89);
        }
        long n5 = -1L;
        long n6 = -1L;
        for (int i = 0; i < KeyHandler.method100((byte)33); ++i) {
            final long method130 = class30.method130(i, 888793230);
            if (n6 != method130) {
                n6 = method130;
                final int method131 = FaceNormal.method1294(i, -1872813990);
                final int method132 = ScriptFrame.method344(i, -1596442857);
                final int animate = TextureProvider.animate(ViewportMouse.ViewportMouse_entityTags[i]);
                final int entity_unpackID = InterfaceParent.Entity_unpackID(ViewportMouse.ViewportMouse_entityTags[i]);
                if (2 == animate && class31.scene.getObjectFlags(GameEngine.Client_plane * -1727408401, method131, method132, method130) >= 0) {
                    ObjectComposition objectComposition = class144.vmethod3248(entity_unpackID, (short)17939);
                    if (null != objectComposition.soundEffectIds) {
                        objectComposition = objectComposition.transform((byte)(-52));
                    }
                    if (null == objectComposition) {
                        continue;
                    }
                    PendingSpawn pendingSpawn = null;
                    for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
                        if (593068225 * pendingSpawn2.plane == -1727408401 * GameEngine.Client_plane && pendingSpawn2.x * 68300005 == method131 && 800888185 * pendingSpawn2.y == method132 && entity_unpackID == 552715177 * pendingSpawn2.id) {
                            pendingSpawn = pendingSpawn2;
                            break;
                        }
                    }
                    if (1 == -303899309 * Client.isItemSelected) {
                        MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(65535, -1251885804) + objectComposition.name, 1, entity_unpackID, method131, method132, (byte)32);
                    }
                    else if (Client.isSpellSelected) {
                        if ((SecureRandomFuture.selectedSpellFlags * 1457791911 & 0x4) == 0x4) {
                            MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(65535, -771886989) + objectComposition.name, 2, entity_unpackID, method131, method132, (byte)115);
                        }
                    }
                    else {
                        final String[] actions = objectComposition.actions;
                        if (actions != null) {
                            for (int j = 4; j >= 0; --j) {
                                if (pendingSpawn == null || pendingSpawn.method525(j, -633273091)) {
                                    if (null != actions[j]) {
                                        int n7 = 0;
                                        if (j == 0) {
                                            n7 = 3;
                                        }
                                        if (j == 1) {
                                            n7 = 4;
                                        }
                                        if (j == 2) {
                                            n7 = 5;
                                        }
                                        if (j == 3) {
                                            n7 = 6;
                                        }
                                        if (j == 4) {
                                            n7 = 1001;
                                        }
                                        MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(65535, -144685739) + objectComposition.name, n7, entity_unpackID, method131, method132, (byte)119);
                                    }
                                }
                            }
                        }
                        MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(65535, -412663932) + objectComposition.name, 1002, -1529817365 * objectComposition.id, method131, method132, (byte)32);
                    }
                }
                if (animate != 0) {
                    final NPC npc = Client.npcs[entity_unpackID];
                    if (null == npc) {
                        continue;
                    }
                    if (npc.definition.size * 1458410691 == 1 && 0x40 == (npc.br * 1144428983 & 0x7F) && 0x40 == (npc.ep * -411750205 & 0x7F)) {
                        for (int k = 0; k < 265474485 * Client.npcCount; ++k) {
                            final NPC npc2 = Client.npcs[Client.npcIndices[k]];
                            if (null != npc2 && npc != npc2 && 1458410691 * npc2.definition.size == 1 && npc.br * 1144428983 == npc2.br * 1144428983 && -411750205 * npc.ep == -411750205 * npc2.ep) {
                                InvDefinition.addNpcToMenu(npc2, Client.npcIndices[k], method131, method132, (short)4797);
                            }
                        }
                        final int n8 = Players.Players_count * -2010934433;
                        final int[] players_indices = Players.Players_indices;
                        for (int l = 0; l < n8; ++l) {
                            final Player player = Client.players[players_indices[l]];
                            if (null != player && 1144428983 * player.br == 1144428983 * npc.br && -411750205 * player.ep == npc.ep * -411750205) {
                                DynamicObject.addPlayerToMenu(player, players_indices[l], method131, method132, 1402248095);
                            }
                        }
                    }
                    InvDefinition.addNpcToMenu(npc, entity_unpackID, method131, method132, (short)3730);
                }
                if (animate == 0) {
                    final Player player2 = Client.players[entity_unpackID];
                    if (null == player2) {
                        continue;
                    }
                    if (0x40 == (1144428983 * player2.br & 0x7F) && 0x40 == (-411750205 * player2.ep & 0x7F)) {
                        for (int n9 = 0; n9 < Client.npcCount * 265474485; ++n9) {
                            final NPC npc3 = Client.npcs[Client.npcIndices[n9]];
                            if (npc3 != null && 1458410691 * npc3.definition.size == 1 && 1144428983 * player2.br == npc3.br * 1144428983 && npc3.ep * -411750205 == player2.ep * -411750205) {
                                InvDefinition.addNpcToMenu(npc3, Client.npcIndices[n9], method131, method132, (short)12956);
                            }
                        }
                        final int n10 = Players.Players_count * -2010934433;
                        final int[] players_indices2 = Players.Players_indices;
                        for (int n11 = 0; n11 < n10; ++n11) {
                            final Player player3 = Client.players[players_indices2[n11]];
                            if (null != player3 && player2 != player3 && 1144428983 * player2.br == player3.br * 1144428983 && -411750205 * player3.ep == -411750205 * player2.ep) {
                                DynamicObject.addPlayerToMenu(player3, players_indices2[n11], method131, method132, 1402248095);
                            }
                        }
                    }
                    if (entity_unpackID != Client.combatTargetPlayerIndex * -1565733637) {
                        DynamicObject.addPlayerToMenu(player2, entity_unpackID, method131, method132, 1402248095);
                    }
                    else {
                        n5 = n6;
                    }
                }
                if (animate == 3) {
                    final NodeDeque nodeDeque = Client.groundItems[-1727408401 * GameEngine.Client_plane][method131][method132];
                    if (null != nodeDeque) {
                        for (TileItem tileItem = (TileItem)nodeDeque.first(); null != tileItem; tileItem = (TileItem)nodeDeque.next()) {
                            final ItemComposition set = HealthBarUpdate.set(176307405 * tileItem.id, (byte)68);
                            if (1 == Client.isItemSelected * -303899309) {
                                MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(16748608, -1344313696) + set.name, 16, tileItem.id * 176307405, method131, method132, (byte)35);
                            }
                            else if (Client.isSpellSelected) {
                                if (0x1 == (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x1)) {
                                    MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16748608, -1829140578) + set.name, 17, 176307405 * tileItem.id, method131, method132, (byte)83);
                                }
                            }
                            else {
                                final String[] groundActions = set.groundActions;
                                for (int n12 = 4; n12 >= 0; --n12) {
                                    if (TileItem.rm(tileItem, n12, 1855948257)) {
                                        if (groundActions != null && groundActions[n12] != null) {
                                            int n13 = 0;
                                            if (n12 == 0) {
                                                n13 = 18;
                                            }
                                            if (n12 == 1) {
                                                n13 = 19;
                                            }
                                            if (n12 == 2) {
                                                n13 = 20;
                                            }
                                            if (n12 == 3) {
                                                n13 = 21;
                                            }
                                            if (4 == n12) {
                                                n13 = 22;
                                            }
                                            MenuAction.insertMenuItemNoShift(groundActions[n12], class383.method2081(16748608, -1568018203) + set.name, n13, 176307405 * tileItem.id, method131, method132, (byte)104);
                                        }
                                        else if (n12 == 2) {
                                            MenuAction.insertMenuItemNoShift(Strings.an, class383.method2081(16748608, 486640197) + set.name, 20, 176307405 * tileItem.id, method131, method132, (byte)116);
                                        }
                                    }
                                }
                                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16748608, 28860139) + set.name, 1004, tileItem.id * 176307405, method131, method132, (byte)117);
                            }
                        }
                    }
                }
            }
        }
        if (n5 != -1L) {
            DynamicObject.addPlayerToMenu(Client.players[Client.combatTargetPlayerIndex * -1565733637], -1565733637 * Client.combatTargetPlayerIndex, (int)(n5 >>> 0 & 0x7FL), NPCComposition.method1022(n5), 1402248095);
        }
    }
    
    boolean vr(final PacketWriter packetWriter, final int n) {
        if (0 == packetWriter.serverPacketLength * 889658999) {
            UserComparator5.friendsChat = null;
        }
        else {
            if (null == UserComparator5.friendsChat) {
                UserComparator5.friendsChat = new FriendsChat(class70.loginType, ScriptFrame.client);
            }
            UserComparator5.friendsChat.method2142(packetWriter.packetBuffer, n, (byte)1);
        }
        Client.field558 = Client.cycleCntr * 235003969;
        GraphicsObject.ClanChat_inClanChat = true;
        packetWriter.field1133 = null;
        return true;
    }
    
    public void vr(final int scene_cameraXTileMin) {
        Scene.Scene_cameraXTileMin = scene_cameraXTileMin;
    }
    
    public static boolean vr(final Client client) {
        if (client == null) {
            client.fx();
        }
        return null != ModeWhere.field3571 && !ModeWhere.field3571.trim().isEmpty() && TileItem.field1079 != null && !TileItem.field1079.trim().isEmpty();
    }
    
    static final void tu(int n, int n2, int n3, int n4) {
        Client.viewportDrawCount += 824826536;
        if (MusicPatchNode.localPlayer.br * 1144428983 >> 7 == 1494100363 * Client.destinationX && Client.destinationY * 500040821 == MusicPatchNode.localPlayer.ep * -1095171252 >> 7) {
            Client.destinationX = 0;
        }
        TileItem.method627((byte)0);
        if (-1565733637 * Client.combatTargetPlayerIndex >= 0 && Client.players[1225670815 * Client.combatTargetPlayerIndex] != null) {
            MouseHandler.addPlayerToScene(Client.players[Client.combatTargetPlayerIndex * -1565733637], false, -1861126010);
        }
        RouteStrategy.addNpcsToScene(true, (short)7653);
        final int n5 = Players.Players_count * -2010934433;
        final int[] players_indices = Players.Players_indices;
        for (int i = 0; i < n5; ++i) {
            if (Client.combatTargetPlayerIndex * -1716118495 != players_indices[i]) {
                if (Client.localPlayerIndex * -549033243 != players_indices[i]) {
                    MouseHandler.addPlayerToScene(Client.players[players_indices[i]], true, -1861126010);
                }
            }
        }
        RouteStrategy.addNpcsToScene(false, (short)28891);
        class142.method810(1215119663);
        GraphicsDefaults.method2228((byte)(-81));
        class36.setViewportShape(n, n2, n3, n4, true, 1636375513);
        n = -130019061 * Client.viewportOffsetX;
        n2 = Client.viewportOffsetY * 1352043351;
        n3 = 433849721 * Client.viewportWidth;
        n4 = -557989307 * Client.viewportHeight;
        Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n2 + n4);
        class18.method68(-613630041);
        Rasterizer2D.method2586();
        int n6 = 1434668763 * Client.camAngleX;
        if (205350563 * Client.field456 / 256 > n6) {
            n6 = Client.field456 * 205350563 / 256;
        }
        if (Client.field620[4] && Client.field643[4] - 1658580533 > n6) {
            n6 = Client.field643[4] - 88568603;
        }
        final int n7 = 704283033 * Client.camAngleY & 0x7FF;
        final int n8 = class33.oculusOrbFocalPointX * -1301095293;
        final int n9 = class96.field1064 * -362505000;
        final int n10 = class144.oculusOrbFocalPointY * 707110696;
        final int method1389 = WorldMapData_0.method1389(n6, (byte)(-19));
        int n11 = n4 - 334;
        if (n11 < 0) {
            n11 = 0;
        }
        else if (n11 > 100) {
            n11 = -895822446;
        }
        final int n12 = method1389 * (Client.zoomHeight + n11 * (Client.zoomWidth - Client.zoomHeight) / 100) / -534282515;
        final int n13 = 186903914 - n6 & 0x7FF;
        final int n14 = 1485781216 - n7 & 0xEC29AF1C;
        int n15 = 0;
        int n16 = 0;
        int n17 = n12;
        if (n13 != 0) {
            final int n18 = Rasterizer3D.Rasterizer3D_sine[n13];
            final int n19 = Rasterizer3D.Rasterizer3D_cosine[n13];
            final int n20 = n19 * n16 - n18 * n17 >> 16;
            n17 = n18 * n16 + n17 * n19 >> 16;
            n16 = n20;
        }
        if (n14 != 0) {
            final int n21 = Rasterizer3D.Rasterizer3D_sine[n14];
            final int n22 = Rasterizer3D.Rasterizer3D_cosine[n14];
            final int n23 = n15 * n22 + n21 * n17 >> 16;
            n17 = n17 * n22 - n21 * n15 >> 16;
            n15 = n23;
        }
        if (Client.isCameraLocked) {
            WorldMapRectangle.field2405 = (n8 - n15) * -423688045;
            Players.field1095 = (n9 - n16) * 960910537;
            KitDefinition.field1519 = 1637163077 * (n10 - n17);
            ScriptEvent.field851 = -1515685708 * n6;
            class86.field888 = 1933421953 * n7;
        }
        else {
            class36.cameraX = (n8 - n15) * -1682679895;
            class174.cameraY = -424093663 * (n9 - n16);
            class297.cameraZ = 46344275 * (n10 - n17);
            WorldMapSectionType.cameraPitch = n6 * 528729485;
            class125.cameraYaw = n7 * -1545206147;
        }
        if (1 == -35966683 * Client.oculusOrbState && Client.staffModLevel * 324465533 >= 2 && 0 == Client.cycle * 114202559 % -1136139190 && (418644869 * MusicPatchNode.localPlayer.br >> 7 != 200461420 * class33.oculusOrbFocalPointX >> 7 || 839064235 * class144.oculusOrbFocalPointY >> 7 != -411750205 * MusicPatchNode.localPlayer.ep >> 7)) {
            final int n24 = MusicPatchNode.localPlayer.plane * -1900490645;
            final int n25 = -1232093375 * WorldMapData_0.baseX + (class33.oculusOrbFocalPointX * 1544276661 >> 7);
            final int n26 = 1118492849 * GameObject.baseY + (class144.oculusOrbFocalPointY * -365969735 >> 7);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2545, Client.packetWriter.isaacCipher, (short)878);
            packetBufferNode.packetBuffer.dy(1263827259 * Client.field444, (byte)(-52));
            packetBufferNode.packetBuffer.bu(n25, (byte)72);
            packetBufferNode.packetBuffer.eb(n24, (byte)(-111));
            packetBufferNode.packetBuffer.ds(n26, -1283190465);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
        int method1390;
        if (!Client.isCameraLocked) {
            method1390 = UserComparator3.method702((byte)99);
        }
        else {
            int n27;
            if (class20.clientPreferences.getRoofsHidden(-2143891589)) {
                n27 = -1987780184 * GameEngine.Client_plane;
            }
            else if (class147.getTileHeight(-2052163733 * class36.cameraX, class297.cameraZ * -91399205, GameEngine.Client_plane * -1727408401, (byte)2) - class174.cameraY * -1976561512 < 800 && 0x0 != (Tiles.Tiles_renderFlags[-1738607702 * GameEngine.Client_plane][356017484 * class36.cameraX >> 7][class297.cameraZ * -1452063654 >> 7] & 0x4)) {
                n27 = GameEngine.Client_plane * -1727408401;
            }
            else {
                n27 = 3;
            }
            method1390 = n27;
        }
        final int n28 = 2035661785 * class36.cameraX;
        final int n29 = -1650424458 * class174.cameraY;
        final int n30 = -91399205 * class297.cameraZ;
        final int n31 = WorldMapSectionType.cameraPitch * 1897923909;
        final int n32 = 977466492 * class125.cameraYaw;
        for (int j = 0; j < 5; ++j) {
            if (Client.field620[j]) {
                final int n33 = (int)(Math.random() * (Client.field621[j] * 2 + 1) - Client.field621[j] + Math.sin(Client.cameraShakeCycle[j] * (Client.field499[j] / 100.0)) * Client.field643[j]);
                if (j == 0) {
                    class36.cameraX += -547579865 * n33;
                }
                if (j != 0) {
                    class174.cameraY += -424093663 * n33;
                }
                if (j == 2) {
                    class297.cameraZ += 46344275 * n33;
                }
                if (3 == j) {
                    class125.cameraYaw = (class125.cameraYaw * -1010818347 + n33 & 0x1344E8D6) * -1545206147;
                }
                if (4 == j) {
                    WorldMapSectionType.cameraPitch += 528729485 * n33;
                    if (1558839220 * WorldMapSectionType.cameraPitch < -1768605361) {
                        WorldMapSectionType.cameraPitch = -32973631;
                    }
                    if (1897923909 * WorldMapSectionType.cameraPitch > 383) {
                        WorldMapSectionType.cameraPitch = 639929843;
                    }
                }
            }
        }
        int n34 = -2063363905 * MouseHandler.MouseHandler_x;
        int n35 = 1218057185 * MouseHandler.MouseHandler_y;
        if (0 != MouseHandler.MouseHandler_lastButton * -1222491879) {
            n34 = 2020601481 * MouseHandler.MouseHandler_lastPressedX;
            n35 = 1163896205 * MouseHandler.MouseHandler_lastPressedY;
        }
        if (n34 >= n && n34 < n + n3 && n35 >= n2 && n35 < n2 + n4) {
            final int n36 = n34 - n;
            final int n37 = n35 - n2;
            ViewportMouse.ViewportMouse_x = -580855267 * n36;
            ViewportMouse.ViewportMouse_y = n37 * 1124836073;
            ViewportMouse.ViewportMouse_isInViewport = true;
            ViewportMouse.ViewportMouse_entityCount = 0;
            ViewportMouse.ViewportMouse_false0 = false;
        }
        else {
            class146.method829(33361214);
        }
        class323.playPcmPlayers(-1124747309);
        qb(n, n2, n3, n4, 0);
        class323.playPcmPlayers(-649599201);
        final int get3dZoom = UserComparator7.get3dZoom(-1898264045);
        class314.method1779(ScriptFrame.client.by, 1484178162);
        Rasterizer3D.clips.field2227 = Client.viewportZoom * 1241253503;
        Scene.mq(class31.scene, -2100544359 * class36.cameraX, -171784682 * class174.cameraY, 1204662865 * class297.cameraZ, 1897923909 * WorldMapSectionType.cameraPitch, class125.cameraYaw * -1010818347, method1390);
        class314.method1779(false, 1910713317);
        if (Client.renderSelf) {
            Rasterizer2D.method2578();
        }
        Rasterizer3D.clips.field2227 = get3dZoom * 1001249361;
        class323.playPcmPlayers(-356663412);
        class31.scene.clearTempGameObjects();
        Client.overheadTextCount = 0;
        boolean b = false;
        int n38 = -1;
        int n39 = -1;
        final int n40 = Players.Players_count * -2010934433;
        final int[] players_indices2 = Players.Players_indices;
        for (int k = 0; k < -154322615 * Client.npcCount + n40; ++k) {
            Actor actor;
            if (k < n40) {
                actor = Client.players[players_indices2[k]];
                if (players_indices2[k] == -1565733637 * Client.combatTargetPlayerIndex) {
                    b = true;
                    n38 = k;
                    continue;
                }
                if (MusicPatchNode.localPlayer == actor) {
                    n39 = k;
                    continue;
                }
            }
            else {
                actor = Client.npcs[Client.npcIndices[k - n40]];
            }
            class33.drawActor2d(actor, k, n, n2, n3, n4, 1538298261);
        }
        if (Client.field482 && -1 != n39) {
            class33.drawActor2d(MusicPatchNode.localPlayer, n39, n, n2, n3, n4, 1538298261);
        }
        if (b) {
            class33.drawActor2d(Client.players[-1552331004 * Client.combatTargetPlayerIndex], n38, n, n2, n3, n4, 1538298261);
        }
        for (int l = 0; l < Client.overheadTextCount * 734988573; ++l) {
            final int n41 = Client.overheadTextXs[l];
            int n42 = Client.overheadTextYs[l];
            final int n43 = Client.overheadTextXOffsets[l];
            final int n44 = Client.overheadTextAscents[l];
            int n45 = 1;
            while (n45 != 0) {
                n45 = 0;
                for (int n46 = 0; n46 < l; ++n46) {
                    if (n42 + 2 > Client.overheadTextYs[n46] - Client.overheadTextAscents[n46] && n42 - n44 < 2 + Client.overheadTextYs[n46] && n41 - n43 < Client.overheadTextXOffsets[n46] + Client.overheadTextXs[n46] && n41 + n43 > Client.overheadTextXs[n46] - Client.overheadTextXOffsets[n46] && Client.overheadTextYs[n46] - Client.overheadTextAscents[n46] < n42) {
                        n42 = Client.overheadTextYs[n46] - Client.overheadTextAscents[n46];
                        n45 = 1;
                    }
                }
            }
            Client.viewportTempX = 985355220 * Client.overheadTextXs[l];
            final int[] overheadTextYs = Client.overheadTextYs;
            final int n47 = l;
            final int n48 = n42;
            overheadTextYs[n47] = n48;
            Client.viewportTempY = n48 * -1610031701;
            final String s = Client.overheadText[l];
            if (0 == Client.chatEffects * 395188193) {
                int n49 = 1311774910;
                if (Client.overheadTextColors[l] < 6) {
                    n49 = Client.field583[Client.overheadTextColors[l]];
                }
                if (Client.overheadTextColors[l] == 6) {
                    n49 = ((Client.viewportDrawCount * 40784486 % 20 < 10) ? 16711680 : 1528240047);
                }
                if (7 == Client.overheadTextColors[l]) {
                    n49 = ((2041464667 * Client.viewportDrawCount % 20 < 10) ? 255 : 65535);
                }
                if (8 == Client.overheadTextColors[l]) {
                    n49 = ((Client.viewportDrawCount * 2041464667 % 20 < 10) ? 1387371930 : 1767638068);
                }
                if (9 == Client.overheadTextColors[l]) {
                    final int n50 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n50 < 50) {
                        n49 = n50 * 530367524 + 16711680;
                    }
                    else if (n50 < 100) {
                        n49 = 16776960 - (n50 - 282920673) * -1127499604;
                    }
                    else if (n50 < 150) {
                        n49 = 5 * (n50 - 100) + 65280;
                    }
                }
                if (10 == Client.overheadTextColors[l]) {
                    final int n51 = 150 - Client.overheadTextCyclesRemaining[l];
                    if (n51 < 50) {
                        n49 = 5 * n51 + 16711680;
                    }
                    else if (n51 < -1975199048) {
                        n49 = 16711935 - (n51 - 591317228) * 779420047;
                    }
                    else if (n51 < 150) {
                        n49 = 255 + 327680 * (n51 + 39603496) - 5 * (n51 - 100);
                    }
                }
                if (11 == Client.overheadTextColors[l]) {
                    final int n52 = -1156616158 - Client.overheadTextCyclesRemaining[l];
                    if (n52 < 50) {
                        n49 = -728917790 - n52 * 327685;
                    }
                    else if (n52 < 100) {
                        n49 = 65280 + 327685 * (n52 - 461751233);
                    }
                    else if (n52 < -205165898) {
                        n49 = 16777215 - (n52 + 948160584) * -1683918151;
                    }
                }
                if (0 == Client.overheadTextEffects[l]) {
                    class137.fontBold12.aj(s, n + Client.viewportTempX * 1481714934, n2 + 901665131 * Client.viewportTempY, n49, 0);
                }
                if (Client.overheadTextEffects[l] == 1) {
                    class137.fontBold12.ae(s, -1848743379 * Client.viewportTempX + n, Client.viewportTempY * 318977283 + n2, n49, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 2) {
                    class137.fontBold12.ap(s, 2003666963 * Client.viewportTempX + n, n2 + 318977283 * Client.viewportTempY, n49, 0, Client.viewportDrawCount * 2041464667);
                }
                if (Client.overheadTextEffects[l] == 3) {
                    class137.fontBold12.by(s, n + Client.viewportTempX * -1848743379, n2 + 318977283 * Client.viewportTempY, n49, 0, 2041464667 * Client.viewportDrawCount, 150 - Client.overheadTextCyclesRemaining[l]);
                }
                if (4 == Client.overheadTextEffects[l]) {
                    final int n53 = (-1056807831 - Client.overheadTextCyclesRemaining[l]) * (class137.fontBold12.bf(s) + 100) / 150;
                    Rasterizer2D.Rasterizer2D_expandClip(1855527032 * Client.viewportTempX + n - 50, n2, n + Client.viewportTempX * -86142256 + 50, n4 + n2);
                    class492.xb(class137.fontBold12, s, 127239935 + (n + -1848743379 * Client.viewportTempX) - n53, n2 + Client.viewportTempY * 318977283, n49, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n + n3, n2 + n4);
                }
                if (Client.overheadTextEffects[l] == 5) {
                    final int n54 = -330066558 - Client.overheadTextCyclesRemaining[l];
                    int n55 = 0;
                    if (n54 < 25) {
                        n55 = n54 - 25;
                    }
                    else if (n54 > 944171086) {
                        n55 = n54 - 1583882585;
                    }
                    Rasterizer2D.Rasterizer2D_expandClip(n, n2 + -161376033 * Client.viewportTempY - class137.fontBold12.al - 1, n3 + n, 5 + (318977283 * Client.viewportTempY + n2));
                    class137.fontBold12.aj(s, n + Client.viewportTempX * -1848743379, n2 + 1239201368 * Client.viewportTempY + n55, n49, 0);
                    Rasterizer2D.Rasterizer2D_setClip(n, n2, n3 + n, n4 + n2);
                }
            }
            else {
                class137.fontBold12.aj(s, Client.viewportTempX * -1848743379 + n, n2 + -2030848158 * Client.viewportTempY, 16776960, 0);
            }
        }
        class317.method1828(n, n2, 1666940377);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).animate(Client.field432 * -825739042, -1363752294);
        Friend.method2153(-1530842203);
        class36.cameraX = -1682679895 * n28;
        class174.cameraY = -651867120 * n29;
        class297.cameraZ = n30 * 445880525;
        WorldMapSectionType.cameraPitch = n31 * 78515285;
        class125.cameraYaw = n32 * 1216715790;
        if (Client.isLoading && HorizontalAlignment.method1019(true, false, (byte)46) == 0) {
            Client.isLoading = false;
        }
        if (Client.isLoading) {
            qb(n, n2, n3, n4, 0);
            WorldMapDecoration.drawLoadingMessage(Strings.ao, false, 832427831);
        }
    }
    
    static final void qy() {
        if (-348023238 * Client.logoutTimer > 0) {
            class31.logOut(1495811366);
            return;
        }
        Timer.fw(Client.timer, -2034982139);
        class138.updateGameState(-388939397, 851200222);
        class333.field3090 = Client.packetWriter.getSocket((byte)100);
        PacketWriter.ty(Client.packetWriter, -274968704);
    }
    
    static final void zw(final Widget[] field2292, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
        class18.method68(1758350492);
        for (int i = 0; i < field2292.length; ++i) {
            final Widget widget = field2292[i];
            if (widget != null) {
                if (widget.parentId * -1017984816 != n) {
                    if (n != -1412584499) {
                        continue;
                    }
                    if (Client.clickedWidget != widget) {
                        continue;
                    }
                }
                int n9;
                if (n8 == -1) {
                    Client.rootWidgetXs[Client.rootWidgetCount * 666383667] = n6 + 2025844547 * widget.x;
                    Client.rootWidgetYs[-356793645 * Client.rootWidgetCount] = widget.y * -747355095 + n7;
                    Client.rootWidgetWidths[604370275 * Client.rootWidgetCount] = -794961409 * widget.width;
                    Client.rootWidgetHeights[-356793645 * Client.rootWidgetCount] = -1896361681 * widget.height;
                    n9 = (Client.rootWidgetCount -= 556116578) * -356793645 - 1;
                }
                else {
                    n9 = n8;
                }
                widget.rootIndex = n9 * 852593000;
                widget.cycle = -1210524474 * Client.cycle;
                if (!widget.modelOrthog || !class393.isComponentHidden(widget, (byte)1)) {
                    if (1021339961 * widget.contentType > 0) {
                        MouseHandler.method193(widget, 178661540);
                    }
                    int n10 = n6 + 262951665 * widget.x;
                    int n11 = n7 + -747355095 * widget.y;
                    int n12 = 1634279623 * widget.transparencyTop;
                    if (widget == Client.clickedWidget) {
                        if (-1318708210 != n && !widget.spriteFlipH) {
                            WorldMapSection2.field2292 = field2292;
                            class230.field2130 = n6 * -774716861;
                            class101.field1082 = 389070991 * n7;
                            continue;
                        }
                        if (Client.isDraggingWidget && Client.field540) {
                            final int n13 = 1107095598 * MouseHandler.MouseHandler_x;
                            final int n14 = MouseHandler.MouseHandler_y * 1860936792;
                            int n15 = n13 - Client.widgetClickX * -1789924433;
                            int n16 = n14 - 1409529273 * Client.widgetClickY;
                            if (n15 < 1701601726 * Client.field495) {
                                n15 = Client.field495 * 1084046795;
                            }
                            if (n15 + -1051873303 * widget.width > -794961409 * Client.clickedWidgetParent.width + 1084046795 * Client.field495) {
                                n15 = -1956598356 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - widget.width * 1984730591;
                            }
                            if (n16 < Client.field542 * -746723443) {
                                n16 = Client.field542 * -746723443;
                            }
                            if (-48962283 * widget.height + n16 > Client.clickedWidgetParent.height * 1473950221 + -746723443 * Client.field542) {
                                n16 = Client.clickedWidgetParent.height * 1473950221 + Client.field542 * -1096674871 - 1473950221 * widget.height;
                            }
                            n10 = n15;
                            n11 = n16;
                        }
                        if (!widget.spriteFlipH) {
                            n12 = -1784301237;
                        }
                    }
                    int n23;
                    int n24;
                    int n25;
                    int n26;
                    if (9 == widget.type * 1256835986) {
                        int n17 = n10;
                        int n18 = n11;
                        int n19 = n10 + 302425154 * widget.width;
                        int n20 = widget.height * -48023112 + n11;
                        if (n19 < n17) {
                            final int n21 = n17;
                            n17 = n19;
                            n19 = n21;
                        }
                        if (n20 < n18) {
                            final int n22 = n18;
                            n18 = n20;
                            n20 = n22;
                        }
                        ++n19;
                        ++n20;
                        n23 = ((n17 > n2) ? n17 : n2);
                        n24 = ((n18 > n3) ? n18 : n3);
                        n25 = ((n19 < n4) ? n19 : n4);
                        n26 = ((n20 < n5) ? n20 : n5);
                    }
                    else {
                        final int n27 = widget.width * -794961409 + n10;
                        final int n28 = widget.height * 510448942 + n11;
                        n23 = ((n10 > n2) ? n10 : n2);
                        n24 = ((n11 > n3) ? n11 : n3);
                        n25 = ((n27 < n4) ? n27 : n4);
                        n26 = ((n28 < n5) ? n28 : n5);
                    }
                    if (widget.modelOrthog) {
                        if (n23 >= n25) {
                            continue;
                        }
                        if (n24 >= n26) {
                            continue;
                        }
                    }
                    if (widget.contentType * 1021339961 != 0) {
                        if (603215670 * widget.contentType == 1451936437) {
                            if (class20.clientPreferences.method562((short)12031)) {
                                n11 += 15;
                                WallDecoration.fontPlain12.as("Fps:" + Client.aa * 2001768332, n10 + 37750512 * widget.width, n11, 16776960, -1);
                                n11 += 15;
                                final Runtime runtime = Runtime.getRuntime();
                                final int j = (int)((runtime.totalMemory() - runtime.freeMemory()) / 1024L);
                                int n29 = 16776960;
                                if (j > 327680 && !Client.isLowDetail) {
                                    n29 = 16711680;
                                }
                                WallDecoration.fontPlain12.as("Mem:" + j + "k", n10 + 2012777288 * widget.width, n11, n29, -1);
                                n11 += 15;
                            }
                            continue;
                        }
                        else {
                            if (widget.contentType * -352938889 == 1337) {
                                Client.viewportX = n10 * 563689483;
                                Client.viewportY = n11 * 2111961447;
                                class18.drawEntities(n10, n11, widget.width * -794961409, widget.height * -1604146576, -768467712);
                                Client.field573[widget.rootIndex * 171102403] = true;
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1021339961 * widget.contentType == -1439500074) {
                                class155.drawMinimap(widget, n10, n11, n9, 1338837778);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (72337175 == widget.contentType * 1021339961) {
                                DynamicObject.drawCompass(widget, n10, n11, n9, 1823767529);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (widget.contentType * -1021467731 == 1293066601) {
                                WorldMap.flashCategory(class126.worldMap, n10, n11, 1923683382 * widget.width, widget.height * 1473950221, Client.cycle * -394602698, -2119722549);
                            }
                            if (134971652 == 1021339961 * widget.contentType) {
                                class126.worldMap.drawOverview(n10, n11, widget.width * 397834778, -1202109267 * widget.height, (byte)42);
                            }
                            if (widget.contentType * -1857087466 == 612811287) {
                                class121.field1184.draw(n10, Client.cycle * 434691520, 1588145695);
                            }
                        }
                    }
                    if (0 == 883712245 * widget.type) {
                        if (!widget.modelOrthog && class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (!widget.modelOrthog) {
                            if (widget.scrollY * -1439363873 > widget.scrollHeight * -1871858199 - widget.height * 1473950221) {
                                widget.scrollY = widget.scrollHeight * 1832345625 - widget.height * -867323648;
                            }
                            if (1223232735 * widget.scrollY < 0) {
                                widget.scrollY = 0;
                            }
                        }
                        class11.drawInterface(field2292, widget.id * 1713081171, n23, n24, n25, n26, n10 - widget.scrollX * 1548821524, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * 32490541, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - widget.scrollY * 1223232735, n9, -465475629);
                        }
                        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(-1932186447 * widget.id);
                        if (null != interfaceParent) {
                            class13.drawWidgets(interfaceParent.group * -491599759, n23, n24, n25, n26, n10, n11, n9, (byte)(-53));
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(-906470297);
                    }
                    else if (11 == widget.type * 883712245) {
                        if (class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * -2039500726, n23, n24, n25, n26, n10 - 1064035737 * widget.scrollX, n11 - -1913003594 * widget.scrollY, n9, -465475629);
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(1652918923);
                    }
                    if (Client.isResizable || Client.field519[n9] || -1928160607 * Client.gameDrawingMode > 1) {
                        if (0 == -619788249 * widget.type && !widget.modelOrthog && widget.scrollHeight * -1273374131 > widget.height * 2000200662) {
                            class103.drawScrollBar(n10 + widget.width * -794961409, n11, widget.scrollY * 1223232735, 1473950221 * widget.height, -1273374131 * widget.scrollHeight, (byte)0);
                        }
                        if (1 != widget.type * -270423259) {
                            if (883712245 * widget.type == 3) {
                                int n30;
                                if (class452.runCs1(widget, -1736902424)) {
                                    n30 = widget.color2 * 1449039161;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 1780253209 * widget.mouseOverColor2 != 0) {
                                        n30 = 1780253209 * widget.mouseOverColor2;
                                    }
                                }
                                else {
                                    n30 = widget.color * -673203658;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != widget.mouseOverColor * 1614966389) {
                                        n30 = widget.mouseOverColor * -417470475;
                                    }
                                }
                                if (widget.noScrollThrough) {
                                    switch (widget.fillMode.field4118 * -894516731) {
                                        default: {
                                            if (n12 == 0) {
                                                Rasterizer2D.Rasterizer2D_fillRectangle(n10, n11, widget.width * -456882443, widget.height * 1473950221, n30);
                                                break;
                                            }
                                            Rasterizer2D.Rasterizer2D_fillRectangleAlpha(n10, n11, -794961409 * widget.width, 275239967 * widget.height, n30, 47402562 - (n12 & 0xEB3E587B));
                                            break;
                                        }
                                        case 2: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradientAlpha(n10, n11, -1753269124 * widget.width, -691438466 * widget.height, widget.color * 1409091639, widget.color2 * 1449039161, 288869614 - (widget.transparencyTop * 1634279623 & 0xFF), -1949748565 - (widget.transparencyBot * -625867665 & 0xFF));
                                            break;
                                        }
                                        case 1: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradient(n10, n11, -1964096237 * widget.width, 1473950221 * widget.height, 1409091639 * widget.color, widget.color2 * 1449039161);
                                            break;
                                        }
                                    }
                                }
                                else if (n12 == 0) {
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n10, n11, widget.width * -794961409, 1473950221 * widget.height, n30);
                                }
                                else {
                                    Rasterizer2D.Rasterizer2D_drawRectangleAlpha(n10, n11, widget.width * 152376633, -1977971161 * widget.height, n30, 256 - (n12 & 0x6843EB84));
                                }
                            }
                            else if (17004198 * widget.type == 4) {
                                final Font font = widget.getFont(-608427078);
                                if (font == null) {
                                    if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -2042777397);
                                    }
                                }
                                else {
                                    String str = widget.field2916;
                                    int n31;
                                    if (class452.runCs1(widget, 987771819)) {
                                        n31 = widget.color2 * 1449039161;
                                        if (MidiPcmStream.mousedOverWidgetIf1 == widget && widget.mouseOverColor2 * -163487401 != 0) {
                                            n31 = widget.mouseOverColor2 * -836197667;
                                        }
                                        if (widget.buttonText.length() > 0) {
                                            str = widget.buttonText;
                                        }
                                    }
                                    else {
                                        n31 = widget.color * -646471530;
                                        if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != -365927673 * widget.mouseOverColor) {
                                            n31 = widget.mouseOverColor * 1614966389;
                                        }
                                    }
                                    if (widget.modelOrthog && -1 != widget.itemId * -2006098851) {
                                        final ItemComposition set = HealthBarUpdate.set(-457171771 * widget.itemId, (byte)113);
                                        str = set.name;
                                        if (str == null) {
                                            str = Strings.at;
                                        }
                                        if ((1 == 1552863327 * set.isStackable || 1 != 1336975799 * widget.itemQuantity) && -1 != -1848349281 * widget.itemQuantity) {
                                            str = class383.method2081(-1776676009, -1731786042) + str + class96.al + " " + (char)799634764 + ArchiveDiskAction.formatItemStacks(widget.itemQuantity * 1336975799, (short)23270);
                                        }
                                    }
                                    if (widget == Client.meslayerContinueWidget) {
                                        str = Strings.gi;
                                        n31 = 1409091639 * widget.color;
                                    }
                                    if (!widget.modelOrthog) {
                                        str = class121.method720(str, widget, (short)(-31484));
                                    }
                                    font.az(str, n10, n11, widget.width * -794961409, widget.height * 1223474034, n31, widget.isIf3 ? 0 : -1, Decimator.scaleRate(1634279623 * widget.transparencyTop, 534979377), widget.textXAlignment * 1002257489, widget.textYAlignment * -1553957401, 1643422190 * widget.textLineHeight);
                                }
                            }
                            else if (5 == -881959110 * widget.type) {
                                if (!widget.modelOrthog) {
                                    final SpritePixels sprite = widget.getSprite(class452.runCs1(widget, -846429984), class14.urlRequester, (byte)0);
                                    if (sprite != null) {
                                        sprite.drawAt(n10, n11);
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -2032980167);
                                    }
                                }
                                else {
                                    SpritePixels spritePixels;
                                    if (-1 != -1738177260 * widget.itemId) {
                                        spritePixels = class252.getItemSprite(widget.itemId * -2006098851, widget.itemQuantity * -884179401, widget.outline * 1638912775, -353676735 * widget.spriteShadow, widget.itemQuantityMode * -1327125443, false, 103975290);
                                    }
                                    else {
                                        spritePixels = widget.getSprite(false, class14.urlRequester, (byte)0);
                                    }
                                    if (null != spritePixels) {
                                        final int width = spritePixels.width;
                                        final int height = spritePixels.height;
                                        if (widget.field2913) {
                                            Rasterizer2D.Rasterizer2D_expandClip(n10, n11, widget.width * 167668893 + n10, widget.height * -1833919422 + n11);
                                            final int n32 = (widget.width * -794961409 + (width - 1)) / width;
                                            final int n33 = (height - 1 + widget.height * 1473950221) / height;
                                            for (int k = 0; k < n32; ++k) {
                                                for (int l = 0; l < n33; ++l) {
                                                    if (widget.spriteAngle * -1621581054 != 0) {
                                                        spritePixels.method2632(k * width + n10 + width / 2, height / 2 + (n11 + l * height), widget.spriteAngle * -738051099, 4096);
                                                    }
                                                    else if (n12 != 0) {
                                                        spritePixels.drawTransAt(n10 + width * k, height * l + n11, 256 - (n12 & 0xA067E5A1));
                                                    }
                                                    else {
                                                        spritePixels.drawAt(k * width + n10, n11 + height * l);
                                                    }
                                                }
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                        else {
                                            final int n34 = 2012730525 * widget.width / width;
                                            if (widget.spriteAngle * -738051099 != 0) {
                                                spritePixels.method2632(widget.width * -794961409 / 2 + n10, widget.height * -679388222 / 2 + n11, widget.spriteAngle * -1948100036, n34);
                                            }
                                            else if (n12 != 0) {
                                                spritePixels.drawTransScaledAt(n10, n11, widget.width * -783043471, widget.height * 1473950221, 256 - (n12 & 0x9FB2793D));
                                            }
                                            else if (widget.width * -794961409 == width && height == widget.height * 883910428) {
                                                spritePixels.drawAt(n10, n11);
                                            }
                                            else {
                                                spritePixels.drawScaledAt(n10, n11, -2042495122 * widget.width, widget.height * 1010808526);
                                            }
                                        }
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -564636238);
                                    }
                                }
                            }
                            else if (883712245 * widget.type == 6) {
                                final boolean runCs1 = class452.runCs1(widget, 1388177556);
                                int n35;
                                if (runCs1) {
                                    n35 = widget.sequenceId2 * 642698254;
                                }
                                else {
                                    n35 = 794357307 * widget.sequenceId;
                                }
                                Model model = null;
                                int n36 = 0;
                                if (-1 != -2006098851 * widget.itemId) {
                                    final ItemComposition set2 = HealthBarUpdate.set(-1707702237 * widget.itemId, (byte)59);
                                    if (set2 != null) {
                                        model = set2.getCountObj(widget.itemQuantity * -506853629, -1838621020).getModel(1, -478301992);
                                        if (null != model) {
                                            model.calculateBoundsCylinder();
                                            n36 = 1550732737 * model.et / 2;
                                        }
                                        else {
                                            class144.invalidateWidget(widget, -1964260609);
                                        }
                                    }
                                }
                                else if (widget.modelType * -462567938 == 5) {
                                    if (0 == -168077555 * widget.modelId) {
                                        model = Client.playerAppearance.getModel(null, -1, null, -1, (byte)93);
                                    }
                                    else {
                                        model = MusicPatchNode.localPlayer.getModel((byte)(-22));
                                    }
                                }
                                else if (-123768459 * widget.modelType == 7) {
                                    model = widget.field2894.getModel(null, -1, ItemContainer.SpotAnimationDefinition_get(MusicPatchNode.localPlayer.cd * 1590591885, (byte)74), 793027322 * MusicPatchNode.localPlayer.bp, (byte)34);
                                }
                                else {
                                    NPCComposition definition = null;
                                    NewShit method599 = null;
                                    if (6 == -123768459 * widget.modelType) {
                                        final int n37 = widget.modelId * -235402754;
                                        if (n37 >= 0 && n37 < Client.npcs.length) {
                                            final NPC npc = Client.npcs[n37];
                                            if (npc != null) {
                                                definition = npc.definition;
                                                method599 = npc.method599(571849821);
                                            }
                                        }
                                    }
                                    SequenceDefinition spotAnimationDefinition_get = null;
                                    int n38 = -1;
                                    if (n35 != -1) {
                                        spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n35, (byte)121);
                                        n38 = -1653759801 * widget.modelFrame;
                                    }
                                    model = widget.getModel(spotAnimationDefinition_get, n38, runCs1, MusicPatchNode.localPlayer.appearance, definition, method599, -2043323693);
                                    if (model == null && Widget.field2877) {
                                        class144.invalidateWidget(widget, -887443000);
                                    }
                                }
                                WorldMapArea.getRegionLowX(n10 + widget.width * 1504864673 / 2, widget.height * 1473950221 / 2 + n11, (byte)32);
                                final int n39 = widget.modelZoom * 508350227 * Rasterizer3D.Rasterizer3D_sine[797932055 * widget.modelAngleX] >> 16;
                                final int n40 = -481199023 * widget.modelZoom * Rasterizer3D.Rasterizer3D_cosine[797932055 * widget.modelAngleX] >> 16;
                                if (model != null) {
                                    if (!widget.modelOrthog) {
                                        model.method1343(0, widget.modelAngleY * -480949115, 0, widget.modelAngleX * 1926826143, 0, n39, n40);
                                    }
                                    else {
                                        model.calculateBoundsCylinder();
                                        if (widget.field2891) {
                                            model.method1327(0, -1998904703 * widget.modelAngleY, -1023931993 * widget.modelAngleZ, 1192983075 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * -1870308097 + (n39 + n36), n40 + widget.modelOffsetY * 844501061, -701093354 * widget.modelZoom);
                                        }
                                        else {
                                            model.method1343(0, widget.modelAngleY * -480949115, -368982220 * widget.modelAngleZ, -143536941 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), 844501061 * widget.modelOffsetY + n40);
                                        }
                                    }
                                }
                                Tiles.method474(1441948024);
                            }
                            else {
                                if (8 == widget.type * 1334678216 && class130.field1274 == widget && Client.field515 * -1596748544 == Client.field514 * -248546350) {
                                    int n41 = 0;
                                    int n42 = 0;
                                    final Font fontPlain12 = WallDecoration.fontPlain12;
                                    String s = class121.method720(widget.field2916, widget, (short)(-28875));
                                    while (s.length() > 0) {
                                        final int index = s.indexOf(class96.aq);
                                        String substring;
                                        if (-1 != index) {
                                            substring = s.substring(0, index);
                                            s = s.substring(4 + index);
                                        }
                                        else {
                                            substring = s;
                                            s = "";
                                        }
                                        final int bf = fontPlain12.bf(substring);
                                        if (bf > n41) {
                                            n41 = bf;
                                        }
                                        n42 += 1 + fontPlain12.al;
                                    }
                                    n41 += 6;
                                    n42 += 7;
                                    int n43 = n10 + widget.width * -794961409 - 5 - n41;
                                    int n44 = widget.height * 1473950221 + n11 + 5;
                                    if (n43 < 5 + n10) {
                                        n43 = 5 + n10;
                                    }
                                    if (n41 + n43 > n4) {
                                        n43 = n4 - n41;
                                    }
                                    if (n44 + n42 > n5) {
                                        n44 = n5 - n42;
                                    }
                                    Rasterizer2D.Rasterizer2D_fillRectangle(n43, n44, n41, n42, 16777120);
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n43, n44, n41, n42, 0);
                                    final String field2293 = widget.field2916;
                                    int n45 = n44 + fontPlain12.al + 2;
                                    String s2 = class121.method720(field2293, widget, (short)(-7995));
                                    while (s2.length() > 0) {
                                        final int index2 = s2.indexOf(class96.aq);
                                        String substring2;
                                        if (-1 != index2) {
                                            substring2 = s2.substring(0, index2);
                                            s2 = s2.substring(4 + index2);
                                        }
                                        else {
                                            substring2 = s2;
                                            s2 = "";
                                        }
                                        class492.xb(fontPlain12, substring2, n43 + 3, n45, 0, -1);
                                        n45 += 1 + fontPlain12.al;
                                    }
                                }
                                if (9 == widget.type * 883712245) {
                                    int n46;
                                    int n47;
                                    int n48;
                                    int n49;
                                    if (widget.isScrollBar) {
                                        n46 = n10;
                                        n47 = n11 + 1473950221 * widget.height;
                                        n48 = n10 + widget.width * 1455926979;
                                        n49 = n11;
                                    }
                                    else {
                                        n46 = n10;
                                        n47 = n11;
                                        n48 = -794961409 * widget.width + n10;
                                        n49 = 1473950221 * widget.height + n11;
                                    }
                                    if (2041936737 * widget.lineWid == 1) {
                                        Rasterizer2D.Rasterizer2D_drawLine(n46, n47, n48, n49, -1423059046 * widget.color);
                                    }
                                    else {
                                        class36.method196(n46, n47, n48, n49, widget.color * -492862298, 1354778849 * widget.lineWid, (byte)53);
                                    }
                                }
                                else if (widget.type * 883712245 == 12) {
                                    final class314 method600 = widget.method1815((byte)0);
                                    final class309 method601 = widget.method1817(-1740765458);
                                    if (method600 != null && method601 != null && method600.da(1793732044)) {
                                        final Font font2 = widget.getFont(-1912353405);
                                        if (null != font2) {
                                            Client.field565.method2637(n10, n11, widget.width * -794961409, -936203792 * widget.height, class314.jo(method600, -735919626), class314.method1714(method600, -91399205), method600.method1769(-189949160), method600.method1753(-1091664440), method600.method1745((byte)(-80)), 948134027);
                                            final int n50 = widget.isIf3 ? (widget.spriteShadow * -353676735) : -1;
                                            if (!class314.method1728(method600, 1960707732) && method600.method1740(-1943371473).method2004(-1013211282)) {
                                                Client.field565.method2639(method601.field2816 * 337332780, n50, method601.field2817 * 1911007170, 216034339 * method601.field2818, -940557698);
                                                Client.field565.method2638(method600.method1741((byte)(-6)), font2, (byte)(-1));
                                            }
                                            else {
                                                Client.field565.method2639(widget.color * 1409091639, n50, -1098821108 * method601.field2817, -1405430988 * method601.field2818, -1982935393);
                                                Client.field565.method2638(method600.method1740(-1871570628), font2, (byte)51);
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static void vv(final int ai, final int ai2) {
        assert ai != ai2;
        final String s = Client.menuActions[ai];
        Client.menuActions[ai] = Client.menuActions[ai2];
        Client.menuActions[ai2] = s;
        final String s2 = Client.menuTargets[ai];
        Client.menuTargets[ai] = Client.menuTargets[ai2];
        Client.menuTargets[ai2] = s2;
        final int n = Client.menuIdentifiers[ai];
        Client.menuIdentifiers[ai] = Client.menuIdentifiers[ai2];
        Client.menuIdentifiers[ai2] = n;
        final int n2 = Client.menuOpcodes[ai];
        Client.menuOpcodes[ai] = Client.menuOpcodes[ai2];
        Client.menuOpcodes[ai2] = n2;
        final int n3 = Client.menuArguments1[ai];
        Client.menuArguments1[ai] = Client.menuArguments1[ai2];
        Client.menuArguments1[ai2] = n3;
        final int n4 = Client.menuArguments2[ai];
        Client.menuArguments2[ai] = Client.menuArguments2[ai2];
        Client.menuArguments2[ai2] = n4;
        final int n5 = Client.menuItemIds[ai];
        Client.menuItemIds[ai] = Client.menuItemIds[ai2];
        Client.menuItemIds[ai2] = n5;
        final boolean b = Client.menuShiftClick[ai];
        Client.menuShiftClick[ai] = Client.menuShiftClick[ai2];
        Client.menuShiftClick[ai2] = b;
        final rl3 rl3 = Client.qi[ai];
        Client.qi[ai] = Client.qi[ai2];
        Client.qi[ai2] = rl3;
        assert Client.ix[ai].ai == ai;
        assert Client.ix[ai2].ai == ai2;
        final rl3 rl4 = Client.ix[ai];
        Client.ix[ai] = Client.ix[ai2];
        Client.ix[ai2] = rl4;
        Client.ix[ai].ai = ai;
        Client.ix[ai2].ai = ai2;
    }
    
    static final void vv(int n, int n2, final int n3) {
        if (n >= -1242064490 && n2 >= 128 && n <= 40285336 && n2 <= -1709348245) {
            final int n4 = class147.getTileHeight(n, n2, 1799706211 * GameEngine.Client_plane, (byte)(-87)) - n3;
            n -= class36.cameraX * -1303868324;
            final int n5 = n4 - class174.cameraY * 1772923873;
            n2 -= class297.cameraZ * -1701039180;
            final int n6 = Rasterizer3D.Rasterizer3D_sine[-550237340 * WorldMapSectionType.cameraPitch];
            final int n7 = Rasterizer3D.Rasterizer3D_cosine[WorldMapSectionType.cameraPitch * 1897923909];
            final int n8 = Rasterizer3D.Rasterizer3D_sine[-1010818347 * class125.cameraYaw];
            final int n9 = Rasterizer3D.Rasterizer3D_cosine[-1010818347 * class125.cameraYaw];
            final int n10 = n9 * n + n8 * n2 >> 16;
            n2 = n2 * n9 - n8 * n >> 16;
            n = n10;
            final int n11 = n7 * n5 - n6 * n2 >> 16;
            n2 = n2 * n7 + n5 * n6 >> 16;
            final int n12 = n11;
            if (n2 >= 50) {
                Client.viewportTempX = (433849721 * Client.viewportWidth / 2 + n * (Client.viewportZoom * -1872173897) / n2) * 421469329;
                Client.viewportTempY = -442314394 * (Client.viewportHeight * 2042096749 / 2 + n12 * (-1520358810 * Client.viewportZoom) / n2);
            }
            else {
                Client.viewportTempX = 1925690209;
                Client.viewportTempY = 346283647;
            }
            return;
        }
        Client.viewportTempX = -2143390831;
        Client.viewportTempY = 1610031701;
    }
    
    public int vv() {
        return Client.menuOptionsCount * 730065501;
    }
    
    public int kj() {
        return class503.SpriteBuffer_spriteHeight * 378525975;
    }
    
    public boolean[][][][] kj() {
        return Scene.visibilityMap;
    }
    
    static final boolean wh(final int n, final int n2, final int n3, final int n4, final int n5) {
        PendingSpawn pendingSpawn = null;
        for (PendingSpawn pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.last(); pendingSpawn2 != null; pendingSpawn2 = (PendingSpawn)Client.pendingSpawns.previous()) {
            if (n == 593068225 * pendingSpawn2.plane && n2 == 68300005 * pendingSpawn2.x && n3 == 800888185 * pendingSpawn2.y && pendingSpawn2.type * -1586499579 == n4) {
                pendingSpawn = pendingSpawn2;
                break;
            }
        }
        if (pendingSpawn != null) {
            pendingSpawn.field931 = n5 * -620279391;
            return true;
        }
        return false;
    }
    
    public boolean kw() {
        return class473.mouseCam;
    }
    
    static final void qf(final int n) {
        class31.logOut(-2068972635);
        switch (n) {
            case 1: {
                class220.method1233((byte)103);
                break;
            }
            case 2: {
                UrlRequest.method680(-1566073903);
                break;
            }
        }
    }
    
    public int wo(final Widget widget) {
        return KeyHandler.getWidgetFlags(widget, 311252747);
    }
    
    static void wo() {
        Client.menuOptionsCount = 0;
        Client.isMenuOpen = false;
        Client.menuActions[0] = Strings.jl;
        Client.menuTargets[0] = "";
        Client.menuOpcodes[0] = 1006;
        Client.menuShiftClick[0] = false;
        Client.menuOptionsCount = 1153055221;
    }
    
    public DbTableType wo(final int n) {
        return GameBuild.getDbTableType(n, (byte)97);
    }
    
    static void ql(final int n) {
        final int method1846 = class330.method1846((byte)60);
        if (1800573412 == n) {
            class205.method1137(Strings.bv, Strings.bl, Strings.bp, -397173656);
        }
        else if (-2 == n) {
            class205.method1137(Strings.bc, Strings.bh, Strings.bw, 1519139861);
        }
        else if (-1 == n) {
            class205.method1137(Strings.ce, Strings.ci, Strings.cs, 2124487376);
        }
        else if (n == 3) {
            class129.method763(3, (byte)66);
            Login.field752 = -1552230487;
        }
        else if (4 == n) {
            class14.method55(0, 2089117126);
        }
        else if (5 == n) {
            Login.field752 = 1190506322;
            class205.method1137(Strings.cu, Strings.ck, Strings.cq, -481125615);
        }
        else if (n != 68 && (Client.onMobile || 6 != n)) {
            if (7 == n) {
                class205.method1137(Strings.cg, Strings.cr, Strings.cy, -180335558);
            }
            else if (8 == n) {
                class205.method1137(Strings.cx, Strings.cv, Strings.cb, -941396972);
            }
            else if (9 == n) {
                class205.method1137(Strings.co, Strings.cz, Strings.cw, -1034339996);
            }
            else if (n == 10) {
                class205.method1137(Strings.cj, Strings.ch, Strings.ct, -1786986999);
            }
            else if (11 == n) {
                class205.method1137(Strings.cp, Strings.cd, Strings.dm, -1201371732);
            }
            else if (12 == n) {
                class205.method1137(Strings.dw, Strings.dc, Strings.do, 1825514760);
            }
            else if (13 == n) {
                class205.method1137(Strings.di, Strings.dr, Strings.dl, 1402975566);
            }
            else if (14 == n) {
                class205.method1137(Strings.dk, Strings.dt, Strings.dv, 1324233657);
            }
            else if (16 == n) {
                class205.method1137(Strings.dz, Strings.dg, Strings.de, 539656820);
                class129.method763(280593668, (byte)122);
            }
            else if (n == 17) {
                class205.method1137(Strings.dh, Strings.dp, Strings.du, 1940970745);
            }
            else if (n == 18) {
                class14.method55(1, 1887065095);
            }
            else if (19 == n) {
                class205.method1137(Strings.dd, Strings.dj, Strings.dx, 434712322);
            }
            else if (n == 20) {
                class205.method1137(Strings.dn, Strings.dy, Strings.ds, 1656169003);
            }
            else if (n == 22) {
                class205.method1137(Strings.da, Strings.ep, Strings.eo, -962059411);
            }
            else if (n == 23) {
                class205.method1137(Strings.eq, Strings.et, Strings.ef, -566602106);
            }
            else if (24 == n) {
                class205.method1137(Strings.ez, Strings.ej, Strings.ea, 640199298);
            }
            else if (n == 25) {
                class205.method1137(Strings.eu, Strings.es, Strings.eb, -2053355673);
            }
            else if (26 == n) {
                class205.method1137(Strings.el, Strings.en, Strings.er, 1416337985);
            }
            else if (n == 27) {
                class205.method1137(Strings.eg, Strings.ed, Strings.ev, -560031330);
            }
            else if (881563505 == n) {
                class205.method1137(Strings.ec, Strings.ei, Strings.ee, -1190413919);
            }
            else if (32 == n) {
                class14.method55(2, 1655375612);
            }
            else if (37 == n) {
                class205.method1137(Strings.fh, Strings.fl, Strings.fp, -1217352765);
            }
            else if (n == 1555859960) {
                class205.method1137(Strings.fo, Strings.fx, Strings.fd, -406408341);
            }
            else if (-2080133983 == n) {
                class129.method763(8, (byte)101);
            }
            else {
                if (n == -1579182237) {
                    class205.method1137(Strings.fy, Strings.fw, Strings.fr, -430486145);
                    class138.updateGameState(11, 981762755);
                    return;
                }
                if (n == 421678896) {
                    class205.method1137(Strings.fv, Strings.fq, Strings.fc, -948935167);
                    class138.updateGameState(11, 2003060791);
                    return;
                }
                if (515500506 == n) {
                    class205.method1137("", "Please enter your date of birth (DD/MM/YYYY)", "", -225010715);
                    class129.method763(7, (byte)104);
                }
                else {
                    if (n == -1730305176) {
                        class138.updateGameState(10, 1047542605);
                        class129.method763(9, (byte)115);
                        class205.method1137(Strings.ff, Strings.fj, Strings.fg, -629579723);
                        return;
                    }
                    if (n == 63) {
                        class138.updateGameState(10, 1052131188);
                        class129.method763(9, (byte)34);
                        class205.method1137(Strings.fk, Strings.fm, Strings.ft, 578507448);
                        return;
                    }
                    if (n == 1696557998 || n == 67) {
                        class138.updateGameState(10, 1462689729);
                        class129.method763(9, (byte)11);
                        class205.method1137(Strings.fu, Strings.gr, Strings.go, 468605717);
                        return;
                    }
                    if (n == 1828152185) {
                        class138.updateGameState(10, 1630444053);
                        class129.method763(7, (byte)15);
                        class205.method1137("There was a problem updating your DOB.", "Please try again later. If the problem ", "persists, please contact Jagex Support.", 149283523);
                    }
                    else if (-116120346 == n) {
                        class138.updateGameState(10, 376425601);
                        class129.method763(6, (byte)96);
                        class205.method1137(Strings.mm, Strings.me, Strings.mv, 442728635);
                    }
                    else if (72 == n) {
                        class138.updateGameState(10, 550722416);
                        class129.method763(-895004404, (byte)58);
                    }
                    else {
                        class205.method1137(Strings.gs, Strings.gj, Strings.gg, -1903256282);
                    }
                }
            }
        }
        else {
            class205.method1137(Strings.cm, Strings.cf, Strings.cl, 1613271910);
        }
        class138.updateGameState(10, 1033197903);
        if (method1846 == class330.method1846((byte)(-24)) && Client.field395.method2558(-339882673)) {
            class129.method763(9, (byte)81);
        }
    }
    
    public static void ql(final boolean b, final PacketBuffer packetBuffer) {
        ScriptFrame.client.getCallbacks().updateNpcs();
    }
    
    static final void zs(final NPC npc, final int n, final int n2, final int n3) {
        NPCComposition npcComposition = npc.definition;
        if (730065501 * Client.menuOptionsCount >= -60178465) {
            return;
        }
        if (npcComposition.transforms != null) {
            npcComposition = NPCComposition.ur(npcComposition, -335715576);
        }
        if (null == npcComposition) {
            return;
        }
        if (!npcComposition.isInteractable) {
            return;
        }
        if (npcComposition.isFollower && n != Client.followerIndex * 783420675) {
            return;
        }
        String str = NPC.zh(npc, -1533469098);
        if (0 != -1682851309 * npcComposition.combatLevel && npc.dm * -1462022384 != 0) {
            final int i = (-2102425003 * npc.dm != -1) ? (674049519 * npc.dm) : (2062903815 * npcComposition.combatLevel);
            str = str + ItemContainer.method480(i, MusicPatchNode.localPlayer.combatLevel * 1302967875, (byte)62) + " " + class96.ac + Strings.gf + i + class96.au;
        }
        if (npcComposition.isFollower && Client.followerOpsLowPriority) {
            MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(16776960, -662320151) + str, 1003, n, n2, n3, (byte)85);
        }
        if (1 == -303899309 * Client.isItemSelected) {
            MenuAction.insertMenuItemNoShift(Strings.gu, Client.field364 + " " + class96.ab + " " + class383.method2081(-1094147609, -1277438287) + str, 7, n, n2, n3, (byte)63);
        }
        else if (Client.isSpellSelected) {
            if (0x2 == (1351206579 * SecureRandomFuture.selectedSpellFlags & 0x2)) {
                MenuAction.insertMenuItemNoShift(Client.field530, Client.field522 + " " + class96.ab + " " + class383.method2081(16776960, -49590227) + str, 8, n, n2, n3, (byte)47);
            }
        }
        else {
            final int n4 = (npcComposition.isFollower && Client.followerOpsLowPriority) ? -1536036250 : 0;
            final String[] actions = npcComposition.actions;
            if (actions != null) {
                for (int j = 4; j >= 0; --j) {
                    if (NPC.xu(npc, j, 1164667978)) {
                        if (null != actions[j] && !actions[j].equalsIgnoreCase(Strings.gy)) {
                            int n5 = 0;
                            if (j == 0) {
                                n5 = 9 + n4;
                            }
                            if (j != 0) {
                                n5 = n4 + 10;
                            }
                            if (2 == j) {
                                n5 = n4 + 11;
                            }
                            if (j == 3) {
                                n5 = 12 + n4;
                            }
                            if (4 == j) {
                                n5 = n4 + 13;
                            }
                            MenuAction.insertMenuItemNoShift(actions[j], class383.method2081(16776960, -800445897) + str, n5, n, n2, n3, (byte)89);
                        }
                    }
                }
            }
            if (null != actions) {
                for (int k = 4; k >= 0; --k) {
                    if (NPC.xu(npc, k, 1164667978)) {
                        if (actions[k] != null && actions[k].equalsIgnoreCase(Strings.gy)) {
                            int n6 = 0;
                            if (AttackOption.AttackOption_hidden != Client.npcAttackOption) {
                                if (AttackOption.AttackOption_alwaysRightClick == Client.npcAttackOption || (Client.npcAttackOption == AttackOption.AttackOption_dependsOnCombatLevels && npcComposition.combatLevel * 2062903815 > MusicPatchNode.localPlayer.combatLevel * 44329046)) {
                                    n6 = 1667756429;
                                }
                                int n7 = 0;
                                if (k == 0) {
                                    n7 = 9 + n6;
                                }
                                if (k != 0) {
                                    n7 = n6 + 10;
                                }
                                if (2 == k) {
                                    n7 = n6 + 11;
                                }
                                if (3 == k) {
                                    n7 = 12 + n6;
                                }
                                if (4 == k) {
                                    n7 = n6 + 13;
                                }
                                MenuAction.insertMenuItemNoShift(actions[k], class383.method2081(567709834, 1753738965) + str, n7, n, n2, n3, (byte)91);
                            }
                        }
                    }
                }
            }
            if (!npcComposition.isFollower || !Client.followerOpsLowPriority) {
                MenuAction.insertMenuItemNoShift(Strings.gh, class383.method2081(1764562539, -403497346) + str, 1003, n, n2, n3, (byte)39);
            }
        }
    }
    
    static final void uy(final Actor actor, final int n) {
        class374.worldToScreen(actor.walkBackSequence * 1144428983, actor.field1005 * -411750205, n, 773040425);
    }
    
    static void xr() {
        Client.menuOptionsCount = 0;
        Client.isMenuOpen = false;
        Client.menuActions[0] = Strings.jl;
        Client.menuTargets[0] = "";
        Client.menuOpcodes[0] = 1006;
        Client.menuShiftClick[0] = false;
        Client.menuOptionsCount = 1153055221;
    }
    
    public NodeHashTable xr() {
        return Client.interfaceParents;
    }
    
    static final void yr(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5, final boolean b) {
        if (Client.isMenuOpen) {
            return;
        }
        if (Client.menuOptionsCount * 730065501 < -850973797) {
            Client.menuActions[730065501 * Client.menuOptionsCount] = s;
            Client.menuTargets[Client.menuOptionsCount * 730065501] = s2;
            Client.menuOpcodes[730065501 * Client.menuOptionsCount] = n;
            Client.menuIdentifiers[730065501 * Client.menuOptionsCount] = n2;
            Client.menuArguments1[Client.menuOptionsCount * 730065501] = n3;
            Client.menuArguments2[-258373899 * Client.menuOptionsCount] = n4;
            Client.menuItemIds[Client.menuOptionsCount * -1004522201] = n5;
            Client.menuShiftClick[-433139587 * Client.menuOptionsCount] = b;
            Client.menuOptionsCount += 1153055221;
        }
    }
    
    static final void yk(final String s, final String s2, final int n, final int n2, final int n3, final int n4, final int n5) {
        SceneTilePaint.insertMenuItem(s, s2, n, n2, n3, n4, n5, false, (byte)74);
    }
    
    static final void qa(final boolean b) {
        if (b) {
            Client.field394 = (Login.field751 ? class135.field1299 : class135.field1301);
        }
        else {
            Client.field394 = (ClientPreferences.setBrightness(class20.clientPreferences, Login.Login_username, (byte)(-55)) ? class135.field1302 : class135.field1305);
        }
    }
    
    static final void zl(final Widget[] field2292, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
        class18.method68(1957723046);
        for (int i = 0; i < field2292.length; ++i) {
            final Widget widget = field2292[i];
            if (widget != null) {
                if (widget.parentId * 913615679 != n) {
                    if (n != -1412584499) {
                        continue;
                    }
                    if (Client.clickedWidget != widget) {
                        continue;
                    }
                }
                int n9;
                if (n8 == -1) {
                    Client.rootWidgetXs[Client.rootWidgetCount * -356793645] = n6 + 262951665 * widget.x;
                    Client.rootWidgetYs[-356793645 * Client.rootWidgetCount] = widget.y * -747355095 + n7;
                    Client.rootWidgetWidths[-356793645 * Client.rootWidgetCount] = -794961409 * widget.width;
                    Client.rootWidgetHeights[-356793645 * Client.rootWidgetCount] = 1473950221 * widget.height;
                    n9 = (Client.rootWidgetCount += 1127867739) * -356793645 - 1;
                }
                else {
                    n9 = n8;
                }
                widget.rootIndex = n9 * -1548573671;
                widget.cycle = -95399417 * Client.cycle;
                if (!widget.modelOrthog || !class393.isComponentHidden(widget, (byte)1)) {
                    if (1021339961 * widget.contentType > 0) {
                        MouseHandler.method193(widget, 161502479);
                    }
                    int n10 = n6 + 262951665 * widget.x;
                    int n11 = n7 + -747355095 * widget.y;
                    int n12 = 1634279623 * widget.transparencyTop;
                    if (widget == Client.clickedWidget) {
                        if (-1412584499 != n && !widget.spriteFlipH) {
                            WorldMapSection2.field2292 = field2292;
                            class230.field2130 = n6 * -774716861;
                            class101.field1082 = 389070991 * n7;
                            continue;
                        }
                        if (Client.isDraggingWidget && Client.field540) {
                            final int n13 = -2063363905 * MouseHandler.MouseHandler_x;
                            final int n14 = MouseHandler.MouseHandler_y * -1224153235;
                            int n15 = n13 - Client.widgetClickX * -1789924433;
                            int n16 = n14 - 1902621241 * Client.widgetClickY;
                            if (n15 < 1084046795 * Client.field495) {
                                n15 = Client.field495 * 1084046795;
                            }
                            if (n15 + -794961409 * widget.width > -794961409 * Client.clickedWidgetParent.width + 1084046795 * Client.field495) {
                                n15 = 1084046795 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - widget.width * -794961409;
                            }
                            if (n16 < Client.field542 * -746723443) {
                                n16 = Client.field542 * -746723443;
                            }
                            if (1473950221 * widget.height + n16 > Client.clickedWidgetParent.height * 1473950221 + -746723443 * Client.field542) {
                                n16 = Client.clickedWidgetParent.height * 1473950221 + Client.field542 * -746723443 - 1473950221 * widget.height;
                            }
                            n10 = n15;
                            n11 = n16;
                        }
                        if (!widget.spriteFlipH) {
                            n12 = 128;
                        }
                    }
                    int n23;
                    int n24;
                    int n25;
                    int n26;
                    if (9 == widget.type * 883712245) {
                        int n17 = n10;
                        int n18 = n11;
                        int n19 = n10 + -794961409 * widget.width;
                        int n20 = widget.height * 1473950221 + n11;
                        if (n19 < n17) {
                            final int n21 = n17;
                            n17 = n19;
                            n19 = n21;
                        }
                        if (n20 < n18) {
                            final int n22 = n18;
                            n18 = n20;
                            n20 = n22;
                        }
                        ++n19;
                        ++n20;
                        n23 = ((n17 > n2) ? n17 : n2);
                        n24 = ((n18 > n3) ? n18 : n3);
                        n25 = ((n19 < n4) ? n19 : n4);
                        n26 = ((n20 < n5) ? n20 : n5);
                    }
                    else {
                        final int n27 = widget.width * -794961409 + n10;
                        final int n28 = widget.height * 1473950221 + n11;
                        n23 = ((n10 > n2) ? n10 : n2);
                        n24 = ((n11 > n3) ? n11 : n3);
                        n25 = ((n27 < n4) ? n27 : n4);
                        n26 = ((n28 < n5) ? n28 : n5);
                    }
                    if (widget.modelOrthog) {
                        if (n23 >= n25) {
                            continue;
                        }
                        if (n24 >= n26) {
                            continue;
                        }
                    }
                    if (widget.contentType * 1021339961 != 0) {
                        if (1021339961 * widget.contentType == 1336) {
                            if (class20.clientPreferences.method562((short)(-13446))) {
                                n11 += 15;
                                WallDecoration.fontPlain12.as("Fps:" + Client.aa * 1913114939, n10 + -794961409 * widget.width, n11, 16776960, -1);
                                n11 += 15;
                                final Runtime runtime = Runtime.getRuntime();
                                final int j = (int)((runtime.totalMemory() - runtime.freeMemory()) / 1024L);
                                int n29 = 16776960;
                                if (j > 327680 && !Client.isLowDetail) {
                                    n29 = 16711680;
                                }
                                WallDecoration.fontPlain12.as("Mem:" + j + "k", n10 + -794961409 * widget.width, n11, n29, -1);
                                n11 += 15;
                            }
                            continue;
                        }
                        else {
                            if (widget.contentType * 1021339961 == 1337) {
                                Client.viewportX = n10 * 563689483;
                                Client.viewportY = n11 * 2111961447;
                                class18.drawEntities(n10, n11, widget.width * -794961409, widget.height * 1473950221, 312977903);
                                Client.field573[widget.rootIndex * 372799529] = true;
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1021339961 * widget.contentType == 1338) {
                                class155.drawMinimap(widget, n10, n11, n9, 152633146);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (1339 == widget.contentType * 1021339961) {
                                DynamicObject.drawCompass(widget, n10, n11, n9, 7890933);
                                Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                continue;
                            }
                            if (widget.contentType * 1021339961 == 1400) {
                                WorldMap.flashCategory(class126.worldMap, n10, n11, -794961409 * widget.width, widget.height * 1473950221, Client.cycle * -1886224337, -2106787622);
                            }
                            if (1401 == 1021339961 * widget.contentType) {
                                class126.worldMap.drawOverview(n10, n11, widget.width * -794961409, 1473950221 * widget.height, (byte)(-24));
                            }
                            if (widget.contentType * 1021339961 == 1402) {
                                class121.field1184.draw(n10, Client.cycle * -1886224337, -1616109062);
                            }
                        }
                    }
                    if (0 == 883712245 * widget.type) {
                        if (!widget.modelOrthog && class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (!widget.modelOrthog) {
                            if (widget.scrollY * 1223232735 > widget.scrollHeight * -1273374131 - widget.height * 1473950221) {
                                widget.scrollY = widget.scrollHeight * 1941770835 - widget.height * 978547347;
                            }
                            if (1223232735 * widget.scrollY < 0) {
                                widget.scrollY = 0;
                            }
                        }
                        class11.drawInterface(field2292, widget.id * 1713081171, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * 1713081171, n23, n24, n25, n26, n10 - widget.scrollX * -1469632775, n11 - widget.scrollY * 1223232735, n9, -465475629);
                        }
                        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(1713081171 * widget.id);
                        if (null != interfaceParent) {
                            class13.drawWidgets(interfaceParent.group * 944864121, n23, n24, n25, n26, n10, n11, n9, (byte)(-127));
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(1512877223);
                    }
                    else if (11 == widget.type * 883712245) {
                        if (class393.isComponentHidden(widget, (byte)1) && MidiPcmStream.mousedOverWidgetIf1 != widget) {
                            continue;
                        }
                        if (widget.children != null) {
                            class11.drawInterface(widget.children, widget.id * 1713081171, n23, n24, n25, n26, n10 - -1469632775 * widget.scrollX, n11 - 1223232735 * widget.scrollY, n9, -465475629);
                        }
                        Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                        class18.method68(299324595);
                    }
                    if (Client.isResizable || Client.field519[n9] || -1928160607 * Client.gameDrawingMode > 1) {
                        if (0 == 883712245 * widget.type && !widget.modelOrthog && widget.scrollHeight * -1273374131 > widget.height * 1473950221) {
                            class103.drawScrollBar(n10 + widget.width * -794961409, n11, widget.scrollY * 1223232735, 1473950221 * widget.height, -1273374131 * widget.scrollHeight, (byte)0);
                        }
                        if (1 != widget.type * 883712245) {
                            if (883712245 * widget.type == 3) {
                                int n30;
                                if (class452.runCs1(widget, -792596955)) {
                                    n30 = widget.color2 * 1449039161;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 1780253209 * widget.mouseOverColor2 != 0) {
                                        n30 = 1780253209 * widget.mouseOverColor2;
                                    }
                                }
                                else {
                                    n30 = widget.color * 1409091639;
                                    if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != widget.mouseOverColor * 1614966389) {
                                        n30 = widget.mouseOverColor * 1614966389;
                                    }
                                }
                                if (widget.noScrollThrough) {
                                    switch (widget.fillMode.field4118 * -894516731) {
                                        default: {
                                            if (n12 == 0) {
                                                Rasterizer2D.Rasterizer2D_fillRectangle(n10, n11, widget.width * -794961409, widget.height * 1473950221, n30);
                                                break;
                                            }
                                            Rasterizer2D.Rasterizer2D_fillRectangleAlpha(n10, n11, -794961409 * widget.width, 1473950221 * widget.height, n30, 256 - (n12 & 0xFF));
                                            break;
                                        }
                                        case 2: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradientAlpha(n10, n11, -794961409 * widget.width, 1473950221 * widget.height, widget.color * 1409091639, widget.color2 * 1449039161, 255 - (widget.transparencyTop * 1634279623 & 0xFF), 255 - (widget.transparencyBot * 122284991 & 0xFF));
                                            break;
                                        }
                                        case 1: {
                                            Rasterizer2D.Rasterizer2D_fillRectangleGradient(n10, n11, -794961409 * widget.width, 1473950221 * widget.height, 1409091639 * widget.color, widget.color2 * 1449039161);
                                            break;
                                        }
                                    }
                                }
                                else if (n12 == 0) {
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n10, n11, widget.width * -794961409, 1473950221 * widget.height, n30);
                                }
                                else {
                                    Rasterizer2D.Rasterizer2D_drawRectangleAlpha(n10, n11, widget.width * -794961409, 1473950221 * widget.height, n30, 256 - (n12 & 0xFF));
                                }
                            }
                            else if (883712245 * widget.type == 4) {
                                final Font font = widget.getFont(-866826822);
                                if (font == null) {
                                    if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1383170663);
                                    }
                                }
                                else {
                                    String str = widget.field2916;
                                    int n31;
                                    if (class452.runCs1(widget, 859109443)) {
                                        n31 = widget.color2 * 1449039161;
                                        if (MidiPcmStream.mousedOverWidgetIf1 == widget && widget.mouseOverColor2 * 1780253209 != 0) {
                                            n31 = widget.mouseOverColor2 * 1780253209;
                                        }
                                        if (widget.buttonText.length() > 0) {
                                            str = widget.buttonText;
                                        }
                                    }
                                    else {
                                        n31 = widget.color * 1409091639;
                                        if (widget == MidiPcmStream.mousedOverWidgetIf1 && 0 != 1614966389 * widget.mouseOverColor) {
                                            n31 = widget.mouseOverColor * 1614966389;
                                        }
                                    }
                                    if (widget.modelOrthog && -1 != widget.itemId * -2006098851) {
                                        final ItemComposition set = HealthBarUpdate.set(-2006098851 * widget.itemId, (byte)8);
                                        str = set.name;
                                        if (str == null) {
                                            str = Strings.at;
                                        }
                                        if ((1 == 1552863327 * set.isStackable || 1 != 1336975799 * widget.itemQuantity) && -1 != 1336975799 * widget.itemQuantity) {
                                            str = class383.method2081(16748608, -237828312) + str + class96.al + " " + 'x' + ArchiveDiskAction.formatItemStacks(widget.itemQuantity * 1336975799, (short)12972);
                                        }
                                    }
                                    if (widget == Client.meslayerContinueWidget) {
                                        str = Strings.gi;
                                        n31 = 1409091639 * widget.color;
                                    }
                                    if (!widget.modelOrthog) {
                                        str = class121.method720(str, widget, (short)(-4458));
                                    }
                                    font.az(str, n10, n11, widget.width * -794961409, widget.height * 1473950221, n31, widget.isIf3 ? 0 : -1, Decimator.scaleRate(1634279623 * widget.transparencyTop, 1031992689), widget.textXAlignment * 1002257489, widget.textYAlignment * -1553957401, -931338759 * widget.textLineHeight);
                                }
                            }
                            else if (5 == 883712245 * widget.type) {
                                if (!widget.modelOrthog) {
                                    final SpritePixels sprite = widget.getSprite(class452.runCs1(widget, 1557512108), class14.urlRequester, (byte)0);
                                    if (sprite != null) {
                                        sprite.drawAt(n10, n11);
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1661507066);
                                    }
                                }
                                else {
                                    SpritePixels spritePixels;
                                    if (-1 != -2006098851 * widget.itemId) {
                                        spritePixels = class252.getItemSprite(widget.itemId * -2006098851, widget.itemQuantity * 1336975799, widget.outline * 1638912775, -353676735 * widget.spriteShadow, widget.itemQuantityMode * -1681772717, false, 1839599563);
                                    }
                                    else {
                                        spritePixels = widget.getSprite(false, class14.urlRequester, (byte)0);
                                    }
                                    if (null != spritePixels) {
                                        final int width = spritePixels.width;
                                        final int height = spritePixels.height;
                                        if (widget.field2913) {
                                            Rasterizer2D.Rasterizer2D_expandClip(n10, n11, widget.width * -794961409 + n10, widget.height * 1473950221 + n11);
                                            final int n32 = (widget.width * -794961409 + (width - 1)) / width;
                                            final int n33 = (height - 1 + widget.height * 1473950221) / height;
                                            for (int k = 0; k < n32; ++k) {
                                                for (int l = 0; l < n33; ++l) {
                                                    if (widget.spriteAngle * -738051099 != 0) {
                                                        spritePixels.method2632(k * width + n10 + width / 2, height / 2 + (n11 + l * height), widget.spriteAngle * -738051099, 4096);
                                                    }
                                                    else if (n12 != 0) {
                                                        spritePixels.drawTransAt(n10 + width * k, height * l + n11, 256 - (n12 & 0xFF));
                                                    }
                                                    else {
                                                        spritePixels.drawAt(k * width + n10, n11 + height * l);
                                                    }
                                                }
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                        else {
                                            final int n34 = -576720896 * widget.width / width;
                                            if (widget.spriteAngle * -738051099 != 0) {
                                                spritePixels.method2632(widget.width * -794961409 / 2 + n10, widget.height * 1473950221 / 2 + n11, widget.spriteAngle * -738051099, n34);
                                            }
                                            else if (n12 != 0) {
                                                spritePixels.drawTransScaledAt(n10, n11, widget.width * -794961409, widget.height * 1473950221, 256 - (n12 & 0xFF));
                                            }
                                            else if (widget.width * -794961409 == width && height == widget.height * 1473950221) {
                                                spritePixels.drawAt(n10, n11);
                                            }
                                            else {
                                                spritePixels.drawScaledAt(n10, n11, -794961409 * widget.width, widget.height * 1473950221);
                                            }
                                        }
                                    }
                                    else if (Widget.field2877) {
                                        class144.invalidateWidget(widget, -1198045180);
                                    }
                                }
                            }
                            else if (883712245 * widget.type == 6) {
                                final boolean runCs1 = class452.runCs1(widget, 855714893);
                                int n35;
                                if (runCs1) {
                                    n35 = widget.sequenceId2 * -717228843;
                                }
                                else {
                                    n35 = -1526544909 * widget.sequenceId;
                                }
                                Model model = null;
                                int n36 = 0;
                                if (-1 != -2006098851 * widget.itemId) {
                                    final ItemComposition set2 = HealthBarUpdate.set(-2006098851 * widget.itemId, (byte)97);
                                    if (set2 != null) {
                                        model = set2.getCountObj(widget.itemQuantity * 1336975799, 1040647487).getModel(1, -2043650395);
                                        if (null != model) {
                                            model.calculateBoundsCylinder();
                                            n36 = 1550732737 * model.et / 2;
                                        }
                                        else {
                                            class144.invalidateWidget(widget, -1089528409);
                                        }
                                    }
                                }
                                else if (widget.modelType * -123768459 == 5) {
                                    if (0 == -168077555 * widget.modelId) {
                                        model = Client.playerAppearance.getModel(null, -1, null, -1, (byte)58);
                                    }
                                    else {
                                        model = MusicPatchNode.localPlayer.getModel((byte)(-78));
                                    }
                                }
                                else if (-123768459 * widget.modelType == 7) {
                                    model = widget.field2894.getModel(null, -1, ItemContainer.SpotAnimationDefinition_get(MusicPatchNode.localPlayer.cd * 1590591885, (byte)65), 424813829 * MusicPatchNode.localPlayer.bp, (byte)15);
                                }
                                else {
                                    NPCComposition definition = null;
                                    NewShit method599 = null;
                                    if (6 == -123768459 * widget.modelType) {
                                        final int n37 = widget.modelId * -168077555;
                                        if (n37 >= 0 && n37 < Client.npcs.length) {
                                            final NPC npc = Client.npcs[n37];
                                            if (npc != null) {
                                                definition = npc.definition;
                                                method599 = npc.method599(193983670);
                                            }
                                        }
                                    }
                                    SequenceDefinition spotAnimationDefinition_get = null;
                                    int n38 = -1;
                                    if (n35 != -1) {
                                        spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n35, (byte)11);
                                        n38 = 1575517389 * widget.modelFrame;
                                    }
                                    model = widget.getModel(spotAnimationDefinition_get, n38, runCs1, MusicPatchNode.localPlayer.appearance, definition, method599, 1106690059);
                                    if (model == null && Widget.field2877) {
                                        class144.invalidateWidget(widget, -1084813329);
                                    }
                                }
                                WorldMapArea.getRegionLowX(n10 + widget.width * -794961409 / 2, widget.height * 1473950221 / 2 + n11, (byte)32);
                                final int n39 = widget.modelZoom * 942674363 * Rasterizer3D.Rasterizer3D_sine[797932055 * widget.modelAngleX] >> 16;
                                final int n40 = 942674363 * widget.modelZoom * Rasterizer3D.Rasterizer3D_cosine[797932055 * widget.modelAngleX] >> 16;
                                if (model != null) {
                                    if (!widget.modelOrthog) {
                                        model.method1343(0, widget.modelAngleY * -480949115, 0, widget.modelAngleX * 797932055, 0, n39, n40);
                                    }
                                    else {
                                        model.calculateBoundsCylinder();
                                        if (widget.field2891) {
                                            model.method1327(0, -480949115 * widget.modelAngleY, -1023931993 * widget.modelAngleZ, 797932055 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), n40 + widget.modelOffsetY * 844501061, 942674363 * widget.modelZoom);
                                        }
                                        else {
                                            model.method1343(0, widget.modelAngleY * -480949115, -1023931993 * widget.modelAngleZ, 797932055 * widget.modelAngleX, widget.modelOffsetX * 1909456039, widget.modelOffsetY * 844501061 + (n39 + n36), 844501061 * widget.modelOffsetY + n40);
                                        }
                                    }
                                }
                                Tiles.method474(1441948024);
                            }
                            else {
                                if (8 == widget.type * 883712245 && class130.field1274 == widget && Client.field515 * 1239377975 == Client.field514 * 215597333) {
                                    int n41 = 0;
                                    int n42 = 0;
                                    final Font fontPlain12 = WallDecoration.fontPlain12;
                                    String s = class121.method720(widget.field2916, widget, (short)(-23149));
                                    while (s.length() > 0) {
                                        final int index = s.indexOf(class96.aq);
                                        String substring;
                                        if (-1 != index) {
                                            substring = s.substring(0, index);
                                            s = s.substring(4 + index);
                                        }
                                        else {
                                            substring = s;
                                            s = "";
                                        }
                                        final int bf = fontPlain12.bf(substring);
                                        if (bf > n41) {
                                            n41 = bf;
                                        }
                                        n42 += 1 + fontPlain12.al;
                                    }
                                    n41 += 6;
                                    n42 += 7;
                                    int n43 = n10 + widget.width * -794961409 - 5 - n41;
                                    int n44 = widget.height * 1473950221 + n11 + 5;
                                    if (n43 < 5 + n10) {
                                        n43 = 5 + n10;
                                    }
                                    if (n41 + n43 > n4) {
                                        n43 = n4 - n41;
                                    }
                                    if (n44 + n42 > n5) {
                                        n44 = n5 - n42;
                                    }
                                    Rasterizer2D.Rasterizer2D_fillRectangle(n43, n44, n41, n42, 16777120);
                                    Rasterizer2D.Rasterizer2D_drawRectangle(n43, n44, n41, n42, 0);
                                    final String field2293 = widget.field2916;
                                    int n45 = n44 + fontPlain12.al + 2;
                                    String s2 = class121.method720(field2293, widget, (short)(-9652));
                                    while (s2.length() > 0) {
                                        final int index2 = s2.indexOf(class96.aq);
                                        String substring2;
                                        if (-1 != index2) {
                                            substring2 = s2.substring(0, index2);
                                            s2 = s2.substring(4 + index2);
                                        }
                                        else {
                                            substring2 = s2;
                                            s2 = "";
                                        }
                                        class492.xb(fontPlain12, substring2, n43 + 3, n45, 0, -1);
                                        n45 += 1 + fontPlain12.al;
                                    }
                                }
                                if (9 == widget.type * 883712245) {
                                    int n46;
                                    int n47;
                                    int n48;
                                    int n49;
                                    if (widget.isScrollBar) {
                                        n46 = n10;
                                        n47 = n11 + 1473950221 * widget.height;
                                        n48 = n10 + widget.width * -794961409;
                                        n49 = n11;
                                    }
                                    else {
                                        n46 = n10;
                                        n47 = n11;
                                        n48 = -794961409 * widget.width + n10;
                                        n49 = 1473950221 * widget.height + n11;
                                    }
                                    if (1354778849 * widget.lineWid == 1) {
                                        Rasterizer2D.Rasterizer2D_drawLine(n46, n47, n48, n49, 1409091639 * widget.color);
                                    }
                                    else {
                                        class36.method196(n46, n47, n48, n49, widget.color * 1409091639, 1354778849 * widget.lineWid, (byte)57);
                                    }
                                }
                                else if (widget.type * 883712245 == 12) {
                                    final class314 method600 = widget.method1815((byte)16);
                                    final class309 method601 = widget.method1817(-1740765458);
                                    if (method600 != null && method601 != null && method600.da(-854612531)) {
                                        final Font font2 = widget.getFont(-1758112583);
                                        if (null != font2) {
                                            Client.field565.method2637(n10, n11, widget.width * -794961409, 1473950221 * widget.height, class314.jo(method600, 1547386434), class314.method1714(method600, -91399205), method600.method1769(-1046411594), method600.method1753(857934465), method600.method1745((byte)68), -1804250170);
                                            final int n50 = widget.isIf3 ? (widget.spriteShadow * -353676735) : -1;
                                            if (!class314.method1728(method600, 2122343462) && method600.method1740(-1965362359).method2004(237371233)) {
                                                Client.field565.method2639(method601.field2816 * 1912484269, n50, method601.field2817 * -90398499, 216034339 * method601.field2818, -1749426639);
                                                Client.field565.method2638(method600.method1741((byte)(-34)), font2, (byte)71);
                                            }
                                            else {
                                                Client.field565.method2639(widget.color * 1409091639, n50, -90398499 * method601.field2817, 216034339 * method601.field2818, 384336239);
                                                Client.field565.method2638(method600.method1740(-1668450221), font2, (byte)(-80));
                                            }
                                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4, n5);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static int zl(final int n) {
        final int n2 = n >> 2;
        final int n3 = n & 0x3;
        final double n4 = Client.rz + (n2 - Client.dn) * Client.gg;
        final int n5 = (int)n4;
        return n5 + (((int)(n4 + Client.gg) - n5) * n3 >> 2);
    }
    
    public NodeHashTable zl() {
        return Client.widgetFlags;
    }
    
    static long qn() {
        return Client.playerUUID * -1749026863537138247L;
    }
    
    public void qn(final int scene_cameraXTileMax) {
        Scene.Scene_cameraXTileMax = scene_cameraXTileMax;
    }
    
    public int qn() {
        return Scene.Scene_selectedScreenX;
    }
    
    static final void qx() {
        Client.packetWriter.close(820892638);
        FloorOverlayDefinition.FloorOverlayDefinition_cached.clear();
        class294.method1607((byte)(-76));
        class4.method9(-518646489);
        class14.method56(-820874298);
        class173.method958((byte)78);
        class379.method2015((byte)14);
        SequenceDefinition.SequenceDefinition_cached.clear();
        SequenceDefinition.SequenceDefinition_cachedFrames.clear();
        SequenceDefinition.SequenceDefinition_cachedModel.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cached.clear();
        SpotAnimationDefinition.SpotAnimationDefinition_cachedModels.clear();
        VarbitComposition.VarbitDefinition_cached.clear();
        VarpDefinition.VarpDefinition_cached.clear();
        class160.HitSplatDefinition_cachedSprites.method2418((byte)(-54));
        MenuAction.HitSplatDefinition_cached.method2418((byte)(-108));
        class432.method2285(1102212442);
        GrandExchangeEvent.method1922(-1314998083);
        InterfaceParent.method488(1484971604);
        class165.method921(238851949);
        Strings.method1854(-155782720);
        class383.method2084(-480754024);
        DbRowType.DBRowType_cache.clear();
        Client.Widget_cachedModels.clear();
        Client.Widget_cachedFonts.clear();
        GrandExchangeOfferTotalQuantityComparator.method1913(1520985587);
        class18.method75(-638082397);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).clear(-721731599);
        Script.Script_cached.clear();
        Client.archive5.method2127(1684841980);
        DevicePcmPlayerProvider.field67.ua(1903798827);
        GameBuild.archive7.ua(1903798827);
        class85.archive4.ua(1903798827);
        class426.field3811.ua(1903798827);
        GrandExchangeOfferTotalQuantityComparator.archive9.ua(1903798827);
        class399.archive6.ua(1903798827);
        FloorUnderlayDefinition.archive11.ua(1903798827);
        class452.archive8.ua(1903798827);
        WorldMapLabelSize.field2285.ua(1903798827);
        NetFileRequest.archive10.ua(1903798827);
        class195.field1645.ua(1903798827);
        class126.archive12.ua(1903798827);
        PcmPlayer.field211.ua(1903798827);
        class31.scene.clear();
        for (int i = 0; i < 4; ++i) {
            Client.collisionMaps[i].clear(1668609348);
        }
        Client.field590.method1138((byte)64);
        System.gc();
        class297.musicPlayerStatus = -626822165;
        class297.musicTrackArchive = null;
        class379.musicTrackGroupId = 1643562499;
        VarpDefinition.musicTrackFileId = -1823837761;
        class100.musicTrackVolume = 0;
        class120.musicTrackBoolean = false;
        class162.pcmSampleLength = 440964570;
        Client.currentTrackGroupId = -1225072817;
        Client.playingJingle = false;
        StructComposition.findEnumerated((byte)1);
        class138.updateGameState(10, 457158159);
    }
    
    public void qx(final int n) {
        assert ScriptFrame.client.isClientThread() : "must be called on client thread";
        class138.updateGameState(n, 468091997);
    }
    
    static final void vo(final boolean b) {
        class323.playPcmPlayers(-1441628872);
        final PacketWriter packetWriter = Client.packetWriter;
        packetWriter.pendingWrites -= 1313905755;
        if (1383386157 * Client.packetWriter.pendingWrites < 50 && !b) {
            return;
        }
        Client.packetWriter.pendingWrites = 0;
        if (!Client.hadNetworkError && Client.packetWriter.getSocket((byte)123) != null) {
            Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2554, Client.packetWriter.isaacCipher, (short)(-22390)), 414135591);
            try {
                PacketWriter.ok(Client.packetWriter, 421941662);
            }
            catch (IOException ex) {
                Client.hadNetworkError = true;
            }
        }
    }
    
    boolean vu(final PacketWriter packetWriter) {
        if (UserComparator5.friendsChat != null) {
            UserComparator5.friendsChat.method2146(packetWriter.packetBuffer, (byte)(-13));
        }
        Client.field558 = Client.cycleCntr * 235003969;
        GraphicsObject.ClanChat_inClanChat = true;
        packetWriter.field1133 = null;
        return true;
    }
    
    public void vu(final int n) {
        MouseHandler.MouseHandler_lastButton = n * 1105431337;
    }
    
    public void vu() {
        this.wu.tickEnd();
    }
    
    static final void yo() {
        int i = 0;
        while (i == 0) {
            i = 1;
            for (int j = 0; j < 730065501 * Client.menuOptionsCount - 1; ++j) {
                if (Client.menuOpcodes[j] < 1000 && Client.menuOpcodes[j + 1] > 1000) {
                    final String s = Client.menuTargets[j];
                    Client.menuTargets[j] = Client.menuTargets[1 + j];
                    Client.menuTargets[j + 1] = s;
                    final String s2 = Client.menuActions[j];
                    Client.menuActions[j] = Client.menuActions[1 + j];
                    Client.menuActions[j + 1] = s2;
                    final int n = Client.menuOpcodes[j];
                    Client.menuOpcodes[j] = Client.menuOpcodes[j + 1];
                    Client.menuOpcodes[j + 1] = n;
                    final int n2 = Client.menuArguments1[j];
                    Client.menuArguments1[j] = Client.menuArguments1[1 + j];
                    Client.menuArguments1[1 + j] = n2;
                    final int n3 = Client.menuArguments2[j];
                    Client.menuArguments2[j] = Client.menuArguments2[j + 1];
                    Client.menuArguments2[1 + j] = n3;
                    final int n4 = Client.menuIdentifiers[j];
                    Client.menuIdentifiers[j] = Client.menuIdentifiers[1 + j];
                    Client.menuIdentifiers[j + 1] = n4;
                    final int n5 = Client.menuItemIds[j];
                    Client.menuItemIds[j] = Client.menuItemIds[1 + j];
                    Client.menuItemIds[1 + j] = n5;
                    final boolean b = Client.menuShiftClick[j];
                    Client.menuShiftClick[j] = Client.menuShiftClick[1 + j];
                    Client.menuShiftClick[1 + j] = b;
                    i = 0;
                }
            }
        }
    }
    
    public static void yo(final int n, final NodeDeque nodeDeque) {
        for (ScriptEvent scriptEvent = (ScriptEvent)nodeDeque.dn(); scriptEvent != null; scriptEvent = (ScriptEvent)nodeDeque.th()) {
            if (n == WidgetInfo.TO_GROUP(scriptEvent.hd().getId())) {
                scriptEvent.gy();
            }
        }
    }
    
    static long qd() {
        return Client.playerUUID * -1749026863537138247L;
    }
    
    static final void qz() {
        if (1705142349 * Client.logoutTimer > 0) {
            class31.logOut(2029841578);
            return;
        }
        Timer.fw(Client.timer, -1869332326);
        class138.updateGameState(40, 1860311100);
        class333.field3090 = Client.packetWriter.getSocket((byte)3);
        PacketWriter.ty(Client.packetWriter, -274968704);
    }
    
    public int wk() {
        return MouseHandler.MouseHandler_x * -2063363905;
    }
    
    static final void wk(final Player player, final int n, final int n2, final MoveSpeed moveSpeed) {
        final int n3 = player.cf[0];
        final int n4 = player.dy[0];
        final int transformedSize = player.transformedSize((byte)(-109));
        if (n3 < transformedSize || n3 >= 104 - transformedSize || n4 < transformedSize || n4 >= 833059816 - transformedSize) {
            return;
        }
        if (n < transformedSize || n >= 104 - transformedSize || n2 < transformedSize || n2 >= 104 - transformedSize) {
            return;
        }
        final int n5 = n3;
        final int n6 = n4;
        final int transformedSize2 = player.transformedSize((byte)(-7));
        Client.field653.af = 1824317168 * n;
        Client.field653.an = -2066887785 * n2;
        Client.field653.aw = -2134236799;
        Client.field653.ac = -636180575;
        final int vmethod3254 = class144.vmethod3254(n5, n6, transformedSize2, Client.field653, Client.collisionMaps[-1426056969 * player.plane], true, Client.field654, Client.field655, 735732548);
        if (vmethod3254 < 1) {
            return;
        }
        for (int i = 0; i < vmethod3254 - 1; ++i) {
            player.method513(Client.field654[i], Client.field655[i], moveSpeed, 475560620);
        }
    }
    
    public void wk(final int n) {
        MouseHandler.MouseHandler_idleCycles = n * -500489753;
    }
    
    public static NodeDeque ug() {
        return Client.scriptEvents;
    }
    
    public static void uh(final Font font, final Font font2, final Font font3) {
        if (Login.worldSelectOpen) {
            Arrays.fill(RouteStrategy.rasterProvider.getPixels(), 0);
        }
    }
    
    static final void uh(final Actor actor, final int n, final int n2, final int n3, final int n4, final int n5) {
        if (actor != null && actor.isVisible(1666539507)) {
            if (actor instanceof NPC) {
                NPCComposition npcComposition = ((NPC)actor).definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, -736757580);
                }
                if (null == npcComposition) {
                    return;
                }
            }
            final int n6 = Players.Players_count * -2010934433;
            final int[] players_indices = Players.Players_indices;
            final boolean b = n < n6;
            int n7 = -2;
            Label_0431: {
                if (actor.overheadText != null) {
                    if (b) {
                        if (actor.showPublicPlayerChat) {
                            break Label_0431;
                        }
                        if (Client.publicChatMode * -1963411823 != 4) {
                            if (actor.isAutoChatting) {
                                break Label_0431;
                            }
                            if (0 != -1963411823 * Client.publicChatMode && Client.publicChatMode * -1963411823 != 3) {
                                if (Client.publicChatMode * -1963411823 != 1 || !Player.yc((Player)actor, -1768112081)) {
                                    break Label_0431;
                                }
                            }
                        }
                    }
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame, 566924230);
                    if (Client.viewportTempX * -1848743379 > -1 && Client.overheadTextCount * 734988573 < 1025553311 * Client.overheadTextLimit) {
                        Client.overheadTextXOffsets[734988573 * Client.overheadTextCount] = class137.fontBold12.bf(actor.overheadText) / 2;
                        Client.overheadTextAscents[Client.overheadTextCount * 734988573] = class137.fontBold12.al;
                        Client.overheadTextXs[734988573 * Client.overheadTextCount] = -1848743379 * Client.viewportTempX;
                        Client.overheadTextYs[Client.overheadTextCount * 734988573] = 318977283 * Client.viewportTempY - n7;
                        Client.overheadTextColors[Client.overheadTextCount * 734988573] = actor.field1002 * -1337884343;
                        Client.overheadTextEffects[734988573 * Client.overheadTextCount] = actor.recolourStartCycle * 819594233;
                        Client.overheadTextCyclesRemaining[Client.overheadTextCount * 734988573] = -536830723 * actor.spotAnimation;
                        Client.overheadText[Client.overheadTextCount * 734988573] = actor.overheadText;
                        Client.overheadTextCount -= 1973288651;
                        n7 += 12;
                    }
                }
            }
            if (!actor.healthBars.method1971()) {
                UserComparator6.method716(actor, -767387641 * actor.sequenceFrame + 15, 1833197395);
                for (HealthBar healthBar = (HealthBar)actor.healthBars.up(); null != healthBar; healthBar = (HealthBar)actor.healthBars.by()) {
                    final HealthBarUpdate lx = HealthBar.lx(healthBar, -1886224337 * Client.cycle, (byte)(-75));
                    if (null != lx) {
                        final HealthBarDefinition definition = healthBar.definition;
                        final SpritePixels ms = HealthBarDefinition.ms(definition, -2032608787);
                        final SpritePixels frontSprite = definition.getFrontSprite((byte)117);
                        int n8 = 0;
                        int n9;
                        if (ms != null && frontSprite != null) {
                            if (definition.widthPadding * 166630382 < frontSprite.subWidth) {
                                n8 = -2064168457 * definition.widthPadding;
                            }
                            n9 = frontSprite.subWidth - n8 * 2;
                        }
                        else {
                            n9 = 279738407 * definition.width;
                        }
                        int n10 = 255;
                        final int n11 = -1886224337 * Client.cycle - lx.cycle * -1225111563;
                        final int n12 = lx.health2 * -2028064551 * n9 / (definition.width * 279738407);
                        int n15;
                        if (lx.cycleOffset * -2116244499 > n11) {
                            final int n13 = (definition.field1533 * 294055185 == 0) ? 0 : (294055185 * definition.field1533 * (n11 / (294055185 * definition.field1533)));
                            final int n14 = n9 * (1250696899 * lx.health) / (279738407 * definition.width);
                            n15 = n14 + n13 * (n12 - n14) / (-2116244499 * lx.cycleOffset);
                        }
                        else {
                            n15 = n12;
                            final int n16 = definition.int5 * -407931959 + lx.cycleOffset * -2116244499 - n11;
                            if (definition.int3 * -471494485 >= 0) {
                                n10 = (n16 << 8) / (definition.int5 * -407931959 - -471494485 * definition.int3);
                            }
                        }
                        if (-2028064551 * lx.health2 > 0 && n15 < 1) {
                            n15 = 1;
                        }
                        if (ms != null && frontSprite != null) {
                            int n17;
                            if (n9 == n15) {
                                n17 = n15 + 2 * n8;
                            }
                            else {
                                n17 = n15 + n8;
                            }
                            final int subHeight = ms.subHeight;
                            n7 += subHeight;
                            final int n18 = -1848743379 * Client.viewportTempX + n2 - (n9 >> 1);
                            final int n19 = Client.viewportTempY * 318977283 + n3 - n7;
                            final int n20 = n18 - n8;
                            if (n10 >= 0 && n10 < 255) {
                                ms.drawTransAt(n20, n19, n10);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n20 + n17, n19 + subHeight);
                                frontSprite.drawTransAt(n20, n19, n10);
                            }
                            else {
                                ms.drawAt(n20, n19);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n17 + n20, n19 + subHeight);
                                frontSprite.drawAt(n20, n19);
                            }
                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4 + n2, n3 + n5);
                            n7 += 2;
                        }
                        else {
                            n7 += 5;
                            if (-1848743379 * Client.viewportTempX > -1) {
                                final int n21 = n2 + -1848743379 * Client.viewportTempX - (n9 >> 1);
                                final int n22 = Client.viewportTempY * 318977283 + n3 - n7;
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21, n22, n15, 5, 65280);
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21 + n15, n22, n9 - n15, 5, 16711680);
                            }
                            n7 += 2;
                        }
                    }
                    else if (healthBar.isEmpty(-12674764)) {
                        healthBar.hw();
                    }
                }
            }
            if (-2 == n7) {
                n7 += 7;
            }
            if (b && actor.movingOrientation * -1532330627 == Client.cycle * -1886224337 && class13.method46((Player)actor, -145352047)) {
                final Player player = (Player)actor;
                if (b) {
                    class374.worldToScreen(1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, 77927558);
                    final AbstractFont abstractFont = Client.fontsMap.get(FontName.FontName_plain12);
                    n7 += 4;
                    abstractFont.drawCentered(player.username.getName(-710264960), Client.viewportTempX * -1848743379 + n2, Client.viewportTempY * 318977283 + n3 - n7, 16777215, 0);
                    n7 += 18;
                }
            }
            if (b) {
                final Player player2 = (Player)actor;
                if (player2.isHidden) {
                    return;
                }
                if (-1 != player2.headIconPk * -1875167049 || -1 != -1905401649 * player2.headIconPrayer) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, 894594121);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        if (-1875167049 * player2.headIconPk != -1) {
                            n7 += 25;
                            class36.headIconPkSprites[player2.headIconPk * -1875167049].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - n7);
                        }
                        if (-1905401649 * player2.headIconPrayer != -1) {
                            n7 += 25;
                            class425.headIconPrayerSprites[-1905401649 * player2.headIconPrayer].drawAt(Client.viewportTempX * -1848743379 + n2 - 12, n3 + Client.viewportTempY * 318977283 - n7);
                        }
                    }
                }
                if (n >= 0 && 10 == 633821975 * Client.hintArrowType && Client.hintArrowPlayerIndex * 561980131 == players_indices[n]) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame + 15, -54630248);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[1].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - (n7 + KitDefinition.headIconHintSprites[1].subHeight));
                    }
                }
            }
            else {
                final NPC npc = (NPC)actor;
                final int[] ae = NPC.ae(npc, (byte)14);
                final short[] method602 = npc.method602(395813465);
                if (method602 != null && null != ae) {
                    for (int i = 0; i < method602.length; ++i) {
                        if (method602[i] >= 0) {
                            if (ae[i] >= 0) {
                                final long n23 = (long)ae[i] << 8 | (long)method602[i];
                                SpritePixels spritePixels = (SpritePixels)Client.archive5.method2126(n23, (short)5169);
                                if (spritePixels == null) {
                                    final SpritePixels[] method603 = UserComparator3.method699(class452.archive8, ae[i], 0, 1271520368);
                                    if (null != method603 && method602[i] < method603.length) {
                                        spritePixels = method603[method602[i]];
                                        Client.archive5.method2122(n23, spritePixels, 747668912);
                                    }
                                }
                                if (null != spritePixels) {
                                    UserComparator6.method716(actor, actor.sequenceFrame * -767387641 + 15, 1103738490);
                                    if (-1848743379 * Client.viewportTempX > -1) {
                                        spritePixels.drawAt(-1848743379 * Client.viewportTempX + n2 - (spritePixels.subWidth >> 1), 318977283 * Client.viewportTempY + (n3 - spritePixels.subHeight) - 4);
                                    }
                                }
                            }
                        }
                    }
                }
                if (1 == Client.hintArrowType * 633821975 && 920558921 * Client.hintArrowNpcIndex == Client.npcIndices[n - n6] && Client.cycle * -1886224337 % 20 < 10) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, -650196352);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[0].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - 28);
                    }
                }
            }
            for (int j = 0; j < 4; ++j) {
                final int n24 = actor.hitSplatValues[j];
                final int n25 = actor.pathY[j];
                HitSplatDefinition hitSplatDefinition = null;
                int n26 = 0;
                if (n25 >= 0) {
                    if (n24 <= -1886224337 * Client.cycle) {
                        continue;
                    }
                    hitSplatDefinition = class122.method725(actor.pathY[j], (byte)4);
                    n26 = 292771999 * hitSplatDefinition.field1672;
                    if (hitSplatDefinition != null && null != hitSplatDefinition.transforms) {
                        hitSplatDefinition = hitSplatDefinition.transform((byte)(-45));
                        if (hitSplatDefinition == null) {
                            actor.hitSplatValues[j] = -1;
                            continue;
                        }
                    }
                }
                else if (n24 < 0) {
                    continue;
                }
                final int n27 = actor.hitSplatValues2[j];
                HitSplatDefinition hitSplatDefinition2 = null;
                if (n27 >= 0) {
                    hitSplatDefinition2 = class122.method725(n27, (byte)4);
                    if (null != hitSplatDefinition2 && hitSplatDefinition2.transforms != null) {
                        hitSplatDefinition2 = hitSplatDefinition2.transform((byte)(-112));
                    }
                }
                if (n24 - n26 <= -1886224337 * Client.cycle) {
                    if (null == hitSplatDefinition) {
                        actor.hitSplatValues[j] = -1;
                    }
                    else {
                        UserComparator6.method716(actor, actor.sequenceFrame * -767387641 / 2, 1850218410);
                        if (Client.viewportTempX * -1848743379 > -1) {
                            if (j != 0) {
                                Client.viewportTempY += 2135862948;
                            }
                            if (j == 2) {
                                Client.viewportTempX -= 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            if (3 == j) {
                                Client.viewportTempX += 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            int subWidth = 0;
                            int subWidth2 = 0;
                            int subWidth3 = 0;
                            int subWidth4 = 0;
                            int xOffset = 0;
                            int xOffset2 = 0;
                            int xOffset3 = 0;
                            int xOffset4 = 0;
                            SpritePixels dc = null;
                            SpritePixels method604 = null;
                            SpritePixels method605 = null;
                            SpritePixels method606 = null;
                            int subWidth5 = 0;
                            int subWidth6 = 0;
                            int subWidth7 = 0;
                            int subWidth8 = 0;
                            int xOffset5 = 0;
                            int xOffset6 = 0;
                            int xOffset7 = 0;
                            int xOffset8 = 0;
                            int n28 = 0;
                            final SpritePixels dc2 = HitSplatDefinition.dc(hitSplatDefinition, -2103004777);
                            if (null != dc2) {
                                subWidth = dc2.subWidth;
                                final int subHeight2 = dc2.subHeight;
                                if (subHeight2 > n28) {
                                    n28 = subHeight2;
                                }
                                xOffset = dc2.xOffset;
                            }
                            final SpritePixels method607 = hitSplatDefinition.method1077(-1629003732);
                            if (null != method607) {
                                subWidth2 = method607.subWidth;
                                final int subHeight3 = method607.subHeight;
                                if (subHeight3 > n28) {
                                    n28 = subHeight3;
                                }
                                xOffset2 = method607.xOffset;
                            }
                            final SpritePixels method608 = hitSplatDefinition.method1072(1904800143);
                            if (method608 != null) {
                                subWidth3 = method608.subWidth;
                                final int subHeight4 = method608.subHeight;
                                if (subHeight4 > n28) {
                                    n28 = subHeight4;
                                }
                                xOffset3 = method608.xOffset;
                            }
                            final SpritePixels method609 = hitSplatDefinition.method1078((byte)9);
                            if (method609 != null) {
                                subWidth4 = method609.subWidth;
                                final int subHeight5 = method609.subHeight;
                                if (subHeight5 > n28) {
                                    n28 = subHeight5;
                                }
                                xOffset4 = method609.xOffset;
                            }
                            if (hitSplatDefinition2 != null) {
                                dc = HitSplatDefinition.dc(hitSplatDefinition2, -1275359888);
                                if (dc != null) {
                                    subWidth5 = dc.subWidth;
                                    final int subHeight6 = dc.subHeight;
                                    if (subHeight6 > n28) {
                                        n28 = subHeight6;
                                    }
                                    xOffset5 = dc.xOffset;
                                }
                                method604 = hitSplatDefinition2.method1077(-843825366);
                                if (method604 != null) {
                                    subWidth6 = method604.subWidth;
                                    final int subHeight7 = method604.subHeight;
                                    if (subHeight7 > n28) {
                                        n28 = subHeight7;
                                    }
                                    xOffset6 = method604.xOffset;
                                }
                                method605 = hitSplatDefinition2.method1072(1833800788);
                                if (null != method605) {
                                    subWidth7 = method605.subWidth;
                                    final int subHeight8 = method605.subHeight;
                                    if (subHeight8 > n28) {
                                        n28 = subHeight8;
                                    }
                                    xOffset7 = method605.xOffset;
                                }
                                method606 = hitSplatDefinition2.method1078((byte)71);
                                if (null != method606) {
                                    subWidth8 = method606.subWidth;
                                    final int subHeight9 = method606.subHeight;
                                    if (subHeight9 > n28) {
                                        n28 = subHeight9;
                                    }
                                    xOffset8 = method606.xOffset;
                                }
                            }
                            Font font = hitSplatDefinition.getFont(1644925127);
                            if (null == font) {
                                font = Language.fontPlain11;
                            }
                            Font font2;
                            if (null != hitSplatDefinition2) {
                                font2 = hitSplatDefinition2.getFont(1644925127);
                                if (font2 == null) {
                                    font2 = Language.fontPlain11;
                                }
                            }
                            else {
                                font2 = Language.fontPlain11;
                            }
                            String string = null;
                            int bf = 0;
                            final String string2 = hitSplatDefinition.getString(actor.hitSplatTypes[j], -220285867);
                            final int bf2 = font.bf(string2);
                            if (hitSplatDefinition2 != null) {
                                string = hitSplatDefinition2.getString(actor.hitSplatCycles[j], -1931433979);
                                bf = font2.bf(string);
                            }
                            int n29 = 0;
                            int n30 = 0;
                            if (subWidth2 > 0) {
                                if (null != method608 || method609 != null) {
                                    n29 = 1 + bf2 / subWidth2;
                                }
                                else {
                                    n29 = 1;
                                }
                            }
                            if (null != hitSplatDefinition2 && subWidth6 > 0) {
                                if (null == method605 && method606 == null) {
                                    n30 = 1;
                                }
                                else {
                                    n30 = bf / subWidth6 + 1;
                                }
                            }
                            final int n32;
                            int n31 = n32 = 0;
                            if (subWidth > 0) {
                                n31 += subWidth;
                            }
                            n31 += 2;
                            final int n33 = n31;
                            if (subWidth3 > 0) {
                                n31 += subWidth3;
                            }
                            final int n34 = n31;
                            int n35 = n31;
                            int n37;
                            if (subWidth2 > 0) {
                                final int n36 = n29 * subWidth2;
                                n37 = n31 + n36;
                                n35 += (n36 - bf2) / 2;
                            }
                            else {
                                n37 = n31 + bf2;
                            }
                            final int n38 = n37;
                            if (subWidth4 > 0) {
                                n37 += subWidth4;
                            }
                            int n39 = 0;
                            int n40 = 0;
                            int n41 = 0;
                            int n42 = 0;
                            int n43 = 0;
                            if (hitSplatDefinition2 != null) {
                                n37 += 2;
                                n39 = n37;
                                if (subWidth5 > 0) {
                                    n37 += subWidth5;
                                }
                                n37 += 2;
                                n40 = n37;
                                if (subWidth7 > 0) {
                                    n37 += subWidth7;
                                }
                                n41 = n37;
                                n43 = n37;
                                if (subWidth6 > 0) {
                                    final int n44 = subWidth6 * n30;
                                    n37 += n44;
                                    n43 += (n44 - bf) / 2;
                                }
                                else {
                                    n37 += bf;
                                }
                                n42 = n37;
                                if (subWidth8 > 0) {
                                    n37 += subWidth8;
                                }
                            }
                            final int n45 = actor.hitSplatValues[j] - -1886224337 * Client.cycle;
                            final int n46 = hitSplatDefinition.field1663 * 895105585 - 895105585 * hitSplatDefinition.field1663 * n45 / (292771999 * hitSplatDefinition.field1672);
                            final int n47 = 498242719 * hitSplatDefinition.field1676 * n45 / (hitSplatDefinition.field1672 * 292771999) + -(hitSplatDefinition.field1676 * 498242719);
                            final int n48 = n2 + -1848743379 * Client.viewportTempX - (n37 >> 1) + n46;
                            int n50;
                            final int n49 = n50 = n3 + Client.viewportTempY * 318977283 - 12 + n47;
                            int n51 = n49 + n28;
                            final int n52 = n49 + 15 + 1785373205 * hitSplatDefinition.field1680;
                            final int n53 = n52 - font.at;
                            final int n54 = font.aa + n52;
                            if (n53 < n50) {
                                n50 = n53;
                            }
                            if (n54 > n51) {
                                n51 = n54;
                            }
                            int n55 = 0;
                            if (null != hitSplatDefinition2) {
                                n55 = 1785373205 * hitSplatDefinition2.field1680 + (n49 + 15);
                                final int n56 = n55 - font2.at;
                                final int n57 = n55 + font2.aa;
                                if (n56 < n50) {}
                                if (n57 > n51) {}
                            }
                            int n58 = 255;
                            if (-1413310139 * hitSplatDefinition.field1683 >= 0) {
                                n58 = (n45 << 8) / (hitSplatDefinition.field1672 * 292771999 - hitSplatDefinition.field1683 * -1413310139);
                            }
                            if (n58 >= 0 && n58 < 255) {
                                if (dc2 != null) {
                                    dc2.drawTransAt(n48 + n32 - xOffset, n49, n58);
                                }
                                if (null != method608) {
                                    method608.drawTransAt(n33 + n48 - xOffset3, n49, n58);
                                }
                                if (method607 != null) {
                                    for (int k = 0; k < n29; ++k) {
                                        method607.drawTransAt(k * subWidth2 + (n34 + n48 - xOffset2), n49, n58);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawTransAt(n48 + n38 - xOffset4, n49, n58);
                                }
                                font.am(string2, n35 + n48, n52, hitSplatDefinition.textColor * -2000718353, 0, n58);
                                if (null != hitSplatDefinition2) {
                                    if (null != dc) {
                                        dc.drawTransAt(n39 + n48 - xOffset5, n49, n58);
                                    }
                                    if (method605 != null) {
                                        method605.drawTransAt(n40 + n48 - xOffset7, n49, n58);
                                    }
                                    if (null != method604) {
                                        for (int l = 0; l < n30; ++l) {
                                            method604.drawTransAt(n48 + n41 - xOffset6 + subWidth6 * l, n49, n58);
                                        }
                                    }
                                    if (method606 != null) {
                                        method606.drawTransAt(n42 + n48 - xOffset8, n49, n58);
                                    }
                                    font2.am(string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353, 0, n58);
                                }
                            }
                            else {
                                if (dc2 != null) {
                                    dc2.drawAt(n32 + n48 - xOffset, n49);
                                }
                                if (null != method608) {
                                    method608.drawAt(n33 + n48 - xOffset3, n49);
                                }
                                if (null != method607) {
                                    for (int n59 = 0; n59 < n29; ++n59) {
                                        method607.drawAt(subWidth2 * n59 + (n34 + n48 - xOffset2), n49);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawAt(n48 + n38 - xOffset4, n49);
                                }
                                class492.xb(font, string2, n48 + n35, n52, hitSplatDefinition.textColor * -2000718353 | 0xFF000000, 0);
                                if (null != hitSplatDefinition2) {
                                    if (dc != null) {
                                        dc.drawAt(n39 + n48 - xOffset5, n49);
                                    }
                                    if (method605 != null) {
                                        method605.drawAt(n40 + n48 - xOffset7, n49);
                                    }
                                    if (method604 != null) {
                                        for (int n60 = 0; n60 < n30; ++n60) {
                                            method604.drawAt(n48 + n41 - xOffset6 + n60 * subWidth6, n49);
                                        }
                                    }
                                    if (null != method606) {
                                        method606.drawAt(n48 + n42 - xOffset8, n49);
                                    }
                                    class492.xb(font2, string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353 | 0xFF000000, 0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public void ux(final int scene_cameraPitchSine) {
        Scene.Scene_cameraPitchSine = scene_cameraPitchSine;
    }
    
    static final void ux(final int n, final int n2) {
        if (2 != Client.hintArrowType * 633821975) {
            return;
        }
        class374.worldToScreen(Client.hintArrowSubX * 1774830445 + (-1178855237 * Client.hintArrowX - WorldMapData_0.baseX * -1232093375 << 7), Client.hintArrowSubY * 1772868165 + (Client.hintArrowY * 796703205 - GameObject.baseY * 827352769 << 7), Client.hintArrowHeight * -887816298, 216076987);
        if (Client.viewportTempX * -1848743379 > -1 && Client.cycle * -1886224337 % 20 < 10) {
            KitDefinition.headIconHintSprites[0].drawAt(n + -1848743379 * Client.viewportTempX - 12, Client.viewportTempY * 318977283 + n2 - 28);
        }
    }
    
    public static void lg(final int index) {
        final MenuAction[] array = { MenuAction.PLAYER_FIRST_OPTION, MenuAction.PLAYER_SECOND_OPTION, MenuAction.PLAYER_THIRD_OPTION, MenuAction.PLAYER_FOURTH_OPTION, MenuAction.PLAYER_FIFTH_OPTION, MenuAction.PLAYER_SIXTH_OPTION, MenuAction.PLAYER_SEVENTH_OPTION, MenuAction.PLAYER_EIGHTH_OPTION };
        if (index >= 0 && index < array.length) {
            ScriptFrame.client.getPlayerMenuTypes()[index] = array[index].getId();
        }
        final PlayerMenuOptionsChanged playerMenuOptionsChanged = new PlayerMenuOptionsChanged();
        playerMenuOptionsChanged.setIndex(index);
        ScriptFrame.client.getCallbacks().post((Object)playerMenuOptionsChanged);
    }
    
    static final int uu() {
        if (class20.clientPreferences.getRoofsHidden(-1990921448)) {
            return -1727408401 * GameEngine.Client_plane;
        }
        int n = 3;
        if (WorldMapSectionType.cameraPitch * 1897923909 < 310) {
            int i;
            int n2;
            if (986256295 * Client.oculusOrbState == 1) {
                i = -1958669353 * class33.oculusOrbFocalPointX >> 7;
                n2 = -365969735 * class144.oculusOrbFocalPointY >> 7;
            }
            else {
                i = 1144428983 * MusicPatchNode.localPlayer.br >> 7;
                n2 = MusicPatchNode.localPlayer.ep * -411750205 >> 7;
            }
            int n3 = -2100544359 * class36.cameraX >> 7;
            int j = class297.cameraZ * -91399205 >> 7;
            if (n3 < 0 || j < 0 || n3 >= 104 || j >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (i < 0 || n2 < 0 || i >= 104 || n2 >= 104) {
                return -1727408401 * GameEngine.Client_plane;
            }
            if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            int n4;
            if (i > n3) {
                n4 = i - n3;
            }
            else {
                n4 = n3 - i;
            }
            int n5;
            if (n2 > j) {
                n5 = n2 - j;
            }
            else {
                n5 = j - n2;
            }
            if (n4 > n5) {
                final int n6 = 65536 * n5 / n4;
                int n7 = 32768;
                while (i != n3) {
                    if (n3 < i) {
                        ++n3;
                    }
                    else if (n3 > i) {
                        --n3;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                        n = GameEngine.Client_plane * -1727408401;
                    }
                    n7 += n6;
                    if (n7 >= 65536) {
                        n7 -= 65536;
                        if (j < n2) {
                            ++j;
                        }
                        else if (j > n2) {
                            --j;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
            else if (n5 > 0) {
                final int n8 = n4 * 65536 / n5;
                int n9 = 32768;
                while (j != n2) {
                    if (j < n2) {
                        ++j;
                    }
                    else if (j > n2) {
                        --j;
                    }
                    if (0x0 != (Tiles.Tiles_renderFlags[-1727408401 * GameEngine.Client_plane][n3][j] & 0x4)) {
                        n = -1727408401 * GameEngine.Client_plane;
                    }
                    n9 += n8;
                    if (n9 >= 65536) {
                        n9 -= 65536;
                        if (n3 < i) {
                            ++n3;
                        }
                        else if (n3 > i) {
                            --n3;
                        }
                        if (0x0 == (Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][n3][j] & 0x4)) {
                            continue;
                        }
                        n = GameEngine.Client_plane * -1727408401;
                    }
                }
            }
        }
        if (MusicPatchNode.localPlayer.br * 1144428983 >= 0 && MusicPatchNode.localPlayer.ep * -411750205 >= 0 && 1144428983 * MusicPatchNode.localPlayer.br < 13312 && -411750205 * MusicPatchNode.localPlayer.ep < 13312) {
            if ((Tiles.Tiles_renderFlags[GameEngine.Client_plane * -1727408401][1144428983 * MusicPatchNode.localPlayer.br >> 7][-411750205 * MusicPatchNode.localPlayer.ep >> 7] & 0x4) != 0x0) {
                n = -1727408401 * GameEngine.Client_plane;
            }
            return n;
        }
        return -1727408401 * GameEngine.Client_plane;
    }
    
    public int doCycleJs5() {
        return Client.hintArrowPlayerIndex * 561980131;
    }
    
    public static void doCycleJs5(final boolean b, final PacketBuffer packetBuffer) {
        zn();
    }
    
    public UserList doCycleJs5() {
        final FriendSystem kp = this.kp();
        if (kp == null) {
            return null;
        }
        return kp.cu();
    }
    
    void doCycleJs5(final byte b) {
        try {
            Client.timeOfPreviousKeyPress = (class96.clockNow(276585591) + 500L) * -1343645632282639199L;
            this.resizeJS(-1447416501);
            if (-1 != Client.localPlayerIndex * -896157613) {
                hp(this, true, -1010946495);
            }
        }
        catch (RuntimeException ex) {
            throw HealthBar.get(ex, "client.am(" + ')');
        }
    }
    
    static final void uo() {
        for (Projectile projectile = (Projectile)Client.projectiles.last(); null != projectile; projectile = (Projectile)Client.projectiles.previous()) {
            if (GameEngine.Client_plane * 1781906038 != 377674665 * projectile.plane || -1452336442 * Client.cycle > -1203783373 * projectile.cycleEnd) {
                projectile.hw();
            }
            else if (Client.cycle * -1886224337 >= 1186397507 * projectile.cycleStart) {
                if (323080578 * projectile.targetIndex > 0) {
                    final NPC npc = Client.npcs[projectile.targetIndex * 803751093 - 1];
                    if (null != npc && 7326087 * npc.br >= 0 && 1144428983 * npc.br < 13312 && npc.ep * -371332238 >= 0 && -1294388026 * npc.ep < 13312) {
                        projectile.setDestination(-1467441806 * npc.br, -411750205 * npc.ep, class147.getTileHeight(npc.br * 1144428983, 2045249250 * npc.ep, -850668143 * projectile.plane, (byte)(-43)) - projectile.endHeight * -860121869, 2004434714 * Client.cycle, -335674854);
                    }
                }
                if (projectile.targetIndex * 803751093 < 0) {
                    final int n = -(-944117060 * projectile.targetIndex) - 1;
                    Player localPlayer;
                    if (1989254827 * Client.localPlayerIndex == n) {
                        localPlayer = MusicPatchNode.localPlayer;
                    }
                    else {
                        localPlayer = Client.players[n];
                    }
                    if (localPlayer != null && 1144171567 * localPlayer.br >= 0 && localPlayer.br * 1144428983 < 13312 && -411750205 * localPlayer.ep >= 0 && 1235361564 * localPlayer.ep < 13312) {
                        projectile.setDestination(1144428983 * localPlayer.br, localPlayer.ep * -411750205, class147.getTileHeight(localPlayer.br * -75967674, -46492612 * localPlayer.ep, -1842311455 * projectile.plane, (byte)(-45)) - -860121869 * projectile.endHeight, Client.cycle * -1886224337, -335674854);
                    }
                }
                projectile.advance(-1795081153 * Client.field432, 2065809163);
                class31.scene.drawEntity(-1727408401 * GameEngine.Client_plane, (int)projectile.x, (int)projectile.y, (int)projectile.z, 113290462, projectile, -1275855770 * projectile.yaw, -1L, false);
            }
        }
    }
    
    public static void uj(final Client client, final String s) throws IOException {
        if (client == null) {
            client.getOculusOrbFocalPointY();
        }
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("grant_type", "refresh_token");
        hashMap.put("scope", "gamesso.token.create");
        hashMap.put("refresh_token", s);
        final URL url = new URL(ViewportMouse.field2213 + "shield/oauth/token" + new class438(hashMap).method2298(-759167743));
        final class394 class394 = new class394();
        class394.method2114(Client.field405, (byte)(-21));
        class394.method2106("Host", new URL(ViewportMouse.field2213).getHost(), 167864980);
        class394.method2111(class435.field3823, (byte)17);
        final class9 field30 = class9.field30;
        final com$jagex$oldscape$pub$RefreshAccessTokenRequester field31 = client.field419;
        if (null != field31) {
            client.field404 = field31.request(field30.method30((byte)(-112)), url, class394.method2105(1416098673), "");
            return;
        }
        client.field390 = class14.ni(client.field529, new class10(url, field30, class394, client.field401), (byte)1);
    }
    
    static final void uj(final boolean b) {
        for (int i = 0; i < 265474485 * Client.npcCount; ++i) {
            final NPC npc = Client.npcs[Client.npcIndices[i]];
            if (npc != null && npc.isVisible(1666539507) && b == npc.definition.isVisible && npc.definition.transformIsVisible(41635170)) {
                final int n = npc.br * 1587332829 >> 7;
                final int n2 = npc.ep * -1032153221 >> 7;
                if (n >= 0 && n < -343445254 && n2 >= 0 && n2 < 104) {
                    if (1 == npc.bt * 353040509 && 0x3B7B1602 == (npc.br * -1418266218 & 0x7F) && 0xA4F329A6 == (-411750205 * npc.ep & 0x9636F4DA)) {
                        if (Client.viewportDrawCount * 139917692 == Client.tileLastDrawnActor[n][n2]) {
                            continue;
                        }
                        Client.tileLastDrawnActor[n][n2] = 2041464667 * Client.viewportDrawCount;
                    }
                    final long calculateTag = FaceNormal.calculateTag(0, 0, 1, !npc.definition.isInteractable, Client.npcIndices[i], -323088559);
                    npc.cx = 329303463 * Client.cycle;
                    class31.scene.drawEntity(GameEngine.Client_plane * -1074114356, 1144428983 * npc.br, -411750205 * npc.ep, class147.getTileHeight(1062464699 * npc.bt + 2025904376 + 1144428983 * npc.br, -280814630 * npc.bt + 125369857 + npc.ep * 323605115, -1727408401 * GameEngine.Client_plane, (byte)10), -685740200 + (1119756096 * npc.bt + 49446819), npc, npc.dx * 1252490105, calculateTag, npc.an);
                }
            }
        }
    }
    
    static boolean uz(final Player player) {
        if (0 == -1627680117 * Client.drawPlayerNames) {
            return false;
        }
        if (player != MusicPatchNode.localPlayer) {
            boolean b = (-216153244 * Client.drawPlayerNames & 0x4) != 0x0;
            if (!b) {
                b = (0x0 != (Client.drawPlayerNames * -1387790283 & 0x1) && Player.yc(player, -2026444090));
            }
            boolean b2 = b;
            if (!b2) {
                b2 = (0x0 != (Client.drawPlayerNames * -1387790283 & 0x2) && Player.zk(player, (byte)(-21)));
            }
            return b2;
        }
        return 0x0 != (-1387790283 * Client.drawPlayerNames & 0x8);
    }
    
    public void hf() {
        try {
            final OutputStream outputStream = Files.newOutputStream(this.ru.toPath(), new OpenOption[0]);
            try {
                final OutputStreamWriter writer = new OutputStreamWriter(outputStream, StandardCharsets.UTF_8);
                try {
                    this.yb.store(writer, "Do not share this file with anyone");
                    writer.close();
                }
                catch (Throwable t) {
                    try {
                        writer.close();
                    }
                    catch (Throwable exception) {
                        t.addSuppressed(exception);
                    }
                    throw t;
                }
                if (outputStream != null) {
                    outputStream.close();
                }
            }
            catch (Throwable t2) {
                if (outputStream != null) {
                    try {
                        outputStream.close();
                    }
                    catch (Throwable exception2) {
                        t2.addSuppressed(exception2);
                    }
                }
                throw t2;
            }
        }
        catch (IOException ex) {
            Client.nw.warn("unable to write credentials to disk", (Throwable)ex);
        }
    }
    
    public static void kv(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final Scene scene, final CollisionMap collisionMap) {
        scene.wb[n][n2][n3] = Client.ht;
        if (Client.lf) {
            Client.lf = false;
            ScriptFrame.client.resizeGame(true);
        }
    }
    
    public void kv(final int scene_cameraPitchCosine) {
        Scene.Scene_cameraPitchCosine = scene_cameraPitchCosine;
    }
    
    static final void ul() {
        for (GraphicsObject graphicsObject = (GraphicsObject)Client.graphicsObjects.last(); graphicsObject != null; graphicsObject = (GraphicsObject)Client.graphicsObjects.previous()) {
            if (graphicsObject.plane * -695349279 == -1727408401 * GameEngine.Client_plane && !graphicsObject.isFinished) {
                if (-1886224337 * Client.cycle >= -1927288833 * graphicsObject.cycleStart) {
                    graphicsObject.advance(Client.field432 * -1795081153, (byte)(-88));
                    if (graphicsObject.isFinished) {
                        graphicsObject.hw();
                    }
                    else {
                        class31.scene.drawEntity(graphicsObject.plane * -784991027, -1570643775 * graphicsObject.x, 1210303624 * graphicsObject.y, graphicsObject.z * 176065590, -30784785, graphicsObject, 0, -1L, false);
                    }
                }
            }
            else {
                graphicsObject.hw();
            }
        }
    }
    
    public int[] un() {
        return class17.SpriteBuffer_yOffsets;
    }
    
    static final void un(final Actor actor, final int n, final int n2, final int n3, final int n4, final int n5) {
        if (actor != null && actor.isVisible(1666539507)) {
            if (actor instanceof NPC) {
                NPCComposition npcComposition = ((NPC)actor).definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, 304410756);
                }
                if (null == npcComposition) {
                    return;
                }
            }
            final int n6 = Players.Players_count * -2010934433;
            final int[] players_indices = Players.Players_indices;
            final boolean b = n < n6;
            int n7 = -234987350;
            if (actor.overheadText != null && (!b || (!actor.showPublicPlayerChat && (Client.publicChatMode * -1963411823 == 4 || (!actor.isAutoChatting && (0 == -665615812 * Client.publicChatMode || Client.publicChatMode * -1963411823 == 3 || (Client.publicChatMode * 870394001 == 1 && Player.yc((Player)actor, -2117078807)))))))) {
                class374.worldToScreen(actor.walkBackSequence * 1144428983, 850968073 * actor.field1005, -1299516073 * actor.sequenceFrame, 31597401);
                if (Client.viewportTempX * -1670418923 > -1 && Client.overheadTextCount * 734988573 < 1025553311 * Client.overheadTextLimit) {
                    Client.overheadTextXOffsets[-1759906074 * Client.overheadTextCount] = class137.fontBold12.bf(actor.overheadText) / 2;
                    Client.overheadTextAscents[Client.overheadTextCount * 1086718455] = class137.fontBold12.al;
                    Client.overheadTextXs[-1812945804 * Client.overheadTextCount] = -1848743379 * Client.viewportTempX;
                    Client.overheadTextYs[Client.overheadTextCount * 734988573] = 318977283 * Client.viewportTempY - n7;
                    Client.overheadTextColors[Client.overheadTextCount * -1879913189] = actor.field1002 * -1337884343;
                    Client.overheadTextEffects[-92512277 * Client.overheadTextCount] = actor.recolourStartCycle * 819594233;
                    Client.overheadTextCyclesRemaining[Client.overheadTextCount * 734988573] = -536830723 * actor.spotAnimation;
                    Client.overheadText[Client.overheadTextCount * 734988573] = actor.overheadText;
                    Client.overheadTextCount -= 1973288651;
                    n7 += 12;
                }
            }
            if (!actor.healthBars.method1971()) {
                UserComparator6.method716(actor, -767387641 * actor.sequenceFrame + 15, 1566503276);
                for (HealthBar healthBar = (HealthBar)actor.healthBars.up(); null != healthBar; healthBar = (HealthBar)actor.healthBars.by()) {
                    final HealthBarUpdate lx = HealthBar.lx(healthBar, -278983907 * Client.cycle, (byte)(-126));
                    if (null != lx) {
                        final HealthBarDefinition definition = healthBar.definition;
                        final SpritePixels ms = HealthBarDefinition.ms(definition, -2021927149);
                        final SpritePixels frontSprite = definition.getFrontSprite((byte)111);
                        int n8 = 0;
                        int n9;
                        if (ms != null && frontSprite != null) {
                            if (definition.widthPadding * -428594818 < frontSprite.subWidth) {
                                n8 = -2064168457 * definition.widthPadding;
                            }
                            n9 = frontSprite.subWidth - n8 * 2;
                        }
                        else {
                            n9 = 1340343814 * definition.width;
                        }
                        int n10 = -1633148665;
                        final int n11 = -2082475858 * Client.cycle - lx.cycle * -1225111563;
                        final int n12 = lx.health2 * -2028064551 * n9 / (definition.width * 1753903940);
                        int n15;
                        if (lx.cycleOffset * 1623368875 > n11) {
                            final int n13 = (definition.field1533 * 294055185 == 0) ? 0 : (1538770749 * definition.field1533 * (n11 / (1630144256 * definition.field1533)));
                            final int n14 = n9 * (1279506379 * lx.health) / (-1602510085 * definition.width);
                            n15 = n14 + n13 * (n12 - n14) / (-2116244499 * lx.cycleOffset);
                        }
                        else {
                            n15 = n12;
                            final int n16 = definition.int5 * -489664983 + lx.cycleOffset * -2116244499 - n11;
                            if (definition.int3 * -1349887506 >= 0) {
                                n10 = (n16 << 8) / (definition.int5 * -407931959 - -471494485 * definition.int3);
                            }
                        }
                        if (-1789885848 * lx.health2 > 0 && n15 < 1) {
                            n15 = 1;
                        }
                        if (ms != null && frontSprite != null) {
                            int n17;
                            if (n9 == n15) {
                                n17 = n15 + 2 * n8;
                            }
                            else {
                                n17 = n15 + n8;
                            }
                            final int subHeight = ms.subHeight;
                            n7 += subHeight;
                            final int n18 = 1770220832 * Client.viewportTempX + n2 - (n9 >> 1);
                            final int n19 = Client.viewportTempY * -997150506 + n3 - n7;
                            final int n20 = n18 - n8;
                            if (n10 >= 0 && n10 < 255) {
                                ms.drawTransAt(n20, n19, n10);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n20 + n17, n19 + subHeight);
                                frontSprite.drawTransAt(n20, n19, n10);
                            }
                            else {
                                ms.drawAt(n20, n19);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n17 + n20, n19 + subHeight);
                                frontSprite.drawAt(n20, n19);
                            }
                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4 + n2, n3 + n5);
                            n7 += 2;
                        }
                        else {
                            n7 += 5;
                            if (-1848743379 * Client.viewportTempX > -1) {
                                final int n21 = n2 + -1848743379 * Client.viewportTempX - (n9 >> 1);
                                final int n22 = Client.viewportTempY * 1458610029 + n3 - n7;
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21, n22, n15, 5, 65280);
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21 + n15, n22, n9 - n15, 5, 16711680);
                            }
                            n7 += 2;
                        }
                    }
                    else if (healthBar.isEmpty(-12674764)) {
                        healthBar.hw();
                    }
                }
            }
            if (-2076832009 == n7) {
                n7 += 7;
            }
            if (b && actor.movingOrientation * -1874431312 == Client.cycle * -1126529489 && class13.method46((Player)actor, 331608680)) {
                final Player player = (Player)actor;
                if (b) {
                    class374.worldToScreen(-260937579 * actor.walkBackSequence, -213297106 * actor.field1005, 15 + -527292550 * actor.sequenceFrame, -2083339260);
                    final AbstractFont abstractFont = Client.fontsMap.get(FontName.FontName_plain12);
                    n7 += 4;
                    abstractFont.drawCentered(player.username.getName(-710264960), Client.viewportTempX * 1845531437 + n2, Client.viewportTempY * -1630374818 + n3 - n7, 1707736497, 0);
                    n7 += 18;
                }
            }
            if (b) {
                final Player player2 = (Player)actor;
                if (player2.isHidden) {
                    return;
                }
                if (-1 != player2.headIconPk * -1075695691 || -1 != -1905401649 * player2.headIconPrayer) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -2011279763 * actor.sequenceFrame, 1561392081);
                    if (1239759770 * Client.viewportTempX > -1) {
                        if (2113599638 * player2.headIconPk != -1) {
                            n7 += 25;
                            class36.headIconPkSprites[player2.headIconPk * -1875167049].drawAt(n2 + Client.viewportTempX * -388441804 - 12, 2018989074 * Client.viewportTempY + n3 - n7);
                        }
                        if (-1905401649 * player2.headIconPrayer != -1) {
                            n7 += 25;
                            class425.headIconPrayerSprites[-372909163 * player2.headIconPrayer].drawAt(Client.viewportTempX * -1589147314 + n2 - 12, n3 + Client.viewportTempY * 318977283 - n7);
                        }
                    }
                }
                if (n >= 0 && 10 == 633821975 * Client.hintArrowType && Client.hintArrowPlayerIndex * 561980131 == players_indices[n]) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -398800814 * actor.sequenceFrame + 15, 91954004);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[1].drawAt(n2 + Client.viewportTempX * -2049695452 - 12, -53197449 * Client.viewportTempY + n3 - (n7 + KitDefinition.headIconHintSprites[1].subHeight));
                    }
                }
            }
            else {
                final NPC npc = (NPC)actor;
                final int[] ae = NPC.ae(npc, (byte)14);
                final short[] method602 = npc.method602(1099868316);
                if (method602 != null && null != ae) {
                    for (int i = 0; i < method602.length; ++i) {
                        if (method602[i] >= 0) {
                            if (ae[i] >= 0) {
                                final long n23 = (long)ae[i] << 8 | (long)method602[i];
                                SpritePixels spritePixels = (SpritePixels)Client.archive5.method2126(n23, (short)6304);
                                if (spritePixels == null) {
                                    final SpritePixels[] method603 = UserComparator3.method699(class452.archive8, ae[i], 0, 1271520368);
                                    if (null != method603 && method602[i] < method603.length) {
                                        spritePixels = method603[method602[i]];
                                        Client.archive5.method2122(n23, spritePixels, 747668912);
                                    }
                                }
                                if (null != spritePixels) {
                                    UserComparator6.method716(actor, actor.sequenceFrame * 767732512 + 15, 988849013);
                                    if (-1019414070 * Client.viewportTempX > -1) {
                                        spritePixels.drawAt(-1848743379 * Client.viewportTempX + n2 - (spritePixels.subWidth >> 1), 318977283 * Client.viewportTempY + (n3 - spritePixels.subHeight) - 4);
                                    }
                                }
                            }
                        }
                    }
                }
                if (1 == Client.hintArrowType * 967505125 && 2112217534 * Client.hintArrowNpcIndex == Client.npcIndices[n - n6] && Client.cycle * 1448915609 % 20 < 10) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, 1669554520 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, -1229713589);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[0].drawAt(n2 + Client.viewportTempX * 2130012267 - 12, -1341833910 * Client.viewportTempY + n3 - 28);
                    }
                }
            }
            for (int j = 0; j < 4; ++j) {
                final int n24 = actor.hitSplatValues[j];
                final int n25 = actor.pathY[j];
                HitSplatDefinition hitSplatDefinition = null;
                int n26 = 0;
                if (n25 >= 0) {
                    if (n24 <= -1028529256 * Client.cycle) {
                        continue;
                    }
                    hitSplatDefinition = class122.method725(actor.pathY[j], (byte)4);
                    n26 = 1142232097 * hitSplatDefinition.field1672;
                    if (hitSplatDefinition != null && null != hitSplatDefinition.transforms) {
                        hitSplatDefinition = hitSplatDefinition.transform((byte)(-127));
                        if (hitSplatDefinition == null) {
                            actor.hitSplatValues[j] = -1;
                            continue;
                        }
                    }
                }
                else if (n24 < 0) {
                    continue;
                }
                final int n27 = actor.hitSplatValues2[j];
                HitSplatDefinition hitSplatDefinition2 = null;
                if (n27 >= 0) {
                    hitSplatDefinition2 = class122.method725(n27, (byte)4);
                    if (null != hitSplatDefinition2 && hitSplatDefinition2.transforms != null) {
                        hitSplatDefinition2 = hitSplatDefinition2.transform((byte)(-32));
                    }
                }
                if (n24 - n26 <= -1886224337 * Client.cycle) {
                    if (null == hitSplatDefinition) {
                        actor.hitSplatValues[j] = -1;
                    }
                    else {
                        UserComparator6.method716(actor, actor.sequenceFrame * -767387641 / 2, 1113226904);
                        if (Client.viewportTempX * -1848743379 > -1) {
                            if (j != 0) {
                                Client.viewportTempY += 2135862948;
                            }
                            if (j == 2) {
                                Client.viewportTempX += 1675194269;
                                Client.viewportTempY -= 1079552174;
                            }
                            if (3 == j) {
                                Client.viewportTempX -= 1828855689;
                                Client.viewportTempY -= 1079552174;
                            }
                            int subWidth = 0;
                            int subWidth2 = 0;
                            int subWidth3 = 0;
                            int subWidth4 = 0;
                            int xOffset = 0;
                            int xOffset2 = 0;
                            int xOffset3 = 0;
                            int xOffset4 = 0;
                            SpritePixels dc = null;
                            SpritePixels method604 = null;
                            SpritePixels method605 = null;
                            SpritePixels method606 = null;
                            int subWidth5 = 0;
                            int subWidth6 = 0;
                            int subWidth7 = 0;
                            int subWidth8 = 0;
                            int xOffset5 = 0;
                            int xOffset6 = 0;
                            int xOffset7 = 0;
                            int xOffset8 = 0;
                            int n28 = 0;
                            final SpritePixels dc2 = HitSplatDefinition.dc(hitSplatDefinition, 487249546);
                            if (null != dc2) {
                                subWidth = dc2.subWidth;
                                final int subHeight2 = dc2.subHeight;
                                if (subHeight2 > n28) {
                                    n28 = subHeight2;
                                }
                                xOffset = dc2.xOffset;
                            }
                            final SpritePixels method607 = hitSplatDefinition.method1077(-141033138);
                            if (null != method607) {
                                subWidth2 = method607.subWidth;
                                final int subHeight3 = method607.subHeight;
                                if (subHeight3 > n28) {
                                    n28 = subHeight3;
                                }
                                xOffset2 = method607.xOffset;
                            }
                            final SpritePixels method608 = hitSplatDefinition.method1072(1535746062);
                            if (method608 != null) {
                                subWidth3 = method608.subWidth;
                                final int subHeight4 = method608.subHeight;
                                if (subHeight4 > n28) {
                                    n28 = subHeight4;
                                }
                                xOffset3 = method608.xOffset;
                            }
                            final SpritePixels method609 = hitSplatDefinition.method1078((byte)110);
                            if (method609 != null) {
                                subWidth4 = method609.subWidth;
                                final int subHeight5 = method609.subHeight;
                                if (subHeight5 > n28) {
                                    n28 = subHeight5;
                                }
                                xOffset4 = method609.xOffset;
                            }
                            if (hitSplatDefinition2 != null) {
                                dc = HitSplatDefinition.dc(hitSplatDefinition2, -604554264);
                                if (dc != null) {
                                    subWidth5 = dc.subWidth;
                                    final int subHeight6 = dc.subHeight;
                                    if (subHeight6 > n28) {
                                        n28 = subHeight6;
                                    }
                                    xOffset5 = dc.xOffset;
                                }
                                method604 = hitSplatDefinition2.method1077(-1220190567);
                                if (method604 != null) {
                                    subWidth6 = method604.subWidth;
                                    final int subHeight7 = method604.subHeight;
                                    if (subHeight7 > n28) {
                                        n28 = subHeight7;
                                    }
                                    xOffset6 = method604.xOffset;
                                }
                                method605 = hitSplatDefinition2.method1072(1809123029);
                                if (null != method605) {
                                    subWidth7 = method605.subWidth;
                                    final int subHeight8 = method605.subHeight;
                                    if (subHeight8 > n28) {
                                        n28 = subHeight8;
                                    }
                                    xOffset7 = method605.xOffset;
                                }
                                method606 = hitSplatDefinition2.method1078((byte)30);
                                if (null != method606) {
                                    subWidth8 = method606.subWidth;
                                    final int subHeight9 = method606.subHeight;
                                    if (subHeight9 > n28) {
                                        n28 = subHeight9;
                                    }
                                    xOffset8 = method606.xOffset;
                                }
                            }
                            Font font = hitSplatDefinition.getFont(1644925127);
                            if (null == font) {
                                font = Language.fontPlain11;
                            }
                            Font font2;
                            if (null != hitSplatDefinition2) {
                                font2 = hitSplatDefinition2.getFont(1644925127);
                                if (font2 == null) {
                                    font2 = Language.fontPlain11;
                                }
                            }
                            else {
                                font2 = Language.fontPlain11;
                            }
                            String string = null;
                            int bf = 0;
                            final String string2 = hitSplatDefinition.getString(actor.hitSplatTypes[j], -955455536);
                            final int bf2 = font.bf(string2);
                            if (hitSplatDefinition2 != null) {
                                string = hitSplatDefinition2.getString(actor.hitSplatCycles[j], -336550645);
                                bf = font2.bf(string);
                            }
                            int n29 = 0;
                            int n30 = 0;
                            if (subWidth2 > 0) {
                                if (null == method608 && method609 == null) {
                                    n29 = 1;
                                }
                                else {
                                    n29 = 1 + bf2 / subWidth2;
                                }
                            }
                            if (null != hitSplatDefinition2 && subWidth6 > 0) {
                                if (null != method605 || method606 != null) {
                                    n30 = bf / subWidth6 + 1;
                                }
                                else {
                                    n30 = 1;
                                }
                            }
                            final int n32;
                            int n31 = n32 = 0;
                            if (subWidth > 0) {
                                n31 += subWidth;
                            }
                            n31 += 2;
                            final int n33 = n31;
                            if (subWidth3 > 0) {
                                n31 += subWidth3;
                            }
                            final int n34 = n31;
                            int n35 = n31;
                            int n37;
                            if (subWidth2 > 0) {
                                final int n36 = n29 * subWidth2;
                                n37 = n31 + n36;
                                n35 += (n36 - bf2) / 2;
                            }
                            else {
                                n37 = n31 + bf2;
                            }
                            final int n38 = n37;
                            if (subWidth4 > 0) {
                                n37 += subWidth4;
                            }
                            int n39 = 0;
                            int n40 = 0;
                            int n41 = 0;
                            int n42 = 0;
                            int n43 = 0;
                            if (hitSplatDefinition2 != null) {
                                n37 += 2;
                                n39 = n37;
                                if (subWidth5 > 0) {
                                    n37 += subWidth5;
                                }
                                n37 += 2;
                                n40 = n37;
                                if (subWidth7 > 0) {
                                    n37 += subWidth7;
                                }
                                n41 = n37;
                                n43 = n37;
                                if (subWidth6 > 0) {
                                    final int n44 = subWidth6 * n30;
                                    n37 += n44;
                                    n43 += (n44 - bf) / 2;
                                }
                                else {
                                    n37 += bf;
                                }
                                n42 = n37;
                                if (subWidth8 > 0) {
                                    n37 += subWidth8;
                                }
                            }
                            final int n45 = actor.hitSplatValues[j] - 288945343 * Client.cycle;
                            final int n46 = hitSplatDefinition.field1663 * 895105585 - 207405869 * hitSplatDefinition.field1663 * n45 / (292771999 * hitSplatDefinition.field1672);
                            final int n47 = -335401000 * hitSplatDefinition.field1676 * n45 / (hitSplatDefinition.field1672 * 292771999) + -(hitSplatDefinition.field1676 * 1990613465);
                            final int n48 = n2 + 1968792581 * Client.viewportTempX - (n37 >> 1) + n46;
                            int n50;
                            final int n49 = n50 = n3 + Client.viewportTempY * 318977283 - 12 + n47;
                            int n51 = n49 + n28;
                            final int n52 = n49 + 15 + 1785373205 * hitSplatDefinition.field1680;
                            final int n53 = n52 - font.at;
                            final int n54 = font.aa + n52;
                            if (n53 < n50) {
                                n50 = n53;
                            }
                            if (n54 > n51) {
                                n51 = n54;
                            }
                            int n55 = 0;
                            if (null != hitSplatDefinition2) {
                                n55 = -1313658797 * hitSplatDefinition2.field1680 + (n49 + 15);
                                final int n56 = n55 - font2.at;
                                final int n57 = n55 + font2.aa;
                                if (n56 < n50) {}
                                if (n57 > n51) {}
                            }
                            int n58 = 57642;
                            if (-1413310139 * hitSplatDefinition.field1683 >= 0) {
                                n58 = (n45 << 8) / (hitSplatDefinition.field1672 * 1275635860 - hitSplatDefinition.field1683 * -1413310139);
                            }
                            if (n58 >= 0 && n58 < 255) {
                                if (dc2 != null) {
                                    dc2.drawTransAt(n48 + n32 - xOffset, n49, n58);
                                }
                                if (null != method608) {
                                    method608.drawTransAt(n33 + n48 - xOffset3, n49, n58);
                                }
                                if (method607 != null) {
                                    for (int k = 0; k < n29; ++k) {
                                        method607.drawTransAt(k * subWidth2 + (n34 + n48 - xOffset2), n49, n58);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawTransAt(n48 + n38 - xOffset4, n49, n58);
                                }
                                font.am(string2, n35 + n48, n52, hitSplatDefinition.textColor * -131026690, 0, n58);
                                if (null != hitSplatDefinition2) {
                                    if (null != dc) {
                                        dc.drawTransAt(n39 + n48 - xOffset5, n49, n58);
                                    }
                                    if (method605 != null) {
                                        method605.drawTransAt(n40 + n48 - xOffset7, n49, n58);
                                    }
                                    if (null != method604) {
                                        for (int l = 0; l < n30; ++l) {
                                            method604.drawTransAt(n48 + n41 - xOffset6 + subWidth6 * l, n49, n58);
                                        }
                                    }
                                    if (method606 != null) {
                                        method606.drawTransAt(n42 + n48 - xOffset8, n49, n58);
                                    }
                                    font2.am(string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353, 0, n58);
                                }
                            }
                            else {
                                if (dc2 != null) {
                                    dc2.drawAt(n32 + n48 - xOffset, n49);
                                }
                                if (null != method608) {
                                    method608.drawAt(n33 + n48 - xOffset3, n49);
                                }
                                if (null != method607) {
                                    for (int n59 = 0; n59 < n29; ++n59) {
                                        method607.drawAt(subWidth2 * n59 + (n34 + n48 - xOffset2), n49);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawAt(n48 + n38 - xOffset4, n49);
                                }
                                class492.xb(font, string2, n48 + n35, n52, hitSplatDefinition.textColor * 1514791863 | 0xFF000000, 0);
                                if (null != hitSplatDefinition2) {
                                    if (dc != null) {
                                        dc.drawAt(n39 + n48 - xOffset5, n49);
                                    }
                                    if (method605 != null) {
                                        method605.drawAt(n40 + n48 - xOffset7, n49);
                                    }
                                    if (method604 != null) {
                                        for (int n60 = 0; n60 < n30; ++n60) {
                                            method604.drawAt(n48 + n41 - xOffset6 + n60 * subWidth6, n49);
                                        }
                                    }
                                    if (null != method606) {
                                        method606.drawAt(n48 + n42 - xOffset8, n49);
                                    }
                                    class492.xb(font2, string, n48 + n43, n55, hitSplatDefinition2.textColor * -1802189297 | 0x13BAEE34, 0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public static void un(final int n) {
        final int wd = Client.wd;
        final int n2 = Client.wd = Client.menuOptionsCount * 730065501;
        if (n2 < wd) {
            for (int i = n2; i < wd; ++i) {
                Client.ix[i].jj = null;
            }
        }
        else if (n2 == wd + 1) {
            rl3 rl3 = Client.ix[wd];
            if (rl3 == null) {
                final rl3[] ix = Client.ix;
                final int n3 = wd;
                final rl3 rl4 = new rl3(wd);
                ix[n3] = rl4;
                rl3 = rl4;
            }
            else {
                rl3.jj = null;
            }
            Client.qi[wd] = null;
            ScriptFrame.client.getCallbacks().post((Object)new MenuEntryAdded((MenuEntry)rl3));
        }
    }
    
    public static void uq(final int n) {
        if (Client.eh && ScriptFrame.client.kw() && ScriptFrame.client.getMouseCurrentButton() == 4) {
            ScriptFrame.client.yb(-ScriptFrame.client.yn());
        }
    }
    
    static final void uq() {
        for (GraphicsObject graphicsObject = (GraphicsObject)Client.graphicsObjects.last(); graphicsObject != null; graphicsObject = (GraphicsObject)Client.graphicsObjects.previous()) {
            if (graphicsObject.plane * 981010932 != 312121264 * GameEngine.Client_plane || graphicsObject.isFinished) {
                graphicsObject.hw();
            }
            else if (-552084031 * Client.cycle >= -456174153 * graphicsObject.cycleStart) {
                graphicsObject.advance(Client.field432 * -1795081153, (byte)(-23));
                if (graphicsObject.isFinished) {
                    graphicsObject.hw();
                }
                else {
                    class31.scene.drawEntity(graphicsObject.plane * 397044137, -1570643775 * graphicsObject.x, -161744223 * graphicsObject.y, graphicsObject.z * -2088469956, 1324163568, graphicsObject, 0, -1L, false);
                }
            }
        }
    }
    
    static final void uw() {
        Client.field476 = 0;
        final int n = WorldMapData_0.baseX * -1232093375 + (1144428983 * MusicPatchNode.localPlayer.br >> 7);
        final int n2 = GameObject.baseY * 827352769 + (-411750205 * MusicPatchNode.localPlayer.ep >> 7);
        if (n >= 3053 && n <= 3156 && n2 >= 3056 && n2 <= 3136) {
            Client.field476 = -1041569925;
        }
        if (n >= 3072 && n <= 3118 && n2 >= 9492 && n2 <= 9535) {
            Client.field476 = -1041569925;
        }
        if (1 == Client.field476 * 43311027 && n >= 3139 && n <= 3199 && n2 >= 3008 && n2 <= 3062) {
            Client.field476 = 0;
        }
    }
    
    static void uv() {
        for (class206 class206 = (class206)Client.field569.last(); null != class206; class206 = (class206)Client.field569.previous()) {
            class206.hw();
        }
    }
    
    public NodeDeque bu() {
        return Client.graphicsObjects;
    }
    
    public int[] jb() {
        return Rasterizer2D.Rasterizer2D_pixels;
    }
    
    public int kh() {
        return Client.gameState * -1275976559;
    }
    
    static final void uf(final Actor actor, final int n, final int n2, final int n3, final int n4, final int n5) {
        if (actor != null && actor.isVisible(1666539507)) {
            if (actor instanceof NPC) {
                NPCComposition npcComposition = ((NPC)actor).definition;
                if (null != npcComposition.transforms) {
                    npcComposition = NPCComposition.ur(npcComposition, -1898656612);
                }
                if (null == npcComposition) {
                    return;
                }
            }
            final int n6 = Players.Players_count * -2010934433;
            final int[] players_indices = Players.Players_indices;
            final boolean b = n < n6;
            int n7 = -2;
            if (actor.overheadText != null && (!b || (!actor.showPublicPlayerChat && (Client.publicChatMode * -1963411823 == 4 || (!actor.isAutoChatting && (0 == -1963411823 * Client.publicChatMode || Client.publicChatMode * -1963411823 == 3 || (Client.publicChatMode * -1963411823 == 1 && Player.yc((Player)actor, -1973845337)))))))) {
                class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame, -859997940);
                if (Client.viewportTempX * -1848743379 > -1 && Client.overheadTextCount * 734988573 < 1025553311 * Client.overheadTextLimit) {
                    Client.overheadTextXOffsets[734988573 * Client.overheadTextCount] = class137.fontBold12.bf(actor.overheadText) / 2;
                    Client.overheadTextAscents[Client.overheadTextCount * 734988573] = class137.fontBold12.al;
                    Client.overheadTextXs[734988573 * Client.overheadTextCount] = -1848743379 * Client.viewportTempX;
                    Client.overheadTextYs[Client.overheadTextCount * 734988573] = 318977283 * Client.viewportTempY - n7;
                    Client.overheadTextColors[Client.overheadTextCount * 734988573] = actor.field1002 * -1337884343;
                    Client.overheadTextEffects[734988573 * Client.overheadTextCount] = actor.recolourStartCycle * 819594233;
                    Client.overheadTextCyclesRemaining[Client.overheadTextCount * 734988573] = -536830723 * actor.spotAnimation;
                    Client.overheadText[Client.overheadTextCount * 734988573] = actor.overheadText;
                    Client.overheadTextCount -= 1973288651;
                    n7 += 12;
                }
            }
            if (!actor.healthBars.method1971()) {
                UserComparator6.method716(actor, -767387641 * actor.sequenceFrame + 15, 1467287911);
                for (HealthBar healthBar = (HealthBar)actor.healthBars.up(); null != healthBar; healthBar = (HealthBar)actor.healthBars.by()) {
                    final HealthBarUpdate lx = HealthBar.lx(healthBar, -1886224337 * Client.cycle, (byte)(-94));
                    if (null != lx) {
                        final HealthBarDefinition definition = healthBar.definition;
                        final SpritePixels ms = HealthBarDefinition.ms(definition, -1241522886);
                        final SpritePixels frontSprite = definition.getFrontSprite((byte)62);
                        int n8 = 0;
                        int n9;
                        if (ms != null && frontSprite != null) {
                            if (definition.widthPadding * 166630382 < frontSprite.subWidth) {
                                n8 = -2064168457 * definition.widthPadding;
                            }
                            n9 = frontSprite.subWidth - n8 * 2;
                        }
                        else {
                            n9 = 279738407 * definition.width;
                        }
                        int n10 = 255;
                        final int n11 = -1886224337 * Client.cycle - lx.cycle * -1225111563;
                        final int n12 = lx.health2 * -2028064551 * n9 / (definition.width * 279738407);
                        int n15;
                        if (lx.cycleOffset * -2116244499 > n11) {
                            final int n13 = (definition.field1533 * 294055185 == 0) ? 0 : (294055185 * definition.field1533 * (n11 / (294055185 * definition.field1533)));
                            final int n14 = n9 * (1250696899 * lx.health) / (279738407 * definition.width);
                            n15 = n14 + n13 * (n12 - n14) / (-2116244499 * lx.cycleOffset);
                        }
                        else {
                            n15 = n12;
                            final int n16 = definition.int5 * -407931959 + lx.cycleOffset * -2116244499 - n11;
                            if (definition.int3 * -471494485 >= 0) {
                                n10 = (n16 << 8) / (definition.int5 * -407931959 - -471494485 * definition.int3);
                            }
                        }
                        if (-2028064551 * lx.health2 > 0 && n15 < 1) {
                            n15 = 1;
                        }
                        if (ms != null && frontSprite != null) {
                            int n17;
                            if (n9 == n15) {
                                n17 = n15 + 2 * n8;
                            }
                            else {
                                n17 = n15 + n8;
                            }
                            final int subHeight = ms.subHeight;
                            n7 += subHeight;
                            final int n18 = -1848743379 * Client.viewportTempX + n2 - (n9 >> 1);
                            final int n19 = Client.viewportTempY * 318977283 + n3 - n7;
                            final int n20 = n18 - n8;
                            if (n10 >= 0 && n10 < 255) {
                                ms.drawTransAt(n20, n19, n10);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n20 + n17, n19 + subHeight);
                                frontSprite.drawTransAt(n20, n19, n10);
                            }
                            else {
                                ms.drawAt(n20, n19);
                                Rasterizer2D.Rasterizer2D_expandClip(n20, n19, n17 + n20, n19 + subHeight);
                                frontSprite.drawAt(n20, n19);
                            }
                            Rasterizer2D.Rasterizer2D_setClip(n2, n3, n4 + n2, n3 + n5);
                            n7 += 2;
                        }
                        else {
                            n7 += 5;
                            if (-1848743379 * Client.viewportTempX > -1) {
                                final int n21 = n2 + -1848743379 * Client.viewportTempX - (n9 >> 1);
                                final int n22 = Client.viewportTempY * 318977283 + n3 - n7;
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21, n22, n15, 5, 65280);
                                Rasterizer2D.Rasterizer2D_fillRectangle(n21 + n15, n22, n9 - n15, 5, 16711680);
                            }
                            n7 += 2;
                        }
                    }
                    else if (healthBar.isEmpty(-12674764)) {
                        healthBar.hw();
                    }
                }
            }
            if (-2 == n7) {
                n7 += 7;
            }
            if (b && actor.movingOrientation * -1532330627 == Client.cycle * -1886224337 && class13.method46((Player)actor, -347094243)) {
                final Player player = (Player)actor;
                if (b) {
                    class374.worldToScreen(1144428983 * actor.walkBackSequence, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, 848983263);
                    final AbstractFont abstractFont = Client.fontsMap.get(FontName.FontName_plain12);
                    n7 += 4;
                    abstractFont.drawCentered(player.username.getName(-710264960), Client.viewportTempX * -1848743379 + n2, Client.viewportTempY * 318977283 + n3 - n7, 16777215, 0);
                    n7 += 18;
                }
            }
            if (b) {
                final Player player2 = (Player)actor;
                if (player2.isHidden) {
                    return;
                }
                if (-1 != player2.headIconPk * -1875167049 || -1 != -1905401649 * player2.headIconPrayer) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, 1474090652);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        if (-1875167049 * player2.headIconPk != -1) {
                            n7 += 25;
                            class36.headIconPkSprites[player2.headIconPk * -1875167049].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - n7);
                        }
                        if (-1905401649 * player2.headIconPrayer != -1) {
                            n7 += 25;
                            class425.headIconPrayerSprites[-1905401649 * player2.headIconPrayer].drawAt(Client.viewportTempX * -1848743379 + n2 - 12, n3 + Client.viewportTempY * 318977283 - n7);
                        }
                    }
                }
                if (n >= 0 && 10 == 633821975 * Client.hintArrowType && Client.hintArrowPlayerIndex * 561980131 == players_indices[n]) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, -767387641 * actor.sequenceFrame + 15, -33285819);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[1].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - (n7 + KitDefinition.headIconHintSprites[1].subHeight));
                    }
                }
            }
            else {
                final NPC npc = (NPC)actor;
                final int[] ae = NPC.ae(npc, (byte)14);
                final short[] method602 = npc.method602(120425178);
                if (method602 != null && null != ae) {
                    for (int i = 0; i < method602.length; ++i) {
                        if (method602[i] >= 0) {
                            if (ae[i] >= 0) {
                                final long n23 = (long)ae[i] << 8 | (long)method602[i];
                                SpritePixels spritePixels = (SpritePixels)Client.archive5.method2126(n23, (short)12319);
                                if (spritePixels == null) {
                                    final SpritePixels[] method603 = UserComparator3.method699(class452.archive8, ae[i], 0, 1271520368);
                                    if (null != method603 && method602[i] < method603.length) {
                                        spritePixels = method603[method602[i]];
                                        Client.archive5.method2122(n23, spritePixels, 747668912);
                                    }
                                }
                                if (null != spritePixels) {
                                    UserComparator6.method716(actor, actor.sequenceFrame * -767387641 + 15, 1318267664);
                                    if (-1848743379 * Client.viewportTempX > -1) {
                                        spritePixels.drawAt(-1848743379 * Client.viewportTempX + n2 - (spritePixels.subWidth >> 1), 318977283 * Client.viewportTempY + (n3 - spritePixels.subHeight) - 4);
                                    }
                                }
                            }
                        }
                    }
                }
                if (1 == Client.hintArrowType * 633821975 && 920558921 * Client.hintArrowNpcIndex == Client.npcIndices[n - n6] && Client.cycle * -1886224337 % 20 < 10) {
                    class374.worldToScreen(actor.walkBackSequence * 1144428983, -411750205 * actor.field1005, 15 + -767387641 * actor.sequenceFrame, 812753052);
                    if (-1848743379 * Client.viewportTempX > -1) {
                        KitDefinition.headIconHintSprites[0].drawAt(n2 + Client.viewportTempX * -1848743379 - 12, 318977283 * Client.viewportTempY + n3 - 28);
                    }
                }
            }
            for (int j = 0; j < 4; ++j) {
                final int n24 = actor.hitSplatValues[j];
                final int n25 = actor.pathY[j];
                HitSplatDefinition hitSplatDefinition = null;
                int n26 = 0;
                if (n25 >= 0) {
                    if (n24 <= -1886224337 * Client.cycle) {
                        continue;
                    }
                    hitSplatDefinition = class122.method725(actor.pathY[j], (byte)4);
                    n26 = 292771999 * hitSplatDefinition.field1672;
                    if (hitSplatDefinition != null && null != hitSplatDefinition.transforms) {
                        hitSplatDefinition = hitSplatDefinition.transform((byte)(-118));
                        if (hitSplatDefinition == null) {
                            actor.hitSplatValues[j] = -1;
                            continue;
                        }
                    }
                }
                else if (n24 < 0) {
                    continue;
                }
                final int n27 = actor.hitSplatValues2[j];
                HitSplatDefinition hitSplatDefinition2 = null;
                if (n27 >= 0) {
                    hitSplatDefinition2 = class122.method725(n27, (byte)4);
                    if (null != hitSplatDefinition2 && hitSplatDefinition2.transforms != null) {
                        hitSplatDefinition2 = hitSplatDefinition2.transform((byte)(-127));
                    }
                }
                if (n24 - n26 <= -1886224337 * Client.cycle) {
                    if (null == hitSplatDefinition) {
                        actor.hitSplatValues[j] = -1;
                    }
                    else {
                        UserComparator6.method716(actor, actor.sequenceFrame * -767387641 / 2, 1120298861);
                        if (Client.viewportTempX * -1848743379 > -1) {
                            if (j != 0) {
                                Client.viewportTempY += 2135862948;
                            }
                            if (j == 2) {
                                Client.viewportTempX -= 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            if (3 == j) {
                                Client.viewportTempX += 187425963;
                                Client.viewportTempY -= 1079552174;
                            }
                            int subWidth = 0;
                            int subWidth2 = 0;
                            int subWidth3 = 0;
                            int subWidth4 = 0;
                            int xOffset = 0;
                            int xOffset2 = 0;
                            int xOffset3 = 0;
                            int xOffset4 = 0;
                            SpritePixels dc = null;
                            SpritePixels method604 = null;
                            SpritePixels method605 = null;
                            SpritePixels method606 = null;
                            int subWidth5 = 0;
                            int subWidth6 = 0;
                            int subWidth7 = 0;
                            int subWidth8 = 0;
                            int xOffset5 = 0;
                            int xOffset6 = 0;
                            int xOffset7 = 0;
                            int xOffset8 = 0;
                            int n28 = 0;
                            final SpritePixels dc2 = HitSplatDefinition.dc(hitSplatDefinition, 1345671746);
                            if (null != dc2) {
                                subWidth = dc2.subWidth;
                                final int subHeight2 = dc2.subHeight;
                                if (subHeight2 > n28) {
                                    n28 = subHeight2;
                                }
                                xOffset = dc2.xOffset;
                            }
                            final SpritePixels method607 = hitSplatDefinition.method1077(-1121115023);
                            if (null != method607) {
                                subWidth2 = method607.subWidth;
                                final int subHeight3 = method607.subHeight;
                                if (subHeight3 > n28) {
                                    n28 = subHeight3;
                                }
                                xOffset2 = method607.xOffset;
                            }
                            final SpritePixels method608 = hitSplatDefinition.method1072(2017754002);
                            if (method608 != null) {
                                subWidth3 = method608.subWidth;
                                final int subHeight4 = method608.subHeight;
                                if (subHeight4 > n28) {
                                    n28 = subHeight4;
                                }
                                xOffset3 = method608.xOffset;
                            }
                            final SpritePixels method609 = hitSplatDefinition.method1078((byte)3);
                            if (method609 != null) {
                                subWidth4 = method609.subWidth;
                                final int subHeight5 = method609.subHeight;
                                if (subHeight5 > n28) {
                                    n28 = subHeight5;
                                }
                                xOffset4 = method609.xOffset;
                            }
                            if (hitSplatDefinition2 != null) {
                                dc = HitSplatDefinition.dc(hitSplatDefinition2, -1105669454);
                                if (dc != null) {
                                    subWidth5 = dc.subWidth;
                                    final int subHeight6 = dc.subHeight;
                                    if (subHeight6 > n28) {
                                        n28 = subHeight6;
                                    }
                                    xOffset5 = dc.xOffset;
                                }
                                method604 = hitSplatDefinition2.method1077(-959984126);
                                if (method604 != null) {
                                    subWidth6 = method604.subWidth;
                                    final int subHeight7 = method604.subHeight;
                                    if (subHeight7 > n28) {
                                        n28 = subHeight7;
                                    }
                                    xOffset6 = method604.xOffset;
                                }
                                method605 = hitSplatDefinition2.method1072(1975769631);
                                if (null != method605) {
                                    subWidth7 = method605.subWidth;
                                    final int subHeight8 = method605.subHeight;
                                    if (subHeight8 > n28) {
                                        n28 = subHeight8;
                                    }
                                    xOffset7 = method605.xOffset;
                                }
                                method606 = hitSplatDefinition2.method1078((byte)110);
                                if (null != method606) {
                                    subWidth8 = method606.subWidth;
                                    final int subHeight9 = method606.subHeight;
                                    if (subHeight9 > n28) {
                                        n28 = subHeight9;
                                    }
                                    xOffset8 = method606.xOffset;
                                }
                            }
                            Font font = hitSplatDefinition.getFont(1644925127);
                            if (null == font) {
                                font = Language.fontPlain11;
                            }
                            Font font2;
                            if (null != hitSplatDefinition2) {
                                font2 = hitSplatDefinition2.getFont(1644925127);
                                if (font2 == null) {
                                    font2 = Language.fontPlain11;
                                }
                            }
                            else {
                                font2 = Language.fontPlain11;
                            }
                            String string = null;
                            int bf = 0;
                            final String string2 = hitSplatDefinition.getString(actor.hitSplatTypes[j], -1918033562);
                            final int bf2 = font.bf(string2);
                            if (hitSplatDefinition2 != null) {
                                string = hitSplatDefinition2.getString(actor.hitSplatCycles[j], -297143540);
                                bf = font2.bf(string);
                            }
                            int n29 = 0;
                            int n30 = 0;
                            if (subWidth2 > 0) {
                                if (null == method608 && method609 == null) {
                                    n29 = 1;
                                }
                                else {
                                    n29 = 1 + bf2 / subWidth2;
                                }
                            }
                            if (null != hitSplatDefinition2 && subWidth6 > 0) {
                                if (null == method605 && method606 == null) {
                                    n30 = 1;
                                }
                                else {
                                    n30 = bf / subWidth6 + 1;
                                }
                            }
                            final int n32;
                            int n31 = n32 = 0;
                            if (subWidth > 0) {
                                n31 += subWidth;
                            }
                            n31 += 2;
                            final int n33 = n31;
                            if (subWidth3 > 0) {
                                n31 += subWidth3;
                            }
                            final int n34 = n31;
                            int n35 = n31;
                            int n37;
                            if (subWidth2 > 0) {
                                final int n36 = n29 * subWidth2;
                                n37 = n31 + n36;
                                n35 += (n36 - bf2) / 2;
                            }
                            else {
                                n37 = n31 + bf2;
                            }
                            final int n38 = n37;
                            if (subWidth4 > 0) {
                                n37 += subWidth4;
                            }
                            int n39 = 0;
                            int n40 = 0;
                            int n41 = 0;
                            int n42 = 0;
                            int n43 = 0;
                            if (hitSplatDefinition2 != null) {
                                n37 += 2;
                                n39 = n37;
                                if (subWidth5 > 0) {
                                    n37 += subWidth5;
                                }
                                n37 += 2;
                                n40 = n37;
                                if (subWidth7 > 0) {
                                    n37 += subWidth7;
                                }
                                n41 = n37;
                                n43 = n37;
                                if (subWidth6 > 0) {
                                    final int n44 = subWidth6 * n30;
                                    n37 += n44;
                                    n43 += (n44 - bf) / 2;
                                }
                                else {
                                    n37 += bf;
                                }
                                n42 = n37;
                                if (subWidth8 > 0) {
                                    n37 += subWidth8;
                                }
                            }
                            final int n45 = actor.hitSplatValues[j] - -1886224337 * Client.cycle;
                            final int n46 = hitSplatDefinition.field1663 * 895105585 - 895105585 * hitSplatDefinition.field1663 * n45 / (292771999 * hitSplatDefinition.field1672);
                            final int n47 = 498242719 * hitSplatDefinition.field1676 * n45 / (hitSplatDefinition.field1672 * 292771999) + -(hitSplatDefinition.field1676 * 498242719);
                            final int n48 = n2 + -1848743379 * Client.viewportTempX - (n37 >> 1) + n46;
                            int n50;
                            final int n49 = n50 = n3 + Client.viewportTempY * 318977283 - 12 + n47;
                            int n51 = n49 + n28;
                            final int n52 = n49 + 15 + 1785373205 * hitSplatDefinition.field1680;
                            final int n53 = n52 - font.at;
                            final int n54 = font.aa + n52;
                            if (n53 < n50) {
                                n50 = n53;
                            }
                            if (n54 > n51) {
                                n51 = n54;
                            }
                            int n55 = 0;
                            if (null != hitSplatDefinition2) {
                                n55 = 1785373205 * hitSplatDefinition2.field1680 + (n49 + 15);
                                final int n56 = n55 - font2.at;
                                final int n57 = n55 + font2.aa;
                                if (n56 < n50) {}
                                if (n57 > n51) {}
                            }
                            int n58 = 255;
                            if (-1413310139 * hitSplatDefinition.field1683 >= 0) {
                                n58 = (n45 << 8) / (hitSplatDefinition.field1672 * 292771999 - hitSplatDefinition.field1683 * -1413310139);
                            }
                            if (n58 >= 0 && n58 < 255) {
                                if (dc2 != null) {
                                    dc2.drawTransAt(n48 + n32 - xOffset, n49, n58);
                                }
                                if (null != method608) {
                                    method608.drawTransAt(n33 + n48 - xOffset3, n49, n58);
                                }
                                if (method607 != null) {
                                    for (int k = 0; k < n29; ++k) {
                                        method607.drawTransAt(k * subWidth2 + (n34 + n48 - xOffset2), n49, n58);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawTransAt(n48 + n38 - xOffset4, n49, n58);
                                }
                                font.am(string2, n35 + n48, n52, hitSplatDefinition.textColor * -2000718353, 0, n58);
                                if (null != hitSplatDefinition2) {
                                    if (null != dc) {
                                        dc.drawTransAt(n39 + n48 - xOffset5, n49, n58);
                                    }
                                    if (method605 != null) {
                                        method605.drawTransAt(n40 + n48 - xOffset7, n49, n58);
                                    }
                                    if (null != method604) {
                                        for (int l = 0; l < n30; ++l) {
                                            method604.drawTransAt(n48 + n41 - xOffset6 + subWidth6 * l, n49, n58);
                                        }
                                    }
                                    if (method606 != null) {
                                        method606.drawTransAt(n42 + n48 - xOffset8, n49, n58);
                                    }
                                    font2.am(string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353, 0, n58);
                                }
                            }
                            else {
                                if (dc2 != null) {
                                    dc2.drawAt(n32 + n48 - xOffset, n49);
                                }
                                if (null != method608) {
                                    method608.drawAt(n33 + n48 - xOffset3, n49);
                                }
                                if (null != method607) {
                                    for (int n59 = 0; n59 < n29; ++n59) {
                                        method607.drawAt(subWidth2 * n59 + (n34 + n48 - xOffset2), n49);
                                    }
                                }
                                if (method609 != null) {
                                    method609.drawAt(n48 + n38 - xOffset4, n49);
                                }
                                class492.xb(font, string2, n48 + n35, n52, hitSplatDefinition.textColor * -2000718353 | 0xFF000000, 0);
                                if (null != hitSplatDefinition2) {
                                    if (dc != null) {
                                        dc.drawAt(n39 + n48 - xOffset5, n49);
                                    }
                                    if (method605 != null) {
                                        method605.drawAt(n40 + n48 - xOffset7, n49);
                                    }
                                    if (method604 != null) {
                                        for (int n60 = 0; n60 < n30; ++n60) {
                                            method604.drawAt(n48 + n41 - xOffset6 + n60 * subWidth6, n49);
                                        }
                                    }
                                    if (null != method606) {
                                        method606.drawAt(n48 + n42 - xOffset8, n49);
                                    }
                                    class492.xb(font2, string, n48 + n43, n55, hitSplatDefinition2.textColor * -2000718353 | 0xFF000000, 0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    static void aae(final Widget[] array, final int n, final int n2, final int n3, final boolean b) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (widget.parentId * 913615679 == n) {
                    class158.alignWidgetSize(widget, n2, n3, b, -2127871540);
                    class192.alignWidgetPosition(widget, n2, n3, (byte)(-109));
                    if (-1469632775 * widget.scrollX > widget.scrollWidth * -773060713 - widget.width * -794961409) {
                        widget.scrollX = widget.scrollWidth * 18431759 - widget.width * 460912311;
                    }
                    if (widget.scrollX * -1469632775 < 0) {
                        widget.scrollX = 0;
                    }
                    if (widget.scrollY * 1223232735 > widget.scrollHeight * -1273374131 - widget.height * 1473950221) {
                        widget.scrollY = widget.scrollHeight * 1941770835 - 978547347 * widget.height;
                    }
                    if (widget.scrollY * 1223232735 < 0) {
                        widget.scrollY = 0;
                    }
                    if (0 == 883712245 * widget.type) {
                        WallDecoration.revalidateWidgetScroll(array, widget, b, (byte)89);
                    }
                }
            }
        }
    }
    
    static void aaa(final Widget[] array, final Widget widget, final boolean b) {
        final int n = (widget.scrollWidth * 954567709 != 0) ? (widget.scrollWidth * 1819907198) : (-53445423 * widget.width);
        final int n2 = (0 != widget.scrollHeight * 552079714) ? (187725999 * widget.scrollHeight) : (widget.height * 1473950221);
        class135.resizeInterface(array, 1713081171 * widget.id, n, n2, b, 1809081725);
        if (widget.children != null) {
            class135.resizeInterface(widget.children, 1316721732 * widget.id, n, n2, b, 1809081725);
        }
        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
        if (null != interfaceParent) {
            SequenceDefinition.method1129(interfaceParent.group * 944864121, n, n2, b, -726165376);
        }
        if (-1837497164 == widget.contentType * 1072090297) {}
    }
    
    void aab(final Widget widget) {
        final Widget widget2 = (-1 == 913615679 * widget.parentId) ? null : class165.vmethod3380(913615679 * widget.parentId, (byte)5);
        int n;
        int n2;
        if (null == widget2) {
            n = -1687260435 * Client.aj;
            n2 = class262.canvasHeight * 1658005443;
        }
        else {
            n = -794961409 * widget2.width;
            n2 = widget2.height * 1473950221;
        }
        class158.alignWidgetSize(widget, n, n2, false, -2097659468);
        class192.alignWidgetPosition(widget, n, n2, (byte)(-57));
    }
    
    static final void aac(final Widget widget, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (Client.field437) {
            Client.alternativeScrollbarWidth = -2048531668;
        }
        else {
            Client.alternativeScrollbarWidth = 0;
        }
        Client.field437 = false;
        if (-1340292041 * MouseHandler.MouseHandler_currentButton == 1 || (!class473.mouseCam && -534903829 * MouseHandler.MouseHandler_currentButton == 4)) {
            if (n5 >= n && n5 < n + 16 && n6 >= n2 && n6 < 16 + n2) {
                widget.scrollY -= 1864498656;
                class144.invalidateWidget(widget, -650956430);
            }
            else if (n5 >= n && n5 < 16 + n && n6 >= n3 + n2 - 16 && n6 < n3 + n2) {
                widget.scrollY -= 510215044;
                class144.invalidateWidget(widget, -1386150563);
            }
            else if (n5 >= n - Client.alternativeScrollbarWidth * -1434295667 && n5 < 1019449571 * Client.alternativeScrollbarWidth + (16 + n) && n6 >= n2 + 16 && n6 < n2 + n3 - 16) {
                int n7 = (n3 - 32) * n3 / n4;
                if (n7 < 8) {
                    n7 = 8;
                }
                widget.scrollY = 830634985 * ((n6 - n2 - 16 - n7 / 2) * (n4 - n3) / (n3 - 32 - n7));
                class144.invalidateWidget(widget, -1091515474);
                Client.field437 = true;
            }
        }
        if (-852726821 * Client.mouseWheelRotation != 0 && n5 >= n - widget.width * 1729545559 && n6 >= n2 && n5 < 16 + n && n6 <= n3 + n2) {
            widget.scrollY += Client.mouseWheelRotation * -908462347;
            class144.invalidateWidget(widget, -1809647952);
        }
    }
    
    static final void aaf(final int n, final int n2, final int n3, final boolean b) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        class135.resizeInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, b, 1809081725);
    }
    
    static final void aag(final int n, final int n2, final int n3, final boolean b) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        class135.resizeInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, b, 1809081725);
    }
    
    static void aaj(final Widget[] array, final Widget widget, final boolean b) {
        final int n = (widget.scrollWidth * -773060713 != 0) ? (widget.scrollWidth * 1002905990) : (-794961409 * widget.width);
        final int n2 = (0 != widget.scrollHeight * -1273374131) ? (-538222645 * widget.scrollHeight) : (widget.height * 1473950221);
        class135.resizeInterface(array, 1713081171 * widget.id, n, n2, b, 1809081725);
        if (widget.children != null) {
            class135.resizeInterface(widget.children, 1366187209 * widget.id, n, n2, b, 1809081725);
        }
        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
        if (null != interfaceParent) {
            SequenceDefinition.method1129(interfaceParent.group * 944864121, n, n2, b, -726165376);
        }
        if (1399073143 == widget.contentType * 1605641045) {}
    }
    
    static final void abc(final Widget clickedWidget, final int n, final int n2) {
        if (Client.clickedWidget == null && !Client.isMenuOpen) {
            if (clickedWidget != null) {
                Widget vmethod3380 = clickedWidget;
                final int method1071 = StructComposition.method1071(KeyHandler.getWidgetFlags(vmethod3380, 1982423626), -906708779);
                Widget widget = null;
                Label_0123: {
                    if (method1071 == 0) {
                        widget = null;
                    }
                    else {
                        for (int i = 0; i < method1071; ++i) {
                            vmethod3380 = class165.vmethod3380(vmethod3380.parentId * 913615679, (byte)5);
                            if (vmethod3380 == null) {
                                widget = null;
                                break Label_0123;
                            }
                        }
                        widget = vmethod3380;
                    }
                }
                Widget parent = widget;
                if (null == parent) {
                    parent = clickedWidget.parent;
                }
                if (parent != null) {
                    Client.clickedWidget = clickedWidget;
                    Widget vmethod3381 = clickedWidget;
                    final int method1072 = StructComposition.method1071(KeyHandler.getWidgetFlags(vmethod3381, 600369788), -949115119);
                    Widget widget2 = null;
                    Label_0172: {
                        if (method1072 == 0) {
                            widget2 = null;
                        }
                        else {
                            for (int j = 0; j < method1072; ++j) {
                                vmethod3381 = class165.vmethod3380(vmethod3381.parentId * 960383418, (byte)5);
                                if (vmethod3381 == null) {
                                    widget2 = null;
                                    break Label_0172;
                                }
                            }
                            widget2 = vmethod3381;
                        }
                    }
                    Widget parent2 = widget2;
                    if (parent2 == null) {
                        parent2 = clickedWidget.parent;
                    }
                    Client.clickedWidgetParent = parent2;
                    Client.widgetClickX = 1372962693 * n;
                    Client.widgetClickY = n2 * 1757453321;
                    class96.widgetDragDuration = 0;
                    Client.isDraggingWidget = false;
                    final int method1073 = DynamicObject.method461((short)7937);
                    if (method1073 != -1) {
                        ZoneOperation.method1597(method1073, (byte)1);
                    }
                }
            }
        }
    }
    
    static final int abd(final Widget widget, final int n) {
        if (widget.cs1Instructions == null || n >= widget.cs1Instructions.length) {
            return -2;
        }
        try {
            final int[] array = widget.cs1Instructions[n];
            int n2 = 0;
            int n3 = 0;
            int n4 = 0;
            while (true) {
                final int n5 = array[n3++];
                int expandBounds = 0;
                int n6 = 0;
                if (n5 == 0) {
                    break;
                }
                if (n5 != 0) {
                    expandBounds = Client.currentLevels[array[n3++]];
                }
                if (2 == n5) {
                    expandBounds = Client.levels[array[n3++]];
                }
                if (3 == n5) {
                    expandBounds = Client.experience[array[n3++]];
                }
                if (4 == n5) {
                    final Widget vmethod3380 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n7 = array[n3++];
                    if (n7 != -1 && (!HealthBarUpdate.set(n7, (byte)86).isMembersOnly || Client.isMembersWorld)) {
                        for (int i = 0; i < vmethod3380.itemIds.length; ++i) {
                            if (vmethod3380.itemIds[i] == n7 + 1) {
                                expandBounds += vmethod3380.field3007[i];
                            }
                        }
                    }
                }
                if (n5 == 5) {
                    expandBounds = Varps.Varps_main[array[n3++]];
                }
                if (6 == n5) {
                    expandBounds = Skills.Skills_experienceTable[Client.levels[array[n3++]] - 1];
                }
                if (n5 == 7) {
                    expandBounds = Varps.Varps_main[array[n3++]] * 100 / 46875;
                }
                if (8 == n5) {
                    expandBounds = 1302967875 * MusicPatchNode.localPlayer.combatLevel;
                }
                if (9 == n5) {
                    for (int j = 0; j < 25; ++j) {
                        if (Skills.Skills_enabled[j]) {
                            expandBounds += Client.levels[j];
                        }
                    }
                }
                if (10 == n5) {
                    final Widget vmethod3381 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n8 = array[n3++];
                    if (-1 != n8 && (!HealthBarUpdate.set(n8, (byte)111).isMembersOnly || Client.isMembersWorld)) {
                        for (int k = 0; k < vmethod3381.itemIds.length; ++k) {
                            if (vmethod3381.itemIds[k] == n8 + 1) {
                                expandBounds = 999999999;
                                break;
                            }
                        }
                    }
                }
                if (n5 == 11) {
                    expandBounds = -365416549 * Client.runEnergy;
                }
                if (12 == n5) {
                    expandBounds = Client.weight * -1940722149;
                }
                if (13 == n5) {
                    expandBounds = (((Varps.Varps_main[array[n3++]] & 1 << array[n3++]) != 0x0) ? 1 : 0);
                }
                if (n5 == 14) {
                    expandBounds = class252.expandBounds(array[n3++], 1525795992);
                }
                if (15 == n5) {
                    n6 = 1;
                }
                if (n5 == 16) {
                    n6 = 2;
                }
                if (17 == n5) {
                    n6 = 3;
                }
                if (n5 == 18) {
                    expandBounds = -1232093375 * WorldMapData_0.baseX + (MusicPatchNode.localPlayer.br * 1144428983 >> 7);
                }
                if (19 == n5) {
                    expandBounds = GameObject.baseY * 827352769 + (-411750205 * MusicPatchNode.localPlayer.ep >> 7);
                }
                if (20 == n5) {
                    expandBounds = array[n3++];
                }
                if (n6 == 0) {
                    if (n4 == 0) {
                        n2 += expandBounds;
                    }
                    if (n4 != 0) {
                        n2 -= expandBounds;
                    }
                    if (2 == n4 && expandBounds) {
                        n2 /= expandBounds;
                    }
                    if (n4 == 3) {
                        n2 *= expandBounds;
                    }
                    n4 = 0;
                }
                else {
                    n4 = n6;
                }
            }
            return n2;
        }
        catch (Exception ex) {
            return -1;
        }
    }
    
    static void aap(final Widget[] array, final Widget widget, final boolean b) {
        final int n = (widget.scrollWidth * -773060713 != 0) ? (widget.scrollWidth * 1948129634) : (634862939 * widget.width);
        final int n2 = (0 != widget.scrollHeight * -521775902) ? (-1273374131 * widget.scrollHeight) : (widget.height * -1871341115);
        class135.resizeInterface(array, 1713081171 * widget.id, n, n2, b, 1809081725);
        if (widget.children != null) {
            class135.resizeInterface(widget.children, 818524518 * widget.id, n, n2, b, 1809081725);
        }
        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
        if (null != interfaceParent) {
            SequenceDefinition.method1129(interfaceParent.group * 944864121, n, n2, b, -726165376);
        }
        if (1337 == widget.contentType * 1021339961) {}
    }
    
    static final int aba(final Widget widget, final int n) {
        if (widget.cs1Instructions == null || n >= widget.cs1Instructions.length) {
            return -2;
        }
        try {
            final int[] array = widget.cs1Instructions[n];
            int n2 = 0;
            int n3 = 0;
            int n4 = 0;
            while (true) {
                final int n5 = array[n3++];
                int expandBounds = 0;
                int n6 = 0;
                if (n5 == 0) {
                    break;
                }
                if (n5 != 0) {
                    expandBounds = Client.currentLevels[array[n3++]];
                }
                if (2 == n5) {
                    expandBounds = Client.levels[array[n3++]];
                }
                if (3 == n5) {
                    expandBounds = Client.experience[array[n3++]];
                }
                if (4 == n5) {
                    final Widget vmethod3380 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n7 = array[n3++];
                    if (n7 != -1 && (!HealthBarUpdate.set(n7, (byte)111).isMembersOnly || Client.isMembersWorld)) {
                        for (int i = 0; i < vmethod3380.itemIds.length; ++i) {
                            if (vmethod3380.itemIds[i] == n7 + 1) {
                                expandBounds += vmethod3380.field3007[i];
                            }
                        }
                    }
                }
                if (n5 == 5) {
                    expandBounds = Varps.Varps_main[array[n3++]];
                }
                if (6 == n5) {
                    expandBounds = Skills.Skills_experienceTable[Client.levels[array[n3++]] - 1];
                }
                if (n5 == 7) {
                    expandBounds = Varps.Varps_main[array[n3++]] * 100 / 46875;
                }
                if (8 == n5) {
                    expandBounds = 1302967875 * MusicPatchNode.localPlayer.combatLevel;
                }
                if (9 == n5) {
                    for (int j = 0; j < 25; ++j) {
                        if (Skills.Skills_enabled[j]) {
                            expandBounds += Client.levels[j];
                        }
                    }
                }
                if (10 == n5) {
                    final Widget vmethod3381 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n8 = array[n3++];
                    if (-1 != n8 && (!HealthBarUpdate.set(n8, (byte)87).isMembersOnly || Client.isMembersWorld)) {
                        for (int k = 0; k < vmethod3381.itemIds.length; ++k) {
                            if (vmethod3381.itemIds[k] == n8 + 1) {
                                expandBounds = 999999999;
                                break;
                            }
                        }
                    }
                }
                if (n5 == 11) {
                    expandBounds = -365416549 * Client.runEnergy;
                }
                if (12 == n5) {
                    expandBounds = Client.weight * -1940722149;
                }
                if (13 == n5) {
                    expandBounds = (((Varps.Varps_main[array[n3++]] & 1 << array[n3++]) != 0x0) ? 1 : 0);
                }
                if (n5 == 14) {
                    expandBounds = class252.expandBounds(array[n3++], 1500529294);
                }
                if (15 == n5) {
                    n6 = 1;
                }
                if (n5 == 16) {
                    n6 = 2;
                }
                if (17 == n5) {
                    n6 = 3;
                }
                if (n5 == 18) {
                    expandBounds = -1232093375 * WorldMapData_0.baseX + (MusicPatchNode.localPlayer.br * 1144428983 >> 7);
                }
                if (19 == n5) {
                    expandBounds = GameObject.baseY * 827352769 + (-411750205 * MusicPatchNode.localPlayer.ep >> 7);
                }
                if (20 == n5) {
                    expandBounds = array[n3++];
                }
                if (n6 == 0) {
                    if (n4 == 0) {
                        n2 += expandBounds;
                    }
                    if (n4 != 0) {
                        n2 -= expandBounds;
                    }
                    if (2 == n4 && expandBounds) {
                        n2 /= expandBounds;
                    }
                    if (n4 == 3) {
                        n2 *= expandBounds;
                    }
                    n4 = 0;
                }
                else {
                    n4 = n6;
                }
            }
            return n2;
        }
        catch (Exception ex) {
            return -1;
        }
    }
    
    static boolean abe(final int n) {
        for (int i = 0; i < Client.field355 * -1716324921; ++i) {
            if (Client.field424[i] == n) {
                return true;
            }
        }
        return false;
    }
    
    static boolean abb(final int n) {
        for (int i = 0; i < Client.field355 * -1685179677; ++i) {
            if (Client.field424[i] == n) {
                return true;
            }
        }
        return false;
    }
    
    static final int abh(final Widget widget, final int n) {
        if (widget.cs1Instructions == null || n >= widget.cs1Instructions.length) {
            return -2;
        }
        try {
            final int[] array = widget.cs1Instructions[n];
            int n2 = 0;
            int n3 = 0;
            int n4 = 0;
            while (true) {
                final int n5 = array[n3++];
                int expandBounds = 0;
                int n6 = 0;
                if (n5 == 0) {
                    break;
                }
                if (n5 != 0) {
                    expandBounds = Client.currentLevels[array[n3++]];
                }
                if (2 == n5) {
                    expandBounds = Client.levels[array[n3++]];
                }
                if (3 == n5) {
                    expandBounds = Client.experience[array[n3++]];
                }
                if (4 == n5) {
                    final Widget vmethod3380 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n7 = array[n3++];
                    if (n7 != -1 && (!HealthBarUpdate.set(n7, (byte)122).isMembersOnly || Client.isMembersWorld)) {
                        for (int i = 0; i < vmethod3380.itemIds.length; ++i) {
                            if (vmethod3380.itemIds[i] == n7 + 1) {
                                expandBounds += vmethod3380.field3007[i];
                            }
                        }
                    }
                }
                if (n5 == 5) {
                    expandBounds = Varps.Varps_main[array[n3++]];
                }
                if (6 == n5) {
                    expandBounds = Skills.Skills_experienceTable[Client.levels[array[n3++]] - 1];
                }
                if (n5 == 7) {
                    expandBounds = Varps.Varps_main[array[n3++]] * 100 / 46875;
                }
                if (8 == n5) {
                    expandBounds = 1302967875 * MusicPatchNode.localPlayer.combatLevel;
                }
                if (9 == n5) {
                    for (int j = 0; j < 25; ++j) {
                        if (Skills.Skills_enabled[j]) {
                            expandBounds += Client.levels[j];
                        }
                    }
                }
                if (10 == n5) {
                    final Widget vmethod3381 = class165.vmethod3380((array[n3++] << 16) + array[n3++], (byte)5);
                    final int n8 = array[n3++];
                    if (-1 != n8 && (!HealthBarUpdate.set(n8, (byte)48).isMembersOnly || Client.isMembersWorld)) {
                        for (int k = 0; k < vmethod3381.itemIds.length; ++k) {
                            if (vmethod3381.itemIds[k] == n8 + 1) {
                                expandBounds = 999999999;
                                break;
                            }
                        }
                    }
                }
                if (n5 == 11) {
                    expandBounds = -365416549 * Client.runEnergy;
                }
                if (12 == n5) {
                    expandBounds = Client.weight * -1940722149;
                }
                if (13 == n5) {
                    expandBounds = (((Varps.Varps_main[array[n3++]] & 1 << array[n3++]) != 0x0) ? 1 : 0);
                }
                if (n5 == 14) {
                    expandBounds = class252.expandBounds(array[n3++], 1854571453);
                }
                if (15 == n5) {
                    n6 = 1;
                }
                if (n5 == 16) {
                    n6 = 2;
                }
                if (17 == n5) {
                    n6 = 3;
                }
                if (n5 == 18) {
                    expandBounds = -1232093375 * WorldMapData_0.baseX + (MusicPatchNode.localPlayer.br * 1144428983 >> 7);
                }
                if (19 == n5) {
                    expandBounds = GameObject.baseY * 827352769 + (-411750205 * MusicPatchNode.localPlayer.ep >> 7);
                }
                if (20 == n5) {
                    expandBounds = array[n3++];
                }
                if (n6 == 0) {
                    if (n4 == 0) {
                        n2 += expandBounds;
                    }
                    if (n4 != 0) {
                        n2 -= expandBounds;
                    }
                    if (2 == n4 && expandBounds) {
                        n2 /= expandBounds;
                    }
                    if (n4 == 3) {
                        n2 *= expandBounds;
                    }
                    n4 = 0;
                }
                else {
                    n4 = n6;
                }
            }
            return n2;
        }
        catch (Exception ex) {
            return -1;
        }
    }
    
    static void aan(final Widget[] array, final Widget widget, final boolean b) {
        final int n = (widget.scrollWidth * -773060713 != 0) ? (widget.scrollWidth * -1739152725) : (-794961409 * widget.width);
        final int n2 = (0 != widget.scrollHeight * -664832294) ? (1957737842 * widget.scrollHeight) : (widget.height * 1473950221);
        class135.resizeInterface(array, -1804282880 * widget.id, n, n2, b, 1809081725);
        if (widget.children != null) {
            class135.resizeInterface(widget.children, 152888149 * widget.id, n, n2, b, 1809081725);
        }
        final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
        if (null != interfaceParent) {
            SequenceDefinition.method1129(interfaceParent.group * 944864121, n, n2, b, -726165376);
        }
        if (1337 == widget.contentType * 1021339961) {}
    }
    
    static final void abf(final Widget[] array, final int n) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (0 == 883712245 * widget.type) {
                    if (widget.children != null) {
                        class143.runComponentCloseListeners(widget.children, n, (byte)30);
                    }
                    final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(1713081171 * widget.id);
                    if (null != interfaceParent) {
                        class127.runIntfCloseListeners(interfaceParent.group * 944864121, n, (byte)63);
                    }
                }
                if (n == 0 && null != widget.onDialogAbort) {
                    final ScriptEvent scriptEvent = new ScriptEvent();
                    scriptEvent.dragTarget = widget;
                    scriptEvent.args = widget.onDialogAbort;
                    HealthBarUpdate.set(scriptEvent, (byte)(-8));
                }
                if (1 == n && widget.onSubChange != null) {
                    if (widget.childIndex * 55577617 >= 0) {
                        final Widget vmethod3380 = class165.vmethod3380(widget.id * 1713081171, (byte)5);
                        if (vmethod3380 == null || vmethod3380.children == null || widget.childIndex * 55577617 >= vmethod3380.children.length) {
                            continue;
                        }
                        if (vmethod3380.children[55577617 * widget.childIndex] != widget) {
                            continue;
                        }
                    }
                    final ScriptEvent scriptEvent2 = new ScriptEvent();
                    scriptEvent2.dragTarget = widget;
                    scriptEvent2.args = widget.onSubChange;
                    HealthBarUpdate.set(scriptEvent2, (byte)(-10));
                }
            }
        }
    }
    
    static final void aau(final int n, final int n2, final int n3, final int n4, final int n5) {
        HealthBar.scrollBarSprites[0].ax(n, n2);
        HealthBar.scrollBarSprites[1].ax(n, n4 + n2 - 16);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16, 16, n4 - 32, Client.field443 * 40021093);
        int n6 = (n4 - 32) * n4 / n5;
        if (n6 < 8) {
            n6 = 8;
        }
        final int n7 = n3 * (n4 - 32 - n6) / (n5 - n4);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16 + n7, 16, n6, 992783339 * Client.field451);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n, 16 + n2 + n7, n6, 1881503647 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 1, n7 + (n2 + 16), n6, Client.field436 * 1881503647);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n7 + (n2 + 16), 16, Client.field436 * 1881503647);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, 17 + n2 + n7, 16, 1881503647 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 15, 16 + n2 + n7, n6, Client.field435 * 1155936455);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 14, 17 + n2 + n7, n6 - 1, 1155936455 * Client.field435);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n6 + (15 + n2 + n7), 16, Client.field435 * 1155936455);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(1 + n, 14 + n2 + n7 + n6, 15, 1155936455 * Client.field435);
    }
    
    static boolean abj(final int n) {
        for (int i = 0; i < Client.field355 * -1080646816; ++i) {
            if (Client.field424[i] == n) {
                return true;
            }
        }
        return false;
    }
    
    static final void abk(final Widget widget) {
        if (1 == widget.buttonType * -995312582) {
            SceneTilePaint.insertMenuItem(widget.dataText, "", 24, 0, 0, 1713081171 * widget.id, widget.itemId * -2006098851, false, (byte)40);
        }
        if (widget.buttonType * 35076151 == 2 && !Client.isSpellSelected) {
            final String widget_getSpellActionName = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
            if (widget_getSpellActionName != null) {
                class138.method796(widget_getSpellActionName, class383.method2081(65280, 264027561) + widget.text, 25, 0, -1, widget.id * 1713081171, widget.itemId * 2125429487, (short)(-20742));
            }
        }
        if (widget.buttonType * 35076151 == 3) {
            MenuAction.insertMenuItemNoShift(Strings.gq, "", 26, 0, 0, widget.id * 1713081171, (byte)67);
        }
        if (4 == 35076151 * widget.buttonType) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 28, 0, 0, 1713081171 * widget.id, (byte)40);
        }
        if (widget.buttonType * 35076151 == 5) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 29, 0, 0, -931399554 * widget.id, (byte)121);
        }
        if (6 == 35076151 * widget.buttonType && Client.meslayerContinueWidget == null) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 30, 0, -1, widget.id * 1713081171, (byte)126);
        }
        if (widget.modelOrthog) {
            if (Client.isSpellSelected) {
                if (ScriptEvent.method492(KeyHandler.getWidgetFlags(widget, 466226506), -1757712362) && (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x20) == 0x20) {
                    class138.method796(Client.field530, Client.field522 + " " + class96.ab + " " + widget.field3004, -761525150, 0, 55577617 * widget.childIndex, widget.id * 1996166229, 352748888 * widget.itemId, (short)1504);
                }
            }
            else {
                for (int i = 9; i >= 5; --i) {
                    String s;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 867902417) >> 1 + i & 0x1) && null == widget.onOp) {
                        s = null;
                    }
                    else if (null != widget.actions && widget.actions.length > i && null != widget.actions[i] && widget.actions[i].trim().length() != 0) {
                        s = widget.actions[i];
                    }
                    else {
                        s = null;
                    }
                    final String s2 = s;
                    if (s2 != null) {
                        class138.method796(s2, widget.field3004, 214686852, i + 1, widget.childIndex * 55577617, widget.id * -698943436, widget.itemId * -2006098851, (short)(-21589));
                    }
                }
                final String widget_getSpellActionName2 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                if (null != widget_getSpellActionName2) {
                    class138.method796(widget_getSpellActionName2, widget.field3004, 25, 0, 2035376610 * widget.childIndex, widget.id * 266140531, widget.itemId * -2006098851, (short)7004);
                }
                for (int j = 4; j >= 0; --j) {
                    String s3;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 731225412) >> 1 + j & 0x1) && null == widget.onOp) {
                        s3 = null;
                    }
                    else if (widget.actions == null || widget.actions.length <= j || widget.actions[j] == null || widget.actions[j].trim().length() == 0) {
                        s3 = null;
                    }
                    else {
                        s3 = widget.actions[j];
                    }
                    final String s4 = s3;
                    if (null != s4) {
                        SceneTilePaint.insertMenuItem(s4, widget.field3004, 840512103, 1 + j, 1502794493 * widget.childIndex, widget.id * 1713081171, widget.itemId * 706220657, widget.field2969, (byte)94);
                    }
                }
                if ((KeyHandler.getWidgetFlags(widget, 1168632674) & 0x1) != 0x0) {
                    MenuAction.insertMenuItemNoShift(Strings.aq, "", 30, 0, widget.childIndex * 55577617, widget.id * 1713081171, (byte)104);
                }
            }
        }
    }
    
    static boolean abo() {
        return Client.tapToDrop;
    }
    
    static final void abp(final Widget[] array, final int n) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (0 == 883712245 * widget.type) {
                    if (widget.children != null) {
                        class143.runComponentCloseListeners(widget.children, n, (byte)8);
                    }
                    final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(1713081171 * widget.id);
                    if (null != interfaceParent) {
                        class127.runIntfCloseListeners(interfaceParent.group * 944864121, n, (byte)63);
                    }
                }
                if (n == 0 && null != widget.onDialogAbort) {
                    final ScriptEvent scriptEvent = new ScriptEvent();
                    scriptEvent.dragTarget = widget;
                    scriptEvent.args = widget.onDialogAbort;
                    HealthBarUpdate.set(scriptEvent, (byte)(-81));
                }
                if (1 == n && widget.onSubChange != null) {
                    if (widget.childIndex * 55577617 >= 0) {
                        final Widget vmethod3380 = class165.vmethod3380(widget.id * 1713081171, (byte)5);
                        if (vmethod3380 == null || vmethod3380.children == null || widget.childIndex * 55577617 >= vmethod3380.children.length) {
                            continue;
                        }
                        if (vmethod3380.children[55577617 * widget.childIndex] != widget) {
                            continue;
                        }
                    }
                    final ScriptEvent scriptEvent2 = new ScriptEvent();
                    scriptEvent2.dragTarget = widget;
                    scriptEvent2.args = widget.onSubChange;
                    HealthBarUpdate.set(scriptEvent2, (byte)13);
                }
            }
        }
    }
    
    static final void abg(final int n, final int n2, final int n3, final int n4, final int n5) {
        HealthBar.scrollBarSprites[0].ax(n, n2);
        HealthBar.scrollBarSprites[1].ax(n, n4 + n2 - 16);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16, 16, n4 - 32, Client.field443 * -1104979737);
        int n6 = (n4 - 32) * n4 / n5;
        if (n6 < 8) {
            n6 = 8;
        }
        final int n7 = n3 * (n4 - 58822415 - n6) / (n5 - n4);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16 + n7, 16, n6, -442158466 * Client.field451);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n, 16 + n2 + n7, n6, 717990180 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 1, n7 + (n2 + 16), n6, Client.field436 * 1881503647);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n7 + (n2 + 16), 16, Client.field436 * 1881503647);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, 17 + n2 + n7, 16, -1090376144 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 15, 16 + n2 + n7, n6, Client.field435 * 1155936455);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 14, 17 + n2 + n7, n6 - 1, 1761607348 * Client.field435);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n6 + (15 + n2 + n7), 16, Client.field435 * -841776304);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(1 + n, 14 + n2 + n7 + n6, 15, -728435823 * Client.field435);
    }
    
    static final void abq(final Widget[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (n == widget.parentId * 913615679) {
                    if (Widget.pv(widget, -1465948686) || KeyHandler.getWidgetFlags(widget, 1169321969) != 0 || widget == Client.clickedWidgetParent) {
                        if (widget.modelOrthog) {
                            if (class393.isComponentHidden(widget, (byte)1)) {
                                continue;
                            }
                        }
                        else if (0 == widget.type * 883712245 && MidiPcmStream.mousedOverWidgetIf1 != widget && class393.isComponentHidden(widget, (byte)1)) {
                            continue;
                        }
                        if (11 == widget.type * 883712245) {
                            if (widget.method1820(class14.urlRequester, 585294015)) {
                                if (widget.method1807(-1977538709)) {
                                    class144.invalidateWidget(widget, -1879198617);
                                    WallDecoration.revalidateWidgetScroll(widget.children, widget, true, (byte)92);
                                }
                                if (widget.field2961 != null) {
                                    final ScriptEvent scriptEvent = new ScriptEvent();
                                    scriptEvent.dragTarget = widget;
                                    scriptEvent.args = widget.field2961;
                                    Client.scriptEvents.addFirst(scriptEvent);
                                }
                            }
                        }
                        else if (883712245 * widget.type == 12 && widget.method1822((byte)(-34))) {
                            class144.invalidateWidget(widget, -1054947904);
                        }
                        final int n8 = 262951665 * widget.x + n6;
                        final int n9 = -747355095 * widget.y + n7;
                        int n16;
                        int n17;
                        int n18;
                        int n19;
                        if (9 == 883712245 * widget.type) {
                            int n10 = n8;
                            int n11 = n9;
                            int n12 = -794961409 * widget.width + n8;
                            int n13 = widget.height * 1473950221 + n9;
                            if (n12 < n10) {
                                final int n14 = n10;
                                n10 = n12;
                                n12 = n14;
                            }
                            if (n13 < n11) {
                                final int n15 = n11;
                                n11 = n13;
                                n13 = n15;
                            }
                            ++n12;
                            ++n13;
                            n16 = ((n10 > n2) ? n10 : n2);
                            n17 = ((n11 > n3) ? n11 : n3);
                            n18 = ((n12 < n4) ? n12 : n4);
                            n19 = ((n13 < n5) ? n13 : n5);
                        }
                        else {
                            final int n20 = n8 + widget.width * -794961409;
                            final int n21 = n9 + widget.height * 1473950221;
                            n16 = ((n8 > n2) ? n8 : n2);
                            n17 = ((n9 > n3) ? n9 : n3);
                            n18 = ((n20 < n4) ? n20 : n4);
                            n19 = ((n21 < n5) ? n21 : n5);
                        }
                        if (widget == Client.clickedWidget) {
                            Client.field622 = true;
                            Client.field544 = 463567197 * n8;
                            Client.field545 = 551918419 * n9;
                        }
                        boolean b = false;
                        if (widget.fill) {
                            switch (Client.field463 * -1722511035) {
                                case 3: {
                                    if (Client.field526 * -842617159 == widget.id * 1713081171) {
                                        b = true;
                                        break;
                                    }
                                    break;
                                }
                                case 0: {
                                    b = true;
                                    break;
                                }
                                case 2: {
                                    if (-842617159 * Client.field526 == widget.id * 1713081171 >>> 16) {
                                        b = true;
                                        break;
                                    }
                                    break;
                                }
                            }
                        }
                        if (!b && widget.modelOrthog) {
                            if (n16 >= n18) {
                                continue;
                            }
                            if (n17 >= n19) {
                                continue;
                            }
                        }
                        if (widget.modelOrthog) {
                            if (widget.hasListener) {
                                if (-2063363905 * MouseHandler.MouseHandler_x >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && -2063363905 * MouseHandler.MouseHandler_x < n18 && MouseHandler.MouseHandler_y * -1224153235 < n19) {
                                    for (ScriptEvent scriptEvent2 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent2; scriptEvent2 = (ScriptEvent)Client.scriptEvents.previous()) {
                                        if (scriptEvent2.field849) {
                                            scriptEvent2.hw();
                                            scriptEvent2.dragTarget.isHidden = false;
                                        }
                                    }
                                    WorldMapData_1.method1486((short)(-8815));
                                    if (0 == class96.widgetDragDuration * 1993201275) {
                                        Client.clickedWidget = null;
                                        Client.clickedWidgetParent = null;
                                    }
                                    if (!Client.isMenuOpen) {
                                        class156.addCancelMenuEntry(-742935767);
                                    }
                                }
                            }
                            else if (widget.prioritizeMenuEntry && MouseHandler.MouseHandler_x * -2063363905 >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19) {
                                for (ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent3; scriptEvent3 = (ScriptEvent)Client.scriptEvents.previous()) {
                                    if (scriptEvent3.field849 && scriptEvent3.args == scriptEvent3.dragTarget.onScroll) {
                                        scriptEvent3.hw();
                                    }
                                }
                            }
                        }
                        int n22 = MouseHandler.MouseHandler_x * -2063363905;
                        int n23 = MouseHandler.MouseHandler_y * -1224153235;
                        if (-1222491879 * MouseHandler.MouseHandler_lastButton != 0) {
                            n22 = MouseHandler.MouseHandler_lastPressedX * 2020601481;
                            n23 = MouseHandler.MouseHandler_lastPressedY * 1163896205;
                        }
                        final boolean b2 = n22 >= n16 && n23 >= n17 && n22 < n18 && n23 < n19;
                        if (1021339961 * widget.contentType == 1337) {
                            if (!Client.isLoading && !Client.isMenuOpen && b2) {
                                ScriptFrame.addSceneMenuOptions(n22, n23, n16, n17, -1708655552);
                            }
                        }
                        else if (1338 == 1021339961 * widget.contentType) {
                            MusicPatchNode.checkIfMinimapClicked(widget, n8, n9, (byte)(-42));
                        }
                        else {
                            if (1400 == widget.contentType * 1021339961) {
                                class126.worldMap.onCycle(-2063363905 * MouseHandler.MouseHandler_x, MouseHandler.MouseHandler_y * -1224153235, b2, n8, n9, widget.width * -794961409, widget.height * 1473950221, 968505156);
                            }
                            if (!Client.isMenuOpen && b2) {
                                if (1021339961 * widget.contentType == 1400) {
                                    class126.worldMap.addElementMenuOptions(n8, n9, -794961409 * widget.width, 1473950221 * widget.height, n22, n23, 657021084);
                                }
                                else {
                                    class335.method1851(widget, -1336296764);
                                }
                            }
                            if (b) {
                                for (int j = 0; j < widget.field2954.length; ++j) {
                                    int n24 = 0;
                                    boolean b3 = false;
                                    if (n24 == 0 && widget.field2954[j] != null) {
                                        for (int k = 0; k < widget.field2954[j].length; ++k) {
                                            boolean keyPressed = false;
                                            if (null != widget.field2952) {
                                                keyPressed = Client.keyHandlerInstance.getKeyPressed(widget.field2954[j][k], 1135917387);
                                            }
                                            if (class81.method485(widget.field2954[j][k], -2013563855) || keyPressed) {
                                                n24 = 1;
                                                if (null != widget.field2952 && widget.field2952[j] > -1886224337 * Client.cycle) {
                                                    break;
                                                }
                                                final byte b4 = widget.field2955[j][k];
                                                if (b4 != 0) {
                                                    if ((b4 & 0x8) != 0x0) {
                                                        if (Client.keyHandlerInstance.getKeyPressed(86, -1138477880) || Client.keyHandlerInstance.getKeyPressed(82, -1086478451)) {
                                                            continue;
                                                        }
                                                        if (Client.keyHandlerInstance.getKeyPressed(81, -960442694)) {
                                                            continue;
                                                        }
                                                    }
                                                    if ((b4 & 0x2) != 0x0 && !Client.keyHandlerInstance.getKeyPressed(86, -1051168488)) {
                                                        continue;
                                                    }
                                                    if ((b4 & 0x1) != 0x0 && !Client.keyHandlerInstance.getKeyPressed(82, 93383309)) {
                                                        continue;
                                                    }
                                                    if (0x0 != (b4 & 0x4) && !Client.keyHandlerInstance.getKeyPressed(81, 628645171)) {
                                                        continue;
                                                    }
                                                }
                                                b3 = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (b3) {
                                        if (j < 10) {
                                            Message.widgetDefaultMenuAction(1 + j, widget.id * 1713081171, widget.childIndex * 55577617, -2006098851 * widget.itemId, "", 1238902143);
                                        }
                                        else if (j == 10) {
                                            class166.Widget_runOnTargetLeave((byte)21);
                                            class18.selectSpell(widget.id * 1713081171, 55577617 * widget.childIndex, class195.method1052(KeyHandler.getWidgetFlags(widget, 857888418), 1264224135), -2006098851 * widget.itemId, -100059830);
                                            Client.field530 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                                            if (Client.field530 == null) {
                                                Client.field530 = Strings.at;
                                            }
                                            Client.field522 = widget.field3004 + class383.method2081(16777215, -1418614849);
                                        }
                                        final int n25 = widget.field2936[j];
                                        if (null == widget.field2952) {
                                            widget.field2952 = new int[widget.field2954.length];
                                        }
                                        if (widget.field2977 == null) {
                                            widget.field2977 = new int[widget.field2954.length];
                                        }
                                        if (n25 != 0) {
                                            if (0 == widget.field2952[j]) {
                                                widget.field2952[j] = -1886224337 * Client.cycle + n25 + widget.field2977[j];
                                            }
                                            else {
                                                widget.field2952[j] = n25 + Client.cycle * -1886224337;
                                            }
                                        }
                                        else {
                                            widget.field2952[j] = Integer.MAX_VALUE;
                                        }
                                    }
                                    if (n24 == 0 && null != widget.field2952) {
                                        widget.field2952[j] = 0;
                                    }
                                }
                            }
                            if (widget.modelOrthog) {
                                int n26;
                                if (-2063363905 * MouseHandler.MouseHandler_x >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && MouseHandler.MouseHandler_y * -1224153235 < n19) {
                                    n26 = 1;
                                }
                                else {
                                    n26 = 0;
                                }
                                int n27 = 0;
                                if ((1 == MouseHandler.MouseHandler_currentButton * 114417019 || (!class473.mouseCam && 4 == 114417019 * MouseHandler.MouseHandler_currentButton)) && n26 != 0) {
                                    n27 = 1;
                                }
                                int n28 = 0;
                                if ((1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && MouseHandler.MouseHandler_lastButton * -1222491879 == 4)) && MouseHandler.MouseHandler_lastPressedX * 2020601481 >= n16 && MouseHandler.MouseHandler_lastPressedY * 1163896205 >= n17 && 2020601481 * MouseHandler.MouseHandler_lastPressedX < n18 && 1163896205 * MouseHandler.MouseHandler_lastPressedY < n19) {
                                    n28 = 1;
                                }
                                if (n28 != 0) {
                                    class370.clickWidget(widget, MouseHandler.MouseHandler_lastPressedX * 2020601481 - n8, 1163896205 * MouseHandler.MouseHandler_lastPressedY - n9, -1891299673);
                                }
                                if (Widget.sc(widget, 1547898464)) {
                                    if (n28 != 0) {
                                        Client.field569.addFirst(new class206(0, -2063363905 * MouseHandler.MouseHandler_x - n8, -1224153235 * MouseHandler.MouseHandler_y - n9, widget));
                                    }
                                    if (n27 != 0) {
                                        Client.field569.addFirst(new class206(1, -2063363905 * MouseHandler.MouseHandler_x - n8, MouseHandler.MouseHandler_y * -1224153235 - n9, widget));
                                    }
                                }
                                if (1021339961 * widget.contentType == 1400) {
                                    class126.worldMap.method2331(n22, n23, (boolean)((n26 & n27) != 0x0), (boolean)((n26 & n28) != 0x0), -1884926502);
                                }
                                if (null != Client.clickedWidget && widget != Client.clickedWidget && n26 != 0 && MusicPatchNode.method1676(KeyHandler.getWidgetFlags(widget, 289760987), -97507657)) {
                                    Client.draggedOnWidget = widget;
                                }
                                if (widget == Client.clickedWidgetParent) {
                                    Client.field540 = true;
                                    Client.field495 = -1150287901 * n8;
                                    Client.field542 = 68006725 * n9;
                                }
                                if (widget.field2978) {
                                    if (n26 != 0 && 0 != -121753353 * Client.mouseWheelRotation && null != widget.onScroll) {
                                        final ScriptEvent scriptEvent4 = new ScriptEvent();
                                        scriptEvent4.field849 = true;
                                        scriptEvent4.dragTarget = widget;
                                        scriptEvent4.mouseY = 835807251 * Client.mouseWheelRotation;
                                        scriptEvent4.args = widget.onScroll;
                                        Client.scriptEvents.addFirst(scriptEvent4);
                                    }
                                    if (null != Client.clickedWidget || Client.isMenuOpen) {
                                        n28 = 0;
                                        n27 = 0;
                                        n26 = 0;
                                    }
                                    if (!widget.modelTransparency && n28 != 0) {
                                        widget.modelTransparency = true;
                                        if (widget.onClick != null) {
                                            final ScriptEvent scriptEvent5 = new ScriptEvent();
                                            scriptEvent5.field849 = true;
                                            scriptEvent5.dragTarget = widget;
                                            scriptEvent5.mouseX = (MouseHandler.MouseHandler_lastPressedX * 2020601481 - n8) * -2011830585;
                                            scriptEvent5.mouseY = 1126405829 * (MouseHandler.MouseHandler_lastPressedY * 1163896205 - n9);
                                            scriptEvent5.args = widget.onClick;
                                            Client.scriptEvents.addFirst(scriptEvent5);
                                        }
                                    }
                                    if (widget.modelTransparency && n27 != 0 && null != widget.onClickRepeat) {
                                        final ScriptEvent scriptEvent6 = new ScriptEvent();
                                        scriptEvent6.field849 = true;
                                        scriptEvent6.dragTarget = widget;
                                        scriptEvent6.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                        scriptEvent6.mouseY = (-1224153235 * MouseHandler.MouseHandler_y - n9) * 1126405829;
                                        scriptEvent6.args = widget.onClickRepeat;
                                        Client.scriptEvents.addFirst(scriptEvent6);
                                    }
                                    if (widget.modelTransparency && n27 == 0) {
                                        widget.modelTransparency = false;
                                        if (null != widget.onRelease) {
                                            final ScriptEvent scriptEvent7 = new ScriptEvent();
                                            scriptEvent7.field849 = true;
                                            scriptEvent7.dragTarget = widget;
                                            scriptEvent7.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                            scriptEvent7.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                            scriptEvent7.args = widget.onRelease;
                                            Client.field568.addFirst(scriptEvent7);
                                        }
                                    }
                                    if (n27 != 0 && null != widget.onHold) {
                                        final ScriptEvent scriptEvent8 = new ScriptEvent();
                                        scriptEvent8.field849 = true;
                                        scriptEvent8.dragTarget = widget;
                                        scriptEvent8.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                        scriptEvent8.mouseY = 1126405829 * (MouseHandler.MouseHandler_y * -1224153235 - n9);
                                        scriptEvent8.args = widget.onHold;
                                        Client.scriptEvents.addFirst(scriptEvent8);
                                    }
                                    if (!widget.isHidden && n26 != 0) {
                                        widget.isHidden = true;
                                        if (null != widget.onMouseOver) {
                                            final ScriptEvent scriptEvent9 = new ScriptEvent();
                                            scriptEvent9.field849 = true;
                                            scriptEvent9.dragTarget = widget;
                                            scriptEvent9.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                            scriptEvent9.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                            scriptEvent9.args = widget.onMouseOver;
                                            Client.scriptEvents.addFirst(scriptEvent9);
                                        }
                                    }
                                    if (widget.isHidden && n26 != 0 && null != widget.onMouseRepeat) {
                                        final ScriptEvent scriptEvent10 = new ScriptEvent();
                                        scriptEvent10.field849 = true;
                                        scriptEvent10.dragTarget = widget;
                                        scriptEvent10.mouseX = -2011830585 * (-2063363905 * MouseHandler.MouseHandler_x - n8);
                                        scriptEvent10.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                        scriptEvent10.args = widget.onMouseRepeat;
                                        Client.scriptEvents.addFirst(scriptEvent10);
                                    }
                                    if (widget.isHidden && n26 == 0) {
                                        widget.isHidden = false;
                                        if (null != widget.onMouseLeave) {
                                            final ScriptEvent scriptEvent11 = new ScriptEvent();
                                            scriptEvent11.field849 = true;
                                            scriptEvent11.dragTarget = widget;
                                            scriptEvent11.mouseX = -2011830585 * (MouseHandler.MouseHandler_x * -2063363905 - n8);
                                            scriptEvent11.mouseY = (-1224153235 * MouseHandler.MouseHandler_y - n9) * 1126405829;
                                            scriptEvent11.args = widget.onMouseLeave;
                                            Client.field568.addFirst(scriptEvent11);
                                        }
                                    }
                                    if (null != widget.onTimer) {
                                        final ScriptEvent scriptEvent12 = new ScriptEvent();
                                        scriptEvent12.dragTarget = widget;
                                        scriptEvent12.args = widget.onTimer;
                                        Client.field567.addFirst(scriptEvent12);
                                    }
                                    if (widget.onVarTransmit != null && -261310919 * Client.changedVarpCount > widget.field2870 * -1285197923) {
                                        Label_5035: {
                                            if (null != widget.varTransmitTriggers && Client.changedVarpCount * -261310919 - -1285197923 * widget.field2870 <= 32) {
                                                for (int l = -1285197923 * widget.field2870; l < -261310919 * Client.changedVarpCount; ++l) {
                                                    final int n29 = Client.changedVarps[l & 0x1F];
                                                    for (int n30 = 0; n30 < widget.varTransmitTriggers.length; ++n30) {
                                                        if (n29 == widget.varTransmitTriggers[n30]) {
                                                            final ScriptEvent scriptEvent13 = new ScriptEvent();
                                                            scriptEvent13.dragTarget = widget;
                                                            scriptEvent13.args = widget.onVarTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent13);
                                                            break Label_5035;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                final ScriptEvent scriptEvent14 = new ScriptEvent();
                                                scriptEvent14.dragTarget = widget;
                                                scriptEvent14.args = widget.onVarTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent14);
                                            }
                                        }
                                        widget.field2870 = Client.changedVarpCount * 1401123917;
                                    }
                                    if (null != widget.onInvTransmit && Client.changedItemContainersCount * -710491461 > -320567063 * widget.field3017) {
                                        Label_3841: {
                                            if (null == widget.invTransmitTriggers || -710491461 * Client.changedItemContainersCount - widget.field3017 * -320567063 > 32) {
                                                final ScriptEvent scriptEvent15 = new ScriptEvent();
                                                scriptEvent15.dragTarget = widget;
                                                scriptEvent15.args = widget.onInvTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent15);
                                            }
                                            else {
                                                for (int n31 = widget.field3017 * -320567063; n31 < -710491461 * Client.changedItemContainersCount; ++n31) {
                                                    final int n32 = Client.changedItemContainers[n31 & 0x1F];
                                                    for (int n33 = 0; n33 < widget.invTransmitTriggers.length; ++n33) {
                                                        if (n32 == widget.invTransmitTriggers[n33]) {
                                                            final ScriptEvent scriptEvent16 = new ScriptEvent();
                                                            scriptEvent16.dragTarget = widget;
                                                            scriptEvent16.args = widget.onInvTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent16);
                                                            break Label_3841;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        widget.field3017 = 1811343363 * Client.changedItemContainersCount;
                                    }
                                    if (null != widget.onStatTransmit && Client.changedSkillsCount * -744210295 > widget.field3006 * 610184185) {
                                        Label_4538: {
                                            if (widget.statTransmitTriggers != null && Client.changedSkillsCount * -744210295 - widget.field3006 * 610184185 <= 32) {
                                                for (int n34 = widget.field3006 * 610184185; n34 < -744210295 * Client.changedSkillsCount; ++n34) {
                                                    final int n35 = Client.changedSkills[n34 & 0x1F];
                                                    for (int n36 = 0; n36 < widget.statTransmitTriggers.length; ++n36) {
                                                        if (widget.statTransmitTriggers[n36] == n35) {
                                                            final ScriptEvent scriptEvent17 = new ScriptEvent();
                                                            scriptEvent17.dragTarget = widget;
                                                            scriptEvent17.args = widget.onStatTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent17);
                                                            break Label_4538;
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                final ScriptEvent scriptEvent18 = new ScriptEvent();
                                                scriptEvent18.dragTarget = widget;
                                                scriptEvent18.args = widget.onStatTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent18);
                                            }
                                        }
                                        widget.field3006 = -1736131311 * Client.changedSkillsCount;
                                    }
                                    if (-620063003 * Client.chatCycle > -288310997 * widget.field3015 && null != widget.onChatTransmit) {
                                        final ScriptEvent scriptEvent19 = new ScriptEvent();
                                        scriptEvent19.dragTarget = widget;
                                        scriptEvent19.args = widget.onChatTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent19);
                                    }
                                    if (-421621503 * Client.field557 > widget.field3015 * -288310997 && null != widget.onFriendTransmit) {
                                        final ScriptEvent scriptEvent20 = new ScriptEvent();
                                        scriptEvent20.dragTarget = widget;
                                        scriptEvent20.args = widget.onFriendTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent20);
                                    }
                                    if (-1685007587 * Client.field558 > -288310997 * widget.field3015 && null != widget.onClanTransmit) {
                                        final ScriptEvent scriptEvent21 = new ScriptEvent();
                                        scriptEvent21.dragTarget = widget;
                                        scriptEvent21.args = widget.onClanTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent21);
                                    }
                                    if (Client.field559 * -1127640293 > widget.field3015 * -288310997 && widget.field2946 != null) {
                                        final ScriptEvent scriptEvent22 = new ScriptEvent();
                                        scriptEvent22.dragTarget = widget;
                                        scriptEvent22.args = widget.field2946;
                                        Client.scriptEvents.addFirst(scriptEvent22);
                                    }
                                    if (Client.field560 * 2059493293 > -288310997 * widget.field3015 && widget.field2876 != null) {
                                        final ScriptEvent scriptEvent23 = new ScriptEvent();
                                        scriptEvent23.dragTarget = widget;
                                        scriptEvent23.args = widget.field2876;
                                        Client.scriptEvents.addFirst(scriptEvent23);
                                    }
                                    if (Client.field629 * -1835030315 > widget.field3015 * -288310997 && null != widget.onStockTransmit) {
                                        final ScriptEvent scriptEvent24 = new ScriptEvent();
                                        scriptEvent24.dragTarget = widget;
                                        scriptEvent24.args = widget.onStockTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent24);
                                    }
                                    if (Client.field635 * -2057735521 > widget.field3015 * -288310997 && null != widget.field2998) {
                                        final ScriptEvent scriptEvent25 = new ScriptEvent();
                                        scriptEvent25.dragTarget = widget;
                                        scriptEvent25.args = widget.field2998;
                                        Client.scriptEvents.addFirst(scriptEvent25);
                                    }
                                    if (Client.field433 * -440718331 > widget.field3015 * -288310997 && widget.onMiscTransmit != null) {
                                        final ScriptEvent scriptEvent26 = new ScriptEvent();
                                        scriptEvent26.dragTarget = widget;
                                        scriptEvent26.args = widget.onMiscTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent26);
                                    }
                                    widget.field3015 = -1390983529 * Client.cycleCntr;
                                    if (null != widget.onKey) {
                                        for (int n37 = 0; n37 < -1685179677 * Client.field355; ++n37) {
                                            final ScriptEvent scriptEvent27 = new ScriptEvent();
                                            scriptEvent27.dragTarget = widget;
                                            scriptEvent27.keyTyped = -422970289 * Client.field424[n37];
                                            scriptEvent27.keyPressed = 1753443767 * Client.field592[n37];
                                            scriptEvent27.args = widget.onKey;
                                            Client.scriptEvents.addFirst(scriptEvent27);
                                        }
                                    }
                                    if (widget.field2988 != null) {
                                        final int[] method1155 = Client.keyHandlerInstance.method1155(1519042946);
                                        for (int n38 = 0; n38 < method1155.length; ++n38) {
                                            final ScriptEvent scriptEvent28 = new ScriptEvent();
                                            scriptEvent28.dragTarget = widget;
                                            scriptEvent28.keyTyped = -422970289 * method1155[n38];
                                            scriptEvent28.args = widget.field2988;
                                            Client.scriptEvents.addFirst(scriptEvent28);
                                        }
                                    }
                                    if (widget.field2892 != null) {
                                        final int[] method1156 = Client.keyHandlerInstance.method1152(111749296);
                                        for (int n39 = 0; n39 < method1156.length; ++n39) {
                                            final ScriptEvent scriptEvent29 = new ScriptEvent();
                                            scriptEvent29.dragTarget = widget;
                                            scriptEvent29.keyTyped = method1156[n39] * -422970289;
                                            scriptEvent29.args = widget.field2892;
                                            Client.scriptEvents.addFirst(scriptEvent29);
                                        }
                                    }
                                }
                            }
                            if (!widget.modelOrthog) {
                                if (null != Client.clickedWidget) {
                                    continue;
                                }
                                if (Client.isMenuOpen) {
                                    continue;
                                }
                                if ((-529297769 * widget.mouseOverRedirect >= 0 || 0 != widget.mouseOverColor * 1614966389) && (-2063363905 * MouseHandler.MouseHandler_x >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19)) {
                                    if (widget.mouseOverRedirect * -529297769 >= 0) {
                                        MidiPcmStream.mousedOverWidgetIf1 = array[widget.mouseOverRedirect * -529297769];
                                    }
                                    else {
                                        MidiPcmStream.mousedOverWidgetIf1 = widget;
                                    }
                                }
                                if (8 == 883712245 * widget.type && MouseHandler.MouseHandler_x * -2063363905 >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19) {
                                    class130.field1274 = widget;
                                }
                                if (widget.scrollHeight * -1273374131 > widget.height * 1473950221) {
                                    class166.method944(widget, n8 + widget.width * -794961409, n9, widget.height * 1473950221, widget.scrollHeight * -1273374131, -2063363905 * MouseHandler.MouseHandler_x, MouseHandler.MouseHandler_y * -1224153235, (byte)(-50));
                                }
                            }
                            if (0 == 883712245 * widget.type) {
                                ViewportMouse.updateInterface(array, 1713081171 * widget.id, n16, n17, n18, n19, n8 - widget.scrollX * -1469632775, n9 - 1223232735 * widget.scrollY, 1843558253);
                                if (null != widget.children) {
                                    ViewportMouse.updateInterface(widget.children, widget.id * 1713081171, n16, n17, n18, n19, n8 - widget.scrollX * -1469632775, n9 - 1223232735 * widget.scrollY, 1944174565);
                                }
                                final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
                                if (interfaceParent != null) {
                                    if (0 == -1702664641 * interfaceParent.type && -2063363905 * MouseHandler.MouseHandler_x >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19 && !Client.isMenuOpen) {
                                        for (ScriptEvent scriptEvent30 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent30; scriptEvent30 = (ScriptEvent)Client.scriptEvents.previous()) {
                                            if (scriptEvent30.field849) {
                                                scriptEvent30.hw();
                                                scriptEvent30.dragTarget.isHidden = false;
                                            }
                                        }
                                        if (class96.widgetDragDuration * 1993201275 == 0) {
                                            Client.clickedWidget = null;
                                            Client.clickedWidgetParent = null;
                                        }
                                        if (!Client.isMenuOpen) {
                                            class156.addCancelMenuEntry(-742935767);
                                        }
                                    }
                                    ReflectionCheck.updateRootInterface(944864121 * interfaceParent.group, n16, n17, n18, n19, n8, n9, -631543188);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    static final void abr(final Widget widget) {
        if (1 == widget.buttonType * 35076151) {
            SceneTilePaint.insertMenuItem(widget.dataText, "", 24, 0, 0, 1713081171 * widget.id, widget.itemId * -2006098851, false, (byte)66);
        }
        if (widget.buttonType * 35076151 == 2 && !Client.isSpellSelected) {
            final String widget_getSpellActionName = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
            if (widget_getSpellActionName != null) {
                class138.method796(widget_getSpellActionName, class383.method2081(65280, -1397566664) + widget.text, 25, 0, -1, widget.id * 1713081171, widget.itemId * -2006098851, (short)(-11139));
            }
        }
        if (widget.buttonType * 35076151 == 3) {
            MenuAction.insertMenuItemNoShift(Strings.gq, "", 26, 0, 0, widget.id * 1713081171, (byte)122);
        }
        if (4 == 35076151 * widget.buttonType) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 28, 0, 0, 1713081171 * widget.id, (byte)54);
        }
        if (widget.buttonType * 35076151 == 5) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 29, 0, 0, 1713081171 * widget.id, (byte)60);
        }
        if (6 == 35076151 * widget.buttonType && Client.meslayerContinueWidget == null) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 30, 0, -1, widget.id * 1713081171, (byte)49);
        }
        if (widget.modelOrthog) {
            if (Client.isSpellSelected) {
                if (ScriptEvent.method492(KeyHandler.getWidgetFlags(widget, 858774778), -444338879) && (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x20) == 0x20) {
                    class138.method796(Client.field530, Client.field522 + " " + class96.ab + " " + widget.field3004, 58, 0, 55577617 * widget.childIndex, widget.id * 1713081171, -2006098851 * widget.itemId, (short)9484);
                }
            }
            else {
                for (int i = 9; i >= 5; --i) {
                    String s;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 298852298) >> 1 + i & 0x1) && null == widget.onOp) {
                        s = null;
                    }
                    else if (null != widget.actions && widget.actions.length > i && null != widget.actions[i] && widget.actions[i].trim().length() != 0) {
                        s = widget.actions[i];
                    }
                    else {
                        s = null;
                    }
                    final String s2 = s;
                    if (s2 != null) {
                        class138.method796(s2, widget.field3004, 1007, i + 1, widget.childIndex * 55577617, widget.id * 1713081171, widget.itemId * -2006098851, (short)4121);
                    }
                }
                final String widget_getSpellActionName2 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                if (null != widget_getSpellActionName2) {
                    class138.method796(widget_getSpellActionName2, widget.field3004, 25, 0, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, (short)(-6866));
                }
                for (int j = 4; j >= 0; --j) {
                    String s3;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 1334126941) >> 1 + j & 0x1) && null == widget.onOp) {
                        s3 = null;
                    }
                    else if (widget.actions != null && widget.actions.length > j && widget.actions[j] != null && widget.actions[j].trim().length() != 0) {
                        s3 = widget.actions[j];
                    }
                    else {
                        s3 = null;
                    }
                    final String s4 = s3;
                    if (null != s4) {
                        SceneTilePaint.insertMenuItem(s4, widget.field3004, 57, 1 + j, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, widget.field2969, (byte)107);
                    }
                }
                if ((KeyHandler.getWidgetFlags(widget, 644708376) & 0x1) != 0x0) {
                    MenuAction.insertMenuItemNoShift(Strings.aq, "", 30, 0, widget.childIndex * 55577617, widget.id * 1713081171, (byte)61);
                }
            }
        }
    }
    
    static final void abm(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        ViewportMouse.updateInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, 1333056197);
    }
    
    static final void abt(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        ViewportMouse.updateInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, n4, n5, n6, n7, 1524329979);
    }
    
    static void abn(final boolean tapToDrop) {
        Client.tapToDrop = tapToDrop;
    }
    
    static void aar(final Widget widget, final int n, final int n2, final boolean b) {
        final int n3 = widget.width * -794961409;
        final int n4 = widget.height * 1473950221;
        if (widget.widthAlignment * 241981169 == 0) {
            widget.width = -1212957085 * widget.rawWidth;
        }
        else if (241981169 * widget.widthAlignment == 1) {
            widget.width = 1774069247 * (n - widget.rawWidth * -1960603747);
        }
        else if (widget.widthAlignment * 241981169 == 2) {
            widget.width = 1774069247 * (n * (widget.rawWidth * -1960603747) >> 14);
        }
        if (-480604969 * widget.heightAlignment == 0) {
            widget.height = 1850345051 * widget.rawHeight;
        }
        else if (-480604969 * widget.heightAlignment == 1) {
            widget.height = 60157125 * (n2 - 1756076191 * widget.rawHeight);
        }
        else if (widget.heightAlignment * -480604969 == 2) {
            widget.height = 60157125 * (n2 * (1756076191 * widget.rawHeight) >> 14);
        }
        if (widget.widthAlignment * 241981169 == 4) {
            widget.width = 1774069247 * (widget.field2896 * 640195305 * (1473950221 * widget.height) / (276729069 * widget.field2897));
        }
        if (4 == widget.heightAlignment * -480604969) {
            widget.height = widget.field2897 * 276729069 * (widget.width * -794961409) / (widget.field2896 * 640195305) * 60157125;
        }
        if (1337 == 1021339961 * widget.contentType) {
            Client.viewportWidget = widget;
        }
        if (12 == widget.type * 883712245) {
            widget.method1815((byte)(-30)).method1710(widget.width * -794961409, 1473950221 * widget.height, (byte)63);
        }
        if (b && null != widget.onResize && (widget.width * -794961409 != n3 || widget.height * 1473950221 != n4)) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widget;
            scriptEvent.args = widget.onResize;
            Client.scriptEvents.addFirst(scriptEvent);
        }
    }
    
    static void aaw(final Widget widget, final int n, final int n2) {
        if (-1596536121 * widget.xAlignment == 0) {
            widget.x = -942335045 * widget.rawX;
        }
        else if (-1596536121 * widget.xAlignment == 1) {
            widget.x = ((n - -794961409 * widget.width) / 2 + -115015413 * widget.rawX) * 750411281;
        }
        else if (-1596536121 * widget.xAlignment == 2) {
            widget.x = 750411281 * (n - -794961409 * widget.width - -115015413 * widget.rawX);
        }
        else if (widget.xAlignment * -1596536121 == 3) {
            widget.x = (widget.rawX * -115015413 * n >> 14) * 750411281;
        }
        else if (4 == -1596536121 * widget.xAlignment) {
            widget.x = ((n * (widget.rawX * -115015413) >> 14) + (n - -794961409 * widget.width) / 2) * 750411281;
        }
        else {
            widget.x = (n - -794961409 * widget.width - (-115015413 * widget.rawX * n >> 14)) * 750411281;
        }
        if (widget.yAlignment * 1484444061 == 0) {
            widget.y = 843760119 * widget.rawY;
        }
        else if (1 == 1484444061 * widget.yAlignment) {
            widget.y = ((n2 - 1473950221 * widget.height) / 2 + widget.rawY * 1651158159) * -1520068583;
        }
        else if (1484444061 * widget.yAlignment == 2) {
            widget.y = -1520068583 * (n2 - widget.height * 1473950221 - 1651158159 * widget.rawY);
        }
        else if (3 == widget.yAlignment * 1484444061) {
            widget.y = -1520068583 * (widget.rawY * 1651158159 * n2 >> 14);
        }
        else if (4 == widget.yAlignment * 1484444061) {
            widget.y = ((n2 - widget.height * 1473950221) / 2 + (n2 * (widget.rawY * 1651158159) >> 14)) * -1520068583;
        }
        else {
            widget.y = (n2 - widget.height * 1473950221 - (widget.rawY * 1651158159 * n2 >> 14)) * -1520068583;
        }
    }
    
    static final void aao(final int n, final int n2, final int n3, final int n4, final int n5) {
        HealthBar.scrollBarSprites[0].ax(n, n2);
        HealthBar.scrollBarSprites[1].ax(n, n4 + n2 - 16);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16, 16, n4 + 1862592445, Client.field443 * 40021093);
        int n6 = (n4 - 1479005341) * n4 / n5;
        if (n6 < 8) {
            n6 = 8;
        }
        final int n7 = n3 * (n4 + 1685934266 - n6) / (n5 - n4);
        Rasterizer2D.Rasterizer2D_fillRectangle(n, n2 + 16 + n7, 16, n6, -1271641797 * Client.field451);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n, 16 + n2 + n7, n6, 1881503647 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 1, n7 + (n2 + 16), n6, Client.field436 * 1881503647);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n7 + (n2 + 16), 16, Client.field436 * -2136707994);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, 17 + n2 + n7, 16, 1881503647 * Client.field436);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 15, 16 + n2 + n7, n6, Client.field435 * -1985238529);
        Rasterizer2D.Rasterizer2D_drawVerticalLine(n + 14, 17 + n2 + n7, n6 - 1, -940974806 * Client.field435);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(n, n6 + (15 + n2 + n7), 16, Client.field435 * -1573694446);
        Rasterizer2D.Rasterizer2D_drawHorizontalLine(1 + n, 14 + n2 + n7 + n6, 15, 1155936455 * Client.field435);
    }
    
    static final void aay(final Widget widget, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (Client.field437) {
            Client.alternativeScrollbarWidth = 1151731872;
        }
        else {
            Client.alternativeScrollbarWidth = 0;
        }
        Client.field437 = false;
        if (114417019 * MouseHandler.MouseHandler_currentButton == 1 || (!class473.mouseCam && 114417019 * MouseHandler.MouseHandler_currentButton == 4)) {
            if (n5 >= n && n5 < n + 16 && n6 >= n2 && n6 < 16 + n2) {
                widget.scrollY += 510215044;
                class144.invalidateWidget(widget, -1614536969);
            }
            else if (n5 >= n && n5 < 16 + n && n6 >= n3 + n2 - 16 && n6 < n3 + n2) {
                widget.scrollY -= 510215044;
                class144.invalidateWidget(widget, -1594250269);
            }
            else if (n5 >= n - Client.alternativeScrollbarWidth * -1434295667 && n5 < -1434295667 * Client.alternativeScrollbarWidth + (16 + n) && n6 >= n2 + 16 && n6 < n2 + n3 - 16) {
                int n7 = (n3 - 32) * n3 / n4;
                if (n7 < 8) {
                    n7 = 8;
                }
                widget.scrollY = 946188063 * ((n6 - n2 - 16 - n7 / 2) * (n4 - n3) / (n3 - 32 - n7));
                class144.invalidateWidget(widget, -1974887896);
                Client.field437 = true;
            }
        }
        if (-121753353 * Client.mouseWheelRotation != 0 && n5 >= n - widget.width * -794961409 && n6 >= n2 && n5 < 16 + n && n6 <= n3 + n2) {
            widget.scrollY += Client.mouseWheelRotation * -908462347;
            class144.invalidateWidget(widget, -1158952424);
        }
    }
    
    static final void abl(final Widget widget) {
        if (1 == widget.buttonType * 35076151) {
            SceneTilePaint.insertMenuItem(widget.dataText, "", 24, 0, 0, 1713081171 * widget.id, widget.itemId * -2006098851, false, (byte)61);
        }
        if (widget.buttonType * 35076151 == 2 && !Client.isSpellSelected) {
            final String widget_getSpellActionName = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
            if (widget_getSpellActionName != null) {
                class138.method796(widget_getSpellActionName, class383.method2081(65280, -928737370) + widget.text, 25, 0, -1, widget.id * 1713081171, widget.itemId * -2006098851, (short)(-7917));
            }
        }
        if (widget.buttonType * 35076151 == 3) {
            MenuAction.insertMenuItemNoShift(Strings.gq, "", 26, 0, 0, widget.id * 1713081171, (byte)61);
        }
        if (4 == 35076151 * widget.buttonType) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 28, 0, 0, 1713081171 * widget.id, (byte)111);
        }
        if (widget.buttonType * 35076151 == 5) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 29, 0, 0, 1713081171 * widget.id, (byte)70);
        }
        if (6 == 35076151 * widget.buttonType && Client.meslayerContinueWidget == null) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 30, 0, -1, widget.id * 1713081171, (byte)124);
        }
        if (widget.modelOrthog) {
            if (Client.isSpellSelected) {
                if (ScriptEvent.method492(KeyHandler.getWidgetFlags(widget, 483024141), 1358464020) && (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x20) == 0x20) {
                    class138.method796(Client.field530, Client.field522 + " " + class96.ab + " " + widget.field3004, 58, 0, 55577617 * widget.childIndex, widget.id * 1713081171, -2006098851 * widget.itemId, (short)(-20102));
                }
            }
            else {
                for (int i = 9; i >= 5; --i) {
                    String s;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 330519292) >> 1 + i & 0x1) && null == widget.onOp) {
                        s = null;
                    }
                    else if (null != widget.actions && widget.actions.length > i && null != widget.actions[i] && widget.actions[i].trim().length() != 0) {
                        s = widget.actions[i];
                    }
                    else {
                        s = null;
                    }
                    final String s2 = s;
                    if (s2 != null) {
                        class138.method796(s2, widget.field3004, 1007, i + 1, widget.childIndex * 55577617, widget.id * 1713081171, widget.itemId * -2006098851, (short)(-23994));
                    }
                }
                final String widget_getSpellActionName2 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                if (null != widget_getSpellActionName2) {
                    class138.method796(widget_getSpellActionName2, widget.field3004, 25, 0, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, (short)18295);
                }
                for (int j = 4; j >= 0; --j) {
                    String s3;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 1894290829) >> 1 + j & 0x1) && null == widget.onOp) {
                        s3 = null;
                    }
                    else if (widget.actions != null && widget.actions.length > j && widget.actions[j] != null && widget.actions[j].trim().length() != 0) {
                        s3 = widget.actions[j];
                    }
                    else {
                        s3 = null;
                    }
                    final String s4 = s3;
                    if (null != s4) {
                        SceneTilePaint.insertMenuItem(s4, widget.field3004, 57, 1 + j, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, widget.field2969, (byte)10);
                    }
                }
                if ((KeyHandler.getWidgetFlags(widget, 893765198) & 0x1) != 0x0) {
                    MenuAction.insertMenuItemNoShift(Strings.aq, "", 30, 0, widget.childIndex * 55577617, widget.id * 1713081171, (byte)126);
                }
            }
        }
    }
    
    static void aal(final Widget widget, final int n, final int n2, final boolean b) {
        final int n3 = widget.width * -794961409;
        final int n4 = widget.height * 1708183025;
        if (widget.widthAlignment * 241981169 == 0) {
            widget.width = -430271290 * widget.rawWidth;
        }
        else if (241981169 * widget.widthAlignment == 1) {
            widget.width = 1774069247 * (n - widget.rawWidth * -515712942);
        }
        else if (widget.widthAlignment * 241981169 == 2) {
            widget.width = -1986850930 * (n * (widget.rawWidth * -1960603747) >> 14);
        }
        if (1513156418 * widget.heightAlignment == 0) {
            widget.height = 1850345051 * widget.rawHeight;
        }
        else if (-1140472336 * widget.heightAlignment == 1) {
            widget.height = 60157125 * (n2 - 499634230 * widget.rawHeight);
        }
        else if (widget.heightAlignment * -1877820282 == 2) {
            widget.height = 60157125 * (n2 * (753198366 * widget.rawHeight) >> 14);
        }
        if (widget.widthAlignment * 241981169 == 4) {
            widget.width = 1774069247 * (widget.field2896 * 640195305 * (1473950221 * widget.height) / (1557733895 * widget.field2897));
        }
        if (4 == widget.heightAlignment * -480604969) {
            widget.height = widget.field2897 * -377476347 * (widget.width * -794961409) / (widget.field2896 * 640195305) * 1610383077;
        }
        if (1337 == -2015252261 * widget.contentType) {
            Client.viewportWidget = widget;
        }
        if (12 == widget.type * 883712245) {
            widget.method1815((byte)(-8)).method1710(widget.width * -794961409, -1615318876 * widget.height, (byte)63);
        }
        if (b && null != widget.onResize && (widget.width * 1128747672 != n3 || widget.height * 1473950221 != n4)) {
            final ScriptEvent scriptEvent = new ScriptEvent();
            scriptEvent.dragTarget = widget;
            scriptEvent.args = widget.onResize;
            Client.scriptEvents.addFirst(scriptEvent);
        }
    }
    
    static final void aat(final Widget widget, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (Client.field437) {
            Client.alternativeScrollbarWidth = 1611985738;
        }
        else {
            Client.alternativeScrollbarWidth = 0;
        }
        Client.field437 = false;
        if (114417019 * MouseHandler.MouseHandler_currentButton == 1 || (!class473.mouseCam && -589150360 * MouseHandler.MouseHandler_currentButton == 4)) {
            if (n5 >= n && n5 < n + 16 && n6 >= n2 && n6 < 16 + n2) {
                widget.scrollY += 510215044;
                class144.invalidateWidget(widget, -1310019627);
            }
            else if (n5 >= n && n5 < 16 + n && n6 >= n3 + n2 - 16 && n6 < n3 + n2) {
                widget.scrollY -= 510215044;
                class144.invalidateWidget(widget, -2096386353);
            }
            else if (n5 >= n - Client.alternativeScrollbarWidth * -1434295667 && n5 < -1434295667 * Client.alternativeScrollbarWidth + (16 + n) && n6 >= n2 + 16 && n6 < n2 + n3 - 16) {
                int n7 = (n3 - 896586652) * n3 / n4;
                if (n7 < 8) {
                    n7 = 8;
                }
                widget.scrollY = -537175811 * ((n6 - n2 - 16 - n7 / 2) * (n4 - n3) / (n3 - 32 - n7));
                class144.invalidateWidget(widget, -1831657326);
                Client.field437 = true;
            }
        }
        if (-121753353 * Client.mouseWheelRotation != 0 && n5 >= n - widget.width * 540405791 && n6 >= n2 && n5 < 16 + n && n6 <= n3 + n2) {
            widget.scrollY += Client.mouseWheelRotation * -1788986374;
            class144.invalidateWidget(widget, -2091023666);
        }
    }
    
    static final void aav(final Widget widget, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (Client.field437) {
            Client.alternativeScrollbarWidth = -1495375664;
        }
        else {
            Client.alternativeScrollbarWidth = 0;
        }
        Client.field437 = false;
        if (585085026 * MouseHandler.MouseHandler_currentButton == 1 || (!class473.mouseCam && -1482962782 * MouseHandler.MouseHandler_currentButton == 4)) {
            if (n5 >= n && n5 < n + 16 && n6 >= n2 && n6 < 16 + n2) {
                widget.scrollY += 1345443215;
                class144.invalidateWidget(widget, -1899949772);
            }
            else if (n5 >= n && n5 < 16 + n && n6 >= n3 + n2 - 16 && n6 < n3 + n2) {
                widget.scrollY -= 510215044;
                class144.invalidateWidget(widget, -1808946643);
            }
            else if (n5 >= n - Client.alternativeScrollbarWidth * -1434295667 && n5 < 1755542573 * Client.alternativeScrollbarWidth + (16 + n) && n6 >= n2 + 16 && n6 < n2 + n3 - 16) {
                int n7 = (n3 - 32) * n3 / n4;
                if (n7 < 8) {
                    n7 = 8;
                }
                widget.scrollY = 946188063 * ((n6 - n2 - 16 - n7 / 2) * (n4 - n3) / (n3 - 32 - n7));
                class144.invalidateWidget(widget, -903661569);
                Client.field437 = true;
            }
        }
        if (-121753353 * Client.mouseWheelRotation != 0 && n5 >= n - widget.width * -794961409 && n6 >= n2 && n5 < 16 + n && n6 <= n3 + n2) {
            widget.scrollY += Client.mouseWheelRotation * -908462347;
            class144.invalidateWidget(widget, -753232003);
        }
    }
    
    final void aaq(final boolean b) {
        SequenceDefinition.method1129(Client.rootInterface * -896157613, Client.aj * -1687260435, class262.canvasHeight * 1658005443, b, -726165376);
    }
    
    void aax(final Widget widget) {
        final Widget widget2 = (-1 == 913615679 * widget.parentId) ? null : class165.vmethod3380(913615679 * widget.parentId, (byte)5);
        int n;
        int n2;
        if (null == widget2) {
            n = -1687260435 * Client.aj;
            n2 = class262.canvasHeight * 1658005443;
        }
        else {
            n = -794961409 * widget2.width;
            n2 = widget2.height * 1473950221;
        }
        class158.alignWidgetSize(widget, n, n2, false, -2128928916);
        class192.alignWidgetPosition(widget, n, n2, (byte)(-39));
    }
    
    static final void aak(final int n, final int n2, final int n3, final boolean b) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        class135.resizeInterface(VerticalAlignment.Widget_interfaceComponents[n], -1, n2, n3, b, 1809081725);
    }
    
    static final String aaz(final int i) {
        String str = Integer.toString(i);
        for (int j = str.length() - 3; j > 0; j -= 3) {
            str = str.substring(0, j) + class96.an + str.substring(j);
        }
        if (str.length() > 9) {
            return " " + class383.method2081(65408, 884118718) + str.substring(0, str.length() - 8) + Strings.gb + " " + class96.ac + str + class96.au + class96.al;
        }
        if (str.length() > 6) {
            return " " + class383.method2081(16777215, 145834157) + str.substring(0, str.length() - 4) + Strings.gn + " " + class96.ac + str + class96.au + class96.al;
        }
        return " " + class383.method2081(16776960, -922675717) + str + class96.al;
    }
    
    static final void acp(int min) {
        min = Math.min(Math.max(min, 0), 127);
        ClientPreferences.tw(class20.clientPreferences, min, -83597018);
    }
    
    static final void acx(int min) {
        min = Math.min(Math.max(min, 0), 255);
        if (min != ClientPreferences.xp(class20.clientPreferences, 326256204)) {
            if (ClientPreferences.xp(class20.clientPreferences, -604529012) == 0 && -1 != Client.currentTrackGroupId * 1976903761) {
                Message.isFromFriend(class399.archive6, 1976903761 * Client.currentTrackGroupId, 0, min, false, -1930946281);
                Client.playingJingle = false;
            }
            else if (min == 0) {
                FloorUnderlayDefinition.setHsl(-852125385);
                Client.playingJingle = false;
            }
            else {
                class220.method1224(min, -1899956213);
            }
            ClientPreferences.ql(class20.clientPreferences, min, -935900203);
        }
    }
    
    static final int aco() {
        return 100 - Math.round(200.0f * ((float)class20.clientPreferences.getBrightness(1552792519) - 0.5f));
    }
    
    final void acb() {
        class144.invalidateWidget(Client.clickedWidget, -1153860195);
        class96.widgetDragDuration += 873371827;
        if (Client.field622 && Client.field540) {
            final int n = -2063363905 * MouseHandler.MouseHandler_x;
            final int n2 = MouseHandler.MouseHandler_y * -1224153235;
            int n3 = n - -1789924433 * Client.widgetClickX;
            int n4 = n2 - Client.widgetClickY * 1902621241;
            if (n3 < Client.field495 * 1084046795) {
                n3 = 1084046795 * Client.field495;
            }
            if (n3 + Client.clickedWidget.width * -794961409 > -794961409 * Client.clickedWidgetParent.width + 1084046795 * Client.field495) {
                n3 = 1084046795 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - -794961409 * Client.clickedWidget.width;
            }
            if (n4 < Client.field542 * -746723443) {
                n4 = Client.field542 * -746723443;
            }
            if (n4 + 1473950221 * Client.clickedWidget.height > Client.field542 * -746723443 + Client.clickedWidgetParent.height * 1473950221) {
                n4 = -746723443 * Client.field542 + Client.clickedWidgetParent.height * 1473950221 - Client.clickedWidget.height * 1473950221;
            }
            final int n5 = n3 - 565355253 * Client.field544;
            final int n6 = n4 - Client.field545 * 1136091355;
            final int n7 = Client.clickedWidget.dragZoneSize * 154898553;
            if (1993201275 * class96.widgetDragDuration > Client.clickedWidget.dragThreshold * -1849043027 && (n5 > n7 || n5 < -n7 || n6 > n7 || n6 < -n7)) {
                Client.isDraggingWidget = true;
            }
            final int n8 = n3 - Client.field495 * 1084046795 + Client.clickedWidgetParent.scrollX * -1469632775;
            final int n9 = Client.clickedWidgetParent.scrollY * 1223232735 + (n4 - -746723443 * Client.field542);
            if (null != Client.clickedWidget.onDrag && Client.isDraggingWidget) {
                final ScriptEvent scriptEvent = new ScriptEvent();
                scriptEvent.dragTarget = Client.clickedWidget;
                scriptEvent.mouseX = n8 * -2011830585;
                scriptEvent.mouseY = 1126405829 * n9;
                scriptEvent.args = Client.clickedWidget.onDrag;
                HealthBarUpdate.set(scriptEvent, (byte)(-42));
            }
            if (0 == 114417019 * MouseHandler.MouseHandler_currentButton) {
                if (Client.isDraggingWidget) {
                    if (null != Client.clickedWidget.onDragComplete) {
                        final ScriptEvent scriptEvent2 = new ScriptEvent();
                        scriptEvent2.dragTarget = Client.clickedWidget;
                        scriptEvent2.mouseX = -2011830585 * n8;
                        scriptEvent2.mouseY = 1126405829 * n9;
                        scriptEvent2.widget = Client.draggedOnWidget;
                        scriptEvent2.args = Client.clickedWidget.onDragComplete;
                        HealthBarUpdate.set(scriptEvent2, (byte)15);
                    }
                    if (null != Client.draggedOnWidget) {
                        Widget widget = Client.clickedWidget;
                        final int method1071 = StructComposition.method1071(KeyHandler.getWidgetFlags(widget, 1005529888), -739717267);
                        Widget widget2 = null;
                        Label_0785: {
                            if (method1071 == 0) {
                                widget2 = null;
                            }
                            else {
                                for (int i = 0; i < method1071; ++i) {
                                    widget = class165.vmethod3380(913615679 * widget.parentId, (byte)5);
                                    if (widget == null) {
                                        widget2 = null;
                                        break Label_0785;
                                    }
                                }
                                widget2 = widget;
                            }
                        }
                        if (null != widget2) {
                            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2515, Client.packetWriter.isaacCipher, (short)(-19319));
                            packetBufferNode.packetBuffer.bu(-2006098851 * Client.draggedOnWidget.itemId, (byte)98);
                            packetBufferNode.packetBuffer.es(Client.draggedOnWidget.id * 1713081171, -604065252);
                            packetBufferNode.packetBuffer.bu(55577617 * Client.draggedOnWidget.childIndex, (byte)2);
                            packetBufferNode.packetBuffer.bu(Client.clickedWidget.childIndex * 55577617, (byte)18);
                            packetBufferNode.packetBuffer.el(1713081171 * Client.clickedWidget.id, -437883978);
                            packetBufferNode.packetBuffer.cq(Client.clickedWidget.itemId * -2006098851, (byte)112);
                            Client.packetWriter.addNode(packetBufferNode, 414135591);
                        }
                    }
                }
                else if (fk(this, -1679837219)) {
                    dz(this, Client.field544 * 565355253 + -1789924433 * Client.widgetClickX, Client.widgetClickY * 1902621241 + Client.field545 * 1136091355, 1018516557);
                }
                else if (Client.menuOptionsCount * 730065501 > 0) {
                    class204.method1136(565355253 * Client.field544 + Client.widgetClickX * -1789924433, 1136091355 * Client.field545 + Client.widgetClickY * 1902621241, -1052930105);
                }
                Client.clickedWidget = null;
            }
            return;
        }
        if (1993201275 * class96.widgetDragDuration > 1) {
            if (!Client.isDraggingWidget && Client.menuOptionsCount * 730065501 > 0) {
                class204.method1136(Client.field544 * 565355253 + Client.widgetClickX * -1789924433, Client.field545 * 1136091355 + Client.widgetClickY * 1902621241, -1052930105);
            }
            Client.clickedWidget = null;
        }
    }
    
    static void acj(final int n, final int n2) {
        class138.method797(Language.tempMenuAction, n, n2, (byte)84);
        Language.tempMenuAction = null;
    }
    
    static final void aby(final int n, final int n2) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        class143.runComponentCloseListeners(VerticalAlignment.Widget_interfaceComponents[n], n2, (byte)19);
    }
    
    static void aca(final int n, final int n2) {
        class138.method797(Language.tempMenuAction, n, n2, (byte)56);
        Language.tempMenuAction = null;
    }
    
    static final void abz(final Widget widget) {
        if (1 == widget.buttonType * 35076151) {
            SceneTilePaint.insertMenuItem(widget.dataText, "", 24, 0, 0, 1713081171 * widget.id, widget.itemId * -2006098851, false, (byte)65);
        }
        if (widget.buttonType * 35076151 == 2 && !Client.isSpellSelected) {
            final String widget_getSpellActionName = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
            if (widget_getSpellActionName != null) {
                class138.method796(widget_getSpellActionName, class383.method2081(65280, 5118724) + widget.text, 25, 0, -1, widget.id * 1713081171, widget.itemId * -2006098851, (short)(-2802));
            }
        }
        if (widget.buttonType * 35076151 == 3) {
            MenuAction.insertMenuItemNoShift(Strings.gq, "", 26, 0, 0, widget.id * 1713081171, (byte)68);
        }
        if (4 == 35076151 * widget.buttonType) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 28, 0, 0, 1713081171 * widget.id, (byte)42);
        }
        if (widget.buttonType * 35076151 == 5) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 29, 0, 0, 1713081171 * widget.id, (byte)58);
        }
        if (6 == 35076151 * widget.buttonType && Client.meslayerContinueWidget == null) {
            MenuAction.insertMenuItemNoShift(widget.dataText, "", 30, 0, -1, widget.id * 1713081171, (byte)51);
        }
        if (widget.modelOrthog) {
            if (Client.isSpellSelected) {
                if (ScriptEvent.method492(KeyHandler.getWidgetFlags(widget, 465911651), -596151010) && (1457791911 * SecureRandomFuture.selectedSpellFlags & 0x20) == 0x20) {
                    class138.method796(Client.field530, Client.field522 + " " + class96.ab + " " + widget.field3004, 58, 0, 55577617 * widget.childIndex, widget.id * 1713081171, -2006098851 * widget.itemId, (short)19492);
                }
            }
            else {
                for (int i = 9; i >= 5; --i) {
                    String s;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 265712142) >> 1 + i & 0x1) && null == widget.onOp) {
                        s = null;
                    }
                    else if (null != widget.actions && widget.actions.length > i && null != widget.actions[i] && widget.actions[i].trim().length() != 0) {
                        s = widget.actions[i];
                    }
                    else {
                        s = null;
                    }
                    final String s2 = s;
                    if (s2 != null) {
                        class138.method796(s2, widget.field3004, 1007, i + 1, widget.childIndex * 55577617, widget.id * 1713081171, widget.itemId * -2006098851, (short)17394);
                    }
                }
                final String widget_getSpellActionName2 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                if (null != widget_getSpellActionName2) {
                    class138.method796(widget_getSpellActionName2, widget.field3004, 25, 0, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, (short)10507);
                }
                for (int j = 4; j >= 0; --j) {
                    String s3;
                    if (0x0 == (KeyHandler.getWidgetFlags(widget, 1909825073) >> 1 + j & 0x1) && null == widget.onOp) {
                        s3 = null;
                    }
                    else if (widget.actions == null || (widget.actions.length <= j || widget.actions[j] == null) || widget.actions[j].trim().length() == 0) {
                        s3 = null;
                    }
                    else {
                        s3 = widget.actions[j];
                    }
                    final String s4 = s3;
                    if (null != s4) {
                        SceneTilePaint.insertMenuItem(s4, widget.field3004, 57, 1 + j, 55577617 * widget.childIndex, widget.id * 1713081171, widget.itemId * -2006098851, widget.field2969, (byte)98);
                    }
                }
                if ((KeyHandler.getWidgetFlags(widget, 233171542) & 0x1) != 0x0) {
                    MenuAction.insertMenuItemNoShift(Strings.aq, "", 30, 0, widget.childIndex * 55577617, widget.id * 1713081171, (byte)63);
                }
            }
        }
    }
    
    static void acm(final int n) {
        Language.tempMenuAction = new MenuAction();
        Language.tempMenuAction.param0 = 360847046 * Client.menuArguments1[n];
        Language.tempMenuAction.param1 = Client.menuArguments2[n] * -66970235;
        Language.tempMenuAction.opcode = Client.menuOpcodes[n] * -582279778;
        Language.tempMenuAction.identifier = Client.menuIdentifiers[n] * -1353871487;
        Language.tempMenuAction.itemId = 1968016111 * Client.menuItemIds[n];
        Language.tempMenuAction.action = Client.menuActions[n];
        Language.tempMenuAction.target = Client.menuTargets[n];
    }
    
    static final void acy(final double n) {
        class18.method65(n);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).setBrightness(n);
        class127.method761(-1551713508);
        class20.clientPreferences.setBrightness(n);
    }
    
    static final void adb(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 324) {
            if (-1 == Client.field639 * -1563612739) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = 1885844547 * widget.spriteId;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field639 * 439158903;
            }
            else {
                widget.spriteId2 = -1012252929 * Client.field640;
            }
            return;
        }
        if (n == 325) {
            if (-1 == 1693240699 * Client.field639) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = widget.spriteId * -949903174;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field640 * -2135198732;
            }
            else {
                widget.spriteId2 = -272472859 * Client.field639;
            }
            return;
        }
        if (327 == n) {
            widget.modelAngleX = -243645921;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * 87864982 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 0;
            return;
        }
        if (328 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x846BE533) * -230241203;
            widget.modelType = -1676587537;
            widget.modelId = -1035053489;
        }
    }
    
    static final void acf(final double n) {
        class18.method65(n);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).setBrightness(n);
        class127.method761(1937503048);
        class20.clientPreferences.setBrightness(n);
    }
    
    static final void ack(final double n) {
        class18.method65(n);
        ((TextureProvider)Rasterizer3D.clips.Rasterizer3D_textureLoader).setBrightness(n);
        class127.method761(105991840);
        class20.clientPreferences.setBrightness(n);
    }
    
    static void acu(final int n) {
        Language.tempMenuAction = new MenuAction();
        Language.tempMenuAction.param0 = 116605911 * Client.menuArguments1[n];
        Language.tempMenuAction.param1 = Client.menuArguments2[n] * 1098721557;
        Language.tempMenuAction.opcode = Client.menuOpcodes[n] * 100419256;
        Language.tempMenuAction.identifier = Client.menuIdentifiers[n] * -1353871487;
        Language.tempMenuAction.itemId = 355643405 * Client.menuItemIds[n];
        Language.tempMenuAction.action = Client.menuActions[n];
        Language.tempMenuAction.target = Client.menuTargets[n];
    }
    
    static final void acv(int min) {
        min = Math.min(Math.max(min, 0), 297325874);
        ClientPreferences.tw(class20.clientPreferences, min, -1314626693);
    }
    
    static boolean abv(final int n) {
        for (int i = 0; i < Client.field355 * 454816476; ++i) {
            if (Client.field424[i] == n) {
                return true;
            }
        }
        return false;
    }
    
    static final void abw(final Widget[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (n == widget.parentId * 913615679) {
                    if (Widget.pv(widget, -1714433268) || KeyHandler.getWidgetFlags(widget, 704971989) != 0 || widget == Client.clickedWidgetParent) {
                        if (widget.modelOrthog) {
                            if (class393.isComponentHidden(widget, (byte)1)) {
                                continue;
                            }
                        }
                        else if (0 == widget.type * 883712245 && MidiPcmStream.mousedOverWidgetIf1 != widget && class393.isComponentHidden(widget, (byte)1)) {
                            continue;
                        }
                        if (11 == widget.type * 883712245) {
                            if (widget.method1820(class14.urlRequester, 494430693)) {
                                if (widget.method1807(1891414956)) {
                                    class144.invalidateWidget(widget, -954437094);
                                    WallDecoration.revalidateWidgetScroll(widget.children, widget, true, (byte)84);
                                }
                                if (widget.field2961 != null) {
                                    final ScriptEvent scriptEvent = new ScriptEvent();
                                    scriptEvent.dragTarget = widget;
                                    scriptEvent.args = widget.field2961;
                                    Client.scriptEvents.addFirst(scriptEvent);
                                }
                            }
                        }
                        else if (883712245 * widget.type == 12 && widget.method1822((byte)(-85))) {
                            class144.invalidateWidget(widget, -794406179);
                        }
                        final int n8 = 262951665 * widget.x + n6;
                        final int n9 = -747355095 * widget.y + n7;
                        int n16;
                        int n17;
                        int n18;
                        int n19;
                        if (9 == 883712245 * widget.type) {
                            int n10 = n8;
                            int n11 = n9;
                            int n12 = -794961409 * widget.width + n8;
                            int n13 = widget.height * 1473950221 + n9;
                            if (n12 < n10) {
                                final int n14 = n10;
                                n10 = n12;
                                n12 = n14;
                            }
                            if (n13 < n11) {
                                final int n15 = n11;
                                n11 = n13;
                                n13 = n15;
                            }
                            ++n12;
                            ++n13;
                            n16 = ((n10 > n2) ? n10 : n2);
                            n17 = ((n11 > n3) ? n11 : n3);
                            n18 = ((n12 < n4) ? n12 : n4);
                            n19 = ((n13 < n5) ? n13 : n5);
                        }
                        else {
                            final int n20 = n8 + widget.width * -794961409;
                            final int n21 = n9 + widget.height * 1473950221;
                            n16 = ((n8 > n2) ? n8 : n2);
                            n17 = ((n9 > n3) ? n9 : n3);
                            n18 = ((n20 < n4) ? n20 : n4);
                            n19 = ((n21 < n5) ? n21 : n5);
                        }
                        if (widget == Client.clickedWidget) {
                            Client.field622 = true;
                            Client.field544 = 463567197 * n8;
                            Client.field545 = 551918419 * n9;
                        }
                        boolean b = false;
                        if (widget.fill) {
                            switch (Client.field463 * -1722511035) {
                                case 3: {
                                    if (Client.field526 * -842617159 == widget.id * 1713081171) {
                                        b = true;
                                        break;
                                    }
                                    break;
                                }
                                case 0: {
                                    b = true;
                                    break;
                                }
                                case 2: {
                                    if (-842617159 * Client.field526 == widget.id * 1713081171 >>> 16) {
                                        b = true;
                                        break;
                                    }
                                    break;
                                }
                            }
                        }
                        if (!b && widget.modelOrthog) {
                            if (n16 >= n18) {
                                continue;
                            }
                            if (n17 >= n19) {
                                continue;
                            }
                        }
                        if (widget.modelOrthog) {
                            if (widget.hasListener) {
                                if (-2063363905 * MouseHandler.MouseHandler_x >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && -2063363905 * MouseHandler.MouseHandler_x < n18 && MouseHandler.MouseHandler_y * -1224153235 < n19) {
                                    for (ScriptEvent scriptEvent2 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent2; scriptEvent2 = (ScriptEvent)Client.scriptEvents.previous()) {
                                        if (scriptEvent2.field849) {
                                            scriptEvent2.hw();
                                            scriptEvent2.dragTarget.isHidden = false;
                                        }
                                    }
                                    WorldMapData_1.method1486((short)(-23286));
                                    if (0 == class96.widgetDragDuration * 1993201275) {
                                        Client.clickedWidget = null;
                                        Client.clickedWidgetParent = null;
                                    }
                                    if (!Client.isMenuOpen) {
                                        class156.addCancelMenuEntry(-742935767);
                                    }
                                }
                            }
                            else if (widget.prioritizeMenuEntry && MouseHandler.MouseHandler_x * -2063363905 >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19) {
                                for (ScriptEvent scriptEvent3 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent3; scriptEvent3 = (ScriptEvent)Client.scriptEvents.previous()) {
                                    if (scriptEvent3.field849 && scriptEvent3.args == scriptEvent3.dragTarget.onScroll) {
                                        scriptEvent3.hw();
                                    }
                                }
                            }
                        }
                        int n22 = MouseHandler.MouseHandler_x * -2063363905;
                        int n23 = MouseHandler.MouseHandler_y * -1224153235;
                        if (-1222491879 * MouseHandler.MouseHandler_lastButton != 0) {
                            n22 = MouseHandler.MouseHandler_lastPressedX * 2020601481;
                            n23 = MouseHandler.MouseHandler_lastPressedY * 1163896205;
                        }
                        final boolean b2 = n22 >= n16 && n23 >= n17 && n22 < n18 && n23 < n19;
                        if (1021339961 * widget.contentType == 1337) {
                            if (!Client.isLoading && !Client.isMenuOpen && b2) {
                                ScriptFrame.addSceneMenuOptions(n22, n23, n16, n17, -1708655552);
                            }
                        }
                        else if (1338 == 1021339961 * widget.contentType) {
                            MusicPatchNode.checkIfMinimapClicked(widget, n8, n9, (byte)(-48));
                        }
                        else {
                            if (1400 == widget.contentType * 1021339961) {
                                class126.worldMap.onCycle(-2063363905 * MouseHandler.MouseHandler_x, MouseHandler.MouseHandler_y * -1224153235, b2, n8, n9, widget.width * -794961409, widget.height * 1473950221, -796102144);
                            }
                            if (!Client.isMenuOpen && b2) {
                                if (1021339961 * widget.contentType == 1400) {
                                    class126.worldMap.addElementMenuOptions(n8, n9, -794961409 * widget.width, 1473950221 * widget.height, n22, n23, 1255090775);
                                }
                                else {
                                    class335.method1851(widget, -2116744481);
                                }
                            }
                            if (b) {
                                for (int j = 0; j < widget.field2954.length; ++j) {
                                    int n24 = 0;
                                    boolean b3 = false;
                                    if (n24 == 0 && widget.field2954[j] != null) {
                                        for (int k = 0; k < widget.field2954[j].length; ++k) {
                                            boolean keyPressed = false;
                                            if (null != widget.field2952) {
                                                keyPressed = Client.keyHandlerInstance.getKeyPressed(widget.field2954[j][k], 840292419);
                                            }
                                            if (class81.method485(widget.field2954[j][k], -2013563855) || keyPressed) {
                                                n24 = 1;
                                                if (null != widget.field2952 && widget.field2952[j] > -1886224337 * Client.cycle) {
                                                    break;
                                                }
                                                final byte b4 = widget.field2955[j][k];
                                                if (b4 != 0) {
                                                    if ((b4 & 0x8) != 0x0) {
                                                        if (Client.keyHandlerInstance.getKeyPressed(86, -1114097926) || Client.keyHandlerInstance.getKeyPressed(82, 928656545)) {
                                                            continue;
                                                        }
                                                        if (Client.keyHandlerInstance.getKeyPressed(81, -1657990681)) {
                                                            continue;
                                                        }
                                                    }
                                                    if ((b4 & 0x2) != 0x0 && !Client.keyHandlerInstance.getKeyPressed(86, -1490464268)) {
                                                        continue;
                                                    }
                                                    if ((b4 & 0x1) != 0x0 && !Client.keyHandlerInstance.getKeyPressed(82, -304246025)) {
                                                        continue;
                                                    }
                                                    if (0x0 != (b4 & 0x4) && !Client.keyHandlerInstance.getKeyPressed(81, -436555218)) {
                                                        continue;
                                                    }
                                                }
                                                b3 = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (b3) {
                                        if (j < 10) {
                                            Message.widgetDefaultMenuAction(1 + j, widget.id * 1713081171, widget.childIndex * 55577617, -2006098851 * widget.itemId, "", 1238902143);
                                        }
                                        else if (j == 10) {
                                            class166.Widget_runOnTargetLeave((byte)79);
                                            class18.selectSpell(widget.id * 1713081171, 55577617 * widget.childIndex, class195.method1052(KeyHandler.getWidgetFlags(widget, 1519357834), 1649192780), -2006098851 * widget.itemId, 466993910);
                                            Client.field530 = MusicPatchNode.Widget_getSpellActionName(widget, 603369429);
                                            if (Client.field530 == null) {
                                                Client.field530 = Strings.at;
                                            }
                                            Client.field522 = widget.field3004 + class383.method2081(16777215, 2124255974);
                                        }
                                        final int n25 = widget.field2936[j];
                                        if (null == widget.field2952) {
                                            widget.field2952 = new int[widget.field2954.length];
                                        }
                                        if (widget.field2977 == null) {
                                            widget.field2977 = new int[widget.field2954.length];
                                        }
                                        if (n25 != 0) {
                                            if (0 == widget.field2952[j]) {
                                                widget.field2952[j] = -1886224337 * Client.cycle + n25 + widget.field2977[j];
                                            }
                                            else {
                                                widget.field2952[j] = n25 + Client.cycle * -1886224337;
                                            }
                                        }
                                        else {
                                            widget.field2952[j] = Integer.MAX_VALUE;
                                        }
                                    }
                                    if (n24 == 0 && null != widget.field2952) {
                                        widget.field2952[j] = 0;
                                    }
                                }
                            }
                            if (widget.modelOrthog) {
                                int n26;
                                if (-2063363905 * MouseHandler.MouseHandler_x >= n16 && -1224153235 * MouseHandler.MouseHandler_y >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && MouseHandler.MouseHandler_y * -1224153235 < n19) {
                                    n26 = 1;
                                }
                                else {
                                    n26 = 0;
                                }
                                int n27 = 0;
                                if ((1 == MouseHandler.MouseHandler_currentButton * 114417019 || (!class473.mouseCam && 4 == 114417019 * MouseHandler.MouseHandler_currentButton)) && n26 != 0) {
                                    n27 = 1;
                                }
                                int n28 = 0;
                                if ((1 == -1222491879 * MouseHandler.MouseHandler_lastButton || (!class473.mouseCam && MouseHandler.MouseHandler_lastButton * -1222491879 == 4)) && (MouseHandler.MouseHandler_lastPressedX * 2020601481 >= n16 && MouseHandler.MouseHandler_lastPressedY * 1163896205 >= n17 && 2020601481 * MouseHandler.MouseHandler_lastPressedX < n18 && 1163896205 * MouseHandler.MouseHandler_lastPressedY < n19)) {
                                    n28 = 1;
                                }
                                if (n28 != 0) {
                                    class370.clickWidget(widget, MouseHandler.MouseHandler_lastPressedX * 2020601481 - n8, 1163896205 * MouseHandler.MouseHandler_lastPressedY - n9, -2129658655);
                                }
                                if (Widget.sc(widget, -121131168)) {
                                    if (n28 != 0) {
                                        Client.field569.addFirst(new class206(0, -2063363905 * MouseHandler.MouseHandler_x - n8, -1224153235 * MouseHandler.MouseHandler_y - n9, widget));
                                    }
                                    if (n27 != 0) {
                                        Client.field569.addFirst(new class206(1, -2063363905 * MouseHandler.MouseHandler_x - n8, MouseHandler.MouseHandler_y * -1224153235 - n9, widget));
                                    }
                                }
                                if (1021339961 * widget.contentType == 1400) {
                                    class126.worldMap.method2331(n22, n23, (boolean)((n26 & n27) != 0x0), (boolean)((n26 & n28) != 0x0), -2063937496);
                                }
                                if (null != Client.clickedWidget && widget != Client.clickedWidget && n26 != 0 && MusicPatchNode.method1676(KeyHandler.getWidgetFlags(widget, 1263979799), 1198741484)) {
                                    Client.draggedOnWidget = widget;
                                }
                                if (widget == Client.clickedWidgetParent) {
                                    Client.field540 = true;
                                    Client.field495 = -1150287901 * n8;
                                    Client.field542 = 68006725 * n9;
                                }
                                if (widget.field2978) {
                                    if (n26 != 0 && 0 != -121753353 * Client.mouseWheelRotation && null != widget.onScroll) {
                                        final ScriptEvent scriptEvent4 = new ScriptEvent();
                                        scriptEvent4.field849 = true;
                                        scriptEvent4.dragTarget = widget;
                                        scriptEvent4.mouseY = 835807251 * Client.mouseWheelRotation;
                                        scriptEvent4.args = widget.onScroll;
                                        Client.scriptEvents.addFirst(scriptEvent4);
                                    }
                                    if (null != Client.clickedWidget || Client.isMenuOpen) {
                                        n28 = 0;
                                        n27 = 0;
                                        n26 = 0;
                                    }
                                    if (!widget.modelTransparency && n28 != 0) {
                                        widget.modelTransparency = true;
                                        if (widget.onClick != null) {
                                            final ScriptEvent scriptEvent5 = new ScriptEvent();
                                            scriptEvent5.field849 = true;
                                            scriptEvent5.dragTarget = widget;
                                            scriptEvent5.mouseX = (MouseHandler.MouseHandler_lastPressedX * 2020601481 - n8) * -2011830585;
                                            scriptEvent5.mouseY = 1126405829 * (MouseHandler.MouseHandler_lastPressedY * 1163896205 - n9);
                                            scriptEvent5.args = widget.onClick;
                                            Client.scriptEvents.addFirst(scriptEvent5);
                                        }
                                    }
                                    if (widget.modelTransparency && n27 != 0 && null != widget.onClickRepeat) {
                                        final ScriptEvent scriptEvent6 = new ScriptEvent();
                                        scriptEvent6.field849 = true;
                                        scriptEvent6.dragTarget = widget;
                                        scriptEvent6.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                        scriptEvent6.mouseY = (-1224153235 * MouseHandler.MouseHandler_y - n9) * 1126405829;
                                        scriptEvent6.args = widget.onClickRepeat;
                                        Client.scriptEvents.addFirst(scriptEvent6);
                                    }
                                    if (widget.modelTransparency && n27 == 0) {
                                        widget.modelTransparency = false;
                                        if (null != widget.onRelease) {
                                            final ScriptEvent scriptEvent7 = new ScriptEvent();
                                            scriptEvent7.field849 = true;
                                            scriptEvent7.dragTarget = widget;
                                            scriptEvent7.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                            scriptEvent7.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                            scriptEvent7.args = widget.onRelease;
                                            Client.field568.addFirst(scriptEvent7);
                                        }
                                    }
                                    if (n27 != 0 && null != widget.onHold) {
                                        final ScriptEvent scriptEvent8 = new ScriptEvent();
                                        scriptEvent8.field849 = true;
                                        scriptEvent8.dragTarget = widget;
                                        scriptEvent8.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                        scriptEvent8.mouseY = 1126405829 * (MouseHandler.MouseHandler_y * -1224153235 - n9);
                                        scriptEvent8.args = widget.onHold;
                                        Client.scriptEvents.addFirst(scriptEvent8);
                                    }
                                    if (!widget.isHidden && n26 != 0) {
                                        widget.isHidden = true;
                                        if (null != widget.onMouseOver) {
                                            final ScriptEvent scriptEvent9 = new ScriptEvent();
                                            scriptEvent9.field849 = true;
                                            scriptEvent9.dragTarget = widget;
                                            scriptEvent9.mouseX = (-2063363905 * MouseHandler.MouseHandler_x - n8) * -2011830585;
                                            scriptEvent9.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                            scriptEvent9.args = widget.onMouseOver;
                                            Client.scriptEvents.addFirst(scriptEvent9);
                                        }
                                    }
                                    if (widget.isHidden && n26 != 0 && null != widget.onMouseRepeat) {
                                        final ScriptEvent scriptEvent10 = new ScriptEvent();
                                        scriptEvent10.field849 = true;
                                        scriptEvent10.dragTarget = widget;
                                        scriptEvent10.mouseX = -2011830585 * (-2063363905 * MouseHandler.MouseHandler_x - n8);
                                        scriptEvent10.mouseY = (MouseHandler.MouseHandler_y * -1224153235 - n9) * 1126405829;
                                        scriptEvent10.args = widget.onMouseRepeat;
                                        Client.scriptEvents.addFirst(scriptEvent10);
                                    }
                                    if (widget.isHidden && n26 == 0) {
                                        widget.isHidden = false;
                                        if (null != widget.onMouseLeave) {
                                            final ScriptEvent scriptEvent11 = new ScriptEvent();
                                            scriptEvent11.field849 = true;
                                            scriptEvent11.dragTarget = widget;
                                            scriptEvent11.mouseX = -2011830585 * (MouseHandler.MouseHandler_x * -2063363905 - n8);
                                            scriptEvent11.mouseY = (-1224153235 * MouseHandler.MouseHandler_y - n9) * 1126405829;
                                            scriptEvent11.args = widget.onMouseLeave;
                                            Client.field568.addFirst(scriptEvent11);
                                        }
                                    }
                                    if (null != widget.onTimer) {
                                        final ScriptEvent scriptEvent12 = new ScriptEvent();
                                        scriptEvent12.dragTarget = widget;
                                        scriptEvent12.args = widget.onTimer;
                                        Client.field567.addFirst(scriptEvent12);
                                    }
                                    if (widget.onVarTransmit != null && -261310919 * Client.changedVarpCount > widget.field2870 * -1285197923) {
                                        Label_4032: {
                                            if (null == widget.varTransmitTriggers || Client.changedVarpCount * -261310919 - -1285197923 * widget.field2870 > 32) {
                                                final ScriptEvent scriptEvent13 = new ScriptEvent();
                                                scriptEvent13.dragTarget = widget;
                                                scriptEvent13.args = widget.onVarTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent13);
                                            }
                                            else {
                                                for (int l = -1285197923 * widget.field2870; l < -261310919 * Client.changedVarpCount; ++l) {
                                                    final int n29 = Client.changedVarps[l & 0x1F];
                                                    for (int n30 = 0; n30 < widget.varTransmitTriggers.length; ++n30) {
                                                        if (n29 == widget.varTransmitTriggers[n30]) {
                                                            final ScriptEvent scriptEvent14 = new ScriptEvent();
                                                            scriptEvent14.dragTarget = widget;
                                                            scriptEvent14.args = widget.onVarTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent14);
                                                            break Label_4032;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        widget.field2870 = Client.changedVarpCount * 1401123917;
                                    }
                                    if (null != widget.onInvTransmit && Client.changedItemContainersCount * -710491461 > -320567063 * widget.field3017) {
                                        Label_4294: {
                                            if (null == widget.invTransmitTriggers || -710491461 * Client.changedItemContainersCount - widget.field3017 * -320567063 > 32) {
                                                final ScriptEvent scriptEvent15 = new ScriptEvent();
                                                scriptEvent15.dragTarget = widget;
                                                scriptEvent15.args = widget.onInvTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent15);
                                            }
                                            else {
                                                for (int n31 = widget.field3017 * -320567063; n31 < -710491461 * Client.changedItemContainersCount; ++n31) {
                                                    final int n32 = Client.changedItemContainers[n31 & 0x1F];
                                                    for (int n33 = 0; n33 < widget.invTransmitTriggers.length; ++n33) {
                                                        if (n32 == widget.invTransmitTriggers[n33]) {
                                                            final ScriptEvent scriptEvent16 = new ScriptEvent();
                                                            scriptEvent16.dragTarget = widget;
                                                            scriptEvent16.args = widget.onInvTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent16);
                                                            break Label_4294;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        widget.field3017 = 1811343363 * Client.changedItemContainersCount;
                                    }
                                    if (null != widget.onStatTransmit && Client.changedSkillsCount * -744210295 > widget.field3006 * 610184185) {
                                        Label_2740: {
                                            if (widget.statTransmitTriggers == null || Client.changedSkillsCount * -744210295 - widget.field3006 * 610184185 > 32) {
                                                final ScriptEvent scriptEvent17 = new ScriptEvent();
                                                scriptEvent17.dragTarget = widget;
                                                scriptEvent17.args = widget.onStatTransmit;
                                                Client.scriptEvents.addFirst(scriptEvent17);
                                            }
                                            else {
                                                for (int n34 = widget.field3006 * 610184185; n34 < -744210295 * Client.changedSkillsCount; ++n34) {
                                                    final int n35 = Client.changedSkills[n34 & 0x1F];
                                                    for (int n36 = 0; n36 < widget.statTransmitTriggers.length; ++n36) {
                                                        if (widget.statTransmitTriggers[n36] == n35) {
                                                            final ScriptEvent scriptEvent18 = new ScriptEvent();
                                                            scriptEvent18.dragTarget = widget;
                                                            scriptEvent18.args = widget.onStatTransmit;
                                                            Client.scriptEvents.addFirst(scriptEvent18);
                                                            break Label_2740;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        widget.field3006 = -1736131311 * Client.changedSkillsCount;
                                    }
                                    if (-620063003 * Client.chatCycle > -288310997 * widget.field3015 && null != widget.onChatTransmit) {
                                        final ScriptEvent scriptEvent19 = new ScriptEvent();
                                        scriptEvent19.dragTarget = widget;
                                        scriptEvent19.args = widget.onChatTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent19);
                                    }
                                    if (-421621503 * Client.field557 > widget.field3015 * -288310997 && null != widget.onFriendTransmit) {
                                        final ScriptEvent scriptEvent20 = new ScriptEvent();
                                        scriptEvent20.dragTarget = widget;
                                        scriptEvent20.args = widget.onFriendTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent20);
                                    }
                                    if (-1685007587 * Client.field558 > -288310997 * widget.field3015 && null != widget.onClanTransmit) {
                                        final ScriptEvent scriptEvent21 = new ScriptEvent();
                                        scriptEvent21.dragTarget = widget;
                                        scriptEvent21.args = widget.onClanTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent21);
                                    }
                                    if (Client.field559 * -1127640293 > widget.field3015 * -288310997 && widget.field2946 != null) {
                                        final ScriptEvent scriptEvent22 = new ScriptEvent();
                                        scriptEvent22.dragTarget = widget;
                                        scriptEvent22.args = widget.field2946;
                                        Client.scriptEvents.addFirst(scriptEvent22);
                                    }
                                    if (Client.field560 * 2059493293 > -288310997 * widget.field3015 && widget.field2876 != null) {
                                        final ScriptEvent scriptEvent23 = new ScriptEvent();
                                        scriptEvent23.dragTarget = widget;
                                        scriptEvent23.args = widget.field2876;
                                        Client.scriptEvents.addFirst(scriptEvent23);
                                    }
                                    if (Client.field629 * -1835030315 > widget.field3015 * -288310997 && null != widget.onStockTransmit) {
                                        final ScriptEvent scriptEvent24 = new ScriptEvent();
                                        scriptEvent24.dragTarget = widget;
                                        scriptEvent24.args = widget.onStockTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent24);
                                    }
                                    if (Client.field635 * -2057735521 > widget.field3015 * -288310997 && null != widget.field2998) {
                                        final ScriptEvent scriptEvent25 = new ScriptEvent();
                                        scriptEvent25.dragTarget = widget;
                                        scriptEvent25.args = widget.field2998;
                                        Client.scriptEvents.addFirst(scriptEvent25);
                                    }
                                    if (Client.field433 * -440718331 > widget.field3015 * -288310997 && widget.onMiscTransmit != null) {
                                        final ScriptEvent scriptEvent26 = new ScriptEvent();
                                        scriptEvent26.dragTarget = widget;
                                        scriptEvent26.args = widget.onMiscTransmit;
                                        Client.scriptEvents.addFirst(scriptEvent26);
                                    }
                                    widget.field3015 = -1390983529 * Client.cycleCntr;
                                    if (null != widget.onKey) {
                                        for (int n37 = 0; n37 < -1685179677 * Client.field355; ++n37) {
                                            final ScriptEvent scriptEvent27 = new ScriptEvent();
                                            scriptEvent27.dragTarget = widget;
                                            scriptEvent27.keyTyped = -422970289 * Client.field424[n37];
                                            scriptEvent27.keyPressed = 1753443767 * Client.field592[n37];
                                            scriptEvent27.args = widget.onKey;
                                            Client.scriptEvents.addFirst(scriptEvent27);
                                        }
                                    }
                                    if (widget.field2988 != null) {
                                        final int[] method1155 = Client.keyHandlerInstance.method1155(1463433638);
                                        for (int n38 = 0; n38 < method1155.length; ++n38) {
                                            final ScriptEvent scriptEvent28 = new ScriptEvent();
                                            scriptEvent28.dragTarget = widget;
                                            scriptEvent28.keyTyped = -422970289 * method1155[n38];
                                            scriptEvent28.args = widget.field2988;
                                            Client.scriptEvents.addFirst(scriptEvent28);
                                        }
                                    }
                                    if (widget.field2892 != null) {
                                        final int[] method1156 = Client.keyHandlerInstance.method1152(2091973990);
                                        for (int n39 = 0; n39 < method1156.length; ++n39) {
                                            final ScriptEvent scriptEvent29 = new ScriptEvent();
                                            scriptEvent29.dragTarget = widget;
                                            scriptEvent29.keyTyped = method1156[n39] * -422970289;
                                            scriptEvent29.args = widget.field2892;
                                            Client.scriptEvents.addFirst(scriptEvent29);
                                        }
                                    }
                                }
                            }
                            if (!widget.modelOrthog) {
                                if (null != Client.clickedWidget) {
                                    continue;
                                }
                                if (Client.isMenuOpen) {
                                    continue;
                                }
                                if ((-529297769 * widget.mouseOverRedirect >= 0 || 0 != widget.mouseOverColor * 1614966389) && (-2063363905 * MouseHandler.MouseHandler_x >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19)) {
                                    if (widget.mouseOverRedirect * -529297769 >= 0) {
                                        MidiPcmStream.mousedOverWidgetIf1 = array[widget.mouseOverRedirect * -529297769];
                                    }
                                    else {
                                        MidiPcmStream.mousedOverWidgetIf1 = widget;
                                    }
                                }
                                if (8 == 883712245 * widget.type && MouseHandler.MouseHandler_x * -2063363905 >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19) {
                                    class130.field1274 = widget;
                                }
                                if (widget.scrollHeight * -1273374131 > widget.height * 1473950221) {
                                    class166.method944(widget, n8 + widget.width * -794961409, n9, widget.height * 1473950221, widget.scrollHeight * -1273374131, -2063363905 * MouseHandler.MouseHandler_x, MouseHandler.MouseHandler_y * -1224153235, (byte)10);
                                }
                            }
                            if (0 == 883712245 * widget.type) {
                                ViewportMouse.updateInterface(array, 1713081171 * widget.id, n16, n17, n18, n19, n8 - widget.scrollX * -1469632775, n9 - 1223232735 * widget.scrollY, 1843431018);
                                if (null != widget.children) {
                                    ViewportMouse.updateInterface(widget.children, widget.id * 1713081171, n16, n17, n18, n19, n8 - widget.scrollX * -1469632775, n9 - 1223232735 * widget.scrollY, 1541495534);
                                }
                                final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
                                if (interfaceParent != null) {
                                    if (0 == -1702664641 * interfaceParent.type && -2063363905 * MouseHandler.MouseHandler_x >= n16 && MouseHandler.MouseHandler_y * -1224153235 >= n17 && MouseHandler.MouseHandler_x * -2063363905 < n18 && -1224153235 * MouseHandler.MouseHandler_y < n19 && !Client.isMenuOpen) {
                                        for (ScriptEvent scriptEvent30 = (ScriptEvent)Client.scriptEvents.last(); null != scriptEvent30; scriptEvent30 = (ScriptEvent)Client.scriptEvents.previous()) {
                                            if (scriptEvent30.field849) {
                                                scriptEvent30.hw();
                                                scriptEvent30.dragTarget.isHidden = false;
                                            }
                                        }
                                        if (class96.widgetDragDuration * 1993201275 == 0) {
                                            Client.clickedWidget = null;
                                            Client.clickedWidgetParent = null;
                                        }
                                        if (!Client.isMenuOpen) {
                                            class156.addCancelMenuEntry(-742935767);
                                        }
                                    }
                                    ReflectionCheck.updateRootInterface(944864121 * interfaceParent.group, n16, n17, n18, n19, n8, n9, -631543188);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    static final void acw(final int n) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        final Widget[] array = VerticalAlignment.Widget_interfaceComponents[n];
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (widget != null) {
                widget.modelFrame = 0;
                widget.modelFrameCycle = 0;
            }
        }
    }
    
    static void acz() {
        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); null != interfaceParent; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
            final int n = interfaceParent.group * -26139615;
            if (SoundSystem.loadInterface(n, 1376777516)) {
                boolean modelOrthog = true;
                final Widget[] array = VerticalAlignment.Widget_interfaceComponents[n];
                for (int i = 0; i < array.length; ++i) {
                    if (array[i] != null) {
                        modelOrthog = array[i].modelOrthog;
                        break;
                    }
                }
                if (!modelOrthog) {
                    final Widget vmethod3380 = class165.vmethod3380((int)interfaceParent.hr, (byte)5);
                    if (vmethod3380 != null) {
                        class144.invalidateWidget(vmethod3380, -1592143822);
                    }
                }
            }
        }
    }
    
    final void abu() {
        class144.invalidateWidget(Client.clickedWidget, -1295497134);
        class96.widgetDragDuration += 873371827;
        if (Client.field622 && Client.field540) {
            final int n = -2063363905 * MouseHandler.MouseHandler_x;
            final int n2 = MouseHandler.MouseHandler_y * -1224153235;
            int n3 = n - -1789924433 * Client.widgetClickX;
            int n4 = n2 - Client.widgetClickY * 1902621241;
            if (n3 < Client.field495 * 1084046795) {
                n3 = 1084046795 * Client.field495;
            }
            if (n3 + Client.clickedWidget.width * -794961409 > -794961409 * Client.clickedWidgetParent.width + 1084046795 * Client.field495) {
                n3 = 1084046795 * Client.field495 + Client.clickedWidgetParent.width * -794961409 - -794961409 * Client.clickedWidget.width;
            }
            if (n4 < Client.field542 * -746723443) {
                n4 = Client.field542 * -746723443;
            }
            if (n4 + 1473950221 * Client.clickedWidget.height > Client.field542 * -746723443 + Client.clickedWidgetParent.height * 1473950221) {
                n4 = -746723443 * Client.field542 + Client.clickedWidgetParent.height * 1473950221 - Client.clickedWidget.height * 1473950221;
            }
            final int n5 = n3 - 565355253 * Client.field544;
            final int n6 = n4 - Client.field545 * 1136091355;
            final int n7 = Client.clickedWidget.dragZoneSize * 154898553;
            if (1993201275 * class96.widgetDragDuration > Client.clickedWidget.dragThreshold * -1849043027 && (n5 > n7 || n5 < -n7 || n6 > n7 || n6 < -n7)) {
                Client.isDraggingWidget = true;
            }
            final int n8 = n3 - Client.field495 * 1084046795 + Client.clickedWidgetParent.scrollX * -1469632775;
            final int n9 = Client.clickedWidgetParent.scrollY * 1223232735 + (n4 - -746723443 * Client.field542);
            if (null != Client.clickedWidget.onDrag && Client.isDraggingWidget) {
                final ScriptEvent scriptEvent = new ScriptEvent();
                scriptEvent.dragTarget = Client.clickedWidget;
                scriptEvent.mouseX = n8 * -2011830585;
                scriptEvent.mouseY = 1126405829 * n9;
                scriptEvent.args = Client.clickedWidget.onDrag;
                HealthBarUpdate.set(scriptEvent, (byte)15);
            }
            if (0 == 114417019 * MouseHandler.MouseHandler_currentButton) {
                if (Client.isDraggingWidget) {
                    if (null != Client.clickedWidget.onDragComplete) {
                        final ScriptEvent scriptEvent2 = new ScriptEvent();
                        scriptEvent2.dragTarget = Client.clickedWidget;
                        scriptEvent2.mouseX = -2011830585 * n8;
                        scriptEvent2.mouseY = 1126405829 * n9;
                        scriptEvent2.widget = Client.draggedOnWidget;
                        scriptEvent2.args = Client.clickedWidget.onDragComplete;
                        HealthBarUpdate.set(scriptEvent2, (byte)(-11));
                    }
                    if (null != Client.draggedOnWidget) {
                        Widget widget = Client.clickedWidget;
                        final int method1071 = StructComposition.method1071(KeyHandler.getWidgetFlags(widget, 1496512148), -926446193);
                        Widget widget2 = null;
                        Label_0131: {
                            if (method1071 == 0) {
                                widget2 = null;
                            }
                            else {
                                for (int i = 0; i < method1071; ++i) {
                                    widget = class165.vmethod3380(913615679 * widget.parentId, (byte)5);
                                    if (widget == null) {
                                        widget2 = null;
                                        break Label_0131;
                                    }
                                }
                                widget2 = widget;
                            }
                        }
                        if (null != widget2) {
                            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2515, Client.packetWriter.isaacCipher, (short)(-8021));
                            packetBufferNode.packetBuffer.bu(-2006098851 * Client.draggedOnWidget.itemId, (byte)114);
                            packetBufferNode.packetBuffer.es(Client.draggedOnWidget.id * 1713081171, -604065252);
                            packetBufferNode.packetBuffer.bu(55577617 * Client.draggedOnWidget.childIndex, (byte)121);
                            packetBufferNode.packetBuffer.bu(Client.clickedWidget.childIndex * 55577617, (byte)27);
                            packetBufferNode.packetBuffer.el(1713081171 * Client.clickedWidget.id, -437883978);
                            packetBufferNode.packetBuffer.cq(Client.clickedWidget.itemId * -2006098851, (byte)(-19));
                            Client.packetWriter.addNode(packetBufferNode, 414135591);
                        }
                    }
                }
                else if (fk(this, -1679837219)) {
                    dz(this, Client.field544 * 565355253 + -1789924433 * Client.widgetClickX, Client.widgetClickY * 1902621241 + Client.field545 * 1136091355, 1018516557);
                }
                else if (Client.menuOptionsCount * 730065501 > 0) {
                    class204.method1136(565355253 * Client.field544 + Client.widgetClickX * -1789924433, 1136091355 * Client.field545 + Client.widgetClickY * 1902621241, -1052930105);
                }
                Client.clickedWidget = null;
            }
            return;
        }
        if (1993201275 * class96.widgetDragDuration > 1) {
            if (!Client.isDraggingWidget && Client.menuOptionsCount * 730065501 > 0) {
                class204.method1136(Client.field544 * 565355253 + Client.widgetClickX * -1789924433, Client.field545 * 1136091355 + Client.widgetClickY * 1902621241, -1052930105);
            }
            Client.clickedWidget = null;
        }
    }
    
    static final void acq(int max) {
        max = Math.max(Math.min(max, 100), 0);
        max = 100 - max;
        ScriptFrame.method341(0.5f + max / 200.0f);
    }
    
    static final void ada(final int n) {
        ClientPacket.process((byte)2);
        class18.method65(781936937);
        final int n2 = GraphicsDefaults.decode(n, -904500274).type * -633965932;
        if (n2 == 0) {
            return;
        }
        final int n3 = Varps.Varps_main[n];
        if (n2 != 0) {
            if (n3 != 0) {
                ScriptFrame.method341(0.9);
            }
            if (2 == n3) {
                ScriptFrame.method341(0.8);
            }
            if (3 == n3) {
                ScriptFrame.method341(0.7);
            }
            if (4 == n3) {
                ScriptFrame.method341(0.6);
            }
        }
        if (3 == n2) {
            if (n3 == 0) {
                class86.method502(255, (byte)(-14));
            }
            if (n3 != 0) {
                class86.method502(-1855658049, (byte)(-92));
            }
            if (2 == n3) {
                class86.method502(128, (byte)(-30));
            }
            if (n3 == 3) {
                class86.method502(2093915848, (byte)(-21));
            }
            if (4 == n3) {
                class86.method502(0, (byte)(-83));
            }
        }
        if (n2 == 4) {
            if (n3 == 0) {
                class130.method764(127, -158357216);
            }
            if (n3 != 0) {
                class130.method764(-1037225426, 2019066410);
            }
            if (n3 == 2) {
                class130.method764(-988958128, -1385170848);
            }
            if (3 == n3) {
                class130.method764(32, 2025589156);
            }
            if (n3 == 4) {
                class130.method764(0, 883787872);
            }
        }
        if (n2 == 5) {
            Client.leftClickOpensMenu = (n3 != 0);
        }
        if (6 == n2) {
            Client.chatEffects = n3 * 1746693153;
        }
        if (n2 == 9) {}
        if (10 == n2) {
            if (n3 == 0) {
                class135.method783(127, (byte)0);
            }
            if (n3 != 0) {
                class135.method783(1425534008, (byte)0);
            }
            if (n3 == 2) {
                class135.method783(64, (byte)0);
            }
            if (n3 == 3) {
                class135.method783(1954826915, (byte)0);
            }
            if (4 == n3) {
                class135.method783(0, (byte)0);
            }
        }
        if (17 == n2) {
            Client.followerIndex = (n3 & 0xA91AD43A) * -612282474;
        }
        if (n2 == 18) {
            Client.playerAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)(-33)), n3, (short)173);
            if (Client.playerAttackOption == null) {
                Client.playerAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
        if (19 == n2) {
            if (-1 == n3) {
                Client.combatTargetPlayerIndex = 1317633084;
            }
            else {
                Client.combatTargetPlayerIndex = 1035820595 * (n3 & 0x833F6541);
            }
        }
        if (n2 == 22) {
            Client.npcAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)(-78)), n3, (short)173);
            if (null == Client.npcAttackOption) {
                Client.npcAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
    }
    
    static final InterfaceParent adc(final int n, final int n2, final int n3) {
        final InterfaceParent interfaceParent = new InterfaceParent();
        interfaceParent.group = n2 * 111476425;
        interfaceParent.type = 100799 * n3;
        Client.interfaceParents.put(interfaceParent, n);
        ZoneOperation.Widget_resetModelFrames(n2, 1247292228);
        final Widget vmethod3380 = class165.vmethod3380(n, (byte)5);
        class144.invalidateWidget(vmethod3380, -1545605053);
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -891257531);
            Client.meslayerContinueWidget = null;
        }
        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[n >> 16], vmethod3380, false, (byte)118);
        class12.runWidgetOnLoadListener(n2, (byte)119);
        if (-1 != Client.rootInterface * -896157613) {
            class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 1, (byte)63);
        }
        return interfaceParent;
    }
    
    static final void acr(int max) {
        max = Math.max(Math.min(max, 100), 0);
        max = 100 - max;
        ScriptFrame.method341(0.5f + max / 200.0f);
    }
    
    static final boolean ade(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 205) {
            Client.logoutTimer = 719725026;
            return true;
        }
        if (n >= 300 && n <= 313) {
            Client.playerAppearance.changeAppearance((n - 300) / 2, (n & 0x1) == 0x1, 487019119);
        }
        if (n >= 314 && n <= -379627768) {
            PlayerComposition.ok(Client.playerAppearance, (n - 623527348) / 2, (n & 0x1) == 0x1, -2101583398);
        }
        if (324 == n) {
            Client.playerAppearance.method1694(0, -517099421);
        }
        if (-1531029928 == n) {
            Client.playerAppearance.method1694(1, 1314507624);
        }
        if (n == 1135889377) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2468, Client.packetWriter.isaacCipher, (short)(-2723));
            PlayerComposition.yo(Client.playerAppearance, packetBufferNode.packetBuffer, (byte)75);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
            return true;
        }
        return false;
    }
    
    static final void ach(final Widget[] array, final int n) {
        for (int i = 0; i < array.length; ++i) {
            final Widget widget = array[i];
            if (null != widget) {
                if (n == widget.parentId * 913615679) {
                    if (!widget.modelOrthog || !class393.isComponentHidden(widget, (byte)1)) {
                        if (0 == 883712245 * widget.type) {
                            if (!widget.modelOrthog && class393.isComponentHidden(widget, (byte)1) && widget != MidiPcmStream.mousedOverWidgetIf1) {
                                continue;
                            }
                            TileItem.drawModelComponents(array, widget.id * 1713081171, (byte)36);
                            if (null != widget.children) {
                                TileItem.drawModelComponents(widget.children, 1713081171 * widget.id, (byte)34);
                            }
                            final InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.at(widget.id * 1713081171);
                            if (interfaceParent != null) {
                                final int n2 = 944864121 * interfaceParent.group;
                                if (SoundSystem.loadInterface(n2, 1376777516)) {
                                    TileItem.drawModelComponents(VerticalAlignment.Widget_interfaceComponents[n2], -1, (byte)59);
                                }
                            }
                        }
                        if (6 == widget.type * 883712245) {
                            if (-1 != widget.sequenceId * -1526544909 || widget.sequenceId2 * -717228843 != -1) {
                                int n3;
                                if (class452.runCs1(widget, -1900378490)) {
                                    n3 = widget.sequenceId2 * -717228843;
                                }
                                else {
                                    n3 = widget.sequenceId * -1526544909;
                                }
                                if (n3 != -1) {
                                    final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n3, (byte)101);
                                    if (!spotAnimationDefinition_get.isCachedModelIdSet(735175965)) {
                                        final Widget widget2 = widget;
                                        widget2.modelFrameCycle += Client.field432 * 1742890489;
                                        while (1438245367 * widget.modelFrameCycle > spotAnimationDefinition_get.frameLengths[widget.modelFrame * 1575517389]) {
                                            final Widget widget3 = widget;
                                            widget3.modelFrameCycle -= spotAnimationDefinition_get.frameLengths[widget.modelFrame * 1575517389] * -1830604857;
                                            final Widget widget4 = widget;
                                            widget4.modelFrame -= 1991520251;
                                            if (widget.modelFrame * 1575517389 >= spotAnimationDefinition_get.frameIds.length) {
                                                final Widget widget5 = widget;
                                                widget5.modelFrame -= -149229203 * spotAnimationDefinition_get.frameCount;
                                                if (1575517389 * widget.modelFrame < 0 || 1575517389 * widget.modelFrame >= spotAnimationDefinition_get.frameIds.length) {
                                                    widget.modelFrame = 0;
                                                }
                                            }
                                            class144.invalidateWidget(widget, -1427679518);
                                        }
                                    }
                                    else {
                                        final Widget widget6 = widget;
                                        widget6.modelFrame += 1198415163 * Client.field432;
                                        final int method1128 = spotAnimationDefinition_get.method1128(1985471602);
                                        if (widget.modelFrame * 1575517389 >= method1128) {
                                            final Widget widget7 = widget;
                                            widget7.modelFrame -= -149229203 * spotAnimationDefinition_get.frameCount;
                                            if (widget.modelFrame * 1575517389 < 0 || 1575517389 * widget.modelFrame >= method1128) {
                                                widget.modelFrame = 0;
                                            }
                                        }
                                        class144.invalidateWidget(widget, -1586270874);
                                    }
                                }
                            }
                            if (0 != -238796869 * widget.rotationKey && !widget.modelOrthog) {
                                final int n4 = widget.rotationKey * -238796869 >> 16;
                                final int n5 = widget.rotationKey * -238796869 << 16 >> 16;
                                final int n6 = n4 * (-1795081153 * Client.field432);
                                final int n7 = n5 * (-1795081153 * Client.field432);
                                widget.modelAngleX = -142910041 * (widget.modelAngleX * 797932055 + n6 & 0x7FF);
                                widget.modelAngleY = (widget.modelAngleY * -480949115 + n7 & 0x7FF) * -230241203;
                                class144.invalidateWidget(widget, -1630239517);
                            }
                        }
                    }
                }
            }
        }
    }
    
    static final void abx(final int n, final int n2) {
        if (!SoundSystem.loadInterface(n, 1376777516)) {
            return;
        }
        class143.runComponentCloseListeners(VerticalAlignment.Widget_interfaceComponents[n], n2, (byte)81);
    }
    
    static final int acd() {
        return -467497979 - Math.round(200.0f * ((float)class20.clientPreferences.getBrightness(1954922392) - 0.5f));
    }
    
    public static void acg(final Widget widget) {
        if (widget != null && 207148199 * Client.field527 == -1197721959 * widget.cycle) {
            Client.field573[-1619081019 * widget.rootIndex] = true;
        }
    }
    
    static final int aci() {
        return 828484853 - Math.round(200.0f * ((float)class20.clientPreferences.getBrightness(1496108723) - 0.5f));
    }
    
    static final void adw(final InterfaceParent interfaceParent, final boolean b) {
        final int n = -1899450916 * interfaceParent.group;
        final int n2 = (int)interfaceParent.hr;
        interfaceParent.hw();
        if (b) {
            if (-1 != n) {
                if (class264.Widget_loadedInterfaces[n]) {
                    UserComparator3.Widget_archive.clearFilesGroup(n, (byte)40);
                    if (VerticalAlignment.Widget_interfaceComponents[n] != null) {
                        for (int i = 0; i < VerticalAlignment.Widget_interfaceComponents[n].length; ++i) {
                            if (VerticalAlignment.Widget_interfaceComponents[n][i] != null) {
                                VerticalAlignment.Widget_interfaceComponents[n][i] = null;
                            }
                        }
                        VerticalAlignment.Widget_interfaceComponents[n] = null;
                        class264.Widget_loadedInterfaces[n] = false;
                    }
                }
            }
        }
        for (IntegerNode integerNode = (IntegerNode)Client.widgetFlags.first(); integerNode != null; integerNode = (IntegerNode)Client.widgetFlags.next()) {
            if ((integerNode.hr >> 48 & 0xFFFFL) == n) {
                integerNode.hw();
            }
        }
        final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
        if (null != vmethod3380) {
            class144.invalidateWidget(vmethod3380, -543992161);
        }
        if (-896157613 * Client.rootInterface != -1) {
            class127.runIntfCloseListeners(832076548 * Client.rootInterface, 1, (byte)63);
        }
    }
    
    static final InterfaceParent adl(final int n, final int n2, final int n3) {
        final InterfaceParent interfaceParent = new InterfaceParent();
        interfaceParent.group = n2 * -1792721858;
        interfaceParent.type = 100799 * n3;
        Client.interfaceParents.put(interfaceParent, n);
        ZoneOperation.Widget_resetModelFrames(n2, 1615539611);
        final Widget vmethod3380 = class165.vmethod3380(n, (byte)5);
        class144.invalidateWidget(vmethod3380, -1519735049);
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -1772179042);
            Client.meslayerContinueWidget = null;
        }
        WallDecoration.revalidateWidgetScroll(VerticalAlignment.Widget_interfaceComponents[n >> 16], vmethod3380, false, (byte)122);
        class12.runWidgetOnLoadListener(n2, (byte)124);
        if (-1 != Client.rootInterface * -1666376030) {
            class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 1, (byte)63);
        }
        return interfaceParent;
    }
    
    static int aen(final Widget widget) {
        final IntegerNode integerNode = (IntegerNode)Client.widgetFlags.at(widget.childIndex * 55577617 + ((long)(1713081171 * widget.id) << -1441497970));
        if (integerNode != null) {
            return integerNode.integer;
        }
        return widget.flags * 1652991301;
    }
    
    static final void adq(final InterfaceParent interfaceParent, final boolean b) {
        final int n = 944864121 * interfaceParent.group;
        final int n2 = (int)interfaceParent.hr;
        interfaceParent.hw();
        if (b) {
            if (-1 != n) {
                if (class264.Widget_loadedInterfaces[n]) {
                    UserComparator3.Widget_archive.clearFilesGroup(n, (byte)(-34));
                    if (VerticalAlignment.Widget_interfaceComponents[n] != null) {
                        for (int i = 0; i < VerticalAlignment.Widget_interfaceComponents[n].length; ++i) {
                            if (VerticalAlignment.Widget_interfaceComponents[n][i] != null) {
                                VerticalAlignment.Widget_interfaceComponents[n][i] = null;
                            }
                        }
                        VerticalAlignment.Widget_interfaceComponents[n] = null;
                        class264.Widget_loadedInterfaces[n] = false;
                    }
                }
            }
        }
        for (IntegerNode integerNode = (IntegerNode)Client.widgetFlags.first(); integerNode != null; integerNode = (IntegerNode)Client.widgetFlags.next()) {
            if ((integerNode.hr >> 48 & 0xFFFFL) == n) {
                integerNode.hw();
            }
        }
        final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
        if (null != vmethod3380) {
            class144.invalidateWidget(vmethod3380, -1961043890);
        }
        if (-896157613 * Client.rootInterface != -1) {
            class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 1, (byte)63);
        }
    }
    
    static final void aep(final int n, final int n2, final boolean b) {
        if (Client.currentClanChannels[n] == null) {
            return;
        }
        if (n2 >= 0 && n2 < Client.currentClanChannels[n].method898(755692750)) {
            final ClanChannelMember clanChannelMember = Client.currentClanChannels[n].members.get(n2);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2543, Client.packetWriter.isaacCipher, (short)(-6177));
            packetBufferNode.packetBuffer.bf(4 + DynamicObject.stringCp1252NullTerminatedByteSize(clanChannelMember.username.getName(-710264960), (byte)23), (byte)94);
            packetBufferNode.packetBuffer.bf(n, (byte)47);
            packetBufferNode.packetBuffer.cq(n2, (byte)(-21));
            packetBufferNode.packetBuffer.bp(b, 614283261);
            packetBufferNode.packetBuffer.ce(clanChannelMember.username.getName(-710264960), -1801977097);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
    }
    
    static final void adv() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2532, Client.packetWriter.isaacCipher, (short)(-31833)), 414135591);
        Interpreter.field704 = true;
        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
            if (0 == -1702664641 * interfaceParent.type || interfaceParent.type * -1702664641 == 3) {
                class357.closeInterface(interfaceParent, true, 1201366475);
            }
        }
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -2114308070);
            Client.meslayerContinueWidget = null;
        }
        Interpreter.field704 = false;
    }
    
    static final boolean ady(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 205) {
            Client.logoutTimer = 719725026;
            return true;
        }
        if (n >= 300 && n <= -354770653) {
            Client.playerAppearance.changeAppearance((n - 357530622) / 2, (n & 0x1) == 0x1, -1980441264);
        }
        if (n >= 314 && n <= 644251016) {
            PlayerComposition.ok(Client.playerAppearance, (n + 1568862746) / 2, (n & 0x1) == 0x1, -1264994601);
        }
        if (1942407251 == n) {
            Client.playerAppearance.method1694(0, 1252377025);
        }
        if (325 == n) {
            Client.playerAppearance.method1694(1, 1285423517);
        }
        if (n == 1863913437) {
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2468, Client.packetWriter.isaacCipher, (short)(-4198));
            PlayerComposition.yo(Client.playerAppearance, packetBufferNode.packetBuffer, (byte)83);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
            return true;
        }
        return false;
    }
    
    static final void adn(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 324) {
            if (-1 == Client.field639 * -1563612739) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = 1885844547 * widget.spriteId;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field639 * -272472859;
            }
            else {
                widget.spriteId2 = -1012252929 * Client.field640;
            }
            return;
        }
        if (n == 325) {
            if (-1 == -1563612739 * Client.field639) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = widget.spriteId * 1885844547;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field640 * -1012252929;
            }
            else {
                widget.spriteId2 = -272472859 * Client.field639;
            }
            return;
        }
        if (327 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 0;
            return;
        }
        if (328 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 509431749;
        }
    }
    
    static final void adi(int min) {
        min = Math.min(Math.max(min, 0), 127);
        class20.clientPreferences.setAreaSoundEffectsVolume(min, 95238931);
    }
    
    static final void aeb(final String s) {
        if (UserComparator5.friendsChat == null) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2550, Client.packetWriter.isaacCipher, (short)(-10350));
        packetBufferNode.packetBuffer.bf(DynamicObject.stringCp1252NullTerminatedByteSize(s, (byte)(-12)), (byte)2);
        packetBufferNode.packetBuffer.ce(s, -1787045457);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void adm(final int n) {
        ClientPacket.process((byte)2);
        class18.method65(-59624320);
        final int n2 = GraphicsDefaults.decode(n, -1076843422).type * -1911979431;
        if (n2 == 0) {
            return;
        }
        final int n3 = Varps.Varps_main[n];
        if (n2 != 0) {
            if (n3 != 0) {
                ScriptFrame.method341(0.9);
            }
            if (2 == n3) {
                ScriptFrame.method341(0.8);
            }
            if (3 == n3) {
                ScriptFrame.method341(0.7);
            }
            if (4 == n3) {
                ScriptFrame.method341(0.6);
            }
        }
        if (3 == n2) {
            if (n3 == 0) {
                class86.method502(255, (byte)(-76));
            }
            if (n3 != 0) {
                class86.method502(192, (byte)(-50));
            }
            if (2 == n3) {
                class86.method502(128, (byte)(-96));
            }
            if (n3 == 3) {
                class86.method502(64, (byte)(-84));
            }
            if (4 == n3) {
                class86.method502(0, (byte)(-8));
            }
        }
        if (n2 == 4) {
            if (n3 == 0) {
                class130.method764(127, -631579937);
            }
            if (n3 != 0) {
                class130.method764(96, -640421573);
            }
            if (n3 == 2) {
                class130.method764(64, 617522895);
            }
            if (3 == n3) {
                class130.method764(32, 126652345);
            }
            if (n3 == 4) {
                class130.method764(0, 1597463119);
            }
        }
        if (n2 == 5) {
            Client.leftClickOpensMenu = (n3 != 0);
        }
        if (6 == n2) {
            Client.chatEffects = n3 * 1746693153;
        }
        if (n2 == 9) {}
        if (10 == n2) {
            if (n3 == 0) {
                class135.method783(127, (byte)0);
            }
            if (n3 != 0) {
                class135.method783(96, (byte)0);
            }
            if (n3 == 2) {
                class135.method783(64, (byte)0);
            }
            if (n3 == 3) {
                class135.method783(32, (byte)0);
            }
            if (4 == n3) {
                class135.method783(0, (byte)0);
            }
        }
        if (17 == n2) {
            Client.followerIndex = (n3 & 0xFFFF) * -1296642255;
        }
        if (n2 == 18) {
            Client.playerAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)(-47)), n3, (short)173);
            if (Client.playerAttackOption == null) {
                Client.playerAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
        if (19 == n2) {
            if (-1 == n3) {
                Client.combatTargetPlayerIndex = -1035820595;
            }
            else {
                Client.combatTargetPlayerIndex = 1035820595 * (n3 & 0x7FF);
            }
        }
        if (n2 == 22) {
            Client.npcAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)(-80)), n3, (short)173);
            if (null == Client.npcAttackOption) {
                Client.npcAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
    }
    
    static boolean aei(final Widget widget) {
        return widget.spriteTiling;
    }
    
    static final void aek() {
        class124.method742((byte)5);
        if (null != UserComparator5.friendsChat) {
            UserComparator5.friendsChat.invalidateIgnoreds((byte)(-32));
        }
    }
    
    static final void ado() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2532, Client.packetWriter.isaacCipher, (short)(-7721)), 414135591);
        Interpreter.field704 = true;
        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
            if (0 == -1702664641 * interfaceParent.type || interfaceParent.type * -1702664641 == 3) {
                class357.closeInterface(interfaceParent, true, 212980686);
            }
        }
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -802939837);
            Client.meslayerContinueWidget = null;
        }
        Interpreter.field704 = false;
    }
    
    static final void adu(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 324) {
            if (-1 == Client.field639 * -1563612739) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = 1885844547 * widget.spriteId;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field639 * -272472859;
            }
            else {
                widget.spriteId2 = -1012252929 * Client.field640;
            }
            return;
        }
        if (n == 325) {
            if (-1 == -1563612739 * Client.field639) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = widget.spriteId * 1885844547;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field640 * -1012252929;
            }
            else {
                widget.spriteId2 = -272472859 * Client.field639;
            }
            return;
        }
        if (327 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 0;
            return;
        }
        if (328 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 509431749;
        }
    }
    
    static final void aeg(final int n, final int n2) {
        if (Client.currentClanChannels[n] == null) {
            return;
        }
        if (n2 < 0 || n2 >= Client.currentClanChannels[n].method898(-281061864)) {
            return;
        }
        final ClanChannelMember clanChannelMember = Client.currentClanChannels[n].members.get(n2);
        if (-1 != clanChannelMember.rank) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2514, Client.packetWriter.isaacCipher, (short)(-2996));
        packetBufferNode.packetBuffer.bf(3 + DynamicObject.stringCp1252NullTerminatedByteSize(clanChannelMember.username.getName(-710264960), (byte)(-21)), (byte)107);
        packetBufferNode.packetBuffer.bf(n, (byte)22);
        packetBufferNode.packetBuffer.cq(n2, (byte)(-42));
        packetBufferNode.packetBuffer.ce(clanChannelMember.username.getName(-710264960), -1565300870);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void aej() {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2508, Client.packetWriter.isaacCipher, (short)(-7183));
        packetBufferNode.packetBuffer.bf(0, (byte)52);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void adg(final int n) {
        ClientPacket.process((byte)2);
        class18.method65(-1733153735);
        final int n2 = GraphicsDefaults.decode(n, -1205072719).type * -1911979431;
        if (n2 == 0) {
            return;
        }
        final int n3 = Varps.Varps_main[n];
        if (n2 != 0) {
            if (n3 != 0) {
                ScriptFrame.method341(0.9);
            }
            if (2 == n3) {
                ScriptFrame.method341(0.8);
            }
            if (3 == n3) {
                ScriptFrame.method341(0.7);
            }
            if (4 == n3) {
                ScriptFrame.method341(0.6);
            }
        }
        if (3 == n2) {
            if (n3 == 0) {
                class86.method502(-668858555, (byte)(-107));
            }
            if (n3 != 0) {
                class86.method502(192, (byte)(-128));
            }
            if (2 == n3) {
                class86.method502(390073537, (byte)(-110));
            }
            if (n3 == 3) {
                class86.method502(64, (byte)(-6));
            }
            if (4 == n3) {
                class86.method502(0, (byte)(-88));
            }
        }
        if (n2 == 4) {
            if (n3 == 0) {
                class130.method764(1811615938, 1531022529);
            }
            if (n3 != 0) {
                class130.method764(-1102277339, 548771544);
            }
            if (n3 == 2) {
                class130.method764(64, -202473569);
            }
            if (3 == n3) {
                class130.method764(32, 1556861981);
            }
            if (n3 == 4) {
                class130.method764(0, 1947695804);
            }
        }
        if (n2 == 5) {
            Client.leftClickOpensMenu = (n3 != 0);
        }
        if (6 == n2) {
            Client.chatEffects = n3 * 1746693153;
        }
        if (n2 == 9) {}
        if (10 == n2) {
            if (n3 == 0) {
                class135.method783(127, (byte)0);
            }
            if (n3 != 0) {
                class135.method783(96, (byte)0);
            }
            if (n3 == 2) {
                class135.method783(231928158, (byte)0);
            }
            if (n3 == 3) {
                class135.method783(32, (byte)0);
            }
            if (4 == n3) {
                class135.method783(0, (byte)0);
            }
        }
        if (17 == n2) {
            Client.followerIndex = (n3 & 0xF27CD6C5) * -1714620788;
        }
        if (n2 == 18) {
            Client.playerAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)81), n3, (short)173);
            if (Client.playerAttackOption == null) {
                Client.playerAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
        if (19 == n2) {
            if (-1 == n3) {
                Client.combatTargetPlayerIndex = -1035820595;
            }
            else {
                Client.combatTargetPlayerIndex = 1185788495 * (n3 & 0x7FF);
            }
        }
        if (n2 == 22) {
            Client.npcAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)33), n3, (short)173);
            if (null == Client.npcAttackOption) {
                Client.npcAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
    }
    
    static int aed(final Widget widget) {
        final IntegerNode integerNode = (IntegerNode)Client.widgetFlags.at(widget.childIndex * 55577617 + ((long)(1713081171 * widget.id) << 32));
        if (integerNode != null) {
            return integerNode.integer;
        }
        return widget.flags * -1748822116;
    }
    
    static final void aeh(final Widget widget, final int n, final int n2, final int n3) {
        final SpriteMask vn = Widget.vn(widget, false, (byte)30);
        if (vn == null) {
            return;
        }
        if (Client.minimapState * 1383336963 < 3) {
            ChatChannel.compass.drawRotatedMaskedCenteredAround(n, n2, vn.width * 1484188043, 939947663 * vn.height, 25, 25, 704283033 * Client.camAngleY, 256, vn.xStarts, vn.xWidths);
        }
        else {
            Rasterizer2D.Rasterizer2D_fillMaskedRectangle(n, n2, 0, vn.xStarts, vn.xWidths);
        }
    }
    
    static final void adf(final int n) {
        ClientPacket.process((byte)2);
        class18.method65(-1244315075);
        final int n2 = GraphicsDefaults.decode(n, -1963022575).type * -1911979431;
        if (n2 == 0) {
            return;
        }
        final int n3 = Varps.Varps_main[n];
        if (n2 != 0) {
            if (n3 != 0) {
                ScriptFrame.method341(0.9);
            }
            if (2 == n3) {
                ScriptFrame.method341(0.8);
            }
            if (3 == n3) {
                ScriptFrame.method341(0.7);
            }
            if (4 == n3) {
                ScriptFrame.method341(0.6);
            }
        }
        if (3 == n2) {
            if (n3 == 0) {
                class86.method502(255, (byte)(-54));
            }
            if (n3 != 0) {
                class86.method502(192, (byte)(-104));
            }
            if (2 == n3) {
                class86.method502(128, (byte)(-1));
            }
            if (n3 == 3) {
                class86.method502(64, (byte)(-76));
            }
            if (4 == n3) {
                class86.method502(0, (byte)(-69));
            }
        }
        if (n2 == 4) {
            if (n3 == 0) {
                class130.method764(127, 1915333318);
            }
            if (n3 != 0) {
                class130.method764(96, -1685584920);
            }
            if (n3 == 2) {
                class130.method764(64, -222657698);
            }
            if (3 == n3) {
                class130.method764(32, 794622681);
            }
            if (n3 == 4) {
                class130.method764(0, 1887309032);
            }
        }
        if (n2 == 5) {
            Client.leftClickOpensMenu = (n3 != 0);
        }
        if (6 == n2) {
            Client.chatEffects = n3 * 1746693153;
        }
        if (n2 == 9) {}
        if (10 == n2) {
            if (n3 == 0) {
                class135.method783(127, (byte)0);
            }
            if (n3 != 0) {
                class135.method783(96, (byte)0);
            }
            if (n3 == 2) {
                class135.method783(64, (byte)0);
            }
            if (n3 == 3) {
                class135.method783(32, (byte)0);
            }
            if (4 == n3) {
                class135.method783(0, (byte)0);
            }
        }
        if (17 == n2) {
            Client.followerIndex = (n3 & 0xFFFF) * -1296642255;
        }
        if (n2 == 18) {
            Client.playerAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)115), n3, (short)173);
            if (Client.playerAttackOption == null) {
                Client.playerAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
        if (19 == n2) {
            if (-1 == n3) {
                Client.combatTargetPlayerIndex = -1035820595;
            }
            else {
                Client.combatTargetPlayerIndex = 1035820595 * (n3 & 0x7FF);
            }
        }
        if (n2 == 22) {
            Client.npcAttackOption = (AttackOption)StructComposition.findEnumerated(UserComparator4.method685((byte)93), n3, (short)173);
            if (null == Client.npcAttackOption) {
                Client.npcAttackOption = AttackOption.AttackOption_dependsOnCombatLevels;
            }
        }
    }
    
    static final void ael(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        final int n5 = n4 * n4 + n3 * n3;
        if (n5 > -696380769 && n5 < 228853917) {
            final int n6 = Client.camAngleY * 704283033 & 0x710AEAC6;
            final int n7 = Rasterizer3D.Rasterizer3D_sine[n6];
            final int n8 = Rasterizer3D.Rasterizer3D_cosine[n6];
            final double atan2 = Math.atan2(n3 * n8 + n7 * n4 >> 16, n8 * n4 - n7 * n3 >> 16);
            final int n9 = spriteMask.width * -378111053 / 2 - 25;
            final int n10 = (int)(Math.sin(atan2) * n9);
            final int n11 = (int)(Math.cos(atan2) * n9);
            final int n12 = 20;
            LoginScreenAnimation.redHintArrowSprite.method2621(spriteMask.width * 1484188043 / 2 + n - n12 / 2 + n10, n2 + 252151254 * spriteMask.height / 2 - n12 / 2 - n11 - 10, n12, n12, 15, 15, atan2, 414409326);
        }
        else {
            class426.drawSpriteOnMinimap(n, n2, n3, n4, spritePixels, spriteMask, -1609285207);
        }
    }
    
    static final void aem(final String s) {
        if (s.equals("")) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2508, Client.packetWriter.isaacCipher, (short)(-12737));
        packetBufferNode.packetBuffer.bf(DynamicObject.stringCp1252NullTerminatedByteSize(s, (byte)(-12)), (byte)127);
        packetBufferNode.packetBuffer.ce(s, -1987036214);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void aeo(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        final int n5 = n4 * n4 + n3 * n3;
        if (n5 > 4225 && n5 < 90000) {
            final int n6 = Client.camAngleY * 704283033 & 0x7FF;
            final int n7 = Rasterizer3D.Rasterizer3D_sine[n6];
            final int n8 = Rasterizer3D.Rasterizer3D_cosine[n6];
            final double atan2 = Math.atan2(n3 * n8 + n7 * n4 >> 16, n8 * n4 - n7 * n3 >> 16);
            final int n9 = spriteMask.width * 1484188043 / 2 - 25;
            final int n10 = (int)(Math.sin(atan2) * n9);
            final int n11 = (int)(Math.cos(atan2) * n9);
            final int n12 = 20;
            LoginScreenAnimation.redHintArrowSprite.method2621(spriteMask.width * 1484188043 / 2 + n - n12 / 2 + n10, n2 + 939947663 * spriteMask.height / 2 - n12 / 2 - n11 - 10, n12, n12, 15, 15, atan2, 256);
        }
        else {
            class426.drawSpriteOnMinimap(n, n2, n3, n4, spritePixels, spriteMask, -1609285207);
        }
    }
    
    static final void aee() {
        class124.method742((byte)28);
        if (null != UserComparator5.friendsChat) {
            UserComparator5.friendsChat.invalidateIgnoreds((byte)22);
        }
    }
    
    static final void adk(final InterfaceParent interfaceParent, final boolean b) {
        final int n = 944864121 * interfaceParent.group;
        final int n2 = (int)interfaceParent.hr;
        interfaceParent.hw();
        if (b) {
            if (-1 != n) {
                if (class264.Widget_loadedInterfaces[n]) {
                    UserComparator3.Widget_archive.clearFilesGroup(n, (byte)34);
                    if (VerticalAlignment.Widget_interfaceComponents[n] != null) {
                        for (int i = 0; i < VerticalAlignment.Widget_interfaceComponents[n].length; ++i) {
                            if (VerticalAlignment.Widget_interfaceComponents[n][i] != null) {
                                VerticalAlignment.Widget_interfaceComponents[n][i] = null;
                            }
                        }
                        VerticalAlignment.Widget_interfaceComponents[n] = null;
                        class264.Widget_loadedInterfaces[n] = false;
                    }
                }
            }
        }
        for (IntegerNode integerNode = (IntegerNode)Client.widgetFlags.first(); integerNode != null; integerNode = (IntegerNode)Client.widgetFlags.next()) {
            if ((integerNode.hr >> 48 & 0xFFFFL) == n) {
                integerNode.hw();
            }
        }
        final Widget vmethod3380 = class165.vmethod3380(n2, (byte)5);
        if (null != vmethod3380) {
            class144.invalidateWidget(vmethod3380, -824697974);
        }
        if (-896157613 * Client.rootInterface != -1) {
            class127.runIntfCloseListeners(-896157613 * Client.rootInterface, 1, (byte)63);
        }
    }
    
    static final void adz() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2532, Client.packetWriter.isaacCipher, (short)(-19202)), 414135591);
        Interpreter.field704 = true;
        for (InterfaceParent interfaceParent = (InterfaceParent)Client.interfaceParents.first(); interfaceParent != null; interfaceParent = (InterfaceParent)Client.interfaceParents.next()) {
            if (0 == -1702664641 * interfaceParent.type || interfaceParent.type * -1819819159 == 3) {
                class357.closeInterface(interfaceParent, true, 817489617);
            }
        }
        if (Client.meslayerContinueWidget != null) {
            class144.invalidateWidget(Client.meslayerContinueWidget, -992561596);
            Client.meslayerContinueWidget = null;
        }
        Interpreter.field704 = false;
    }
    
    static final void adr(int min) {
        min = Math.min(Math.max(min, 0), 127);
        class20.clientPreferences.setAreaSoundEffectsVolume(min, -171498106);
    }
    
    static final void aef(final String s) {
        if (s.equals("")) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2508, Client.packetWriter.isaacCipher, (short)(-32617));
        packetBufferNode.packetBuffer.bf(DynamicObject.stringCp1252NullTerminatedByteSize(s, (byte)(-13)), (byte)52);
        packetBufferNode.packetBuffer.ce(s, -2010308864);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void aec(final int n, final int n2) {
        if (Client.currentClanChannels[n] == null) {
            return;
        }
        if (n2 < 0 || n2 >= Client.currentClanChannels[n].method898(476006504)) {
            return;
        }
        final ClanChannelMember clanChannelMember = Client.currentClanChannels[n].members.get(n2);
        if (-1 != clanChannelMember.rank) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2514, Client.packetWriter.isaacCipher, (short)(-7866));
        packetBufferNode.packetBuffer.bf(3 + DynamicObject.stringCp1252NullTerminatedByteSize(clanChannelMember.username.getName(-710264960), (byte)(-52)), (byte)30);
        packetBufferNode.packetBuffer.bf(n, (byte)49);
        packetBufferNode.packetBuffer.cq(n2, (byte)21);
        packetBufferNode.packetBuffer.ce(clanChannelMember.username.getName(-710264960), -1591874975);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static final void adt(final Widget widget) {
        final int n = widget.contentType * 1021339961;
        if (n == 324) {
            if (-1 == Client.field639 * -1563612739) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = 1885844547 * widget.spriteId;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field639 * -272472859;
            }
            else {
                widget.spriteId2 = -1012252929 * Client.field640;
            }
            return;
        }
        if (n == 325) {
            if (-1 == -1563612739 * Client.field639) {
                Client.field639 = 1781840109 * widget.spriteId2;
                Client.field640 = widget.spriteId * 1885844547;
            }
            if (1 == Client.playerAppearance.npcTransformId * 1693987821) {
                widget.spriteId2 = Client.field640 * -1012252929;
            }
            else {
                widget.spriteId2 = -272472859 * Client.field639;
            }
            return;
        }
        if (327 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 0;
            return;
        }
        if (328 == n) {
            widget.modelAngleX = 38330330;
            widget.modelAngleY = ((int)(Math.sin(Client.cycle * -1886224337 / 40.0) * 256.0) & 0x7FF) * -230241203;
            widget.modelType = 17527377;
            widget.modelId = 509431749;
        }
    }
    
    static final void adh(final Widget widget, final int n, final int n2, final int n3) {
        class323.playPcmPlayers(-440560637);
        final SpriteMask vn = Widget.vn(widget, false, (byte)(-63));
        if (null == vn) {
            return;
        }
        Rasterizer2D.Rasterizer2D_setClip(n, n2, 1484188043 * vn.width + n, vn.height * -1632651704 + n2);
        if (2 != -1788220730 * Client.minimapState && Client.minimapState * 1383336963 != 5) {
            UrlRequester.sceneMinimapSprite.drawRotatedMaskedCenteredAround(n, n2, 1484188043 * vn.width, vn.height * -1019089780, 48 + MusicPatchNode.localPlayer.br * 1144428983 / -907820197, 464 - -411750205 * MusicPatchNode.localPlayer.ep / 1017149823, 262727898 * Client.camAngleY & 0x7FF, 874861166, vn.xStarts, vn.xWidths);
            for (int i = 0; i < Client.mapIconCount * 1573101195; ++i) {
                class426.drawSpriteOnMinimap(n, n2, 4 * Client.mapIconXs[i] + 2 - MusicPatchNode.localPlayer.br * 2062060336 / 715536430, 2 + Client.mapIconYs[i] * 4 - -1629154756 * MusicPatchNode.localPlayer.ep / 32, Client.mapIcons[i], vn, -1609285207);
            }
            for (int j = 0; j < 104; ++j) {
                for (int k = 0; k < -1109080728; ++k) {
                    if (null != Client.groundItems[GameEngine.Client_plane * 542965210][j][k]) {
                        class426.drawSpriteOnMinimap(n, n2, 4 * j + 2 - -1859815737 * MusicPatchNode.localPlayer.br / 1883822861, k * 4 + 2 - -411750205 * MusicPatchNode.localPlayer.ep / 1774096868, class477.mapDotSprites[0], vn, -1609285207);
                    }
                }
            }
            for (int l = 0; l < -913755596 * Client.npcCount; ++l) {
                final NPC npc = Client.npcs[Client.npcIndices[l]];
                if (null != npc && npc.isVisible(1666539507)) {
                    NPCComposition npcComposition = npc.definition;
                    if (null != npcComposition && null != npcComposition.transforms) {
                        npcComposition = NPCComposition.ur(npcComposition, 1294935996);
                    }
                    if (npcComposition != null && npcComposition.drawMapDot && npcComposition.isInteractable) {
                        class426.drawSpriteOnMinimap(n, n2, npc.br * -2034323565 / 425901985 - MusicPatchNode.localPlayer.br * -291097353 / -1792198885, npc.ep * -411750205 / 32 - MusicPatchNode.localPlayer.ep * -295705747 / -378361279, class477.mapDotSprites[1], vn, -1609285207);
                    }
                }
            }
            final int n4 = Players.Players_count * 511521919;
            final int[] players_indices = Players.Players_indices;
            for (int n5 = 0; n5 < n4; ++n5) {
                final Player player = Client.players[players_indices[n5]];
                if (null != player && player.isVisible(1666539507) && !player.isHidden && MusicPatchNode.localPlayer != player) {
                    final int n6 = 1412485224 * player.br / -772458488 - 394814429 * MusicPatchNode.localPlayer.br / 32;
                    final int n7 = -1238948872 * player.ep / 32 - -411750205 * MusicPatchNode.localPlayer.ep / 32;
                    if (Player.yc(player, -1395654310)) {
                        class426.drawSpriteOnMinimap(n, n2, n6, n7, class477.mapDotSprites[3], vn, -1609285207);
                    }
                    else if (-55850951 * MusicPatchNode.localPlayer.team != 0 && -1070707595 * player.team != 0 && -55850951 * MusicPatchNode.localPlayer.team == -55850951 * player.team) {
                        class426.drawSpriteOnMinimap(n, n2, n6, n7, class477.mapDotSprites[4], vn, -1609285207);
                    }
                    else if (Player.zk(player, (byte)(-81))) {
                        class426.drawSpriteOnMinimap(n, n2, n6, n7, class477.mapDotSprites[5], vn, -1609285207);
                    }
                    else if (player.isClanMember((byte)0)) {
                        class426.drawSpriteOnMinimap(n, n2, n6, n7, class477.mapDotSprites[6], vn, -1609285207);
                    }
                    else {
                        class426.drawSpriteOnMinimap(n, n2, n6, n7, class477.mapDotSprites[2], vn, -1609285207);
                    }
                }
            }
            if (0 != Client.hintArrowType * 633821975 && -1886224337 * Client.cycle % 20 < 10) {
                if (1 == Client.hintArrowType * 633821975 && 920558921 * Client.hintArrowNpcIndex >= 0 && Client.hintArrowNpcIndex * 472607056 < Client.npcs.length) {
                    final NPC npc2 = Client.npcs[920558921 * Client.hintArrowNpcIndex];
                    if (null != npc2) {
                        class485.worldToMinimap(n, n2, npc2.br * 101765267 / 32 - MusicPatchNode.localPlayer.br * 1402907419 / 954843626, npc2.ep * -411750205 / 32 - -411750205 * MusicPatchNode.localPlayer.ep / 32, Players.mapMarkerSprites[1], vn, 1850494258);
                    }
                }
                if (2 == 633821975 * Client.hintArrowType) {
                    class485.worldToMinimap(n, n2, 1226072283 * Client.hintArrowX - -633406204 * WorldMapData_0.baseX + 2 - MusicPatchNode.localPlayer.br * 1144428983 / 32, 2 + (2141254371 * Client.hintArrowY - GameObject.baseY * -433087530) - -411750205 * MusicPatchNode.localPlayer.ep / 1148946652, Players.mapMarkerSprites[1], vn, 1850494258);
                }
                if (10 == -16906572 * Client.hintArrowType && Client.hintArrowPlayerIndex * -141318648 >= 0 && Client.hintArrowPlayerIndex * 561980131 < Client.players.length) {
                    final Player player2 = Client.players[Client.hintArrowPlayerIndex * 561980131];
                    if (null != player2) {
                        class485.worldToMinimap(n, n2, -126502734 * player2.br / -1015179032 - MusicPatchNode.localPlayer.br * 1127190271 / 1620939515, player2.ep * 1150299635 / 1143940167 - MusicPatchNode.localPlayer.ep * 1782936071 / 32, Players.mapMarkerSprites[1], vn, 1850494258);
                    }
                }
            }
            if (-1562736445 * Client.destinationX != 0) {
                class426.drawSpriteOnMinimap(n, n2, 2 + 724205344 * Client.destinationX - 1144428983 * MusicPatchNode.localPlayer.br / 1557778761, 2 + 1597878452 * Client.destinationY - -1974463172 * MusicPatchNode.localPlayer.ep / 1039778139, Players.mapMarkerSprites[0], vn, -1609285207);
            }
            if (!MusicPatchNode.localPlayer.isHidden) {
                Rasterizer2D.Rasterizer2D_fillRectangle(n + 1423062792 * vn.width / 2 - 1, n2 + 899893727 * vn.height / 2 - 1, 3, 3, -1890393416);
            }
        }
        else {
            Rasterizer2D.Rasterizer2D_fillMaskedRectangle(n, n2, 0, vn.xStarts, vn.xWidths);
        }
        Client.field574[n3] = true;
    }
    
    static void afr(final int n) {
        Client.oculusOrbState = -1041341417 * n;
    }
    
    static String afu(final Widget widget) {
        if (class195.method1052(KeyHandler.getWidgetFlags(widget, 2047311683), 1596249370) == 0) {
            return null;
        }
        if (widget.text2 == null || widget.text2.trim().length() == 0) {
            return null;
        }
        return widget.text2;
    }
    
    @Override
    public Username afo() {
        return (null != MusicPatchNode.localPlayer) ? MusicPatchNode.localPlayer.username : null;
    }
    
    static final void aex(final String s) {
        if (UserComparator5.friendsChat == null) {
            return;
        }
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2550, Client.packetWriter.isaacCipher, (short)(-336));
        packetBufferNode.packetBuffer.bf(DynamicObject.stringCp1252NullTerminatedByteSize(s, (byte)22), (byte)96);
        packetBufferNode.packetBuffer.ce(s, -1898881265);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static void afm(final Buffer buffer, final int n) {
        final byte[] array = buffer.array;
        if (null == Client.randomDatData) {
            Client.randomDatData = new byte[24];
        }
        class384.writeRandomDat(array, n, Client.randomDatData, 0, 24);
        ObjTypeCustomisation.method972(buffer, n, -1489886361);
    }
    
    static final void aev(final int n, final int n2) {
        final ClanChannel clanChannel = (n >= 0) ? Client.currentClanChannels[n] : MouseHandler.guestClanChannel;
        if (clanChannel == null || n2 < 0 || n2 >= clanChannel.method898(-1276287355)) {
            return;
        }
        final ClanChannelMember clanChannelMember = clanChannel.members.get(n2);
        if (clanChannelMember.rank != -1) {
            return;
        }
        final String name = clanChannelMember.username.getName(-710264960);
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2551, Client.packetWriter.isaacCipher, (short)(-28982));
        packetBufferNode.packetBuffer.bf(3 + DynamicObject.stringCp1252NullTerminatedByteSize(name, (byte)(-20)), (byte)27);
        packetBufferNode.packetBuffer.bf(n, (byte)47);
        packetBufferNode.packetBuffer.cq(n2, (byte)(-62));
        packetBufferNode.packetBuffer.ce(name, -2010239138);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static String afn(final Widget widget) {
        if (class195.method1052(KeyHandler.getWidgetFlags(widget, 1095472190), 1415070214) == 0) {
            return null;
        }
        if (widget.text2 != null && widget.text2.trim().length() != 0) {
            return widget.text2;
        }
        return null;
    }
    
    static final void aey(final int n, final int n2, final boolean b) {
        if (Client.currentClanChannels[n] == null) {
            return;
        }
        if (n2 >= 0 && n2 < Client.currentClanChannels[n].method898(-24637707)) {
            final ClanChannelMember clanChannelMember = Client.currentClanChannels[n].members.get(n2);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2543, Client.packetWriter.isaacCipher, (short)(-16049));
            packetBufferNode.packetBuffer.bf(4 + DynamicObject.stringCp1252NullTerminatedByteSize(clanChannelMember.username.getName(-710264960), (byte)78), (byte)110);
            packetBufferNode.packetBuffer.bf(n, (byte)59);
            packetBufferNode.packetBuffer.cq(n2, (byte)(-83));
            packetBufferNode.packetBuffer.bp(b, 614283261);
            packetBufferNode.packetBuffer.ce(clanChannelMember.username.getName(-710264960), -1477880733);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
    }
    
    static void aff(final Buffer buffer) {
        if (Client.randomDatData != null) {
            buffer.writeBytes(Client.randomDatData, 0, Client.randomDatData.length, (byte)101);
            return;
        }
        final byte[] array = new byte[24];
        try {
            BufferedFile.cu(JagexCache.JagexCache_randomDat, 0L);
            BufferedFile.mg(JagexCache.JagexCache_randomDat, array, 539039921);
            int n;
            for (n = 0; n < 24 && array[n] == 0; ++n) {}
            if (n >= 24) {
                throw new IOException();
            }
        }
        catch (Exception ex) {
            for (int i = 0; i < 24; ++i) {
                array[i] = -1;
            }
        }
        final byte[] array2 = array;
        buffer.writeBytes(array2, 0, array2.length, (byte)26);
    }
    
    static final void aew(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        if (spritePixels == null) {
            return;
        }
        final int n5 = Client.camAngleY * 1321389224 & 0xC662C279;
        final int n6 = n4 * n4 + n3 * n3;
        if (n6 > -663656567) {
            return;
        }
        final int n7 = Rasterizer3D.Rasterizer3D_sine[n5];
        final int n8 = Rasterizer3D.Rasterizer3D_cosine[n5];
        final int n9 = n3 * n8 + n4 * n7 >> 16;
        final int n10 = n4 * n8 - n7 * n3 >> 16;
        if (n6 > 2500) {
            spritePixels.method2609(spriteMask.width * 1484188043 / 2 + n9 - spritePixels.width / 2, spriteMask.height * 1677466993 / 2 - n10 - spritePixels.height / 2, n, n2, 1484188043 * spriteMask.width, 939947663 * spriteMask.height, spriteMask.xStarts, spriteMask.xWidths);
        }
        else {
            spritePixels.drawAt(n9 + (n + spriteMask.width * 1484188043 / 2) - spritePixels.width / 2, 1986407454 * spriteMask.height / 2 + n2 - n10 - spritePixels.height / 2);
        }
    }
    
    static void afb(String lowerCase, final boolean b) {
        lowerCase = lowerCase.toLowerCase();
        short[] foundItemIds = new short[16];
        int n = 0;
        for (int i = 0; i < -1485716275 * MouseRecorder.ItemDefinition_fileCount; ++i) {
            final ItemComposition set = HealthBarUpdate.set(i, (byte)49);
            if (!b || set.isTradable) {
                if (set.noteTemplate * -1375068187 == -1) {
                    if (set.name.toLowerCase().indexOf(lowerCase) != -1) {
                        if (n >= 250) {
                            class264.foundItemIdCount = 316033701;
                            class399.foundItemIds = null;
                            return;
                        }
                        if (n >= foundItemIds.length) {
                            final short[] array = new short[foundItemIds.length * 2];
                            for (int j = 0; j < n; ++j) {
                                array[j] = foundItemIds[j];
                            }
                            foundItemIds = array;
                        }
                        foundItemIds[n++] = (short)i;
                    }
                }
            }
        }
        class399.foundItemIds = foundItemIds;
        FontName.foundItemIndex = 0;
        class264.foundItemIdCount = -316033701 * n;
        final String[] array2 = new String[class264.foundItemIdCount * 1764192979];
        for (int k = 0; k < class264.foundItemIdCount * 1764192979; ++k) {
            array2[k] = HealthBarUpdate.set(foundItemIds[k], (byte)111).name;
        }
        GrandExchangeOffer.method1930(array2, class399.foundItemIds, 410940672);
    }
    
    static void afe(final int n) {
        Client.oculusOrbState = 2044125104 * n;
    }
    
    static final void aes(final Widget widget, final int n, final int n2, final int n3) {
        final SpriteMask vn = Widget.vn(widget, false, (byte)0);
        if (vn == null) {
            return;
        }
        if (Client.minimapState * 1383336963 < 3) {
            ChatChannel.compass.drawRotatedMaskedCenteredAround(n, n2, vn.width * 1484188043, 939947663 * vn.height, 25, 25, 704283033 * Client.camAngleY, 256, vn.xStarts, vn.xWidths);
        }
        else {
            Rasterizer2D.Rasterizer2D_fillMaskedRectangle(n, n2, 0, vn.xStarts, vn.xWidths);
        }
    }
    
    static final void aer(final int n, final int n2, final boolean b) {
        if (Client.currentClanChannels[n] == null) {
            return;
        }
        if (n2 >= 0 && n2 < Client.currentClanChannels[n].method898(-1869747214)) {
            final ClanChannelMember clanChannelMember = Client.currentClanChannels[n].members.get(n2);
            final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2543, Client.packetWriter.isaacCipher, (short)(-1349));
            packetBufferNode.packetBuffer.bf(4 + DynamicObject.stringCp1252NullTerminatedByteSize(clanChannelMember.username.getName(-710264960), (byte)(-75)), (byte)31);
            packetBufferNode.packetBuffer.bf(n, (byte)109);
            packetBufferNode.packetBuffer.cq(n2, (byte)(-17));
            packetBufferNode.packetBuffer.bp(b, 614283261);
            packetBufferNode.packetBuffer.ce(clanChannelMember.username.getName(-710264960), -1681736805);
            Client.packetWriter.addNode(packetBufferNode, 414135591);
        }
    }
    
    static boolean afi(final Widget widget) {
        return widget.spriteTiling;
    }
    
    static void afa() {
        if (1223066109 * Client.oculusOrbState == 1) {
            Client.oculusOrbOnLocalPlayer = true;
        }
    }
    
    static String afj(final Widget widget) {
        if (class195.method1052(KeyHandler.getWidgetFlags(widget, 1582681221), 1559017791) == 0) {
            return null;
        }
        if (widget.text2 != null && widget.text2.trim().length() != 0) {
            return widget.text2;
        }
        return null;
    }
    
    @Override
    public Username afh() {
        return (null != MusicPatchNode.localPlayer) ? MusicPatchNode.localPlayer.username : null;
    }
    
    static void afl(final Buffer buffer, final int n) {
        final byte[] array = buffer.array;
        if (null == Client.randomDatData) {
            Client.randomDatData = new byte[24];
        }
        class384.writeRandomDat(array, n, Client.randomDatData, 0, 24);
        ObjTypeCustomisation.method972(buffer, n, -865021057);
    }
    
    static String afd(final Widget widget) {
        if (class195.method1052(KeyHandler.getWidgetFlags(widget, 593522474), 1601715013) == 0) {
            return null;
        }
        if (widget.text2 != null && widget.text2.trim().length() != 0) {
            return widget.text2;
        }
        return null;
    }
    
    static String afs(String str, final boolean b) {
        final String str2 = b ? "https://" : "http://";
        if (Client.gameBuild * -1274626977 == 1) {
            str += "-wtrc";
        }
        else if (Client.gameBuild * -1274626977 == 2) {
            str += "-wtqa";
        }
        else if (3 == Client.gameBuild * -1274626977) {
            str += "-wtwip";
        }
        else if (5 == -1274626977 * Client.gameBuild) {
            str += "-wti";
        }
        else if (-1274626977 * Client.gameBuild == 4) {
            str = "local";
        }
        String string = "";
        if (class108.param9 != null) {
            string = "/p=" + class108.param9;
        }
        return str2 + str + "." + "runescape.com" + "/l=" + ClanSettings.clientLanguage + "/a=" + TriBool.field3738 * 1640118701 + string + "/";
    }
    
    static void aft() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2467, Client.packetWriter.isaacCipher, (short)(-25681)), 414135591);
        Client.oculusOrbState = 0;
    }
    
    static void afv(String lowerCase, final boolean b) {
        lowerCase = lowerCase.toLowerCase();
        short[] foundItemIds = new short[16];
        int n = 0;
        for (int i = 0; i < -1485716275 * MouseRecorder.ItemDefinition_fileCount; ++i) {
            final ItemComposition set = HealthBarUpdate.set(i, (byte)89);
            if (!b || set.isTradable) {
                if (set.noteTemplate * 2040378249 == -1) {
                    if (set.name.toLowerCase().indexOf(lowerCase) != -1) {
                        if (n >= 1317789843) {
                            class264.foundItemIdCount = -1498983932;
                            class399.foundItemIds = null;
                            return;
                        }
                        if (n >= foundItemIds.length) {
                            final short[] array = new short[foundItemIds.length * 2];
                            for (int j = 0; j < n; ++j) {
                                array[j] = foundItemIds[j];
                            }
                            foundItemIds = array;
                        }
                        foundItemIds[n++] = (short)i;
                    }
                }
            }
        }
        class399.foundItemIds = foundItemIds;
        FontName.foundItemIndex = 0;
        class264.foundItemIdCount = 1240116249 * n;
        final String[] array2 = new String[class264.foundItemIdCount * 1764192979];
        for (int k = 0; k < class264.foundItemIdCount * 1764192979; ++k) {
            array2[k] = HealthBarUpdate.set(foundItemIds[k], (byte)107).name;
        }
        GrandExchangeOffer.method1930(array2, class399.foundItemIds, -650005050);
    }
    
    static final void aet() {
        Client.field559 = Client.cycleCntr * -83635572;
        ItemContainer.field844 = true;
    }
    
    static void afk(final int n) {
        Client.oculusOrbState = 1934626983 * n;
    }
    
    static final void aez() {
        Client.field559 = Client.cycleCntr * 1321175015;
        ItemContainer.field844 = true;
    }
    
    static void afc(final Buffer buffer, final int n) {
        final byte[] array = buffer.array;
        if (null == Client.randomDatData) {
            Client.randomDatData = new byte[24];
        }
        class384.writeRandomDat(array, n, Client.randomDatData, 0, 24);
        ObjTypeCustomisation.method972(buffer, n, -1186029739);
    }
    
    static void afp(String lowerCase, final boolean b) {
        lowerCase = lowerCase.toLowerCase();
        short[] foundItemIds = new short[16];
        int n = 0;
        for (int i = 0; i < -1485716275 * MouseRecorder.ItemDefinition_fileCount; ++i) {
            final ItemComposition set = HealthBarUpdate.set(i, (byte)107);
            if (!b || set.isTradable) {
                if (set.noteTemplate * -1375068187 == -1) {
                    if (set.name.toLowerCase().indexOf(lowerCase) != -1) {
                        if (n >= 250) {
                            class264.foundItemIdCount = 316033701;
                            class399.foundItemIds = null;
                            return;
                        }
                        if (n >= foundItemIds.length) {
                            final short[] array = new short[foundItemIds.length * 2];
                            for (int j = 0; j < n; ++j) {
                                array[j] = foundItemIds[j];
                            }
                            foundItemIds = array;
                        }
                        foundItemIds[n++] = (short)i;
                    }
                }
            }
        }
        class399.foundItemIds = foundItemIds;
        FontName.foundItemIndex = 0;
        class264.foundItemIdCount = -316033701 * n;
        final String[] array2 = new String[class264.foundItemIdCount * 1764192979];
        for (int k = 0; k < class264.foundItemIdCount * 1764192979; ++k) {
            array2[k] = HealthBarUpdate.set(foundItemIds[k], (byte)55).name;
        }
        GrandExchangeOffer.method1930(array2, class399.foundItemIds, 679899812);
    }
    
    static String afg(String str, final boolean b) {
        final String str2 = b ? "https://" : "http://";
        if (Client.gameBuild * -1274626977 == 1) {
            str += "-wtrc";
        }
        else if (Client.gameBuild * -1274626977 == 2) {
            str += "-wtqa";
        }
        else if (3 == Client.gameBuild * 1709161923) {
            str += "-wtwip";
        }
        else if (5 == -446933438 * Client.gameBuild) {
            str += "-wti";
        }
        else if (-1274626977 * Client.gameBuild == 4) {
            str = "local";
        }
        String string = "";
        if (class108.param9 != null) {
            string = "/p=" + class108.param9;
        }
        return str2 + str + "." + "runescape.com" + "/l=" + ClanSettings.clientLanguage + "/a=" + TriBool.field3738 * -1129426790 + string + "/";
    }
    
    static void afq() {
        Client.packetWriter.addNode(class330.getPacketBufferNode(ClientPacket.field2467, Client.packetWriter.isaacCipher, (short)(-1338)), 414135591);
        Client.oculusOrbState = 0;
    }
    
    static final void aeq(final int n, final int n2, final int n3, final int n4, final SpritePixels spritePixels, final SpriteMask spriteMask) {
        final int n5 = n4 * n4 + n3 * n3;
        if (n5 > 4225 && n5 < -2086414474) {
            final int n6 = Client.camAngleY * -1886994392 & 0xF50422E3;
            final int n7 = Rasterizer3D.Rasterizer3D_sine[n6];
            final int n8 = Rasterizer3D.Rasterizer3D_cosine[n6];
            final double atan2 = Math.atan2(n3 * n8 + n7 * n4 >> 16, n8 * n4 - n7 * n3 >> 16);
            final int n9 = spriteMask.width * 1484188043 / 2 - 25;
            final int n10 = (int)(Math.sin(atan2) * n9);
            final int n11 = (int)(Math.cos(atan2) * n9);
            final int n12 = 20;
            LoginScreenAnimation.redHintArrowSprite.method2621(spriteMask.width * -1300338791 / 2 + n - n12 / 2 + n10, n2 + 1512357660 * spriteMask.height / 2 - n12 / 2 - n11 - 10, n12, n12, 15, 15, atan2, -1834281370);
        }
        else {
            class426.drawSpriteOnMinimap(n, n2, n3, n4, spritePixels, spriteMask, -1609285207);
        }
    }
    
    static final void aeu() {
        final PacketBufferNode packetBufferNode = class330.getPacketBufferNode(ClientPacket.field2508, Client.packetWriter.isaacCipher, (short)(-25553));
        packetBufferNode.packetBuffer.bf(0, (byte)121);
        Client.packetWriter.addNode(packetBufferNode, 414135591);
    }
    
    static void afw() {
        if (986256295 * Client.oculusOrbState == 1) {
            Client.oculusOrbOnLocalPlayer = true;
        }
    }
    
    static boolean agk() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    static class482 agt(final int n) {
        class482 class482 = (class482)Client.Widget_cachedFonts.wr(n);
        if (null == class482) {
            class482 = new class482(PcmPlayer.field211, n);
        }
        return class482;
    }
    
    static String agj(String substring) {
        final PlayerType[] playerType_values = StudioGame.PlayerType_values((byte)(-20));
        for (int i = 0; i < playerType_values.length; ++i) {
            final PlayerType playerType = playerType_values[i];
            if (playerType.modIcon * 2138745227 != -1 && substring.startsWith(ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 1640925202, 537447323))) {
                substring = substring.substring(6 + Integer.toString(playerType.modIcon * 2138745227).length());
                break;
            }
        }
        return substring;
    }
    
    static void agv() {
        if (Client.oculusOrbOnLocalPlayer && MusicPatchNode.localPlayer != null) {
            final int n = MusicPatchNode.localPlayer.cf[0];
            final int n2 = MusicPatchNode.localPlayer.dy[0];
            if (n < 0 || n2 < 0 || n >= 104 || n2 >= 104) {
                return;
            }
            class33.oculusOrbFocalPointX = 1406531708 * MusicPatchNode.localPlayer.br;
            final int n3 = class147.getTileHeight(697259039 * MusicPatchNode.localPlayer.br, -799925766 * MusicPatchNode.localPlayer.ep, -1727408401 * GameEngine.Client_plane, (byte)(-95)) - 322655454 * Client.camFollowHeight;
            if (n3 < class96.field1064 * -380621621) {
                class96.field1064 = -317648707 * n3;
            }
            class144.oculusOrbFocalPointY = -72020645 * MusicPatchNode.localPlayer.ep;
            Client.oculusOrbOnLocalPlayer = false;
        }
    }
    
    static String agy(String substring) {
        final PlayerType[] playerType_values = StudioGame.PlayerType_values((byte)76);
        for (int i = 0; i < playerType_values.length; ++i) {
            final PlayerType playerType = playerType_values[i];
            if (playerType.modIcon * 2138745227 != -1 && substring.startsWith(ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 2135202075))) {
                substring = substring.substring(6 + Integer.toString(playerType.modIcon * 2138745227).length());
                break;
            }
        }
        return substring;
    }
    
    @Override
    public Username afy() {
        return (null != MusicPatchNode.localPlayer) ? MusicPatchNode.localPlayer.username : null;
    }
    
    static void agh(final int n) {
        if (572310033 * Client.loginState == n) {
            return;
        }
        Client.loginState = n * -454398223;
    }
    
    static String afz(final Widget widget) {
        if (class195.method1052(KeyHandler.getWidgetFlags(widget, 522254734), 2009130667) == 0) {
            return null;
        }
        if (widget.text2 == null || widget.text2.trim().length() == 0) {
            return null;
        }
        return widget.text2;
    }
    
    static void agw(final int n) {
        if (572310033 * Client.loginState == n) {
            return;
        }
        Client.loginState = n * -454398223;
    }
    
    static class482 agz(final int n) {
        class482 class482 = (class482)Client.Widget_cachedFonts.wr(n);
        if (null == class482) {
            class482 = new class482(PcmPlayer.field211, n);
        }
        return class482;
    }
    
    static void ahe(final int n) {
        final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n, (byte)72);
        if (!spotAnimationDefinition_get.isCachedModelIdSet(1451403565)) {
            return;
        }
        if (class20.method82(1238147375 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId, 854271946) == 2) {
            Client.field649.add(1238147375 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId);
        }
    }
    
    static void agf(final int n) {
        if (572310033 * Client.loginState == n) {
            return;
        }
        Client.loginState = n * -454398223;
    }
    
    static class482 agi(final int n) {
        class482 class482 = (class482)Client.Widget_cachedModels.wr(n);
        if (class482 == null) {
            class482 = new class482(PcmPlayer.field211, class373.method1992(n, (byte)100), BufferedSink.write(n, (byte)13));
            Client.Widget_cachedModels.put(class482, n);
        }
        return class482;
    }
    
    public static boolean agx() {
        return Client.clickedWidget != null;
    }
    
    static String agm(String substring) {
        final PlayerType[] playerType_values = StudioGame.PlayerType_values((byte)(-33));
        for (int i = 0; i < playerType_values.length; ++i) {
            final PlayerType playerType = playerType_values[i];
            if (playerType.modIcon * 2138745227 != -1 && substring.startsWith(ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 446302682))) {
                substring = substring.substring(6 + Integer.toString(playerType.modIcon * 2138745227).length());
                break;
            }
        }
        return substring;
    }
    
    static class482 agn(final int n) {
        class482 class482 = (class482)Client.Widget_cachedFonts.wr(n);
        if (null == class482) {
            class482 = new class482(PcmPlayer.field211, n);
        }
        return class482;
    }
    
    public static Clipboard ahf() {
        return GameEngine.zr(ScriptFrame.client, -481768005);
    }
    
    @Override
    public Username afx() {
        return (null != MusicPatchNode.localPlayer) ? MusicPatchNode.localPlayer.username : null;
    }
    
    public static Clipboard ahl() {
        return GameEngine.zr(ScriptFrame.client, -481768005);
    }
    
    static void aga() {
        if (Client.oculusOrbOnLocalPlayer && MusicPatchNode.localPlayer != null) {
            final int n = MusicPatchNode.localPlayer.cf[0];
            final int n2 = MusicPatchNode.localPlayer.dy[0];
            if (n < 0 || n2 < 0 || n >= 104 || n2 >= 104) {
                return;
            }
            class33.oculusOrbFocalPointX = 462679329 * MusicPatchNode.localPlayer.br;
            final int n3 = class147.getTileHeight(1144428983 * MusicPatchNode.localPlayer.br, -411750205 * MusicPatchNode.localPlayer.ep, -1727408401 * GameEngine.Client_plane, (byte)(-25)) - 394960243 * Client.camFollowHeight;
            if (n3 < class96.field1064 * 470489225) {
                class96.field1064 = -1138369095 * n3;
            }
            class144.oculusOrbFocalPointY = -72020645 * MusicPatchNode.localPlayer.ep;
            Client.oculusOrbOnLocalPlayer = false;
        }
    }
    
    static boolean agb() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    static boolean agg() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    public static Clipboard ahn() {
        return GameEngine.zr(ScriptFrame.client, -481768005);
    }
    
    static class482 ago(final int n) {
        class482 class482 = (class482)Client.Widget_cachedFonts.wr(n);
        if (null == class482) {
            class482 = new class482(PcmPlayer.field211, n);
        }
        return class482;
    }
    
    static void age() {
        if (Client.oculusOrbOnLocalPlayer && MusicPatchNode.localPlayer != null) {
            final int n = MusicPatchNode.localPlayer.cf[0];
            final int n2 = MusicPatchNode.localPlayer.dy[0];
            if (n < 0 || n2 < 0 || n >= 104 || n2 >= 104) {
                return;
            }
            class33.oculusOrbFocalPointX = 462679329 * MusicPatchNode.localPlayer.br;
            final int n3 = class147.getTileHeight(1144428983 * MusicPatchNode.localPlayer.br, -411750205 * MusicPatchNode.localPlayer.ep, -1727408401 * GameEngine.Client_plane, (byte)(-57)) - 394960243 * Client.camFollowHeight;
            if (n3 < class96.field1064 * 470489225) {
                class96.field1064 = -1138369095 * n3;
            }
            class144.oculusOrbFocalPointY = -72020645 * MusicPatchNode.localPlayer.ep;
            Client.oculusOrbOnLocalPlayer = false;
        }
    }
    
    static boolean agd() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    static void agl(final int n) {
        if (572310033 * Client.loginState == n) {
            return;
        }
        Client.loginState = n * -454398223;
    }
    
    static void agq() {
        if (class132.field1277 != null) {
            Client.field648 = Client.cycle * 1686213738;
            class132.field1277.method1939(210134861);
            for (int i = 0; i < Client.players.length; ++i) {
                if (Client.players[i] != null) {
                    class132.field1277.method1936(-1232093375 * WorldMapData_0.baseX + (1144428983 * Client.players[i].br >> 7), (-1300054235 * Client.players[i].ep >> 7) + 1060682470 * GameObject.baseY, (short)(-7519));
                }
            }
        }
    }
    
    static boolean agr() {
        return class20.clientPreferences.getCurrentSoundEffectsVolume(-964267539) >= Client.param21 * 976454555;
    }
    
    static void ags() {
        if (class132.field1277 != null) {
            Client.field648 = Client.cycle * -465324813;
            class132.field1277.method1939(210134861);
            for (int i = 0; i < Client.players.length; ++i) {
                if (Client.players[i] != null) {
                    class132.field1277.method1936(-1232093375 * WorldMapData_0.baseX + (1144428983 * Client.players[i].br >> 7), (-411750205 * Client.players[i].ep >> 7) + 827352769 * GameObject.baseY, (short)(-5071));
                }
            }
        }
    }
    
    static String agu(String substring) {
        final PlayerType[] playerType_values = StudioGame.PlayerType_values((byte)(-23));
        for (int i = 0; i < playerType_values.length; ++i) {
            final PlayerType playerType = playerType_values[i];
            if (playerType.modIcon * 2138745227 != -1 && substring.startsWith(ArchiveDiskActionHandler.addImageTag(playerType.modIcon * 2138745227, 1706331972))) {
                substring = substring.substring(6 + Integer.toString(playerType.modIcon * 2138745227).length());
                break;
            }
        }
        return substring;
    }
    
    static void ahq(final int n) {
        final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n, (byte)21);
        if (!spotAnimationDefinition_get.isCachedModelIdSet(9272139)) {
            return;
        }
        if (class20.method82(1238147375 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId, 854271946) == 2) {
            Client.field649.add(-173568221 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId);
        }
    }
    
    static void aho(final int n) {
        final SequenceDefinition spotAnimationDefinition_get = ItemContainer.SpotAnimationDefinition_get(n, (byte)48);
        if (!spotAnimationDefinition_get.isCachedModelIdSet(-539135504)) {
            return;
        }
        if (class20.method82(1238147375 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId, 854271946) == 2) {
            Client.field649.add(-1068191292 * spotAnimationDefinition_get.SequenceDefinition_cachedModelId);
        }
    }
    
    public boolean isOnLoginScreen() {
        return Client.gameState * 162401290 == 10;
    }
}
